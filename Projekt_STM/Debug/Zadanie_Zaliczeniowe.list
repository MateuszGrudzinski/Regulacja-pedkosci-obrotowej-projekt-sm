
Zadanie_Zaliczeniowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a178  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800a348  0800a348  0001a348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a83c  0800a83c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a83c  0800a83c  0001a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a844  0800a844  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001e0  0800aa2c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800aa2c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fdf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002858  00000000  00000000  000321ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00034a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d78  00000000  00000000  00036730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013469  00000000  00000000  0005e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2054  00000000  00000000  00071911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  001639b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a330 	.word	0x0800a330

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a330 	.word	0x0800a330

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <wire_init>:
#include "1wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <wire_init+0x10>)
 800103e:	f002 fe99 	bl	8003d74 <HAL_TIM_Base_Start>
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002a4 	.word	0x200002a4

0800104c <delay_us>:

static void delay_us(uint32_t us)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <delay_us+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 800105c:	bf00      	nop
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <delay_us+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8f9      	bhi.n	800105e <delay_us+0x12>
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200002a4 	.word	0x200002a4

0800107c <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2110      	movs	r1, #16
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <wire_reset+0x50>)
 8001088:	f001 fd20 	bl	8002acc <HAL_GPIO_WritePin>
  delay_us(480);
 800108c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001090:	f7ff ffdc 	bl	800104c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <wire_reset+0x50>)
 800109a:	f001 fd17 	bl	8002acc <HAL_GPIO_WritePin>
  delay_us(70);
 800109e:	2046      	movs	r0, #70	; 0x46
 80010a0:	f7ff ffd4 	bl	800104c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010a4:	2110      	movs	r1, #16
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <wire_reset+0x50>)
 80010a8:	f001 fcf8 	bl	8002a9c <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80010b0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80010b4:	f7ff ffca 	bl	800104c <delay_us>

  if (rc == 0)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <wire_reset+0x46>
    return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <wire_reset+0x48>
  else
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020000 	.word	0x40020000

080010d0 <read_bit>:

static int read_bit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <read_bit+0x44>)
 80010dc:	f001 fcf6 	bl	8002acc <HAL_GPIO_WritePin>
  delay_us(6);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f7ff ffb3 	bl	800104c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2110      	movs	r1, #16
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <read_bit+0x44>)
 80010ec:	f001 fcee 	bl	8002acc <HAL_GPIO_WritePin>
  delay_us(9);
 80010f0:	2009      	movs	r0, #9
 80010f2:	f7ff ffab 	bl	800104c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010f6:	2110      	movs	r1, #16
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <read_bit+0x44>)
 80010fa:	f001 fccf 	bl	8002a9c <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001102:	2037      	movs	r0, #55	; 0x37
 8001104:	f7ff ffa2 	bl	800104c <delay_us>
  return rc;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000

08001118 <wire_read>:

uint8_t wire_read(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e00e      	b.n	8001146 <wire_read+0x2e>
    value >>= 1;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800112e:	f7ff ffcf 	bl	80010d0 <read_bit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <wire_read+0x28>
      value |= 0x80;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	dded      	ble.n	8001128 <wire_read+0x10>
  }
  return value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <write_bit>:

static void write_bit(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (value) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2110      	movs	r1, #16
 800116a:	4811      	ldr	r0, [pc, #68]	; (80011b0 <write_bit+0x58>)
 800116c:	f001 fcae 	bl	8002acc <HAL_GPIO_WritePin>
    delay_us(6);
 8001170:	2006      	movs	r0, #6
 8001172:	f7ff ff6b 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2110      	movs	r1, #16
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <write_bit+0x58>)
 800117c:	f001 fca6 	bl	8002acc <HAL_GPIO_WritePin>
    delay_us(64);
 8001180:	2040      	movs	r0, #64	; 0x40
 8001182:	f7ff ff63 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8001186:	e00f      	b.n	80011a8 <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <write_bit+0x58>)
 800118e:	f001 fc9d 	bl	8002acc <HAL_GPIO_WritePin>
    delay_us(60);
 8001192:	203c      	movs	r0, #60	; 0x3c
 8001194:	f7ff ff5a 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <write_bit+0x58>)
 800119e:	f001 fc95 	bl	8002acc <HAL_GPIO_WritePin>
    delay_us(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff ff52 	bl	800104c <delay_us>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40020000 	.word	0x40020000

080011b4 <wire_write>:

void wire_write(uint8_t byte)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e00b      	b.n	80011dc <wire_write+0x28>
    write_bit(byte & 0x01);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffc4 	bl	8001158 <write_bit>
    byte >>= 1;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	ddf0      	ble.n	80011c4 <wire_write+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e016      	b.n	8001230 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	4053      	eors	r3, r2
 8001208:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	085b      	lsrs	r3, r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <byte_crc+0x38>
      crc ^= 0x8c;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001220:	43db      	mvns	r3, r3
 8001222:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b07      	cmp	r3, #7
 8001234:	dde5      	ble.n	8001202 <byte_crc+0x16>
  }
  return crc;
 8001236:	79fb      	ldrb	r3, [r7, #7]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e00d      	b.n	8001274 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffc1 	bl	80011ec <byte_crc>
 800126a:	4603      	mov	r3, r0
 800126c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbed      	blt.n	8001258 <wire_crc+0x14>

    return crc;
 800127c:	7afb      	ldrb	r3, [r7, #11]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  return wire_init();
 800128a:	f7ff fed5 	bl	8001038 <wire_init>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}

08001294 <ds18b20_read_address>:
HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 800129c:	f7ff feee 	bl	800107c <wire_reset>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <ds18b20_read_address+0x16>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e021      	b.n	80012ee <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 80012aa:	2033      	movs	r0, #51	; 0x33
 80012ac:	f7ff ff82 	bl	80011b4 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e009      	b.n	80012ca <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	18d4      	adds	r4, r2, r3
 80012bc:	f7ff ff2c 	bl	8001118 <wire_read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	ddf2      	ble.n	80012b6 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 80012d0:	2107      	movs	r1, #7
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb6 	bl	8001244 <wire_crc>
 80012d8:	4603      	mov	r3, r0
 80012da:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3307      	adds	r3, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	7afa      	ldrb	r2, [r7, #11]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d101      	bne.n	80012ec <ds18b20_read_address+0x58>
    return HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e000      	b.n	80012ee <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}

080012f6 <send_cmd>:
static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8001302:	f7ff febb 	bl	800107c <wire_reset>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <send_cmd+0x1a>
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e01e      	b.n	800134e <send_cmd+0x58>

  if (!rom_code) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8001316:	20cc      	movs	r0, #204	; 0xcc
 8001318:	f7ff ff4c 	bl	80011b4 <wire_write>
 800131c:	e012      	b.n	8001344 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 800131e:	2055      	movs	r0, #85	; 0x55
 8001320:	f7ff ff48 	bl	80011b4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e009      	b.n	800133e <send_cmd+0x48>
      wire_write(rom_code[i]);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff3e 	bl	80011b4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b07      	cmp	r3, #7
 8001342:	ddf2      	ble.n	800132a <send_cmd+0x34>
  }
  wire_write(cmd);
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff34 	bl	80011b4 <wire_write>
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <ds18b20_start_measure>:
HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 800135e:	2144      	movs	r1, #68	; 0x44
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffc8 	bl	80012f6 <send_cmd>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <ds18b20_read_scratchpad>:
static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800137a:	21be      	movs	r1, #190	; 0xbe
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffba 	bl	80012f6 <send_cmd>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e01e      	b.n	80013ca <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e009      	b.n	80013a6 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	18d4      	adds	r4, r2, r3
 8001398:	f7ff febe 	bl	8001118 <wire_read>
 800139c:	4603      	mov	r3, r0
 800139e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	ddf2      	ble.n	8001392 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80013ac:	2108      	movs	r1, #8
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f7ff ff48 	bl	8001244 <wire_crc>
 80013b4:	4603      	mov	r3, r0
 80013b6:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3308      	adds	r3, #8
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	7afa      	ldrb	r2, [r7, #11]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d101      	bne.n	80013c8 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
	...

080013d4 <ds18b20_get_temp>:
float ds18b20_get_temp(const uint8_t* rom_code)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffc4 	bl	8001370 <ds18b20_read_scratchpad>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <ds18b20_get_temp+0x20>
    return 85.0f;
 80013ee:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800141c <ds18b20_get_temp+0x48>
 80013f2:	e00b      	b.n	800140c <ds18b20_get_temp+0x38>
 80013f4:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80013f6:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 80013f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800140c:	eef0 7a47 	vmov.f32	s15, s14
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	42aa0000 	.word	0x42aa0000

08001420 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800142e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800143a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001440:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001442:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f80e 	bl	8001476 <Lcd_init>

	return lcd;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	461d      	mov	r5, r3
 800145e:	f107 0410 	add.w	r4, r7, #16
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bdb0      	pop	{r4, r5, r7, pc}

08001476 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7d9b      	ldrb	r3, [r3, #22]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001486:	2133      	movs	r1, #51	; 0x33
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8a9 	bl	80015e0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800148e:	2132      	movs	r1, #50	; 0x32
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f8a5 	bl	80015e0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001496:	2128      	movs	r1, #40	; 0x28
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8a1 	bl	80015e0 <lcd_write_command>
 800149e:	e003      	b.n	80014a8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80014a0:	2138      	movs	r1, #56	; 0x38
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f89c 	bl	80015e0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80014a8:	2101      	movs	r1, #1
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f898 	bl	80015e0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80014b0:	210c      	movs	r1, #12
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f894 	bl	80015e0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80014b8:	2106      	movs	r1, #6
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f890 	bl	80015e0 <lcd_write_command>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <Lcd_float>:

/**
 * Write a number on the current position
 */
void Lcd_float(Lcd_HandleTypeDef * lcd, float number)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	ed87 0a00 	vstr	s0, [r7]
	char buffer[11];
	char buffer_out[11];
	sprintf(buffer, "%f", number);
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f7ff f857 	bl	8000588 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	f107 0018 	add.w	r0, r7, #24
 80014e2:	4915      	ldr	r1, [pc, #84]	; (8001538 <Lcd_float+0x70>)
 80014e4:	f005 f91e 	bl	8006724 <siprintf>
	int period = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
	for(period = 0; period<sizeof(buffer); period++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	e009      	b.n	8001506 <Lcd_float+0x3e>
	{
		if(buffer[period] == '.')
 80014f2:	f107 0218 	add.w	r2, r7, #24
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b2e      	cmp	r3, #46	; 0x2e
 80014fe:	d006      	beq.n	800150e <Lcd_float+0x46>
	for(period = 0; period<sizeof(buffer); period++)
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3301      	adds	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	2b0a      	cmp	r3, #10
 800150a:	d9f2      	bls.n	80014f2 <Lcd_float+0x2a>
 800150c:	e000      	b.n	8001510 <Lcd_float+0x48>
			break;
 800150e:	bf00      	nop
	}
	strncpy(buffer_out, buffer, period + 4);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3304      	adds	r3, #4
 8001514:	461a      	mov	r2, r3
 8001516:	f107 0118 	add.w	r1, r7, #24
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4618      	mov	r0, r3
 8001520:	f005 f920 	bl	8006764 <strncpy>
	Lcd_string(lcd, buffer_out);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f81e 	bl	800156c <Lcd_string>
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800a348 	.word	0x0800a348

0800153c <Lcd_int>:
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <Lcd_int+0x2c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f005 f8e8 	bl	8006724 <siprintf>
	Lcd_string(lcd, buffer);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f806 	bl	800156c <Lcd_string>
}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	0800a34c 	.word	0x0800a34c

0800156c <Lcd_string>:
/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e00a      	b.n	8001592 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f858 	bl	800163c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	3301      	adds	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	7bfc      	ldrb	r4, [r7, #15]
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7fe fe3b 	bl	8000210 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	429c      	cmp	r4, r3
 800159e:	d3ed      	bcc.n	800157c <Lcd_string+0x10>
	}
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
	...

080015ac <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	4613      	mov	r3, r2
 80015ba:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <Lcd_cursor+0x30>)
 80015c0:	5cd2      	ldrb	r2, [r2, r3]
 80015c2:	78bb      	ldrb	r3, [r7, #2]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3b80      	subs	r3, #128	; 0x80
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f806 	bl	80015e0 <lcd_write_command>
	#endif
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	0800a378 	.word	0x0800a378

080015e0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6898      	ldr	r0, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	f001 fa68 	bl	8002acc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7d9b      	ldrb	r3, [r3, #22]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2204      	movs	r2, #4
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f842 	bl	8001698 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f839 	bl	8001698 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001626:	e005      	b.n	8001634 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2208      	movs	r2, #8
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f832 	bl	8001698 <lcd_write>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6898      	ldr	r0, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	899b      	ldrh	r3, [r3, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	f001 fa3a 	bl	8002acc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d9b      	ldrb	r3, [r3, #22]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2204      	movs	r2, #4
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f814 	bl	8001698 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2204      	movs	r2, #4
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f80b 	bl	8001698 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001682:	e005      	b.n	8001690 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2208      	movs	r2, #8
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f804 	bl	8001698 <lcd_write>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	4613      	mov	r3, r2
 80016a6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e019      	b.n	80016e2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	8819      	ldrh	r1, [r3, #0]
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	fa42 f303 	asr.w	r3, r2, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	f001 f9f8 	bl	8002acc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3e1      	bcc.n	80016ae <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6918      	ldr	r0, [r3, #16]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8a9b      	ldrh	r3, [r3, #20]
 80016f2:	2201      	movs	r2, #1
 80016f4:	4619      	mov	r1, r3
 80016f6:	f001 f9e9 	bl	8002acc <HAL_GPIO_WritePin>
	DELAY(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f000 feec 	bl	80024d8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6918      	ldr	r0, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8a9b      	ldrh	r3, [r3, #20]
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	f001 f9de 	bl	8002acc <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	4baf      	ldr	r3, [pc, #700]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4aae      	ldr	r2, [pc, #696]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4bac      	ldr	r3, [pc, #688]	; (80019ec <MX_GPIO_Init+0x2d4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001746:	4ba9      	ldr	r3, [pc, #676]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4aa8      	ldr	r2, [pc, #672]	; (80019ec <MX_GPIO_Init+0x2d4>)
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4ba6      	ldr	r3, [pc, #664]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	4ba3      	ldr	r3, [pc, #652]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4aa2      	ldr	r2, [pc, #648]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4ba0      	ldr	r3, [pc, #640]	; (80019ec <MX_GPIO_Init+0x2d4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b9d      	ldr	r3, [pc, #628]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a9c      	ldr	r2, [pc, #624]	; (80019ec <MX_GPIO_Init+0x2d4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b9a      	ldr	r3, [pc, #616]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b97      	ldr	r3, [pc, #604]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a96      	ldr	r2, [pc, #600]	; (80019ec <MX_GPIO_Init+0x2d4>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <MX_GPIO_Init+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b91      	ldr	r3, [pc, #580]	; (80019ec <MX_GPIO_Init+0x2d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a90      	ldr	r2, [pc, #576]	; (80019ec <MX_GPIO_Init+0x2d4>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b8e      	ldr	r3, [pc, #568]	; (80019ec <MX_GPIO_Init+0x2d4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017be:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <MX_GPIO_Init+0x2d4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a8a      	ldr	r2, [pc, #552]	; (80019ec <MX_GPIO_Init+0x2d4>)
 80017c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <MX_GPIO_Init+0x2d4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|RS_Pin|EN_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80017dc:	4884      	ldr	r0, [pc, #528]	; (80019f0 <MX_GPIO_Init+0x2d8>)
 80017de:	f001 f975 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D5_Pin|D6_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2109      	movs	r1, #9
 80017e6:	4883      	ldr	r0, [pc, #524]	; (80019f4 <MX_GPIO_Init+0x2dc>)
 80017e8:	f001 f970 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2108      	movs	r1, #8
 80017f0:	4881      	ldr	r0, [pc, #516]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 80017f2:	f001 f96b 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2110      	movs	r1, #16
 80017fa:	487f      	ldr	r0, [pc, #508]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 80017fc:	f001 f966 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f244 0181 	movw	r1, #16513	; 0x4081
 8001806:	487d      	ldr	r0, [pc, #500]	; (80019fc <MX_GPIO_Init+0x2e4>)
 8001808:	f001 f960 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	487b      	ldr	r0, [pc, #492]	; (8001a00 <MX_GPIO_Init+0x2e8>)
 8001812:	f001 f95b 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800181c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4871      	ldr	r0, [pc, #452]	; (80019f4 <MX_GPIO_Init+0x2dc>)
 800182e:	f000 ff89 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin|EN_Pin;
 8001832:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4869      	ldr	r0, [pc, #420]	; (80019f0 <MX_GPIO_Init+0x2d8>)
 800184c:	f000 ff7a 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin;
 8001850:	2309      	movs	r3, #9
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <MX_GPIO_Init+0x2dc>)
 8001868:	f000 ff6c 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800186c:	2332      	movs	r3, #50	; 0x32
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800187c:	230b      	movs	r3, #11
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	485b      	ldr	r0, [pc, #364]	; (80019f4 <MX_GPIO_Init+0x2dc>)
 8001888:	f000 ff5c 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800188c:	2386      	movs	r3, #134	; 0x86
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800189c:	230b      	movs	r3, #11
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4854      	ldr	r0, [pc, #336]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 80018a8:	f000 ff4c 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D4_Pin;
 80018ac:	2308      	movs	r3, #8
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	484d      	ldr	r0, [pc, #308]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 80018c4:	f000 ff3e 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 80018c8:	2310      	movs	r3, #16
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018cc:	2311      	movs	r3, #17
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4846      	ldr	r0, [pc, #280]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 80018e0:	f000 ff30 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	483f      	ldr	r0, [pc, #252]	; (80019fc <MX_GPIO_Init+0x2e4>)
 80018fe:	f000 ff21 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TACH_Pin;
 8001902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001908:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TACH_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	4835      	ldr	r0, [pc, #212]	; (80019f0 <MX_GPIO_Init+0x2d8>)
 800191a:	f000 ff13 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800191e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001930:	230b      	movs	r3, #11
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4830      	ldr	r0, [pc, #192]	; (80019fc <MX_GPIO_Init+0x2e4>)
 800193c:	f000 ff02 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001940:	2340      	movs	r3, #64	; 0x40
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	482a      	ldr	r0, [pc, #168]	; (8001a00 <MX_GPIO_Init+0x2e8>)
 8001958:	f000 fef4 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4824      	ldr	r0, [pc, #144]	; (8001a00 <MX_GPIO_Init+0x2e8>)
 8001970:	f000 fee8 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001974:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001986:	230a      	movs	r3, #10
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4819      	ldr	r0, [pc, #100]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 8001992:	f000 fed7 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4813      	ldr	r0, [pc, #76]	; (80019f8 <MX_GPIO_Init+0x2e0>)
 80019ac:	f000 feca 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c2:	230b      	movs	r3, #11
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <MX_GPIO_Init+0x2e8>)
 80019ce:	f000 feb9 	bl	8002744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2028      	movs	r0, #40	; 0x28
 80019d8:	f000 fe7d 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019dc:	2028      	movs	r0, #40	; 0x28
 80019de:	f000 fe96 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 80019e2:	bf00      	nop
 80019e4:	3730      	adds	r7, #48	; 0x30
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40021400 	.word	0x40021400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40021800 	.word	0x40021800

08001a04 <HAL_GPIO_EXTI_Callback>:
int tach_cnt = 0;
int rpm = 0;
float temp = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == TACH_Pin)
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a14:	d104      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x1c>
	tach_cnt++;
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x28>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x28>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200001fc 	.word	0x200001fc

08001a30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d10b      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	  rpm = 60*tach_cnt;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a50:	601a      	str	r2, [r3, #0]
	  tach_cnt = 0;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
  }
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20000258 	.word	0x20000258
 8001a68:	200001fc 	.word	0x200001fc
 8001a6c:	20000200 	.word	0x20000200

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b093      	sub	sp, #76	; 0x4c
 8001a74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a76:	f000 fcd2 	bl	800241e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a7a:	f000 f89d 	bl	8001bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7e:	f7ff fe4b 	bl	8001718 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a82:	f000 fc13 	bl	80022ac <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001a86:	f000 fb2f 	bl	80020e8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001a8a:	f000 fa49 	bl	8001f20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a8e:	f000 fadb 	bl	8002048 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 8001a92:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <main+0x124>)
 8001a94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001a9e:	4a3e      	ldr	r2, [pc, #248]	; (8001b98 <main+0x128>)
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa8:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001aac:	f107 0008 	add.w	r0, r7, #8
 8001ab0:	f107 0220 	add.w	r2, r7, #32
 8001ab4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9303      	str	r3, [sp, #12]
 8001abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <main+0x12c>)
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <main+0x12c>)
 8001acc:	f7ff fca8 	bl	8001420 <Lcd_create>


  if (ds18b20_init() != HAL_OK) {
 8001ad0:	f7ff fbd9 	bl	8001286 <ds18b20_init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <main+0x6e>
    Error_Handler();
 8001ada:	f000 f8d5 	bl	8001c88 <Error_Handler>
  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fbd7 	bl	8001294 <ds18b20_read_address>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <main+0x80>
    Error_Handler();
 8001aec:	f000 f8cc 	bl	8001c88 <Error_Handler>
  }

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001af0:	2100      	movs	r1, #0
 8001af2:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <main+0x130>)
 8001af4:	f002 fa88 	bl	8004008 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001af8:	482a      	ldr	r0, [pc, #168]	; (8001ba4 <main+0x134>)
 8001afa:	f002 f9ab 	bl	8003e54 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ds18b20_start_measure(NULL);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fc29 	bl	8001356 <ds18b20_start_measure>

	  HAL_Delay(750);
 8001b04:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001b08:	f000 fce6 	bl	80024d8 <HAL_Delay>

	  temp = ds18b20_get_temp(NULL);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fc61 	bl	80013d4 <ds18b20_get_temp>
 8001b12:	eef0 7a40 	vmov.f32	s15, s0
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <main+0x138>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]

	  Lcd_cursor(&lcd, 0,1);
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	2201      	movs	r2, #1
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fd41 	bl	80015ac <Lcd_cursor>
	  Lcd_string(&lcd, "TEMP: ");
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	491f      	ldr	r1, [pc, #124]	; (8001bac <main+0x13c>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fd1b 	bl	800156c <Lcd_string>
	  Lcd_cursor(&lcd, 0,7);
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fd34 	bl	80015ac <Lcd_cursor>
	  Lcd_float(&lcd, temp);
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <main+0x138>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fcb8 	bl	80014c8 <Lcd_float>

	  Lcd_cursor(&lcd, 1,1);
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd23 	bl	80015ac <Lcd_cursor>
	  Lcd_string(&lcd, "RPM: ");
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	4911      	ldr	r1, [pc, #68]	; (8001bb0 <main+0x140>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fcfd 	bl	800156c <Lcd_string>
	  Lcd_cursor(&lcd, 1,7);
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2207      	movs	r2, #7
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fd16 	bl	80015ac <Lcd_cursor>
	  Lcd_int(&lcd, rpm);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <main+0x144>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fcd6 	bl	800153c <Lcd_int>
	  ds18b20_start_measure(NULL);
 8001b90:	e7b5      	b.n	8001afe <main+0x8e>
 8001b92:	bf00      	nop
 8001b94:	0800a360 	.word	0x0800a360
 8001b98:	0800a370 	.word	0x0800a370
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	2000020c 	.word	0x2000020c
 8001ba4:	20000258 	.word	0x20000258
 8001ba8:	20000204 	.word	0x20000204
 8001bac:	0800a350 	.word	0x0800a350
 8001bb0:	0800a358 	.word	0x0800a358
 8001bb4:	20000200 	.word	0x20000200

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b094      	sub	sp, #80	; 0x50
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0320 	add.w	r3, r7, #32
 8001bc2:	2230      	movs	r2, #48	; 0x30
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 ff24 	bl	8005a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bdc:	f000 ffa8 	bl	8002b30 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <SystemClock_Config+0xc8>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <SystemClock_Config+0xc8>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <SystemClock_Config+0xc8>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <SystemClock_Config+0xcc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c00:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <SystemClock_Config+0xcc>)
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <SystemClock_Config+0xcc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c14:	2301      	movs	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c2c:	2348      	movs	r3, #72	; 0x48
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c34:	2303      	movs	r3, #3
 8001c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 ff87 	bl	8002b50 <HAL_RCC_OscConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c48:	f000 f81e 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c50:	2302      	movs	r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2102      	movs	r1, #2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 fa15 	bl	8003098 <HAL_RCC_ClockConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c74:	f000 f808 	bl	8001c88 <Error_Handler>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3750      	adds	r7, #80	; 0x50
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 fbb6 	bl	8002498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM3_IRQHandler+0x10>)
 8001d36:	f002 fa61 	bl	80041fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000020c 	.word	0x2000020c

08001d44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM4_IRQHandler+0x10>)
 8001d4a:	f002 fa57 	bl	80041fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000258 	.word	0x20000258

08001d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TACH_Pin);
 8001d5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d60:	f000 fece 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d68:	f000 feca 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
	return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_kill>:

int _kill(int pid, int sig)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d8a:	f003 fe19 	bl	80059c0 <__errno>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2216      	movs	r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
	return -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_exit>:

void _exit (int status)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffe7 	bl	8001d80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001db2:	e7fe      	b.n	8001db2 <_exit+0x12>

08001db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e00a      	b.n	8001ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dc6:	f3af 8000 	nop.w
 8001dca:	4601      	mov	r1, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	b2ca      	uxtb	r2, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbf0      	blt.n	8001dc6 <_read+0x12>
	}

return len;
 8001de4:	687b      	ldr	r3, [r7, #4]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e009      	b.n	8001e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf1      	blt.n	8001e00 <_write+0x12>
	}
	return len;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_close>:

int _close(int file)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_isatty>:

int _isatty(int file)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	return 1;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <_sbrk+0x5c>)
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <_sbrk+0x60>)
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <_sbrk+0x64>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <_sbrk+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec0:	f003 fd7e 	bl	80059c0 <__errno>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e009      	b.n	8001ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <_sbrk+0x64>)
 8001ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20050000 	.word	0x20050000
 8001ef0:	00000400 	.word	0x00000400
 8001ef4:	20000208 	.word	0x20000208
 8001ef8:	20000390 	.word	0x20000390

08001efc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SystemInit+0x20>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <SystemInit+0x20>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f54:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <MX_TIM3_Init+0x124>)
 8001f56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001f58:	4b39      	ldr	r3, [pc, #228]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f5a:	2247      	movs	r2, #71	; 0x47
 8001f5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f66:	2227      	movs	r2, #39	; 0x27
 8001f68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b33      	ldr	r3, [pc, #204]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f76:	4832      	ldr	r0, [pc, #200]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f78:	f001 fea4 	bl	8003cc4 <HAL_TIM_Base_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f82:	f7ff fe81 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f90:	4619      	mov	r1, r3
 8001f92:	482b      	ldr	r0, [pc, #172]	; (8002040 <MX_TIM3_Init+0x120>)
 8001f94:	f002 fb66 	bl	8004664 <HAL_TIM_ConfigClockSource>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f9e:	f7ff fe73 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa2:	4827      	ldr	r0, [pc, #156]	; (8002040 <MX_TIM3_Init+0x120>)
 8001fa4:	f001 ffce 	bl	8003f44 <HAL_TIM_PWM_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fae:	f7ff fe6b 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481f      	ldr	r0, [pc, #124]	; (8002040 <MX_TIM3_Init+0x120>)
 8001fc2:	f002 ffff 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fcc:	f7ff fe5c 	bl	8001c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd0:	2360      	movs	r3, #96	; 0x60
 8001fd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001fd4:	230a      	movs	r3, #10
 8001fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4816      	ldr	r0, [pc, #88]	; (8002040 <MX_TIM3_Init+0x120>)
 8001fe8:	f002 fa28 	bl	800443c <HAL_TIM_PWM_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ff2:	f7ff fe49 	bl	8001c88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_TIM3_Init+0x120>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_TIM3_Init+0x120>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 25;
 8002006:	2319      	movs	r3, #25
 8002008:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800200a:	463b      	mov	r3, r7
 800200c:	2208      	movs	r2, #8
 800200e:	4619      	mov	r1, r3
 8002010:	480b      	ldr	r0, [pc, #44]	; (8002040 <MX_TIM3_Init+0x120>)
 8002012:	f002 fa13 	bl	800443c <HAL_TIM_PWM_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 800201c:	f7ff fe34 	bl	8001c88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_TIM3_Init+0x120>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_TIM3_Init+0x120>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0208 	bic.w	r2, r2, #8
 800202e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <MX_TIM3_Init+0x120>)
 8002032:	f000 f8e5 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8002036:	bf00      	nop
 8002038:	3738      	adds	r7, #56	; 0x38
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000020c 	.word	0x2000020c
 8002044:	40000400 	.word	0x40000400

08002048 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <MX_TIM4_Init+0x98>)
 8002068:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <MX_TIM4_Init+0x9c>)
 800206a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MX_TIM4_Init+0x98>)
 800206e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002072:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <MX_TIM4_Init+0x98>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <MX_TIM4_Init+0x98>)
 800207c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002080:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <MX_TIM4_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MX_TIM4_Init+0x98>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800208e:	4814      	ldr	r0, [pc, #80]	; (80020e0 <MX_TIM4_Init+0x98>)
 8002090:	f001 fe18 	bl	8003cc4 <HAL_TIM_Base_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800209a:	f7ff fdf5 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4619      	mov	r1, r3
 80020aa:	480d      	ldr	r0, [pc, #52]	; (80020e0 <MX_TIM4_Init+0x98>)
 80020ac:	f002 fada 	bl	8004664 <HAL_TIM_ConfigClockSource>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80020b6:	f7ff fde7 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <MX_TIM4_Init+0x98>)
 80020c8:	f002 ff7c 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80020d2:	f7ff fdd9 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000258 	.word	0x20000258
 80020e4:	40000800 	.word	0x40000800

080020e8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_TIM6_Init+0x64>)
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <MX_TIM6_Init+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <MX_TIM6_Init+0x64>)
 8002100:	2247      	movs	r2, #71	; 0x47
 8002102:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_TIM6_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_TIM6_Init+0x64>)
 800210c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002110:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_TIM6_Init+0x64>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_TIM6_Init+0x64>)
 800211a:	f001 fdd3 	bl	8003cc4 <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002124:	f7ff fdb0 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_TIM6_Init+0x64>)
 8002136:	f002 ff45 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002140:	f7ff fda2 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200002a4 	.word	0x200002a4
 8002150:	40001000 	.word	0x40001000

08002154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_TIM_Base_MspInit+0x9c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d114      	bne.n	8002190 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	201d      	movs	r0, #29
 8002184:	f000 faa7 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002188:	201d      	movs	r0, #29
 800218a:	f000 fac0 	bl	800270e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800218e:	e02a      	b.n	80021e6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_TIM_Base_MspInit+0xa4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d114      	bne.n	80021c4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	201e      	movs	r0, #30
 80021b8:	f000 fa8d 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021bc:	201e      	movs	r0, #30
 80021be:	f000 faa6 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 80021c2:	e010      	b.n	80021e6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_TIM_Base_MspInit+0xa8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10b      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_TIM_Base_MspInit+0xa0>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40001000 	.word	0x40001000

08002200 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_TIM_MspPostInit+0x9c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d138      	bne.n	8002294 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_TIM_MspPostInit+0xa0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_TIM_MspPostInit+0xa0>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_TIM_MspPostInit+0xa0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_TIM_MspPostInit+0xa0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_TIM_MspPostInit+0xa0>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_TIM_MspPostInit+0xa0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002252:	2340      	movs	r3, #64	; 0x40
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002262:	2302      	movs	r3, #2
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <HAL_TIM_MspPostInit+0xa4>)
 800226e:	f000 fa69 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002284:	2302      	movs	r3, #2
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <HAL_TIM_MspPostInit+0xa8>)
 8002290:	f000 fa58 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40000400 	.word	0x40000400
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020800 	.word	0x40020800

080022ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <MX_USART3_UART_Init+0x5c>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022f0:	f002 ff14 	bl	800511c <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022fa:	f7ff fcc5 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200002f0 	.word	0x200002f0
 8002308:	40004800 	.word	0x40004800

0800230c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b0aa      	sub	sp, #168	; 0xa8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	2284      	movs	r2, #132	; 0x84
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fb71 	bl	8005a14 <memset>
  if(uartHandle->Instance==USART3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_UART_MspInit+0xb4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d13c      	bne.n	80023b6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800233c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002340:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002342:	2300      	movs	r3, #0
 8002344:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4618      	mov	r0, r3
 800234c:	f001 f8ca 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002356:	f7ff fc97 	bl	8001c88 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_UART_MspInit+0xb8>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_UART_MspInit+0xb8>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_UART_MspInit+0xb8>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_UART_MspInit+0xb8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <HAL_UART_MspInit+0xb8>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_UART_MspInit+0xb8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800238a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800238e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a4:	2307      	movs	r3, #7
 80023a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_UART_MspInit+0xbc>)
 80023b2:	f000 f9c7 	bl	8002744 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023b6:	bf00      	nop
 80023b8:	37a8      	adds	r7, #168	; 0xa8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40004800 	.word	0x40004800
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020c00 	.word	0x40020c00

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f6:	f7ff fd81 	bl	8001efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f003 fae7 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff fb37 	bl	8001a70 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002410:	0800a84c 	.word	0x0800a84c
  ldr r2, =_sbss
 8002414:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002418:	2000038c 	.word	0x2000038c

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>

0800241e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002422:	2003      	movs	r0, #3
 8002424:	f000 f94c 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 f805 	bl	8002438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242e:	f7ff fc31 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x54>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x58>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f967 	bl	800272a <HAL_SYSTICK_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e00e      	b.n	8002484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d80a      	bhi.n	8002482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246c:	2200      	movs	r2, #0
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f000 f92f 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <HAL_InitTick+0x5c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000000 	.word	0x20000000
 8002490:	20000008 	.word	0x20000008
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x20>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x24>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_IncTick+0x24>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000378 	.word	0x20000378

080024c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_GetTick+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000378 	.word	0x20000378

080024d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff ffee 	bl	80024c0 <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d005      	beq.n	80024fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_Delay+0x44>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024fe:	bf00      	nop
 8002500:	f7ff ffde 	bl	80024c0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d8f7      	bhi.n	8002500 <HAL_Delay+0x28>
  {
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <__NVIC_SetPriorityGrouping+0x40>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	4313      	orrs	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x40>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00
 8002564:	05fa0000 	.word	0x05fa0000

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e175      	b.n	8002a50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8164 	bne.w	8002a4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x56>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80be 	beq.w	8002a4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028e6:	4a61      	ldr	r2, [pc, #388]	; (8002a6c <HAL_GPIO_Init+0x328>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_GPIO_Init+0x32c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d037      	beq.n	8002982 <HAL_GPIO_Init+0x23e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <HAL_GPIO_Init+0x330>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_GPIO_Init+0x23a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a56      	ldr	r2, [pc, #344]	; (8002a78 <HAL_GPIO_Init+0x334>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02b      	beq.n	800297a <HAL_GPIO_Init+0x236>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <HAL_GPIO_Init+0x338>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d025      	beq.n	8002976 <HAL_GPIO_Init+0x232>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a54      	ldr	r2, [pc, #336]	; (8002a80 <HAL_GPIO_Init+0x33c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_GPIO_Init+0x22e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a53      	ldr	r2, [pc, #332]	; (8002a84 <HAL_GPIO_Init+0x340>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x22a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_GPIO_Init+0x344>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x226>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_GPIO_Init+0x348>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x222>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_GPIO_Init+0x34c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x21e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4f      	ldr	r2, [pc, #316]	; (8002a94 <HAL_GPIO_Init+0x350>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x21a>
 800295a:	2309      	movs	r3, #9
 800295c:	e012      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800295e:	230a      	movs	r3, #10
 8002960:	e010      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002962:	2308      	movs	r3, #8
 8002964:	e00e      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002966:	2307      	movs	r3, #7
 8002968:	e00c      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800296a:	2306      	movs	r3, #6
 800296c:	e00a      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800296e:	2305      	movs	r3, #5
 8002970:	e008      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002972:	2304      	movs	r3, #4
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002976:	2303      	movs	r3, #3
 8002978:	e004      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800297a:	2302      	movs	r3, #2
 800297c:	e002      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002982:	2300      	movs	r3, #0
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f002 0203 	and.w	r2, r2, #3
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	4093      	lsls	r3, r2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002994:	4935      	ldr	r1, [pc, #212]	; (8002a6c <HAL_GPIO_Init+0x328>)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_GPIO_Init+0x354>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c6:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <HAL_GPIO_Init+0x354>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_GPIO_Init+0x354>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f0:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_GPIO_Init+0x354>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_GPIO_Init+0x354>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_GPIO_Init+0x354>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_GPIO_Init+0x354>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_GPIO_Init+0x354>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	f67f ae86 	bls.w	8002764 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40021400 	.word	0x40021400
 8002a88:	40021800 	.word	0x40021800
 8002a8c:	40021c00 	.word	0x40021c00
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40022400 	.word	0x40022400
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e001      	b.n	8002abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe ff70 	bl	8001a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e291      	b.n	800308a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b96      	ldr	r3, [pc, #600]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b80:	4b93      	ldr	r3, [pc, #588]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
 8002b8c:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x130>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e26b      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x7a>
 8002bbc:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x9c>
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7b      	ldr	r2, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a75      	ldr	r2, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b73      	ldr	r3, [pc, #460]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a72      	ldr	r2, [pc, #456]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b6c      	ldr	r3, [pc, #432]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6b      	ldr	r2, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff fc46 	bl	80024c0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff fc42 	bl	80024c0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e21f      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7ff fc32 	bl	80024c0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff fc2e 	bl	80024c0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e20b      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x110>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d069      	beq.n	8002d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1df      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	493d      	ldr	r1, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e040      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a38      	ldr	r2, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fbe4 	bl	80024c0 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fbe0 	bl	80024c0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1bd      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4929      	ldr	r1, [pc, #164]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e018      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7ff fbc0 	bl	80024c0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d44:	f7ff fbbc 	bl	80024c0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e199      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d038      	beq.n	8002de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d019      	beq.n	8002daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7ff fb9d 	bl	80024c0 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7ff fb99 	bl	80024c0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e176      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x23a>
 8002da8:	e01a      	b.n	8002de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7ff fb83 	bl	80024c0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7ff fb7f 	bl	80024c0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d903      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e15c      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
 8002dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b91      	ldr	r3, [pc, #580]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a4 	beq.w	8002f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b8b      	ldr	r3, [pc, #556]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a87      	ldr	r2, [pc, #540]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b85      	ldr	r3, [pc, #532]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e16:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b7f      	ldr	r3, [pc, #508]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7e      	ldr	r2, [pc, #504]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7ff fb47 	bl	80024c0 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7ff fb43 	bl	80024c0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e120      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	4b75      	ldr	r3, [pc, #468]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x31a>
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a6e      	ldr	r2, [pc, #440]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e02d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x33c>
 8002e72:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a69      	ldr	r2, [pc, #420]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a66      	ldr	r2, [pc, #408]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e01c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x35e>
 8002e94:	4b61      	ldr	r3, [pc, #388]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a60      	ldr	r2, [pc, #384]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a5d      	ldr	r2, [pc, #372]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002eae:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5a      	ldr	r2, [pc, #360]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a57      	ldr	r2, [pc, #348]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d015      	beq.n	8002efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7ff faf7 	bl	80024c0 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7ff faf3 	bl	80024c0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0ce      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	4b4b      	ldr	r3, [pc, #300]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ee      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x386>
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7ff fae1 	bl	80024c0 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7ff fadd 	bl	80024c0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0b8      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	4b40      	ldr	r3, [pc, #256]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a3b      	ldr	r2, [pc, #236]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a4 	beq.w	8003088 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d06b      	beq.n	8003024 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d149      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a30      	ldr	r2, [pc, #192]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7ff faae 	bl	80024c0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7ff faaa 	bl	80024c0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e087      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	4313      	orrs	r3, r2
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fb2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7ff fa7e 	bl	80024c0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff fa7a 	bl	80024c0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e057      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x478>
 8002fe6:	e04f      	b.n	8003088 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fa64 	bl	80024c0 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7ff fa60 	bl	80024c0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e03d      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4ac>
 800301a:	e035      	b.n	8003088 <HAL_RCC_OscConfig+0x538>
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x544>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d028      	beq.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d121      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d11a      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800305a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 020f 	bic.w	r2, r3, #15
 80030c6:	4965      	ldr	r1, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003102:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800311a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318c:	f7ff f998 	bl	80024c0 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7ff f994 	bl	80024c0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 020f 	bic.w	r2, r3, #15
 80031d2:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1d4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f8f4 	bl	8002438 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
 8003264:	0800a37c 	.word	0x0800a37c
 8003268:	20000000 	.word	0x20000000
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b094      	sub	sp, #80	; 0x50
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
 800327c:	2300      	movs	r3, #0
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	2300      	movs	r3, #0
 8003282:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b79      	ldr	r3, [pc, #484]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d00d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003294:	2b08      	cmp	r3, #8
 8003296:	f200 80e1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x3a>
 80032a2:	e0db      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b73      	ldr	r3, [pc, #460]	; (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a8:	e0db      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b73      	ldr	r3, [pc, #460]	; (8003478 <HAL_RCC_GetSysClockFreq+0x208>)
 80032ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ae:	e0d8      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
 80032de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	6139      	str	r1, [r7, #16]
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003314:	4659      	mov	r1, fp
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4651      	mov	r1, sl
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4651      	mov	r1, sl
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4651      	mov	r1, sl
 8003324:	ebb2 0801 	subs.w	r8, r2, r1
 8003328:	4659      	mov	r1, fp
 800332a:	eb63 0901 	sbc.w	r9, r3, r1
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003342:	4690      	mov	r8, r2
 8003344:	4699      	mov	r9, r3
 8003346:	4623      	mov	r3, r4
 8003348:	eb18 0303 	adds.w	r3, r8, r3
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	462b      	mov	r3, r5
 8003350:	eb49 0303 	adc.w	r3, r9, r3
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003362:	4629      	mov	r1, r5
 8003364:	024b      	lsls	r3, r1, #9
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800336c:	4621      	mov	r1, r4
 800336e:	024a      	lsls	r2, r1, #9
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003376:	2200      	movs	r2, #0
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
 800337a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003380:	f7fd fca2 	bl	8000cc8 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800338c:	e058      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	2200      	movs	r2, #0
 8003396:	4618      	mov	r0, r3
 8003398:	4611      	mov	r1, r2
 800339a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ba:	0150      	lsls	r0, r2, #5
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4641      	mov	r1, r8
 80033c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e0:	ebb2 040a 	subs.w	r4, r2, sl
 80033e4:	eb63 050b 	sbc.w	r5, r3, fp
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	00eb      	lsls	r3, r5, #3
 80033f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f6:	00e2      	lsls	r2, r4, #3
 80033f8:	4614      	mov	r4, r2
 80033fa:	461d      	mov	r5, r3
 80033fc:	4643      	mov	r3, r8
 80033fe:	18e3      	adds	r3, r4, r3
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	464b      	mov	r3, r9
 8003404:	eb45 0303 	adc.w	r3, r5, r3
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003416:	4629      	mov	r1, r5
 8003418:	028b      	lsls	r3, r1, #10
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003420:	4621      	mov	r1, r4
 8003422:	028a      	lsls	r2, r1, #10
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	61fa      	str	r2, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	f7fd fc48 	bl	8000cc8 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003464:	4618      	mov	r0, r3
 8003466:	3750      	adds	r7, #80	; 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff0 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	0800a38c 	.word	0x0800a38c

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c0:	f7ff ffdc 	bl	800347c <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0b5b      	lsrs	r3, r3, #13
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	0800a38c 	.word	0x0800a38c

080034e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800350c:	4b69      	ldr	r3, [pc, #420]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a68      	ldr	r2, [pc, #416]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003516:	6093      	str	r3, [r2, #8]
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003520:	4964      	ldr	r1, [pc, #400]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d017      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	4959      	ldr	r1, [pc, #356]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800357a:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	494a      	ldr	r1, [pc, #296]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003598:	d101      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 808b 	beq.w	80036de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	4a39      	ldr	r2, [pc, #228]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	6413      	str	r3, [r2, #64]	; 0x40
 80035d4:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fe ff68 	bl	80024c0 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fe ff64 	bl	80024c0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e357      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d035      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d02e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003650:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d114      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe ff2c 	bl	80024c0 <HAL_GetTick>
 8003668:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fe ff28 	bl	80024c0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e319      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ee      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369a:	d111      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036aa:	400b      	ands	r3, r1
 80036ac:	4901      	ldr	r1, [pc, #4]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
 80036b2:	e00b      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40007000 	.word	0x40007000
 80036bc:	0ffffcff 	.word	0x0ffffcff
 80036c0:	4baa      	ldr	r3, [pc, #680]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4aa9      	ldr	r2, [pc, #676]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	4ba7      	ldr	r3, [pc, #668]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d8:	49a4      	ldr	r1, [pc, #656]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036ea:	4ba0      	ldr	r3, [pc, #640]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	4a9e      	ldr	r2, [pc, #632]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036fa:	4b9c      	ldr	r3, [pc, #624]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	4999      	ldr	r1, [pc, #612]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003718:	4b94      	ldr	r3, [pc, #592]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003726:	4991      	ldr	r1, [pc, #580]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373a:	4b8c      	ldr	r3, [pc, #560]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003748:	4988      	ldr	r1, [pc, #544]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375c:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376a:	4980      	ldr	r1, [pc, #512]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800377e:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4977      	ldr	r1, [pc, #476]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a0:	4b72      	ldr	r3, [pc, #456]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	496f      	ldr	r1, [pc, #444]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c2:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f023 020c 	bic.w	r2, r3, #12
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	4966      	ldr	r1, [pc, #408]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e4:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	495e      	ldr	r1, [pc, #376]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	4955      	ldr	r1, [pc, #340]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800384a:	4b48      	ldr	r3, [pc, #288]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	4944      	ldr	r1, [pc, #272]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800386c:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	493c      	ldr	r1, [pc, #240]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	4933      	ldr	r1, [pc, #204]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038be:	492b      	ldr	r1, [pc, #172]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d011      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e0:	4922      	ldr	r1, [pc, #136]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f0:	d101      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003902:	2301      	movs	r3, #1
 8003904:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003944:	4909      	ldr	r1, [pc, #36]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d006      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80d9 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a01      	ldr	r2, [pc, #4]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800396a:	e001      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800396c:	40023800 	.word	0x40023800
 8003970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003972:	f7fe fda5 	bl	80024c0 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800397a:	f7fe fda1 	bl	80024c0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e194      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800398c:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d021      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11d      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039ac:	4b64      	ldr	r3, [pc, #400]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039ba:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	019a      	lsls	r2, r3, #6
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	071b      	lsls	r3, r3, #28
 80039e0:	4957      	ldr	r1, [pc, #348]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d02e      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a12:	d129      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a28:	0f1b      	lsrs	r3, r3, #28
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	019a      	lsls	r2, r3, #6
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	071b      	lsls	r3, r3, #28
 8003a48:	493d      	ldr	r1, [pc, #244]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a56:	f023 021f 	bic.w	r2, r3, #31
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01d      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a74:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	0e1b      	lsrs	r3, r3, #24
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a82:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	0f1b      	lsrs	r3, r3, #28
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	019a      	lsls	r2, r3, #6
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	071b      	lsls	r3, r3, #28
 8003aa8:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d011      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	019a      	lsls	r2, r3, #6
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	071b      	lsls	r3, r3, #28
 8003ad8:	4919      	ldr	r1, [pc, #100]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aec:	f7fe fce8 	bl	80024c0 <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003af4:	f7fe fce4 	bl	80024c0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0d7      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	f040 80cd 	bne.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b26:	f7fe fccb 	bl	80024c0 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b2e:	f7fe fcc7 	bl	80024c0 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	; 0x64
 8003b3a:	d903      	bls.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0ba      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b44:	4b5e      	ldr	r3, [pc, #376]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b50:	d0ed      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02e      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d12a      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b88:	4b4d      	ldr	r3, [pc, #308]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	0f1b      	lsrs	r3, r3, #28
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	019a      	lsls	r2, r3, #6
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	071b      	lsls	r3, r3, #28
 8003bae:	4944      	ldr	r1, [pc, #272]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bb6:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	493d      	ldr	r1, [pc, #244]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be4:	d11d      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	0e1b      	lsrs	r3, r3, #24
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf4:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	019a      	lsls	r2, r3, #6
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4929      	ldr	r1, [pc, #164]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	019a      	lsls	r2, r3, #6
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	071b      	lsls	r3, r3, #28
 8003c62:	4917      	ldr	r1, [pc, #92]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4911      	ldr	r1, [pc, #68]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8c:	f7fe fc18 	bl	80024c0 <HAL_GetTick>
 8003c90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c94:	f7fe fc14 	bl	80024c0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e007      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb2:	d1ef      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e049      	b.n	8003d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe fa32 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f000 fda0 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d001      	beq.n	8003d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e04c      	b.n	8003e26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <HAL_TIM_Base_Start+0xc0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_TIM_Base_Start+0xc4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_TIM_Base_Start+0xc8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_TIM_Base_Start+0xcc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_TIM_Base_Start+0xd0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_TIM_Base_Start+0xd4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_TIM_Base_Start+0xd8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d115      	bne.n	8003e10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_TIM_Base_Start+0xdc>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d015      	beq.n	8003e22 <HAL_TIM_Base_Start+0xae>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d011      	beq.n	8003e22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800
 8003e50:	00010007 	.word	0x00010007

08003e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e054      	b.n	8003f16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d01d      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_TIM_Base_Start_IT+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d115      	bne.n	8003f00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_TIM_Base_Start_IT+0xec>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d015      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0xbe>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d011      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	e008      	b.n	8003f12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e000      	b.n	8003f14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40010400 	.word	0x40010400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40001800 	.word	0x40001800
 8003f40:	00010007 	.word	0x00010007

08003f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e049      	b.n	8003fea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f841 	bl	8003ff2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f000 fc60 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_TIM_PWM_Start+0x24>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e03c      	b.n	80040a6 <HAL_TIM_PWM_Start+0x9e>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b04      	cmp	r3, #4
 8004030:	d109      	bne.n	8004046 <HAL_TIM_PWM_Start+0x3e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e02f      	b.n	80040a6 <HAL_TIM_PWM_Start+0x9e>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d109      	bne.n	8004060 <HAL_TIM_PWM_Start+0x58>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e022      	b.n	80040a6 <HAL_TIM_PWM_Start+0x9e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d109      	bne.n	800407a <HAL_TIM_PWM_Start+0x72>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e015      	b.n	80040a6 <HAL_TIM_PWM_Start+0x9e>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b10      	cmp	r3, #16
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start+0x8c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e008      	b.n	80040a6 <HAL_TIM_PWM_Start+0x9e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e092      	b.n	80041d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xb6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	e023      	b.n	8004106 <HAL_TIM_PWM_Start+0xfe>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0xc6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040cc:	e01b      	b.n	8004106 <HAL_TIM_PWM_Start+0xfe>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0xd6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040dc:	e013      	b.n	8004106 <HAL_TIM_PWM_Start+0xfe>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xe6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ec:	e00b      	b.n	8004106 <HAL_TIM_PWM_Start+0xfe>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0xf6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fc:	e003      	b.n	8004106 <HAL_TIM_PWM_Start+0xfe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2201      	movs	r2, #1
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 ff32 	bl	8004f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a30      	ldr	r2, [pc, #192]	; (80041dc <HAL_TIM_PWM_Start+0x1d4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_PWM_Start+0x120>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2f      	ldr	r2, [pc, #188]	; (80041e0 <HAL_TIM_PWM_Start+0x1d8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_TIM_PWM_Start+0x124>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_TIM_PWM_Start+0x126>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a25      	ldr	r2, [pc, #148]	; (80041dc <HAL_TIM_PWM_Start+0x1d4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d022      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004154:	d01d      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <HAL_TIM_PWM_Start+0x1dc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d018      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_TIM_PWM_Start+0x1e0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_TIM_PWM_Start+0x1e4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_TIM_PWM_Start+0x1d8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d009      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <HAL_TIM_PWM_Start+0x1e8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_TIM_PWM_Start+0x18a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <HAL_TIM_PWM_Start+0x1ec>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d115      	bne.n	80041be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <HAL_TIM_PWM_Start+0x1f0>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d015      	beq.n	80041d0 <HAL_TIM_PWM_Start+0x1c8>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041aa:	d011      	beq.n	80041d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	e008      	b.n	80041d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40001800 	.word	0x40001800
 80041f8:	00010007 	.word	0x00010007

080041fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0202 	mvn.w	r2, #2
 8004228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fae4 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fad6 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fae7 	bl	8004820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0204 	mvn.w	r2, #4
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 faba 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 faac 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fabd 	bl	8004820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0208 	mvn.w	r2, #8
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2204      	movs	r2, #4
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa90 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fa82 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fa93 	bl	8004820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b10      	cmp	r3, #16
 800430c:	d122      	bne.n	8004354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b10      	cmp	r3, #16
 800431a:	d11b      	bne.n	8004354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0210 	mvn.w	r2, #16
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2208      	movs	r2, #8
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa66 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa58 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fa69 	bl	8004820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0201 	mvn.w	r2, #1
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd fb58 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d10e      	bne.n	80043ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d107      	bne.n	80043ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fea4 	bl	80050f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ba:	d10e      	bne.n	80043da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b80      	cmp	r3, #128	; 0x80
 80043c8:	d107      	bne.n	80043da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fe97 	bl	8005108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d10e      	bne.n	8004406 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fa17 	bl	8004834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b20      	cmp	r3, #32
 8004412:	d10e      	bne.n	8004432 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d107      	bne.n	8004432 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f06f 0220 	mvn.w	r2, #32
 800442a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fe57 	bl	80050e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004456:	2302      	movs	r3, #2
 8004458:	e0ff      	b.n	800465a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b14      	cmp	r3, #20
 8004466:	f200 80f0 	bhi.w	800464a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	080044c5 	.word	0x080044c5
 8004474:	0800464b 	.word	0x0800464b
 8004478:	0800464b 	.word	0x0800464b
 800447c:	0800464b 	.word	0x0800464b
 8004480:	08004505 	.word	0x08004505
 8004484:	0800464b 	.word	0x0800464b
 8004488:	0800464b 	.word	0x0800464b
 800448c:	0800464b 	.word	0x0800464b
 8004490:	08004547 	.word	0x08004547
 8004494:	0800464b 	.word	0x0800464b
 8004498:	0800464b 	.word	0x0800464b
 800449c:	0800464b 	.word	0x0800464b
 80044a0:	08004587 	.word	0x08004587
 80044a4:	0800464b 	.word	0x0800464b
 80044a8:	0800464b 	.word	0x0800464b
 80044ac:	0800464b 	.word	0x0800464b
 80044b0:	080045c9 	.word	0x080045c9
 80044b4:	0800464b 	.word	0x0800464b
 80044b8:	0800464b 	.word	0x0800464b
 80044bc:	0800464b 	.word	0x0800464b
 80044c0:	08004609 	.word	0x08004609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fa5c 	bl	8004988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	619a      	str	r2, [r3, #24]
      break;
 8004502:	e0a5      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 faae 	bl	8004a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6999      	ldr	r1, [r3, #24]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	021a      	lsls	r2, r3, #8
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	619a      	str	r2, [r3, #24]
      break;
 8004544:	e084      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fb05 	bl	8004b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0208 	orr.w	r2, r2, #8
 8004560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0204 	bic.w	r2, r2, #4
 8004570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69d9      	ldr	r1, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	61da      	str	r2, [r3, #28]
      break;
 8004584:	e064      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fb5b 	bl	8004c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69d9      	ldr	r1, [r3, #28]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	021a      	lsls	r2, r3, #8
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	61da      	str	r2, [r3, #28]
      break;
 80045c6:	e043      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fb92 	bl	8004cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004606:	e023      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fbc4 	bl	8004d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004648:	e002      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
      break;
 800464e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop

08004664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIM_ConfigClockSource+0x1c>
 800467c:	2302      	movs	r3, #2
 800467e:	e0b4      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x186>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_TIM_ConfigClockSource+0x190>)
 800469c:	4013      	ands	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b8:	d03e      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0xd4>
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046be:	f200 8087 	bhi.w	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	f000 8086 	beq.w	80047d6 <HAL_TIM_ConfigClockSource+0x172>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d87f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b70      	cmp	r3, #112	; 0x70
 80046d2:	d01a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xa6>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d87b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b60      	cmp	r3, #96	; 0x60
 80046da:	d050      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x11a>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d877      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b50      	cmp	r3, #80	; 0x50
 80046e2:	d03c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xfa>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d873      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d058      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x13a>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d86f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d064      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d86b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d060      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d867      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05c      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b10      	cmp	r3, #16
 8004706:	d05a      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 8004708:	e062      	b.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 fc0d 	bl	8004f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800472c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	609a      	str	r2, [r3, #8]
      break;
 8004736:	e04f      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6899      	ldr	r1, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f000 fbf6 	bl	8004f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475a:	609a      	str	r2, [r3, #8]
      break;
 800475c:	e03c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fb6a 	bl	8004e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2150      	movs	r1, #80	; 0x50
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fbc3 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 800477c:	e02c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 fb89 	bl	8004ea2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2160      	movs	r1, #96	; 0x60
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fbb3 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 800479c:	e01c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 fb4a 	bl	8004e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fba3 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 80047bc:	e00c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 fb9a 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 80047ce:	e003      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e000      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	fffeff88 	.word	0xfffeff88

080047f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a40      	ldr	r2, [pc, #256]	; (800495c <TIM_Base_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d00f      	beq.n	8004888 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3d      	ldr	r2, [pc, #244]	; (8004960 <TIM_Base_SetConfig+0x118>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3c      	ldr	r2, [pc, #240]	; (8004964 <TIM_Base_SetConfig+0x11c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3b      	ldr	r2, [pc, #236]	; (8004968 <TIM_Base_SetConfig+0x120>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a3a      	ldr	r2, [pc, #232]	; (800496c <TIM_Base_SetConfig+0x124>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d108      	bne.n	800489a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2f      	ldr	r2, [pc, #188]	; (800495c <TIM_Base_SetConfig+0x114>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02b      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d027      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <TIM_Base_SetConfig+0x118>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d023      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <TIM_Base_SetConfig+0x11c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01f      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <TIM_Base_SetConfig+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01b      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a29      	ldr	r2, [pc, #164]	; (800496c <TIM_Base_SetConfig+0x124>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d017      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a28      	ldr	r2, [pc, #160]	; (8004970 <TIM_Base_SetConfig+0x128>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <TIM_Base_SetConfig+0x12c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00f      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <TIM_Base_SetConfig+0x130>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00b      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a25      	ldr	r2, [pc, #148]	; (800497c <TIM_Base_SetConfig+0x134>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d007      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a24      	ldr	r2, [pc, #144]	; (8004980 <TIM_Base_SetConfig+0x138>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d003      	beq.n	80048fa <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a23      	ldr	r2, [pc, #140]	; (8004984 <TIM_Base_SetConfig+0x13c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d108      	bne.n	800490c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0a      	ldr	r2, [pc, #40]	; (800495c <TIM_Base_SetConfig+0x114>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0xf8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a0c      	ldr	r2, [pc, #48]	; (800496c <TIM_Base_SetConfig+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d103      	bne.n	8004948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	615a      	str	r2, [r3, #20]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40010400 	.word	0x40010400
 8004970:	40014000 	.word	0x40014000
 8004974:	40014400 	.word	0x40014400
 8004978:	40014800 	.word	0x40014800
 800497c:	40001800 	.word	0x40001800
 8004980:	40001c00 	.word	0x40001c00
 8004984:	40002000 	.word	0x40002000

08004988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <TIM_OC1_SetConfig+0xd8>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 0302 	bic.w	r3, r3, #2
 80049d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <TIM_OC1_SetConfig+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_OC1_SetConfig+0x64>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <TIM_OC1_SetConfig+0xe0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <TIM_OC1_SetConfig+0xdc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC1_SetConfig+0x8e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <TIM_OC1_SetConfig+0xe0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d111      	bne.n	8004a3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	fffeff8f 	.word	0xfffeff8f
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010400 	.word	0x40010400

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <TIM_OC2_SetConfig+0xe4>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_OC2_SetConfig+0x68>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <TIM_OC2_SetConfig+0xec>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC2_SetConfig+0x94>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <TIM_OC2_SetConfig+0xec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d113      	bne.n	8004b28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	feff8fff 	.word	0xfeff8fff
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40010400 	.word	0x40010400

08004b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <TIM_OC3_SetConfig+0xe0>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <TIM_OC3_SetConfig+0xe4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC3_SetConfig+0x66>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <TIM_OC3_SetConfig+0xe8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10d      	bne.n	8004bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <TIM_OC3_SetConfig+0xe4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC3_SetConfig+0x92>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <TIM_OC3_SetConfig+0xe8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d113      	bne.n	8004c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	fffeff8f 	.word	0xfffeff8f
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40010400 	.word	0x40010400

08004c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <TIM_OC4_SetConfig+0xa4>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	031b      	lsls	r3, r3, #12
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <TIM_OC4_SetConfig+0xa8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC4_SetConfig+0x68>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a12      	ldr	r2, [pc, #72]	; (8004cf4 <TIM_OC4_SetConfig+0xac>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d109      	bne.n	8004cc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	019b      	lsls	r3, r3, #6
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	feff8fff 	.word	0xfeff8fff
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40010400 	.word	0x40010400

08004cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <TIM_OC5_SetConfig+0x98>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_OC5_SetConfig+0x9c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC5_SetConfig+0x5e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <TIM_OC5_SetConfig+0xa0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d109      	bne.n	8004d6a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	621a      	str	r2, [r3, #32]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	fffeff8f 	.word	0xfffeff8f
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400

08004d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <TIM_OC6_SetConfig+0x9c>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	051b      	lsls	r3, r3, #20
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <TIM_OC6_SetConfig+0xa0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC6_SetConfig+0x60>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <TIM_OC6_SetConfig+0xa4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d109      	bne.n	8004e10 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	feff8fff 	.word	0xfeff8fff
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400

08004e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 030a 	bic.w	r3, r3, #10
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0210 	bic.w	r2, r3, #16
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f043 0307 	orr.w	r3, r3, #7
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06d      	b.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd f8e4 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f82c 	bl	80051b8 <UART_SetConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa84 	bl	8005680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fb0b 	bl	80057c4 <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4ba6      	ldr	r3, [pc, #664]	; (800547c <UART_SetConfig+0x2c4>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a94      	ldr	r2, [pc, #592]	; (8005480 <UART_SetConfig+0x2c8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d120      	bne.n	8005276 <UART_SetConfig+0xbe>
 8005234:	4b93      	ldr	r3, [pc, #588]	; (8005484 <UART_SetConfig+0x2cc>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b03      	cmp	r3, #3
 8005240:	d816      	bhi.n	8005270 <UART_SetConfig+0xb8>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x90>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	08005259 	.word	0x08005259
 800524c:	08005265 	.word	0x08005265
 8005250:	0800525f 	.word	0x0800525f
 8005254:	0800526b 	.word	0x0800526b
 8005258:	2301      	movs	r3, #1
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e150      	b.n	8005500 <UART_SetConfig+0x348>
 800525e:	2302      	movs	r3, #2
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e14d      	b.n	8005500 <UART_SetConfig+0x348>
 8005264:	2304      	movs	r3, #4
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e14a      	b.n	8005500 <UART_SetConfig+0x348>
 800526a:	2308      	movs	r3, #8
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	e147      	b.n	8005500 <UART_SetConfig+0x348>
 8005270:	2310      	movs	r3, #16
 8005272:	77fb      	strb	r3, [r7, #31]
 8005274:	e144      	b.n	8005500 <UART_SetConfig+0x348>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a83      	ldr	r2, [pc, #524]	; (8005488 <UART_SetConfig+0x2d0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d132      	bne.n	80052e6 <UART_SetConfig+0x12e>
 8005280:	4b80      	ldr	r3, [pc, #512]	; (8005484 <UART_SetConfig+0x2cc>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d828      	bhi.n	80052e0 <UART_SetConfig+0x128>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <UART_SetConfig+0xdc>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052d5 	.word	0x080052d5
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	080052e1 	.word	0x080052e1
 80052b4:	080052cf 	.word	0x080052cf
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052db 	.word	0x080052db
 80052c8:	2300      	movs	r3, #0
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e118      	b.n	8005500 <UART_SetConfig+0x348>
 80052ce:	2302      	movs	r3, #2
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e115      	b.n	8005500 <UART_SetConfig+0x348>
 80052d4:	2304      	movs	r3, #4
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e112      	b.n	8005500 <UART_SetConfig+0x348>
 80052da:	2308      	movs	r3, #8
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e10f      	b.n	8005500 <UART_SetConfig+0x348>
 80052e0:	2310      	movs	r3, #16
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e10c      	b.n	8005500 <UART_SetConfig+0x348>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a68      	ldr	r2, [pc, #416]	; (800548c <UART_SetConfig+0x2d4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d120      	bne.n	8005332 <UART_SetConfig+0x17a>
 80052f0:	4b64      	ldr	r3, [pc, #400]	; (8005484 <UART_SetConfig+0x2cc>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052fa:	2b30      	cmp	r3, #48	; 0x30
 80052fc:	d013      	beq.n	8005326 <UART_SetConfig+0x16e>
 80052fe:	2b30      	cmp	r3, #48	; 0x30
 8005300:	d814      	bhi.n	800532c <UART_SetConfig+0x174>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d009      	beq.n	800531a <UART_SetConfig+0x162>
 8005306:	2b20      	cmp	r3, #32
 8005308:	d810      	bhi.n	800532c <UART_SetConfig+0x174>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <UART_SetConfig+0x15c>
 800530e:	2b10      	cmp	r3, #16
 8005310:	d006      	beq.n	8005320 <UART_SetConfig+0x168>
 8005312:	e00b      	b.n	800532c <UART_SetConfig+0x174>
 8005314:	2300      	movs	r3, #0
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e0f2      	b.n	8005500 <UART_SetConfig+0x348>
 800531a:	2302      	movs	r3, #2
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e0ef      	b.n	8005500 <UART_SetConfig+0x348>
 8005320:	2304      	movs	r3, #4
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e0ec      	b.n	8005500 <UART_SetConfig+0x348>
 8005326:	2308      	movs	r3, #8
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e0e9      	b.n	8005500 <UART_SetConfig+0x348>
 800532c:	2310      	movs	r3, #16
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e0e6      	b.n	8005500 <UART_SetConfig+0x348>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a56      	ldr	r2, [pc, #344]	; (8005490 <UART_SetConfig+0x2d8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d120      	bne.n	800537e <UART_SetConfig+0x1c6>
 800533c:	4b51      	ldr	r3, [pc, #324]	; (8005484 <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005346:	2bc0      	cmp	r3, #192	; 0xc0
 8005348:	d013      	beq.n	8005372 <UART_SetConfig+0x1ba>
 800534a:	2bc0      	cmp	r3, #192	; 0xc0
 800534c:	d814      	bhi.n	8005378 <UART_SetConfig+0x1c0>
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d009      	beq.n	8005366 <UART_SetConfig+0x1ae>
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d810      	bhi.n	8005378 <UART_SetConfig+0x1c0>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <UART_SetConfig+0x1a8>
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d006      	beq.n	800536c <UART_SetConfig+0x1b4>
 800535e:	e00b      	b.n	8005378 <UART_SetConfig+0x1c0>
 8005360:	2300      	movs	r3, #0
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e0cc      	b.n	8005500 <UART_SetConfig+0x348>
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e0c9      	b.n	8005500 <UART_SetConfig+0x348>
 800536c:	2304      	movs	r3, #4
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e0c6      	b.n	8005500 <UART_SetConfig+0x348>
 8005372:	2308      	movs	r3, #8
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e0c3      	b.n	8005500 <UART_SetConfig+0x348>
 8005378:	2310      	movs	r3, #16
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e0c0      	b.n	8005500 <UART_SetConfig+0x348>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a44      	ldr	r2, [pc, #272]	; (8005494 <UART_SetConfig+0x2dc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d125      	bne.n	80053d4 <UART_SetConfig+0x21c>
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <UART_SetConfig+0x2cc>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005396:	d017      	beq.n	80053c8 <UART_SetConfig+0x210>
 8005398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800539c:	d817      	bhi.n	80053ce <UART_SetConfig+0x216>
 800539e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a2:	d00b      	beq.n	80053bc <UART_SetConfig+0x204>
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a8:	d811      	bhi.n	80053ce <UART_SetConfig+0x216>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <UART_SetConfig+0x1fe>
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d006      	beq.n	80053c2 <UART_SetConfig+0x20a>
 80053b4:	e00b      	b.n	80053ce <UART_SetConfig+0x216>
 80053b6:	2300      	movs	r3, #0
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e0a1      	b.n	8005500 <UART_SetConfig+0x348>
 80053bc:	2302      	movs	r3, #2
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e09e      	b.n	8005500 <UART_SetConfig+0x348>
 80053c2:	2304      	movs	r3, #4
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e09b      	b.n	8005500 <UART_SetConfig+0x348>
 80053c8:	2308      	movs	r3, #8
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e098      	b.n	8005500 <UART_SetConfig+0x348>
 80053ce:	2310      	movs	r3, #16
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e095      	b.n	8005500 <UART_SetConfig+0x348>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a2f      	ldr	r2, [pc, #188]	; (8005498 <UART_SetConfig+0x2e0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d125      	bne.n	800542a <UART_SetConfig+0x272>
 80053de:	4b29      	ldr	r3, [pc, #164]	; (8005484 <UART_SetConfig+0x2cc>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ec:	d017      	beq.n	800541e <UART_SetConfig+0x266>
 80053ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053f2:	d817      	bhi.n	8005424 <UART_SetConfig+0x26c>
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f8:	d00b      	beq.n	8005412 <UART_SetConfig+0x25a>
 80053fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fe:	d811      	bhi.n	8005424 <UART_SetConfig+0x26c>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <UART_SetConfig+0x254>
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d006      	beq.n	8005418 <UART_SetConfig+0x260>
 800540a:	e00b      	b.n	8005424 <UART_SetConfig+0x26c>
 800540c:	2301      	movs	r3, #1
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e076      	b.n	8005500 <UART_SetConfig+0x348>
 8005412:	2302      	movs	r3, #2
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e073      	b.n	8005500 <UART_SetConfig+0x348>
 8005418:	2304      	movs	r3, #4
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e070      	b.n	8005500 <UART_SetConfig+0x348>
 800541e:	2308      	movs	r3, #8
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e06d      	b.n	8005500 <UART_SetConfig+0x348>
 8005424:	2310      	movs	r3, #16
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e06a      	b.n	8005500 <UART_SetConfig+0x348>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1b      	ldr	r2, [pc, #108]	; (800549c <UART_SetConfig+0x2e4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d138      	bne.n	80054a6 <UART_SetConfig+0x2ee>
 8005434:	4b13      	ldr	r3, [pc, #76]	; (8005484 <UART_SetConfig+0x2cc>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800543e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005442:	d017      	beq.n	8005474 <UART_SetConfig+0x2bc>
 8005444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005448:	d82a      	bhi.n	80054a0 <UART_SetConfig+0x2e8>
 800544a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544e:	d00b      	beq.n	8005468 <UART_SetConfig+0x2b0>
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005454:	d824      	bhi.n	80054a0 <UART_SetConfig+0x2e8>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <UART_SetConfig+0x2aa>
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d006      	beq.n	800546e <UART_SetConfig+0x2b6>
 8005460:	e01e      	b.n	80054a0 <UART_SetConfig+0x2e8>
 8005462:	2300      	movs	r3, #0
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e04b      	b.n	8005500 <UART_SetConfig+0x348>
 8005468:	2302      	movs	r3, #2
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e048      	b.n	8005500 <UART_SetConfig+0x348>
 800546e:	2304      	movs	r3, #4
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e045      	b.n	8005500 <UART_SetConfig+0x348>
 8005474:	2308      	movs	r3, #8
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e042      	b.n	8005500 <UART_SetConfig+0x348>
 800547a:	bf00      	nop
 800547c:	efff69f3 	.word	0xefff69f3
 8005480:	40011000 	.word	0x40011000
 8005484:	40023800 	.word	0x40023800
 8005488:	40004400 	.word	0x40004400
 800548c:	40004800 	.word	0x40004800
 8005490:	40004c00 	.word	0x40004c00
 8005494:	40005000 	.word	0x40005000
 8005498:	40011400 	.word	0x40011400
 800549c:	40007800 	.word	0x40007800
 80054a0:	2310      	movs	r3, #16
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e02c      	b.n	8005500 <UART_SetConfig+0x348>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a72      	ldr	r2, [pc, #456]	; (8005674 <UART_SetConfig+0x4bc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d125      	bne.n	80054fc <UART_SetConfig+0x344>
 80054b0:	4b71      	ldr	r3, [pc, #452]	; (8005678 <UART_SetConfig+0x4c0>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054be:	d017      	beq.n	80054f0 <UART_SetConfig+0x338>
 80054c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054c4:	d817      	bhi.n	80054f6 <UART_SetConfig+0x33e>
 80054c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ca:	d00b      	beq.n	80054e4 <UART_SetConfig+0x32c>
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	d811      	bhi.n	80054f6 <UART_SetConfig+0x33e>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <UART_SetConfig+0x326>
 80054d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054da:	d006      	beq.n	80054ea <UART_SetConfig+0x332>
 80054dc:	e00b      	b.n	80054f6 <UART_SetConfig+0x33e>
 80054de:	2300      	movs	r3, #0
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e00d      	b.n	8005500 <UART_SetConfig+0x348>
 80054e4:	2302      	movs	r3, #2
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e00a      	b.n	8005500 <UART_SetConfig+0x348>
 80054ea:	2304      	movs	r3, #4
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e007      	b.n	8005500 <UART_SetConfig+0x348>
 80054f0:	2308      	movs	r3, #8
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x348>
 80054f6:	2310      	movs	r3, #16
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e001      	b.n	8005500 <UART_SetConfig+0x348>
 80054fc:	2310      	movs	r3, #16
 80054fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005508:	d15b      	bne.n	80055c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800550a:	7ffb      	ldrb	r3, [r7, #31]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d828      	bhi.n	8005562 <UART_SetConfig+0x3aa>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x360>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	0800554d 	.word	0x0800554d
 8005524:	08005563 	.word	0x08005563
 8005528:	08005553 	.word	0x08005553
 800552c:	08005563 	.word	0x08005563
 8005530:	08005563 	.word	0x08005563
 8005534:	08005563 	.word	0x08005563
 8005538:	0800555b 	.word	0x0800555b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fd ffaa 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8005540:	61b8      	str	r0, [r7, #24]
        break;
 8005542:	e013      	b.n	800556c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fd ffba 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8005548:	61b8      	str	r0, [r7, #24]
        break;
 800554a:	e00f      	b.n	800556c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <UART_SetConfig+0x4c4>)
 800554e:	61bb      	str	r3, [r7, #24]
        break;
 8005550:	e00c      	b.n	800556c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005552:	f7fd fe8d 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8005556:	61b8      	str	r0, [r7, #24]
        break;
 8005558:	e008      	b.n	800556c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555e:	61bb      	str	r3, [r7, #24]
        break;
 8005560:	e004      	b.n	800556c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	77bb      	strb	r3, [r7, #30]
        break;
 800556a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d074      	beq.n	800565c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	005a      	lsls	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d916      	bls.n	80055bc <UART_SetConfig+0x404>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d212      	bcs.n	80055bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f023 030f 	bic.w	r3, r3, #15
 800559e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	89fb      	ldrh	r3, [r7, #14]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	89fa      	ldrh	r2, [r7, #14]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	e04f      	b.n	800565c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	77bb      	strb	r3, [r7, #30]
 80055c0:	e04c      	b.n	800565c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d828      	bhi.n	800561a <UART_SetConfig+0x462>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <UART_SetConfig+0x418>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	08005605 	.word	0x08005605
 80055dc:	0800561b 	.word	0x0800561b
 80055e0:	0800560b 	.word	0x0800560b
 80055e4:	0800561b 	.word	0x0800561b
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	0800561b 	.word	0x0800561b
 80055f0:	08005613 	.word	0x08005613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f4:	f7fd ff4e 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 80055f8:	61b8      	str	r0, [r7, #24]
        break;
 80055fa:	e013      	b.n	8005624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055fc:	f7fd ff5e 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8005600:	61b8      	str	r0, [r7, #24]
        break;
 8005602:	e00f      	b.n	8005624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <UART_SetConfig+0x4c4>)
 8005606:	61bb      	str	r3, [r7, #24]
        break;
 8005608:	e00c      	b.n	8005624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560a:	f7fd fe31 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800560e:	61b8      	str	r0, [r7, #24]
        break;
 8005610:	e008      	b.n	8005624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005616:	61bb      	str	r3, [r7, #24]
        break;
 8005618:	e004      	b.n	8005624 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	77bb      	strb	r3, [r7, #30]
        break;
 8005622:	bf00      	nop
    }

    if (pclk != 0U)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	085a      	lsrs	r2, r3, #1
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	441a      	add	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d909      	bls.n	8005658 <UART_SetConfig+0x4a0>
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564a:	d205      	bcs.n	8005658 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	e001      	b.n	800565c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005668:	7fbb      	ldrb	r3, [r7, #30]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40007c00 	.word	0x40007c00
 8005678:	40023800 	.word	0x40023800
 800567c:	00f42400 	.word	0x00f42400

08005680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577e:	d10a      	bne.n	8005796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057d4:	f7fc fe74 	bl	80024c0 <HAL_GetTick>
 80057d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d10e      	bne.n	8005806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f81b 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e011      	b.n	800582a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b09c      	sub	sp, #112	; 0x70
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	e0a7      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	f000 80a3 	beq.w	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fc fe37 	bl	80024c0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	2b00      	cmp	r3, #0
 8005862:	d13f      	bne.n	80058e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005878:	667b      	str	r3, [r7, #100]	; 0x64
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005884:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e068      	b.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d050      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005900:	d148      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e6      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	613b      	str	r3, [r7, #16]
   return(result);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	66bb      	str	r3, [r7, #104]	; 0x68
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800595e:	623a      	str	r2, [r7, #32]
 8005960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	69f9      	ldr	r1, [r7, #28]
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	61bb      	str	r3, [r7, #24]
   return(result);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e010      	b.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4013      	ands	r3, r2
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f43f af48 	beq.w	8005844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3770      	adds	r7, #112	; 0x70
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <__errno>:
 80059c0:	4b01      	ldr	r3, [pc, #4]	; (80059c8 <__errno+0x8>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	2000000c 	.word	0x2000000c

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4d0d      	ldr	r5, [pc, #52]	; (8005a04 <__libc_init_array+0x38>)
 80059d0:	4c0d      	ldr	r4, [pc, #52]	; (8005a08 <__libc_init_array+0x3c>)
 80059d2:	1b64      	subs	r4, r4, r5
 80059d4:	10a4      	asrs	r4, r4, #2
 80059d6:	2600      	movs	r6, #0
 80059d8:	42a6      	cmp	r6, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	4d0b      	ldr	r5, [pc, #44]	; (8005a0c <__libc_init_array+0x40>)
 80059de:	4c0c      	ldr	r4, [pc, #48]	; (8005a10 <__libc_init_array+0x44>)
 80059e0:	f004 fca6 	bl	800a330 <_init>
 80059e4:	1b64      	subs	r4, r4, r5
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	2600      	movs	r6, #0
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f4:	4798      	blx	r3
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fe:	4798      	blx	r3
 8005a00:	3601      	adds	r6, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	0800a844 	.word	0x0800a844
 8005a08:	0800a844 	.word	0x0800a844
 8005a0c:	0800a844 	.word	0x0800a844
 8005a10:	0800a848 	.word	0x0800a848

08005a14 <memset>:
 8005a14:	4402      	add	r2, r0
 8005a16:	4603      	mov	r3, r0
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d100      	bne.n	8005a1e <memset+0xa>
 8005a1c:	4770      	bx	lr
 8005a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a22:	e7f9      	b.n	8005a18 <memset+0x4>

08005a24 <__cvt>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	ec55 4b10 	vmov	r4, r5, d0
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	460e      	mov	r6, r1
 8005a30:	4619      	mov	r1, r3
 8005a32:	462b      	mov	r3, r5
 8005a34:	bfbb      	ittet	lt
 8005a36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a3a:	461d      	movlt	r5, r3
 8005a3c:	2300      	movge	r3, #0
 8005a3e:	232d      	movlt	r3, #45	; 0x2d
 8005a40:	700b      	strb	r3, [r1, #0]
 8005a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a48:	4691      	mov	r9, r2
 8005a4a:	f023 0820 	bic.w	r8, r3, #32
 8005a4e:	bfbc      	itt	lt
 8005a50:	4622      	movlt	r2, r4
 8005a52:	4614      	movlt	r4, r2
 8005a54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a58:	d005      	beq.n	8005a66 <__cvt+0x42>
 8005a5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a5e:	d100      	bne.n	8005a62 <__cvt+0x3e>
 8005a60:	3601      	adds	r6, #1
 8005a62:	2102      	movs	r1, #2
 8005a64:	e000      	b.n	8005a68 <__cvt+0x44>
 8005a66:	2103      	movs	r1, #3
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	ab02      	add	r3, sp, #8
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	ec45 4b10 	vmov	d0, r4, r5
 8005a74:	4653      	mov	r3, sl
 8005a76:	4632      	mov	r2, r6
 8005a78:	f001 fdc2 	bl	8007600 <_dtoa_r>
 8005a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a80:	4607      	mov	r7, r0
 8005a82:	d102      	bne.n	8005a8a <__cvt+0x66>
 8005a84:	f019 0f01 	tst.w	r9, #1
 8005a88:	d022      	beq.n	8005ad0 <__cvt+0xac>
 8005a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a8e:	eb07 0906 	add.w	r9, r7, r6
 8005a92:	d110      	bne.n	8005ab6 <__cvt+0x92>
 8005a94:	783b      	ldrb	r3, [r7, #0]
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d10a      	bne.n	8005ab0 <__cvt+0x8c>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fb f831 	bl	8000b08 <__aeabi_dcmpeq>
 8005aa6:	b918      	cbnz	r0, 8005ab0 <__cvt+0x8c>
 8005aa8:	f1c6 0601 	rsb	r6, r6, #1
 8005aac:	f8ca 6000 	str.w	r6, [sl]
 8005ab0:	f8da 3000 	ldr.w	r3, [sl]
 8005ab4:	4499      	add	r9, r3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fb f823 	bl	8000b08 <__aeabi_dcmpeq>
 8005ac2:	b108      	cbz	r0, 8005ac8 <__cvt+0xa4>
 8005ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ac8:	2230      	movs	r2, #48	; 0x30
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	454b      	cmp	r3, r9
 8005ace:	d307      	bcc.n	8005ae0 <__cvt+0xbc>
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad4:	1bdb      	subs	r3, r3, r7
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	b004      	add	sp, #16
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	1c59      	adds	r1, r3, #1
 8005ae2:	9103      	str	r1, [sp, #12]
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e7f0      	b.n	8005aca <__cvt+0xa6>

08005ae8 <__exponent>:
 8005ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aea:	4603      	mov	r3, r0
 8005aec:	2900      	cmp	r1, #0
 8005aee:	bfb8      	it	lt
 8005af0:	4249      	neglt	r1, r1
 8005af2:	f803 2b02 	strb.w	r2, [r3], #2
 8005af6:	bfb4      	ite	lt
 8005af8:	222d      	movlt	r2, #45	; 0x2d
 8005afa:	222b      	movge	r2, #43	; 0x2b
 8005afc:	2909      	cmp	r1, #9
 8005afe:	7042      	strb	r2, [r0, #1]
 8005b00:	dd2a      	ble.n	8005b58 <__exponent+0x70>
 8005b02:	f10d 0407 	add.w	r4, sp, #7
 8005b06:	46a4      	mov	ip, r4
 8005b08:	270a      	movs	r7, #10
 8005b0a:	46a6      	mov	lr, r4
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b12:	fb07 1516 	mls	r5, r7, r6, r1
 8005b16:	3530      	adds	r5, #48	; 0x30
 8005b18:	2a63      	cmp	r2, #99	; 0x63
 8005b1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b22:	4631      	mov	r1, r6
 8005b24:	dcf1      	bgt.n	8005b0a <__exponent+0x22>
 8005b26:	3130      	adds	r1, #48	; 0x30
 8005b28:	f1ae 0502 	sub.w	r5, lr, #2
 8005b2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b30:	1c44      	adds	r4, r0, #1
 8005b32:	4629      	mov	r1, r5
 8005b34:	4561      	cmp	r1, ip
 8005b36:	d30a      	bcc.n	8005b4e <__exponent+0x66>
 8005b38:	f10d 0209 	add.w	r2, sp, #9
 8005b3c:	eba2 020e 	sub.w	r2, r2, lr
 8005b40:	4565      	cmp	r5, ip
 8005b42:	bf88      	it	hi
 8005b44:	2200      	movhi	r2, #0
 8005b46:	4413      	add	r3, r2
 8005b48:	1a18      	subs	r0, r3, r0
 8005b4a:	b003      	add	sp, #12
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b56:	e7ed      	b.n	8005b34 <__exponent+0x4c>
 8005b58:	2330      	movs	r3, #48	; 0x30
 8005b5a:	3130      	adds	r1, #48	; 0x30
 8005b5c:	7083      	strb	r3, [r0, #2]
 8005b5e:	70c1      	strb	r1, [r0, #3]
 8005b60:	1d03      	adds	r3, r0, #4
 8005b62:	e7f1      	b.n	8005b48 <__exponent+0x60>

08005b64 <_printf_float>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	ed2d 8b02 	vpush	{d8}
 8005b6c:	b08d      	sub	sp, #52	; 0x34
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b74:	4616      	mov	r6, r2
 8005b76:	461f      	mov	r7, r3
 8005b78:	4605      	mov	r5, r0
 8005b7a:	f002 fe9f 	bl	80088bc <_localeconv_r>
 8005b7e:	f8d0 a000 	ldr.w	sl, [r0]
 8005b82:	4650      	mov	r0, sl
 8005b84:	f7fa fb44 	bl	8000210 <strlen>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	9305      	str	r3, [sp, #20]
 8005b90:	f8d8 3000 	ldr.w	r3, [r8]
 8005b94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b98:	3307      	adds	r3, #7
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	f103 0208 	add.w	r2, r3, #8
 8005ba2:	f8c8 2000 	str.w	r2, [r8]
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bb6:	9307      	str	r3, [sp, #28]
 8005bb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bbc:	ee08 0a10 	vmov	s16, r0
 8005bc0:	4b9f      	ldr	r3, [pc, #636]	; (8005e40 <_printf_float+0x2dc>)
 8005bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bca:	f7fa ffcf 	bl	8000b6c <__aeabi_dcmpun>
 8005bce:	bb88      	cbnz	r0, 8005c34 <_printf_float+0xd0>
 8005bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd4:	4b9a      	ldr	r3, [pc, #616]	; (8005e40 <_printf_float+0x2dc>)
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	f7fa ffa9 	bl	8000b30 <__aeabi_dcmple>
 8005bde:	bb48      	cbnz	r0, 8005c34 <_printf_float+0xd0>
 8005be0:	2200      	movs	r2, #0
 8005be2:	2300      	movs	r3, #0
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa ff98 	bl	8000b1c <__aeabi_dcmplt>
 8005bec:	b110      	cbz	r0, 8005bf4 <_printf_float+0x90>
 8005bee:	232d      	movs	r3, #45	; 0x2d
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf4:	4b93      	ldr	r3, [pc, #588]	; (8005e44 <_printf_float+0x2e0>)
 8005bf6:	4894      	ldr	r0, [pc, #592]	; (8005e48 <_printf_float+0x2e4>)
 8005bf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bfc:	bf94      	ite	ls
 8005bfe:	4698      	movls	r8, r3
 8005c00:	4680      	movhi	r8, r0
 8005c02:	2303      	movs	r3, #3
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	9b05      	ldr	r3, [sp, #20]
 8005c08:	f023 0204 	bic.w	r2, r3, #4
 8005c0c:	6022      	str	r2, [r4, #0]
 8005c0e:	f04f 0900 	mov.w	r9, #0
 8005c12:	9700      	str	r7, [sp, #0]
 8005c14:	4633      	mov	r3, r6
 8005c16:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 f9d8 	bl	8005fd0 <_printf_common>
 8005c20:	3001      	adds	r0, #1
 8005c22:	f040 8090 	bne.w	8005d46 <_printf_float+0x1e2>
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2a:	b00d      	add	sp, #52	; 0x34
 8005c2c:	ecbd 8b02 	vpop	{d8}
 8005c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa ff96 	bl	8000b6c <__aeabi_dcmpun>
 8005c40:	b140      	cbz	r0, 8005c54 <_printf_float+0xf0>
 8005c42:	464b      	mov	r3, r9
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbc      	itt	lt
 8005c48:	232d      	movlt	r3, #45	; 0x2d
 8005c4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c4e:	487f      	ldr	r0, [pc, #508]	; (8005e4c <_printf_float+0x2e8>)
 8005c50:	4b7f      	ldr	r3, [pc, #508]	; (8005e50 <_printf_float+0x2ec>)
 8005c52:	e7d1      	b.n	8005bf8 <_printf_float+0x94>
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c5a:	9206      	str	r2, [sp, #24]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	d13f      	bne.n	8005ce0 <_printf_float+0x17c>
 8005c60:	2306      	movs	r3, #6
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	9b05      	ldr	r3, [sp, #20]
 8005c66:	6861      	ldr	r1, [r4, #4]
 8005c68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9303      	str	r3, [sp, #12]
 8005c70:	ab0a      	add	r3, sp, #40	; 0x28
 8005c72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c76:	ab09      	add	r3, sp, #36	; 0x24
 8005c78:	ec49 8b10 	vmov	d0, r8, r9
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c84:	4628      	mov	r0, r5
 8005c86:	f7ff fecd 	bl	8005a24 <__cvt>
 8005c8a:	9b06      	ldr	r3, [sp, #24]
 8005c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c8e:	2b47      	cmp	r3, #71	; 0x47
 8005c90:	4680      	mov	r8, r0
 8005c92:	d108      	bne.n	8005ca6 <_printf_float+0x142>
 8005c94:	1cc8      	adds	r0, r1, #3
 8005c96:	db02      	blt.n	8005c9e <_printf_float+0x13a>
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	dd41      	ble.n	8005d22 <_printf_float+0x1be>
 8005c9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ca2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ca6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005caa:	d820      	bhi.n	8005cee <_printf_float+0x18a>
 8005cac:	3901      	subs	r1, #1
 8005cae:	465a      	mov	r2, fp
 8005cb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cb4:	9109      	str	r1, [sp, #36]	; 0x24
 8005cb6:	f7ff ff17 	bl	8005ae8 <__exponent>
 8005cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cbc:	1813      	adds	r3, r2, r0
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	4681      	mov	r9, r0
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	dc02      	bgt.n	8005ccc <_printf_float+0x168>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	07d2      	lsls	r2, r2, #31
 8005cca:	d501      	bpl.n	8005cd0 <_printf_float+0x16c>
 8005ccc:	3301      	adds	r3, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d09c      	beq.n	8005c12 <_printf_float+0xae>
 8005cd8:	232d      	movs	r3, #45	; 0x2d
 8005cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cde:	e798      	b.n	8005c12 <_printf_float+0xae>
 8005ce0:	9a06      	ldr	r2, [sp, #24]
 8005ce2:	2a47      	cmp	r2, #71	; 0x47
 8005ce4:	d1be      	bne.n	8005c64 <_printf_float+0x100>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1bc      	bne.n	8005c64 <_printf_float+0x100>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7b9      	b.n	8005c62 <_printf_float+0xfe>
 8005cee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cf2:	d118      	bne.n	8005d26 <_printf_float+0x1c2>
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	dd0b      	ble.n	8005d12 <_printf_float+0x1ae>
 8005cfa:	6121      	str	r1, [r4, #16]
 8005cfc:	b913      	cbnz	r3, 8005d04 <_printf_float+0x1a0>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	07d0      	lsls	r0, r2, #31
 8005d02:	d502      	bpl.n	8005d0a <_printf_float+0x1a6>
 8005d04:	3301      	adds	r3, #1
 8005d06:	440b      	add	r3, r1
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d0c:	f04f 0900 	mov.w	r9, #0
 8005d10:	e7de      	b.n	8005cd0 <_printf_float+0x16c>
 8005d12:	b913      	cbnz	r3, 8005d1a <_printf_float+0x1b6>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d2      	lsls	r2, r2, #31
 8005d18:	d501      	bpl.n	8005d1e <_printf_float+0x1ba>
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	e7f4      	b.n	8005d08 <_printf_float+0x1a4>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7f2      	b.n	8005d08 <_printf_float+0x1a4>
 8005d22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	db05      	blt.n	8005d38 <_printf_float+0x1d4>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	6121      	str	r1, [r4, #16]
 8005d30:	07d8      	lsls	r0, r3, #31
 8005d32:	d5ea      	bpl.n	8005d0a <_printf_float+0x1a6>
 8005d34:	1c4b      	adds	r3, r1, #1
 8005d36:	e7e7      	b.n	8005d08 <_printf_float+0x1a4>
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	bfd4      	ite	le
 8005d3c:	f1c1 0202 	rsble	r2, r1, #2
 8005d40:	2201      	movgt	r2, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	e7e0      	b.n	8005d08 <_printf_float+0x1a4>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	055a      	lsls	r2, r3, #21
 8005d4a:	d407      	bmi.n	8005d5c <_printf_float+0x1f8>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	4642      	mov	r2, r8
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d12c      	bne.n	8005db4 <_printf_float+0x250>
 8005d5a:	e764      	b.n	8005c26 <_printf_float+0xc2>
 8005d5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d60:	f240 80e0 	bls.w	8005f24 <_printf_float+0x3c0>
 8005d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fa fecc 	bl	8000b08 <__aeabi_dcmpeq>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d034      	beq.n	8005dde <_printf_float+0x27a>
 8005d74:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <_printf_float+0x2f0>)
 8005d76:	2301      	movs	r3, #1
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f af51 	beq.w	8005c26 <_printf_float+0xc2>
 8005d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	db02      	blt.n	8005d92 <_printf_float+0x22e>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07d8      	lsls	r0, r3, #31
 8005d90:	d510      	bpl.n	8005db4 <_printf_float+0x250>
 8005d92:	ee18 3a10 	vmov	r3, s16
 8005d96:	4652      	mov	r2, sl
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f af41 	beq.w	8005c26 <_printf_float+0xc2>
 8005da4:	f04f 0800 	mov.w	r8, #0
 8005da8:	f104 091a 	add.w	r9, r4, #26
 8005dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4543      	cmp	r3, r8
 8005db2:	dc09      	bgt.n	8005dc8 <_printf_float+0x264>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	079b      	lsls	r3, r3, #30
 8005db8:	f100 8105 	bmi.w	8005fc6 <_printf_float+0x462>
 8005dbc:	68e0      	ldr	r0, [r4, #12]
 8005dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	bfb8      	it	lt
 8005dc4:	4618      	movlt	r0, r3
 8005dc6:	e730      	b.n	8005c2a <_printf_float+0xc6>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	464a      	mov	r2, r9
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af27 	beq.w	8005c26 <_printf_float+0xc2>
 8005dd8:	f108 0801 	add.w	r8, r8, #1
 8005ddc:	e7e6      	b.n	8005dac <_printf_float+0x248>
 8005dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc39      	bgt.n	8005e58 <_printf_float+0x2f4>
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <_printf_float+0x2f0>)
 8005de6:	2301      	movs	r3, #1
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f af19 	beq.w	8005c26 <_printf_float+0xc2>
 8005df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d102      	bne.n	8005e02 <_printf_float+0x29e>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	d5d8      	bpl.n	8005db4 <_printf_float+0x250>
 8005e02:	ee18 3a10 	vmov	r3, s16
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f af09 	beq.w	8005c26 <_printf_float+0xc2>
 8005e14:	f04f 0900 	mov.w	r9, #0
 8005e18:	f104 0a1a 	add.w	sl, r4, #26
 8005e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1e:	425b      	negs	r3, r3
 8005e20:	454b      	cmp	r3, r9
 8005e22:	dc01      	bgt.n	8005e28 <_printf_float+0x2c4>
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	e792      	b.n	8005d4e <_printf_float+0x1ea>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f aef7 	beq.w	8005c26 <_printf_float+0xc2>
 8005e38:	f109 0901 	add.w	r9, r9, #1
 8005e3c:	e7ee      	b.n	8005e1c <_printf_float+0x2b8>
 8005e3e:	bf00      	nop
 8005e40:	7fefffff 	.word	0x7fefffff
 8005e44:	0800a398 	.word	0x0800a398
 8005e48:	0800a39c 	.word	0x0800a39c
 8005e4c:	0800a3a4 	.word	0x0800a3a4
 8005e50:	0800a3a0 	.word	0x0800a3a0
 8005e54:	0800a3a8 	.word	0x0800a3a8
 8005e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	bfa8      	it	ge
 8005e60:	461a      	movge	r2, r3
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	4691      	mov	r9, r2
 8005e66:	dc37      	bgt.n	8005ed8 <_printf_float+0x374>
 8005e68:	f04f 0b00 	mov.w	fp, #0
 8005e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e70:	f104 021a 	add.w	r2, r4, #26
 8005e74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	eba3 0309 	sub.w	r3, r3, r9
 8005e7c:	455b      	cmp	r3, fp
 8005e7e:	dc33      	bgt.n	8005ee8 <_printf_float+0x384>
 8005e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e84:	429a      	cmp	r2, r3
 8005e86:	db3b      	blt.n	8005f00 <_printf_float+0x39c>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07da      	lsls	r2, r3, #31
 8005e8c:	d438      	bmi.n	8005f00 <_printf_float+0x39c>
 8005e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e90:	9a05      	ldr	r2, [sp, #20]
 8005e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e94:	1a9a      	subs	r2, r3, r2
 8005e96:	eba3 0901 	sub.w	r9, r3, r1
 8005e9a:	4591      	cmp	r9, r2
 8005e9c:	bfa8      	it	ge
 8005e9e:	4691      	movge	r9, r2
 8005ea0:	f1b9 0f00 	cmp.w	r9, #0
 8005ea4:	dc35      	bgt.n	8005f12 <_printf_float+0x3ae>
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eae:	f104 0a1a 	add.w	sl, r4, #26
 8005eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	eba3 0309 	sub.w	r3, r3, r9
 8005ebc:	4543      	cmp	r3, r8
 8005ebe:	f77f af79 	ble.w	8005db4 <_printf_float+0x250>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f aeaa 	beq.w	8005c26 <_printf_float+0xc2>
 8005ed2:	f108 0801 	add.w	r8, r8, #1
 8005ed6:	e7ec      	b.n	8005eb2 <_printf_float+0x34e>
 8005ed8:	4613      	mov	r3, r2
 8005eda:	4631      	mov	r1, r6
 8005edc:	4642      	mov	r2, r8
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d1c0      	bne.n	8005e68 <_printf_float+0x304>
 8005ee6:	e69e      	b.n	8005c26 <_printf_float+0xc2>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	9205      	str	r2, [sp, #20]
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f ae97 	beq.w	8005c26 <_printf_float+0xc2>
 8005ef8:	9a05      	ldr	r2, [sp, #20]
 8005efa:	f10b 0b01 	add.w	fp, fp, #1
 8005efe:	e7b9      	b.n	8005e74 <_printf_float+0x310>
 8005f00:	ee18 3a10 	vmov	r3, s16
 8005f04:	4652      	mov	r2, sl
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1be      	bne.n	8005e8e <_printf_float+0x32a>
 8005f10:	e689      	b.n	8005c26 <_printf_float+0xc2>
 8005f12:	9a05      	ldr	r2, [sp, #20]
 8005f14:	464b      	mov	r3, r9
 8005f16:	4442      	add	r2, r8
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d1c1      	bne.n	8005ea6 <_printf_float+0x342>
 8005f22:	e680      	b.n	8005c26 <_printf_float+0xc2>
 8005f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	dc01      	bgt.n	8005f2e <_printf_float+0x3ca>
 8005f2a:	07db      	lsls	r3, r3, #31
 8005f2c:	d538      	bpl.n	8005fa0 <_printf_float+0x43c>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4642      	mov	r2, r8
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	f43f ae74 	beq.w	8005c26 <_printf_float+0xc2>
 8005f3e:	ee18 3a10 	vmov	r3, s16
 8005f42:	4652      	mov	r2, sl
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f ae6b 	beq.w	8005c26 <_printf_float+0xc2>
 8005f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	f7fa fdd6 	bl	8000b08 <__aeabi_dcmpeq>
 8005f5c:	b9d8      	cbnz	r0, 8005f96 <_printf_float+0x432>
 8005f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f60:	f108 0201 	add.w	r2, r8, #1
 8005f64:	3b01      	subs	r3, #1
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d10e      	bne.n	8005f8e <_printf_float+0x42a>
 8005f70:	e659      	b.n	8005c26 <_printf_float+0xc2>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4652      	mov	r2, sl
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f ae52 	beq.w	8005c26 <_printf_float+0xc2>
 8005f82:	f108 0801 	add.w	r8, r8, #1
 8005f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	4543      	cmp	r3, r8
 8005f8c:	dcf1      	bgt.n	8005f72 <_printf_float+0x40e>
 8005f8e:	464b      	mov	r3, r9
 8005f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f94:	e6dc      	b.n	8005d50 <_printf_float+0x1ec>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	f104 0a1a 	add.w	sl, r4, #26
 8005f9e:	e7f2      	b.n	8005f86 <_printf_float+0x422>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	e7df      	b.n	8005f66 <_printf_float+0x402>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	464a      	mov	r2, r9
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f ae38 	beq.w	8005c26 <_printf_float+0xc2>
 8005fb6:	f108 0801 	add.w	r8, r8, #1
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fbe:	1a5b      	subs	r3, r3, r1
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	dcf0      	bgt.n	8005fa6 <_printf_float+0x442>
 8005fc4:	e6fa      	b.n	8005dbc <_printf_float+0x258>
 8005fc6:	f04f 0800 	mov.w	r8, #0
 8005fca:	f104 0919 	add.w	r9, r4, #25
 8005fce:	e7f4      	b.n	8005fba <_printf_float+0x456>

08005fd0 <_printf_common>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfb8      	it	lt
 8005fe4:	4613      	movlt	r3, r2
 8005fe6:	6033      	str	r3, [r6, #0]
 8005fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fec:	4607      	mov	r7, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b10a      	cbz	r2, 8005ff6 <_printf_common+0x26>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	0699      	lsls	r1, r3, #26
 8005ffa:	bf42      	ittt	mi
 8005ffc:	6833      	ldrmi	r3, [r6, #0]
 8005ffe:	3302      	addmi	r3, #2
 8006000:	6033      	strmi	r3, [r6, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	f015 0506 	ands.w	r5, r5, #6
 8006008:	d106      	bne.n	8006018 <_printf_common+0x48>
 800600a:	f104 0a19 	add.w	sl, r4, #25
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc26      	bgt.n	8006066 <_printf_common+0x96>
 8006018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800601c:	1e13      	subs	r3, r2, #0
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	bf18      	it	ne
 8006022:	2301      	movne	r3, #1
 8006024:	0692      	lsls	r2, r2, #26
 8006026:	d42b      	bmi.n	8006080 <_printf_common+0xb0>
 8006028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800602c:	4649      	mov	r1, r9
 800602e:	4638      	mov	r0, r7
 8006030:	47c0      	blx	r8
 8006032:	3001      	adds	r0, #1
 8006034:	d01e      	beq.n	8006074 <_printf_common+0xa4>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	68e5      	ldr	r5, [r4, #12]
 800603a:	6832      	ldr	r2, [r6, #0]
 800603c:	f003 0306 	and.w	r3, r3, #6
 8006040:	2b04      	cmp	r3, #4
 8006042:	bf08      	it	eq
 8006044:	1aad      	subeq	r5, r5, r2
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	bf0c      	ite	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	2500      	movne	r5, #0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfc4      	itt	gt
 8006056:	1a9b      	subgt	r3, r3, r2
 8006058:	18ed      	addgt	r5, r5, r3
 800605a:	2600      	movs	r6, #0
 800605c:	341a      	adds	r4, #26
 800605e:	42b5      	cmp	r5, r6
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xc8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xa8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4649      	mov	r1, r9
 800606c:	4638      	mov	r0, r7
 800606e:	47c0      	blx	r8
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xac>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c6      	b.n	800600e <_printf_common+0x3e>
 8006080:	18e1      	adds	r1, r4, r3
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	2030      	movs	r0, #48	; 0x30
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800608a:	4422      	add	r2, r4
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006094:	3302      	adds	r3, #2
 8006096:	e7c7      	b.n	8006028 <_printf_common+0x58>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d9      	b.n	800605e <_printf_common+0x8e>
	...

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b4:	2f78      	cmp	r7, #120	; 0x78
 80060b6:	4691      	mov	r9, r2
 80060b8:	4680      	mov	r8, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	469a      	mov	sl, r3
 80060be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	; 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d8 	beq.w	800627e <_printf_i+0x1d2>
 80060ce:	2f58      	cmp	r7, #88	; 0x58
 80060d0:	f000 80a3 	beq.w	800621a <_printf_i+0x16e>
 80060d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	; (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006265 	.word	0x08006265
 800611c:	08006189 	.word	0x08006189
 8006120:	08006247 	.word	0x08006247
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	08006287 	.word	0x08006287
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006189 	.word	0x08006189
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	0800624f 	.word	0x0800624f
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e0a3      	b.n	80062a0 <_printf_i+0x1f4>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	6829      	ldr	r1, [r5, #0]
 800615c:	0606      	lsls	r6, r0, #24
 800615e:	f101 0304 	add.w	r3, r1, #4
 8006162:	d50a      	bpl.n	800617a <_printf_i+0xce>
 8006164:	680e      	ldr	r6, [r1, #0]
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	2e00      	cmp	r6, #0
 800616a:	da03      	bge.n	8006174 <_printf_i+0xc8>
 800616c:	232d      	movs	r3, #45	; 0x2d
 800616e:	4276      	negs	r6, r6
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006174:	485e      	ldr	r0, [pc, #376]	; (80062f0 <_printf_i+0x244>)
 8006176:	230a      	movs	r3, #10
 8006178:	e019      	b.n	80061ae <_printf_i+0x102>
 800617a:	680e      	ldr	r6, [r1, #0]
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006182:	bf18      	it	ne
 8006184:	b236      	sxthne	r6, r6
 8006186:	e7ef      	b.n	8006168 <_printf_i+0xbc>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	1d19      	adds	r1, r3, #4
 800618e:	6029      	str	r1, [r5, #0]
 8006190:	0601      	lsls	r1, r0, #24
 8006192:	d501      	bpl.n	8006198 <_printf_i+0xec>
 8006194:	681e      	ldr	r6, [r3, #0]
 8006196:	e002      	b.n	800619e <_printf_i+0xf2>
 8006198:	0646      	lsls	r6, r0, #25
 800619a:	d5fb      	bpl.n	8006194 <_printf_i+0xe8>
 800619c:	881e      	ldrh	r6, [r3, #0]
 800619e:	4854      	ldr	r0, [pc, #336]	; (80062f0 <_printf_i+0x244>)
 80061a0:	2f6f      	cmp	r7, #111	; 0x6f
 80061a2:	bf0c      	ite	eq
 80061a4:	2308      	moveq	r3, #8
 80061a6:	230a      	movne	r3, #10
 80061a8:	2100      	movs	r1, #0
 80061aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ae:	6865      	ldr	r5, [r4, #4]
 80061b0:	60a5      	str	r5, [r4, #8]
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	bfa2      	ittt	ge
 80061b6:	6821      	ldrge	r1, [r4, #0]
 80061b8:	f021 0104 	bicge.w	r1, r1, #4
 80061bc:	6021      	strge	r1, [r4, #0]
 80061be:	b90e      	cbnz	r6, 80061c4 <_printf_i+0x118>
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	d04d      	beq.n	8006260 <_printf_i+0x1b4>
 80061c4:	4615      	mov	r5, r2
 80061c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ca:	fb03 6711 	mls	r7, r3, r1, r6
 80061ce:	5dc7      	ldrb	r7, [r0, r7]
 80061d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061d4:	4637      	mov	r7, r6
 80061d6:	42bb      	cmp	r3, r7
 80061d8:	460e      	mov	r6, r1
 80061da:	d9f4      	bls.n	80061c6 <_printf_i+0x11a>
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10b      	bne.n	80061f8 <_printf_i+0x14c>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	07de      	lsls	r6, r3, #31
 80061e4:	d508      	bpl.n	80061f8 <_printf_i+0x14c>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6861      	ldr	r1, [r4, #4]
 80061ea:	4299      	cmp	r1, r3
 80061ec:	bfde      	ittt	le
 80061ee:	2330      	movle	r3, #48	; 0x30
 80061f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f8:	1b52      	subs	r2, r2, r5
 80061fa:	6122      	str	r2, [r4, #16]
 80061fc:	f8cd a000 	str.w	sl, [sp]
 8006200:	464b      	mov	r3, r9
 8006202:	aa03      	add	r2, sp, #12
 8006204:	4621      	mov	r1, r4
 8006206:	4640      	mov	r0, r8
 8006208:	f7ff fee2 	bl	8005fd0 <_printf_common>
 800620c:	3001      	adds	r0, #1
 800620e:	d14c      	bne.n	80062aa <_printf_i+0x1fe>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	b004      	add	sp, #16
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	4835      	ldr	r0, [pc, #212]	; (80062f0 <_printf_i+0x244>)
 800621c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006220:	6829      	ldr	r1, [r5, #0]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f851 6b04 	ldr.w	r6, [r1], #4
 8006228:	6029      	str	r1, [r5, #0]
 800622a:	061d      	lsls	r5, r3, #24
 800622c:	d514      	bpl.n	8006258 <_printf_i+0x1ac>
 800622e:	07df      	lsls	r7, r3, #31
 8006230:	bf44      	itt	mi
 8006232:	f043 0320 	orrmi.w	r3, r3, #32
 8006236:	6023      	strmi	r3, [r4, #0]
 8006238:	b91e      	cbnz	r6, 8006242 <_printf_i+0x196>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f023 0320 	bic.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	2310      	movs	r3, #16
 8006244:	e7b0      	b.n	80061a8 <_printf_i+0xfc>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	f043 0320 	orr.w	r3, r3, #32
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	2378      	movs	r3, #120	; 0x78
 8006250:	4828      	ldr	r0, [pc, #160]	; (80062f4 <_printf_i+0x248>)
 8006252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006256:	e7e3      	b.n	8006220 <_printf_i+0x174>
 8006258:	0659      	lsls	r1, r3, #25
 800625a:	bf48      	it	mi
 800625c:	b2b6      	uxthmi	r6, r6
 800625e:	e7e6      	b.n	800622e <_printf_i+0x182>
 8006260:	4615      	mov	r5, r2
 8006262:	e7bb      	b.n	80061dc <_printf_i+0x130>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	6826      	ldr	r6, [r4, #0]
 8006268:	6961      	ldr	r1, [r4, #20]
 800626a:	1d18      	adds	r0, r3, #4
 800626c:	6028      	str	r0, [r5, #0]
 800626e:	0635      	lsls	r5, r6, #24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	d501      	bpl.n	8006278 <_printf_i+0x1cc>
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	e002      	b.n	800627e <_printf_i+0x1d2>
 8006278:	0670      	lsls	r0, r6, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0x1c8>
 800627c:	8019      	strh	r1, [r3, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	4615      	mov	r5, r2
 8006284:	e7ba      	b.n	80061fc <_printf_i+0x150>
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	1d1a      	adds	r2, r3, #4
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	2100      	movs	r1, #0
 8006292:	4628      	mov	r0, r5
 8006294:	f7f9 ffc4 	bl	8000220 <memchr>
 8006298:	b108      	cbz	r0, 800629e <_printf_i+0x1f2>
 800629a:	1b40      	subs	r0, r0, r5
 800629c:	6060      	str	r0, [r4, #4]
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	2300      	movs	r3, #0
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a8:	e7a8      	b.n	80061fc <_printf_i+0x150>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	462a      	mov	r2, r5
 80062ae:	4649      	mov	r1, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	47d0      	blx	sl
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0ab      	beq.n	8006210 <_printf_i+0x164>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	079b      	lsls	r3, r3, #30
 80062bc:	d413      	bmi.n	80062e6 <_printf_i+0x23a>
 80062be:	68e0      	ldr	r0, [r4, #12]
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	4298      	cmp	r0, r3
 80062c4:	bfb8      	it	lt
 80062c6:	4618      	movlt	r0, r3
 80062c8:	e7a4      	b.n	8006214 <_printf_i+0x168>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4632      	mov	r2, r6
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	47d0      	blx	sl
 80062d4:	3001      	adds	r0, #1
 80062d6:	d09b      	beq.n	8006210 <_printf_i+0x164>
 80062d8:	3501      	adds	r5, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	9903      	ldr	r1, [sp, #12]
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	dcf2      	bgt.n	80062ca <_printf_i+0x21e>
 80062e4:	e7eb      	b.n	80062be <_printf_i+0x212>
 80062e6:	2500      	movs	r5, #0
 80062e8:	f104 0619 	add.w	r6, r4, #25
 80062ec:	e7f5      	b.n	80062da <_printf_i+0x22e>
 80062ee:	bf00      	nop
 80062f0:	0800a3aa 	.word	0x0800a3aa
 80062f4:	0800a3bb 	.word	0x0800a3bb

080062f8 <_scanf_float>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	b087      	sub	sp, #28
 80062fe:	4617      	mov	r7, r2
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	688b      	ldr	r3, [r1, #8]
 8006304:	1e5a      	subs	r2, r3, #1
 8006306:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800630a:	bf83      	ittte	hi
 800630c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006310:	195b      	addhi	r3, r3, r5
 8006312:	9302      	strhi	r3, [sp, #8]
 8006314:	2300      	movls	r3, #0
 8006316:	bf86      	itte	hi
 8006318:	f240 135d 	movwhi	r3, #349	; 0x15d
 800631c:	608b      	strhi	r3, [r1, #8]
 800631e:	9302      	strls	r3, [sp, #8]
 8006320:	680b      	ldr	r3, [r1, #0]
 8006322:	468b      	mov	fp, r1
 8006324:	2500      	movs	r5, #0
 8006326:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800632a:	f84b 3b1c 	str.w	r3, [fp], #28
 800632e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006332:	4680      	mov	r8, r0
 8006334:	460c      	mov	r4, r1
 8006336:	465e      	mov	r6, fp
 8006338:	46aa      	mov	sl, r5
 800633a:	46a9      	mov	r9, r5
 800633c:	9501      	str	r5, [sp, #4]
 800633e:	68a2      	ldr	r2, [r4, #8]
 8006340:	b152      	cbz	r2, 8006358 <_scanf_float+0x60>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b4e      	cmp	r3, #78	; 0x4e
 8006348:	d864      	bhi.n	8006414 <_scanf_float+0x11c>
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d83c      	bhi.n	80063c8 <_scanf_float+0xd0>
 800634e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006352:	b2c8      	uxtb	r0, r1
 8006354:	280e      	cmp	r0, #14
 8006356:	d93a      	bls.n	80063ce <_scanf_float+0xd6>
 8006358:	f1b9 0f00 	cmp.w	r9, #0
 800635c:	d003      	beq.n	8006366 <_scanf_float+0x6e>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800636a:	f1ba 0f01 	cmp.w	sl, #1
 800636e:	f200 8113 	bhi.w	8006598 <_scanf_float+0x2a0>
 8006372:	455e      	cmp	r6, fp
 8006374:	f200 8105 	bhi.w	8006582 <_scanf_float+0x28a>
 8006378:	2501      	movs	r5, #1
 800637a:	4628      	mov	r0, r5
 800637c:	b007      	add	sp, #28
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006382:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006386:	2a0d      	cmp	r2, #13
 8006388:	d8e6      	bhi.n	8006358 <_scanf_float+0x60>
 800638a:	a101      	add	r1, pc, #4	; (adr r1, 8006390 <_scanf_float+0x98>)
 800638c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006390:	080064cf 	.word	0x080064cf
 8006394:	08006359 	.word	0x08006359
 8006398:	08006359 	.word	0x08006359
 800639c:	08006359 	.word	0x08006359
 80063a0:	0800652f 	.word	0x0800652f
 80063a4:	08006507 	.word	0x08006507
 80063a8:	08006359 	.word	0x08006359
 80063ac:	08006359 	.word	0x08006359
 80063b0:	080064dd 	.word	0x080064dd
 80063b4:	08006359 	.word	0x08006359
 80063b8:	08006359 	.word	0x08006359
 80063bc:	08006359 	.word	0x08006359
 80063c0:	08006359 	.word	0x08006359
 80063c4:	08006495 	.word	0x08006495
 80063c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80063cc:	e7db      	b.n	8006386 <_scanf_float+0x8e>
 80063ce:	290e      	cmp	r1, #14
 80063d0:	d8c2      	bhi.n	8006358 <_scanf_float+0x60>
 80063d2:	a001      	add	r0, pc, #4	; (adr r0, 80063d8 <_scanf_float+0xe0>)
 80063d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063d8:	08006487 	.word	0x08006487
 80063dc:	08006359 	.word	0x08006359
 80063e0:	08006487 	.word	0x08006487
 80063e4:	0800651b 	.word	0x0800651b
 80063e8:	08006359 	.word	0x08006359
 80063ec:	08006435 	.word	0x08006435
 80063f0:	08006471 	.word	0x08006471
 80063f4:	08006471 	.word	0x08006471
 80063f8:	08006471 	.word	0x08006471
 80063fc:	08006471 	.word	0x08006471
 8006400:	08006471 	.word	0x08006471
 8006404:	08006471 	.word	0x08006471
 8006408:	08006471 	.word	0x08006471
 800640c:	08006471 	.word	0x08006471
 8006410:	08006471 	.word	0x08006471
 8006414:	2b6e      	cmp	r3, #110	; 0x6e
 8006416:	d809      	bhi.n	800642c <_scanf_float+0x134>
 8006418:	2b60      	cmp	r3, #96	; 0x60
 800641a:	d8b2      	bhi.n	8006382 <_scanf_float+0x8a>
 800641c:	2b54      	cmp	r3, #84	; 0x54
 800641e:	d077      	beq.n	8006510 <_scanf_float+0x218>
 8006420:	2b59      	cmp	r3, #89	; 0x59
 8006422:	d199      	bne.n	8006358 <_scanf_float+0x60>
 8006424:	2d07      	cmp	r5, #7
 8006426:	d197      	bne.n	8006358 <_scanf_float+0x60>
 8006428:	2508      	movs	r5, #8
 800642a:	e029      	b.n	8006480 <_scanf_float+0x188>
 800642c:	2b74      	cmp	r3, #116	; 0x74
 800642e:	d06f      	beq.n	8006510 <_scanf_float+0x218>
 8006430:	2b79      	cmp	r3, #121	; 0x79
 8006432:	e7f6      	b.n	8006422 <_scanf_float+0x12a>
 8006434:	6821      	ldr	r1, [r4, #0]
 8006436:	05c8      	lsls	r0, r1, #23
 8006438:	d51a      	bpl.n	8006470 <_scanf_float+0x178>
 800643a:	9b02      	ldr	r3, [sp, #8]
 800643c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006440:	6021      	str	r1, [r4, #0]
 8006442:	f109 0901 	add.w	r9, r9, #1
 8006446:	b11b      	cbz	r3, 8006450 <_scanf_float+0x158>
 8006448:	3b01      	subs	r3, #1
 800644a:	3201      	adds	r2, #1
 800644c:	9302      	str	r3, [sp, #8]
 800644e:	60a2      	str	r2, [r4, #8]
 8006450:	68a3      	ldr	r3, [r4, #8]
 8006452:	3b01      	subs	r3, #1
 8006454:	60a3      	str	r3, [r4, #8]
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3b01      	subs	r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	f340 8084 	ble.w	8006570 <_scanf_float+0x278>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	e766      	b.n	800633e <_scanf_float+0x46>
 8006470:	eb1a 0f05 	cmn.w	sl, r5
 8006474:	f47f af70 	bne.w	8006358 <_scanf_float+0x60>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800647e:	6022      	str	r2, [r4, #0]
 8006480:	f806 3b01 	strb.w	r3, [r6], #1
 8006484:	e7e4      	b.n	8006450 <_scanf_float+0x158>
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	0610      	lsls	r0, r2, #24
 800648a:	f57f af65 	bpl.w	8006358 <_scanf_float+0x60>
 800648e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006492:	e7f4      	b.n	800647e <_scanf_float+0x186>
 8006494:	f1ba 0f00 	cmp.w	sl, #0
 8006498:	d10e      	bne.n	80064b8 <_scanf_float+0x1c0>
 800649a:	f1b9 0f00 	cmp.w	r9, #0
 800649e:	d10e      	bne.n	80064be <_scanf_float+0x1c6>
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064aa:	d108      	bne.n	80064be <_scanf_float+0x1c6>
 80064ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	f04f 0a01 	mov.w	sl, #1
 80064b6:	e7e3      	b.n	8006480 <_scanf_float+0x188>
 80064b8:	f1ba 0f02 	cmp.w	sl, #2
 80064bc:	d055      	beq.n	800656a <_scanf_float+0x272>
 80064be:	2d01      	cmp	r5, #1
 80064c0:	d002      	beq.n	80064c8 <_scanf_float+0x1d0>
 80064c2:	2d04      	cmp	r5, #4
 80064c4:	f47f af48 	bne.w	8006358 <_scanf_float+0x60>
 80064c8:	3501      	adds	r5, #1
 80064ca:	b2ed      	uxtb	r5, r5
 80064cc:	e7d8      	b.n	8006480 <_scanf_float+0x188>
 80064ce:	f1ba 0f01 	cmp.w	sl, #1
 80064d2:	f47f af41 	bne.w	8006358 <_scanf_float+0x60>
 80064d6:	f04f 0a02 	mov.w	sl, #2
 80064da:	e7d1      	b.n	8006480 <_scanf_float+0x188>
 80064dc:	b97d      	cbnz	r5, 80064fe <_scanf_float+0x206>
 80064de:	f1b9 0f00 	cmp.w	r9, #0
 80064e2:	f47f af3c 	bne.w	800635e <_scanf_float+0x66>
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064f0:	f47f af39 	bne.w	8006366 <_scanf_float+0x6e>
 80064f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064f8:	6022      	str	r2, [r4, #0]
 80064fa:	2501      	movs	r5, #1
 80064fc:	e7c0      	b.n	8006480 <_scanf_float+0x188>
 80064fe:	2d03      	cmp	r5, #3
 8006500:	d0e2      	beq.n	80064c8 <_scanf_float+0x1d0>
 8006502:	2d05      	cmp	r5, #5
 8006504:	e7de      	b.n	80064c4 <_scanf_float+0x1cc>
 8006506:	2d02      	cmp	r5, #2
 8006508:	f47f af26 	bne.w	8006358 <_scanf_float+0x60>
 800650c:	2503      	movs	r5, #3
 800650e:	e7b7      	b.n	8006480 <_scanf_float+0x188>
 8006510:	2d06      	cmp	r5, #6
 8006512:	f47f af21 	bne.w	8006358 <_scanf_float+0x60>
 8006516:	2507      	movs	r5, #7
 8006518:	e7b2      	b.n	8006480 <_scanf_float+0x188>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	0591      	lsls	r1, r2, #22
 800651e:	f57f af1b 	bpl.w	8006358 <_scanf_float+0x60>
 8006522:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	f8cd 9004 	str.w	r9, [sp, #4]
 800652c:	e7a8      	b.n	8006480 <_scanf_float+0x188>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006534:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006538:	d006      	beq.n	8006548 <_scanf_float+0x250>
 800653a:	0550      	lsls	r0, r2, #21
 800653c:	f57f af0c 	bpl.w	8006358 <_scanf_float+0x60>
 8006540:	f1b9 0f00 	cmp.w	r9, #0
 8006544:	f43f af0f 	beq.w	8006366 <_scanf_float+0x6e>
 8006548:	0591      	lsls	r1, r2, #22
 800654a:	bf58      	it	pl
 800654c:	9901      	ldrpl	r1, [sp, #4]
 800654e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006552:	bf58      	it	pl
 8006554:	eba9 0101 	subpl.w	r1, r9, r1
 8006558:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800655c:	bf58      	it	pl
 800655e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	f04f 0900 	mov.w	r9, #0
 8006568:	e78a      	b.n	8006480 <_scanf_float+0x188>
 800656a:	f04f 0a03 	mov.w	sl, #3
 800656e:	e787      	b.n	8006480 <_scanf_float+0x188>
 8006570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006574:	4639      	mov	r1, r7
 8006576:	4640      	mov	r0, r8
 8006578:	4798      	blx	r3
 800657a:	2800      	cmp	r0, #0
 800657c:	f43f aedf 	beq.w	800633e <_scanf_float+0x46>
 8006580:	e6ea      	b.n	8006358 <_scanf_float+0x60>
 8006582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800658a:	463a      	mov	r2, r7
 800658c:	4640      	mov	r0, r8
 800658e:	4798      	blx	r3
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	3b01      	subs	r3, #1
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	e6ec      	b.n	8006372 <_scanf_float+0x7a>
 8006598:	1e6b      	subs	r3, r5, #1
 800659a:	2b06      	cmp	r3, #6
 800659c:	d825      	bhi.n	80065ea <_scanf_float+0x2f2>
 800659e:	2d02      	cmp	r5, #2
 80065a0:	d836      	bhi.n	8006610 <_scanf_float+0x318>
 80065a2:	455e      	cmp	r6, fp
 80065a4:	f67f aee8 	bls.w	8006378 <_scanf_float+0x80>
 80065a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065b0:	463a      	mov	r2, r7
 80065b2:	4640      	mov	r0, r8
 80065b4:	4798      	blx	r3
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	e7f1      	b.n	80065a2 <_scanf_float+0x2aa>
 80065be:	9802      	ldr	r0, [sp, #8]
 80065c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80065c8:	9002      	str	r0, [sp, #8]
 80065ca:	463a      	mov	r2, r7
 80065cc:	4640      	mov	r0, r8
 80065ce:	4798      	blx	r3
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	6123      	str	r3, [r4, #16]
 80065d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065da:	fa5f fa8a 	uxtb.w	sl, sl
 80065de:	f1ba 0f02 	cmp.w	sl, #2
 80065e2:	d1ec      	bne.n	80065be <_scanf_float+0x2c6>
 80065e4:	3d03      	subs	r5, #3
 80065e6:	b2ed      	uxtb	r5, r5
 80065e8:	1b76      	subs	r6, r6, r5
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	05da      	lsls	r2, r3, #23
 80065ee:	d52f      	bpl.n	8006650 <_scanf_float+0x358>
 80065f0:	055b      	lsls	r3, r3, #21
 80065f2:	d510      	bpl.n	8006616 <_scanf_float+0x31e>
 80065f4:	455e      	cmp	r6, fp
 80065f6:	f67f aebf 	bls.w	8006378 <_scanf_float+0x80>
 80065fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006602:	463a      	mov	r2, r7
 8006604:	4640      	mov	r0, r8
 8006606:	4798      	blx	r3
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	3b01      	subs	r3, #1
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	e7f1      	b.n	80065f4 <_scanf_float+0x2fc>
 8006610:	46aa      	mov	sl, r5
 8006612:	9602      	str	r6, [sp, #8]
 8006614:	e7df      	b.n	80065d6 <_scanf_float+0x2de>
 8006616:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	2965      	cmp	r1, #101	; 0x65
 800661e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006622:	f106 35ff 	add.w	r5, r6, #4294967295
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	d00c      	beq.n	8006644 <_scanf_float+0x34c>
 800662a:	2945      	cmp	r1, #69	; 0x45
 800662c:	d00a      	beq.n	8006644 <_scanf_float+0x34c>
 800662e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006632:	463a      	mov	r2, r7
 8006634:	4640      	mov	r0, r8
 8006636:	4798      	blx	r3
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800663e:	3b01      	subs	r3, #1
 8006640:	1eb5      	subs	r5, r6, #2
 8006642:	6123      	str	r3, [r4, #16]
 8006644:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006648:	463a      	mov	r2, r7
 800664a:	4640      	mov	r0, r8
 800664c:	4798      	blx	r3
 800664e:	462e      	mov	r6, r5
 8006650:	6825      	ldr	r5, [r4, #0]
 8006652:	f015 0510 	ands.w	r5, r5, #16
 8006656:	d159      	bne.n	800670c <_scanf_float+0x414>
 8006658:	7035      	strb	r5, [r6, #0]
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d11b      	bne.n	800669e <_scanf_float+0x3a6>
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	454b      	cmp	r3, r9
 800666a:	eba3 0209 	sub.w	r2, r3, r9
 800666e:	d123      	bne.n	80066b8 <_scanf_float+0x3c0>
 8006670:	2200      	movs	r2, #0
 8006672:	4659      	mov	r1, fp
 8006674:	4640      	mov	r0, r8
 8006676:	f000 fead 	bl	80073d4 <_strtod_r>
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	f012 0f02 	tst.w	r2, #2
 8006682:	ec57 6b10 	vmov	r6, r7, d0
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	d021      	beq.n	80066ce <_scanf_float+0x3d6>
 800668a:	9903      	ldr	r1, [sp, #12]
 800668c:	1d1a      	adds	r2, r3, #4
 800668e:	600a      	str	r2, [r1, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	e9c3 6700 	strd	r6, r7, [r3]
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60e3      	str	r3, [r4, #12]
 800669c:	e66d      	b.n	800637a <_scanf_float+0x82>
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0e5      	beq.n	8006670 <_scanf_float+0x378>
 80066a4:	9905      	ldr	r1, [sp, #20]
 80066a6:	230a      	movs	r3, #10
 80066a8:	462a      	mov	r2, r5
 80066aa:	3101      	adds	r1, #1
 80066ac:	4640      	mov	r0, r8
 80066ae:	f000 ff19 	bl	80074e4 <_strtol_r>
 80066b2:	9b04      	ldr	r3, [sp, #16]
 80066b4:	9e05      	ldr	r6, [sp, #20]
 80066b6:	1ac2      	subs	r2, r0, r3
 80066b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80066bc:	429e      	cmp	r6, r3
 80066be:	bf28      	it	cs
 80066c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80066c4:	4912      	ldr	r1, [pc, #72]	; (8006710 <_scanf_float+0x418>)
 80066c6:	4630      	mov	r0, r6
 80066c8:	f000 f82c 	bl	8006724 <siprintf>
 80066cc:	e7d0      	b.n	8006670 <_scanf_float+0x378>
 80066ce:	9903      	ldr	r1, [sp, #12]
 80066d0:	f012 0f04 	tst.w	r2, #4
 80066d4:	f103 0204 	add.w	r2, r3, #4
 80066d8:	600a      	str	r2, [r1, #0]
 80066da:	d1d9      	bne.n	8006690 <_scanf_float+0x398>
 80066dc:	f8d3 8000 	ldr.w	r8, [r3]
 80066e0:	ee10 2a10 	vmov	r2, s0
 80066e4:	ee10 0a10 	vmov	r0, s0
 80066e8:	463b      	mov	r3, r7
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7fa fa3e 	bl	8000b6c <__aeabi_dcmpun>
 80066f0:	b128      	cbz	r0, 80066fe <_scanf_float+0x406>
 80066f2:	4808      	ldr	r0, [pc, #32]	; (8006714 <_scanf_float+0x41c>)
 80066f4:	f000 f810 	bl	8006718 <nanf>
 80066f8:	ed88 0a00 	vstr	s0, [r8]
 80066fc:	e7cb      	b.n	8006696 <_scanf_float+0x39e>
 80066fe:	4630      	mov	r0, r6
 8006700:	4639      	mov	r1, r7
 8006702:	f7fa fa91 	bl	8000c28 <__aeabi_d2f>
 8006706:	f8c8 0000 	str.w	r0, [r8]
 800670a:	e7c4      	b.n	8006696 <_scanf_float+0x39e>
 800670c:	2500      	movs	r5, #0
 800670e:	e634      	b.n	800637a <_scanf_float+0x82>
 8006710:	0800a3cc 	.word	0x0800a3cc
 8006714:	0800a7d8 	.word	0x0800a7d8

08006718 <nanf>:
 8006718:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006720 <nanf+0x8>
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	7fc00000 	.word	0x7fc00000

08006724 <siprintf>:
 8006724:	b40e      	push	{r1, r2, r3}
 8006726:	b500      	push	{lr}
 8006728:	b09c      	sub	sp, #112	; 0x70
 800672a:	ab1d      	add	r3, sp, #116	; 0x74
 800672c:	9002      	str	r0, [sp, #8]
 800672e:	9006      	str	r0, [sp, #24]
 8006730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006734:	4809      	ldr	r0, [pc, #36]	; (800675c <siprintf+0x38>)
 8006736:	9107      	str	r1, [sp, #28]
 8006738:	9104      	str	r1, [sp, #16]
 800673a:	4909      	ldr	r1, [pc, #36]	; (8006760 <siprintf+0x3c>)
 800673c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006740:	9105      	str	r1, [sp, #20]
 8006742:	6800      	ldr	r0, [r0, #0]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	a902      	add	r1, sp, #8
 8006748:	f002 fef8 	bl	800953c <_svfiprintf_r>
 800674c:	9b02      	ldr	r3, [sp, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	b01c      	add	sp, #112	; 0x70
 8006754:	f85d eb04 	ldr.w	lr, [sp], #4
 8006758:	b003      	add	sp, #12
 800675a:	4770      	bx	lr
 800675c:	2000000c 	.word	0x2000000c
 8006760:	ffff0208 	.word	0xffff0208

08006764 <strncpy>:
 8006764:	b510      	push	{r4, lr}
 8006766:	3901      	subs	r1, #1
 8006768:	4603      	mov	r3, r0
 800676a:	b132      	cbz	r2, 800677a <strncpy+0x16>
 800676c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006770:	f803 4b01 	strb.w	r4, [r3], #1
 8006774:	3a01      	subs	r2, #1
 8006776:	2c00      	cmp	r4, #0
 8006778:	d1f7      	bne.n	800676a <strncpy+0x6>
 800677a:	441a      	add	r2, r3
 800677c:	2100      	movs	r1, #0
 800677e:	4293      	cmp	r3, r2
 8006780:	d100      	bne.n	8006784 <strncpy+0x20>
 8006782:	bd10      	pop	{r4, pc}
 8006784:	f803 1b01 	strb.w	r1, [r3], #1
 8006788:	e7f9      	b.n	800677e <strncpy+0x1a>

0800678a <sulp>:
 800678a:	b570      	push	{r4, r5, r6, lr}
 800678c:	4604      	mov	r4, r0
 800678e:	460d      	mov	r5, r1
 8006790:	ec45 4b10 	vmov	d0, r4, r5
 8006794:	4616      	mov	r6, r2
 8006796:	f002 fc2f 	bl	8008ff8 <__ulp>
 800679a:	ec51 0b10 	vmov	r0, r1, d0
 800679e:	b17e      	cbz	r6, 80067c0 <sulp+0x36>
 80067a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dd09      	ble.n	80067c0 <sulp+0x36>
 80067ac:	051b      	lsls	r3, r3, #20
 80067ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067b2:	2400      	movs	r4, #0
 80067b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067b8:	4622      	mov	r2, r4
 80067ba:	462b      	mov	r3, r5
 80067bc:	f7f9 ff3c 	bl	8000638 <__aeabi_dmul>
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	0000      	movs	r0, r0
 80067c4:	0000      	movs	r0, r0
	...

080067c8 <_strtod_l>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	ed2d 8b02 	vpush	{d8}
 80067d0:	b09d      	sub	sp, #116	; 0x74
 80067d2:	461f      	mov	r7, r3
 80067d4:	2300      	movs	r3, #0
 80067d6:	9318      	str	r3, [sp, #96]	; 0x60
 80067d8:	4ba2      	ldr	r3, [pc, #648]	; (8006a64 <_strtod_l+0x29c>)
 80067da:	9213      	str	r2, [sp, #76]	; 0x4c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	9305      	str	r3, [sp, #20]
 80067e0:	4604      	mov	r4, r0
 80067e2:	4618      	mov	r0, r3
 80067e4:	4688      	mov	r8, r1
 80067e6:	f7f9 fd13 	bl	8000210 <strlen>
 80067ea:	f04f 0a00 	mov.w	sl, #0
 80067ee:	4605      	mov	r5, r0
 80067f0:	f04f 0b00 	mov.w	fp, #0
 80067f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	2a2b      	cmp	r2, #43	; 0x2b
 80067fe:	d04e      	beq.n	800689e <_strtod_l+0xd6>
 8006800:	d83b      	bhi.n	800687a <_strtod_l+0xb2>
 8006802:	2a0d      	cmp	r2, #13
 8006804:	d834      	bhi.n	8006870 <_strtod_l+0xa8>
 8006806:	2a08      	cmp	r2, #8
 8006808:	d834      	bhi.n	8006874 <_strtod_l+0xac>
 800680a:	2a00      	cmp	r2, #0
 800680c:	d03e      	beq.n	800688c <_strtod_l+0xc4>
 800680e:	2300      	movs	r3, #0
 8006810:	930a      	str	r3, [sp, #40]	; 0x28
 8006812:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006814:	7833      	ldrb	r3, [r6, #0]
 8006816:	2b30      	cmp	r3, #48	; 0x30
 8006818:	f040 80b0 	bne.w	800697c <_strtod_l+0x1b4>
 800681c:	7873      	ldrb	r3, [r6, #1]
 800681e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006822:	2b58      	cmp	r3, #88	; 0x58
 8006824:	d168      	bne.n	80068f8 <_strtod_l+0x130>
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	ab18      	add	r3, sp, #96	; 0x60
 800682c:	9702      	str	r7, [sp, #8]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	4a8d      	ldr	r2, [pc, #564]	; (8006a68 <_strtod_l+0x2a0>)
 8006832:	ab19      	add	r3, sp, #100	; 0x64
 8006834:	a917      	add	r1, sp, #92	; 0x5c
 8006836:	4620      	mov	r0, r4
 8006838:	f001 fd38 	bl	80082ac <__gethex>
 800683c:	f010 0707 	ands.w	r7, r0, #7
 8006840:	4605      	mov	r5, r0
 8006842:	d005      	beq.n	8006850 <_strtod_l+0x88>
 8006844:	2f06      	cmp	r7, #6
 8006846:	d12c      	bne.n	80068a2 <_strtod_l+0xda>
 8006848:	3601      	adds	r6, #1
 800684a:	2300      	movs	r3, #0
 800684c:	9617      	str	r6, [sp, #92]	; 0x5c
 800684e:	930a      	str	r3, [sp, #40]	; 0x28
 8006850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 8590 	bne.w	8007378 <_strtod_l+0xbb0>
 8006858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685a:	b1eb      	cbz	r3, 8006898 <_strtod_l+0xd0>
 800685c:	4652      	mov	r2, sl
 800685e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006862:	ec43 2b10 	vmov	d0, r2, r3
 8006866:	b01d      	add	sp, #116	; 0x74
 8006868:	ecbd 8b02 	vpop	{d8}
 800686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006870:	2a20      	cmp	r2, #32
 8006872:	d1cc      	bne.n	800680e <_strtod_l+0x46>
 8006874:	3301      	adds	r3, #1
 8006876:	9317      	str	r3, [sp, #92]	; 0x5c
 8006878:	e7be      	b.n	80067f8 <_strtod_l+0x30>
 800687a:	2a2d      	cmp	r2, #45	; 0x2d
 800687c:	d1c7      	bne.n	800680e <_strtod_l+0x46>
 800687e:	2201      	movs	r2, #1
 8006880:	920a      	str	r2, [sp, #40]	; 0x28
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	9217      	str	r2, [sp, #92]	; 0x5c
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1c2      	bne.n	8006812 <_strtod_l+0x4a>
 800688c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800688e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 856e 	bne.w	8007374 <_strtod_l+0xbac>
 8006898:	4652      	mov	r2, sl
 800689a:	465b      	mov	r3, fp
 800689c:	e7e1      	b.n	8006862 <_strtod_l+0x9a>
 800689e:	2200      	movs	r2, #0
 80068a0:	e7ee      	b.n	8006880 <_strtod_l+0xb8>
 80068a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068a4:	b13a      	cbz	r2, 80068b6 <_strtod_l+0xee>
 80068a6:	2135      	movs	r1, #53	; 0x35
 80068a8:	a81a      	add	r0, sp, #104	; 0x68
 80068aa:	f002 fcb0 	bl	800920e <__copybits>
 80068ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068b0:	4620      	mov	r0, r4
 80068b2:	f002 f86f 	bl	8008994 <_Bfree>
 80068b6:	3f01      	subs	r7, #1
 80068b8:	2f04      	cmp	r7, #4
 80068ba:	d806      	bhi.n	80068ca <_strtod_l+0x102>
 80068bc:	e8df f007 	tbb	[pc, r7]
 80068c0:	1714030a 	.word	0x1714030a
 80068c4:	0a          	.byte	0x0a
 80068c5:	00          	.byte	0x00
 80068c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80068ca:	0728      	lsls	r0, r5, #28
 80068cc:	d5c0      	bpl.n	8006850 <_strtod_l+0x88>
 80068ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80068d2:	e7bd      	b.n	8006850 <_strtod_l+0x88>
 80068d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80068d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068e6:	e7f0      	b.n	80068ca <_strtod_l+0x102>
 80068e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006a6c <_strtod_l+0x2a4>
 80068ec:	e7ed      	b.n	80068ca <_strtod_l+0x102>
 80068ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80068f2:	f04f 3aff 	mov.w	sl, #4294967295
 80068f6:	e7e8      	b.n	80068ca <_strtod_l+0x102>
 80068f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b30      	cmp	r3, #48	; 0x30
 8006902:	d0f9      	beq.n	80068f8 <_strtod_l+0x130>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0a3      	beq.n	8006850 <_strtod_l+0x88>
 8006908:	2301      	movs	r3, #1
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006912:	9308      	str	r3, [sp, #32]
 8006914:	f8cd 901c 	str.w	r9, [sp, #28]
 8006918:	464f      	mov	r7, r9
 800691a:	220a      	movs	r2, #10
 800691c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800691e:	7806      	ldrb	r6, [r0, #0]
 8006920:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006924:	b2d9      	uxtb	r1, r3
 8006926:	2909      	cmp	r1, #9
 8006928:	d92a      	bls.n	8006980 <_strtod_l+0x1b8>
 800692a:	9905      	ldr	r1, [sp, #20]
 800692c:	462a      	mov	r2, r5
 800692e:	f002 ff1f 	bl	8009770 <strncmp>
 8006932:	b398      	cbz	r0, 800699c <_strtod_l+0x1d4>
 8006934:	2000      	movs	r0, #0
 8006936:	4632      	mov	r2, r6
 8006938:	463d      	mov	r5, r7
 800693a:	9005      	str	r0, [sp, #20]
 800693c:	4603      	mov	r3, r0
 800693e:	2a65      	cmp	r2, #101	; 0x65
 8006940:	d001      	beq.n	8006946 <_strtod_l+0x17e>
 8006942:	2a45      	cmp	r2, #69	; 0x45
 8006944:	d118      	bne.n	8006978 <_strtod_l+0x1b0>
 8006946:	b91d      	cbnz	r5, 8006950 <_strtod_l+0x188>
 8006948:	9a04      	ldr	r2, [sp, #16]
 800694a:	4302      	orrs	r2, r0
 800694c:	d09e      	beq.n	800688c <_strtod_l+0xc4>
 800694e:	2500      	movs	r5, #0
 8006950:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006954:	f108 0201 	add.w	r2, r8, #1
 8006958:	9217      	str	r2, [sp, #92]	; 0x5c
 800695a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800695e:	2a2b      	cmp	r2, #43	; 0x2b
 8006960:	d075      	beq.n	8006a4e <_strtod_l+0x286>
 8006962:	2a2d      	cmp	r2, #45	; 0x2d
 8006964:	d07b      	beq.n	8006a5e <_strtod_l+0x296>
 8006966:	f04f 0c00 	mov.w	ip, #0
 800696a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800696e:	2909      	cmp	r1, #9
 8006970:	f240 8082 	bls.w	8006a78 <_strtod_l+0x2b0>
 8006974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006978:	2600      	movs	r6, #0
 800697a:	e09d      	b.n	8006ab8 <_strtod_l+0x2f0>
 800697c:	2300      	movs	r3, #0
 800697e:	e7c4      	b.n	800690a <_strtod_l+0x142>
 8006980:	2f08      	cmp	r7, #8
 8006982:	bfd8      	it	le
 8006984:	9907      	ldrle	r1, [sp, #28]
 8006986:	f100 0001 	add.w	r0, r0, #1
 800698a:	bfda      	itte	le
 800698c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006990:	9307      	strle	r3, [sp, #28]
 8006992:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006996:	3701      	adds	r7, #1
 8006998:	9017      	str	r0, [sp, #92]	; 0x5c
 800699a:	e7bf      	b.n	800691c <_strtod_l+0x154>
 800699c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800699e:	195a      	adds	r2, r3, r5
 80069a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80069a2:	5d5a      	ldrb	r2, [r3, r5]
 80069a4:	2f00      	cmp	r7, #0
 80069a6:	d037      	beq.n	8006a18 <_strtod_l+0x250>
 80069a8:	9005      	str	r0, [sp, #20]
 80069aa:	463d      	mov	r5, r7
 80069ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80069b0:	2b09      	cmp	r3, #9
 80069b2:	d912      	bls.n	80069da <_strtod_l+0x212>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e7c2      	b.n	800693e <_strtod_l+0x176>
 80069b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80069be:	785a      	ldrb	r2, [r3, #1]
 80069c0:	3001      	adds	r0, #1
 80069c2:	2a30      	cmp	r2, #48	; 0x30
 80069c4:	d0f8      	beq.n	80069b8 <_strtod_l+0x1f0>
 80069c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	f200 84d9 	bhi.w	8007382 <_strtod_l+0xbba>
 80069d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069d2:	9005      	str	r0, [sp, #20]
 80069d4:	2000      	movs	r0, #0
 80069d6:	9308      	str	r3, [sp, #32]
 80069d8:	4605      	mov	r5, r0
 80069da:	3a30      	subs	r2, #48	; 0x30
 80069dc:	f100 0301 	add.w	r3, r0, #1
 80069e0:	d014      	beq.n	8006a0c <_strtod_l+0x244>
 80069e2:	9905      	ldr	r1, [sp, #20]
 80069e4:	4419      	add	r1, r3
 80069e6:	9105      	str	r1, [sp, #20]
 80069e8:	462b      	mov	r3, r5
 80069ea:	eb00 0e05 	add.w	lr, r0, r5
 80069ee:	210a      	movs	r1, #10
 80069f0:	4573      	cmp	r3, lr
 80069f2:	d113      	bne.n	8006a1c <_strtod_l+0x254>
 80069f4:	182b      	adds	r3, r5, r0
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	f105 0501 	add.w	r5, r5, #1
 80069fc:	4405      	add	r5, r0
 80069fe:	dc1c      	bgt.n	8006a3a <_strtod_l+0x272>
 8006a00:	9907      	ldr	r1, [sp, #28]
 8006a02:	230a      	movs	r3, #10
 8006a04:	fb03 2301 	mla	r3, r3, r1, r2
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a0e:	1c51      	adds	r1, r2, #1
 8006a10:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a12:	7852      	ldrb	r2, [r2, #1]
 8006a14:	4618      	mov	r0, r3
 8006a16:	e7c9      	b.n	80069ac <_strtod_l+0x1e4>
 8006a18:	4638      	mov	r0, r7
 8006a1a:	e7d2      	b.n	80069c2 <_strtod_l+0x1fa>
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	dc04      	bgt.n	8006a2a <_strtod_l+0x262>
 8006a20:	9e07      	ldr	r6, [sp, #28]
 8006a22:	434e      	muls	r6, r1
 8006a24:	9607      	str	r6, [sp, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	e7e2      	b.n	80069f0 <_strtod_l+0x228>
 8006a2a:	f103 0c01 	add.w	ip, r3, #1
 8006a2e:	f1bc 0f10 	cmp.w	ip, #16
 8006a32:	bfd8      	it	le
 8006a34:	fb01 f909 	mulle.w	r9, r1, r9
 8006a38:	e7f5      	b.n	8006a26 <_strtod_l+0x25e>
 8006a3a:	2d10      	cmp	r5, #16
 8006a3c:	bfdc      	itt	le
 8006a3e:	230a      	movle	r3, #10
 8006a40:	fb03 2909 	mlale	r9, r3, r9, r2
 8006a44:	e7e1      	b.n	8006a0a <_strtod_l+0x242>
 8006a46:	2300      	movs	r3, #0
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e77c      	b.n	8006948 <_strtod_l+0x180>
 8006a4e:	f04f 0c00 	mov.w	ip, #0
 8006a52:	f108 0202 	add.w	r2, r8, #2
 8006a56:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006a5c:	e785      	b.n	800696a <_strtod_l+0x1a2>
 8006a5e:	f04f 0c01 	mov.w	ip, #1
 8006a62:	e7f6      	b.n	8006a52 <_strtod_l+0x28a>
 8006a64:	0800a620 	.word	0x0800a620
 8006a68:	0800a3d4 	.word	0x0800a3d4
 8006a6c:	7ff00000 	.word	0x7ff00000
 8006a70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a72:	1c51      	adds	r1, r2, #1
 8006a74:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a76:	7852      	ldrb	r2, [r2, #1]
 8006a78:	2a30      	cmp	r2, #48	; 0x30
 8006a7a:	d0f9      	beq.n	8006a70 <_strtod_l+0x2a8>
 8006a7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a80:	2908      	cmp	r1, #8
 8006a82:	f63f af79 	bhi.w	8006978 <_strtod_l+0x1b0>
 8006a86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a8c:	9206      	str	r2, [sp, #24]
 8006a8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a90:	1c51      	adds	r1, r2, #1
 8006a92:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a94:	7852      	ldrb	r2, [r2, #1]
 8006a96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006a9a:	2e09      	cmp	r6, #9
 8006a9c:	d937      	bls.n	8006b0e <_strtod_l+0x346>
 8006a9e:	9e06      	ldr	r6, [sp, #24]
 8006aa0:	1b89      	subs	r1, r1, r6
 8006aa2:	2908      	cmp	r1, #8
 8006aa4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006aa8:	dc02      	bgt.n	8006ab0 <_strtod_l+0x2e8>
 8006aaa:	4576      	cmp	r6, lr
 8006aac:	bfa8      	it	ge
 8006aae:	4676      	movge	r6, lr
 8006ab0:	f1bc 0f00 	cmp.w	ip, #0
 8006ab4:	d000      	beq.n	8006ab8 <_strtod_l+0x2f0>
 8006ab6:	4276      	negs	r6, r6
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	d14d      	bne.n	8006b58 <_strtod_l+0x390>
 8006abc:	9904      	ldr	r1, [sp, #16]
 8006abe:	4301      	orrs	r1, r0
 8006ac0:	f47f aec6 	bne.w	8006850 <_strtod_l+0x88>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f aee1 	bne.w	800688c <_strtod_l+0xc4>
 8006aca:	2a69      	cmp	r2, #105	; 0x69
 8006acc:	d027      	beq.n	8006b1e <_strtod_l+0x356>
 8006ace:	dc24      	bgt.n	8006b1a <_strtod_l+0x352>
 8006ad0:	2a49      	cmp	r2, #73	; 0x49
 8006ad2:	d024      	beq.n	8006b1e <_strtod_l+0x356>
 8006ad4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ad6:	f47f aed9 	bne.w	800688c <_strtod_l+0xc4>
 8006ada:	499f      	ldr	r1, [pc, #636]	; (8006d58 <_strtod_l+0x590>)
 8006adc:	a817      	add	r0, sp, #92	; 0x5c
 8006ade:	f001 fe3d 	bl	800875c <__match>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f43f aed2 	beq.w	800688c <_strtod_l+0xc4>
 8006ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b28      	cmp	r3, #40	; 0x28
 8006aee:	d12d      	bne.n	8006b4c <_strtod_l+0x384>
 8006af0:	499a      	ldr	r1, [pc, #616]	; (8006d5c <_strtod_l+0x594>)
 8006af2:	aa1a      	add	r2, sp, #104	; 0x68
 8006af4:	a817      	add	r0, sp, #92	; 0x5c
 8006af6:	f001 fe45 	bl	8008784 <__hexnan>
 8006afa:	2805      	cmp	r0, #5
 8006afc:	d126      	bne.n	8006b4c <_strtod_l+0x384>
 8006afe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006b04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006b08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006b0c:	e6a0      	b.n	8006850 <_strtod_l+0x88>
 8006b0e:	210a      	movs	r1, #10
 8006b10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006b14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006b18:	e7b9      	b.n	8006a8e <_strtod_l+0x2c6>
 8006b1a:	2a6e      	cmp	r2, #110	; 0x6e
 8006b1c:	e7db      	b.n	8006ad6 <_strtod_l+0x30e>
 8006b1e:	4990      	ldr	r1, [pc, #576]	; (8006d60 <_strtod_l+0x598>)
 8006b20:	a817      	add	r0, sp, #92	; 0x5c
 8006b22:	f001 fe1b 	bl	800875c <__match>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f aeb0 	beq.w	800688c <_strtod_l+0xc4>
 8006b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b2e:	498d      	ldr	r1, [pc, #564]	; (8006d64 <_strtod_l+0x59c>)
 8006b30:	3b01      	subs	r3, #1
 8006b32:	a817      	add	r0, sp, #92	; 0x5c
 8006b34:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b36:	f001 fe11 	bl	800875c <__match>
 8006b3a:	b910      	cbnz	r0, 8006b42 <_strtod_l+0x37a>
 8006b3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b3e:	3301      	adds	r3, #1
 8006b40:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006d74 <_strtod_l+0x5ac>
 8006b46:	f04f 0a00 	mov.w	sl, #0
 8006b4a:	e681      	b.n	8006850 <_strtod_l+0x88>
 8006b4c:	4886      	ldr	r0, [pc, #536]	; (8006d68 <_strtod_l+0x5a0>)
 8006b4e:	f002 fdf7 	bl	8009740 <nan>
 8006b52:	ec5b ab10 	vmov	sl, fp, d0
 8006b56:	e67b      	b.n	8006850 <_strtod_l+0x88>
 8006b58:	9b05      	ldr	r3, [sp, #20]
 8006b5a:	9807      	ldr	r0, [sp, #28]
 8006b5c:	1af3      	subs	r3, r6, r3
 8006b5e:	2f00      	cmp	r7, #0
 8006b60:	bf08      	it	eq
 8006b62:	462f      	moveq	r7, r5
 8006b64:	2d10      	cmp	r5, #16
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	46a8      	mov	r8, r5
 8006b6a:	bfa8      	it	ge
 8006b6c:	f04f 0810 	movge.w	r8, #16
 8006b70:	f7f9 fce8 	bl	8000544 <__aeabi_ui2d>
 8006b74:	2d09      	cmp	r5, #9
 8006b76:	4682      	mov	sl, r0
 8006b78:	468b      	mov	fp, r1
 8006b7a:	dd13      	ble.n	8006ba4 <_strtod_l+0x3dc>
 8006b7c:	4b7b      	ldr	r3, [pc, #492]	; (8006d6c <_strtod_l+0x5a4>)
 8006b7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b86:	f7f9 fd57 	bl	8000638 <__aeabi_dmul>
 8006b8a:	4682      	mov	sl, r0
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	468b      	mov	fp, r1
 8006b90:	f7f9 fcd8 	bl	8000544 <__aeabi_ui2d>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4650      	mov	r0, sl
 8006b9a:	4659      	mov	r1, fp
 8006b9c:	f7f9 fb96 	bl	80002cc <__adddf3>
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	468b      	mov	fp, r1
 8006ba4:	2d0f      	cmp	r5, #15
 8006ba6:	dc38      	bgt.n	8006c1a <_strtod_l+0x452>
 8006ba8:	9b06      	ldr	r3, [sp, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f43f ae50 	beq.w	8006850 <_strtod_l+0x88>
 8006bb0:	dd24      	ble.n	8006bfc <_strtod_l+0x434>
 8006bb2:	2b16      	cmp	r3, #22
 8006bb4:	dc0b      	bgt.n	8006bce <_strtod_l+0x406>
 8006bb6:	496d      	ldr	r1, [pc, #436]	; (8006d6c <_strtod_l+0x5a4>)
 8006bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	f7f9 fd38 	bl	8000638 <__aeabi_dmul>
 8006bc8:	4682      	mov	sl, r0
 8006bca:	468b      	mov	fp, r1
 8006bcc:	e640      	b.n	8006850 <_strtod_l+0x88>
 8006bce:	9a06      	ldr	r2, [sp, #24]
 8006bd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	db20      	blt.n	8006c1a <_strtod_l+0x452>
 8006bd8:	4c64      	ldr	r4, [pc, #400]	; (8006d6c <_strtod_l+0x5a4>)
 8006bda:	f1c5 050f 	rsb	r5, r5, #15
 8006bde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006be2:	4652      	mov	r2, sl
 8006be4:	465b      	mov	r3, fp
 8006be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bea:	f7f9 fd25 	bl	8000638 <__aeabi_dmul>
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	1b5d      	subs	r5, r3, r5
 8006bf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006bf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006bfa:	e7e3      	b.n	8006bc4 <_strtod_l+0x3fc>
 8006bfc:	9b06      	ldr	r3, [sp, #24]
 8006bfe:	3316      	adds	r3, #22
 8006c00:	db0b      	blt.n	8006c1a <_strtod_l+0x452>
 8006c02:	9b05      	ldr	r3, [sp, #20]
 8006c04:	1b9e      	subs	r6, r3, r6
 8006c06:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <_strtod_l+0x5a4>)
 8006c08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006c0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c10:	4650      	mov	r0, sl
 8006c12:	4659      	mov	r1, fp
 8006c14:	f7f9 fe3a 	bl	800088c <__aeabi_ddiv>
 8006c18:	e7d6      	b.n	8006bc8 <_strtod_l+0x400>
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	eba5 0808 	sub.w	r8, r5, r8
 8006c20:	4498      	add	r8, r3
 8006c22:	f1b8 0f00 	cmp.w	r8, #0
 8006c26:	dd74      	ble.n	8006d12 <_strtod_l+0x54a>
 8006c28:	f018 030f 	ands.w	r3, r8, #15
 8006c2c:	d00a      	beq.n	8006c44 <_strtod_l+0x47c>
 8006c2e:	494f      	ldr	r1, [pc, #316]	; (8006d6c <_strtod_l+0x5a4>)
 8006c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c34:	4652      	mov	r2, sl
 8006c36:	465b      	mov	r3, fp
 8006c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c3c:	f7f9 fcfc 	bl	8000638 <__aeabi_dmul>
 8006c40:	4682      	mov	sl, r0
 8006c42:	468b      	mov	fp, r1
 8006c44:	f038 080f 	bics.w	r8, r8, #15
 8006c48:	d04f      	beq.n	8006cea <_strtod_l+0x522>
 8006c4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006c4e:	dd22      	ble.n	8006c96 <_strtod_l+0x4ce>
 8006c50:	2500      	movs	r5, #0
 8006c52:	462e      	mov	r6, r5
 8006c54:	9507      	str	r5, [sp, #28]
 8006c56:	9505      	str	r5, [sp, #20]
 8006c58:	2322      	movs	r3, #34	; 0x22
 8006c5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006d74 <_strtod_l+0x5ac>
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	f04f 0a00 	mov.w	sl, #0
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f43f adf2 	beq.w	8006850 <_strtod_l+0x88>
 8006c6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f001 fe90 	bl	8008994 <_Bfree>
 8006c74:	9905      	ldr	r1, [sp, #20]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f001 fe8c 	bl	8008994 <_Bfree>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f001 fe88 	bl	8008994 <_Bfree>
 8006c84:	9907      	ldr	r1, [sp, #28]
 8006c86:	4620      	mov	r0, r4
 8006c88:	f001 fe84 	bl	8008994 <_Bfree>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f001 fe80 	bl	8008994 <_Bfree>
 8006c94:	e5dc      	b.n	8006850 <_strtod_l+0x88>
 8006c96:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <_strtod_l+0x5a8>)
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006ca0:	4650      	mov	r0, sl
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	4699      	mov	r9, r3
 8006ca6:	f1b8 0f01 	cmp.w	r8, #1
 8006caa:	dc21      	bgt.n	8006cf0 <_strtod_l+0x528>
 8006cac:	b10b      	cbz	r3, 8006cb2 <_strtod_l+0x4ea>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	4b2f      	ldr	r3, [pc, #188]	; (8006d70 <_strtod_l+0x5a8>)
 8006cb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006cb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006cbc:	4652      	mov	r2, sl
 8006cbe:	465b      	mov	r3, fp
 8006cc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006cc4:	f7f9 fcb8 	bl	8000638 <__aeabi_dmul>
 8006cc8:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <_strtod_l+0x5ac>)
 8006cca:	460a      	mov	r2, r1
 8006ccc:	400b      	ands	r3, r1
 8006cce:	492a      	ldr	r1, [pc, #168]	; (8006d78 <_strtod_l+0x5b0>)
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	d8bc      	bhi.n	8006c50 <_strtod_l+0x488>
 8006cd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cda:	428b      	cmp	r3, r1
 8006cdc:	bf86      	itte	hi
 8006cde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006d7c <_strtod_l+0x5b4>
 8006ce2:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ce6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006cea:	2300      	movs	r3, #0
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	e084      	b.n	8006dfa <_strtod_l+0x632>
 8006cf0:	f018 0f01 	tst.w	r8, #1
 8006cf4:	d005      	beq.n	8006d02 <_strtod_l+0x53a>
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f7f9 fc9c 	bl	8000638 <__aeabi_dmul>
 8006d00:	2301      	movs	r3, #1
 8006d02:	9a04      	ldr	r2, [sp, #16]
 8006d04:	3208      	adds	r2, #8
 8006d06:	f109 0901 	add.w	r9, r9, #1
 8006d0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d0e:	9204      	str	r2, [sp, #16]
 8006d10:	e7c9      	b.n	8006ca6 <_strtod_l+0x4de>
 8006d12:	d0ea      	beq.n	8006cea <_strtod_l+0x522>
 8006d14:	f1c8 0800 	rsb	r8, r8, #0
 8006d18:	f018 020f 	ands.w	r2, r8, #15
 8006d1c:	d00a      	beq.n	8006d34 <_strtod_l+0x56c>
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <_strtod_l+0x5a4>)
 8006d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d24:	4650      	mov	r0, sl
 8006d26:	4659      	mov	r1, fp
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fdae 	bl	800088c <__aeabi_ddiv>
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d38:	d0d7      	beq.n	8006cea <_strtod_l+0x522>
 8006d3a:	f1b8 0f1f 	cmp.w	r8, #31
 8006d3e:	dd1f      	ble.n	8006d80 <_strtod_l+0x5b8>
 8006d40:	2500      	movs	r5, #0
 8006d42:	462e      	mov	r6, r5
 8006d44:	9507      	str	r5, [sp, #28]
 8006d46:	9505      	str	r5, [sp, #20]
 8006d48:	2322      	movs	r3, #34	; 0x22
 8006d4a:	f04f 0a00 	mov.w	sl, #0
 8006d4e:	f04f 0b00 	mov.w	fp, #0
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	e786      	b.n	8006c64 <_strtod_l+0x49c>
 8006d56:	bf00      	nop
 8006d58:	0800a3a5 	.word	0x0800a3a5
 8006d5c:	0800a3e8 	.word	0x0800a3e8
 8006d60:	0800a39d 	.word	0x0800a39d
 8006d64:	0800a52c 	.word	0x0800a52c
 8006d68:	0800a7d8 	.word	0x0800a7d8
 8006d6c:	0800a6b8 	.word	0x0800a6b8
 8006d70:	0800a690 	.word	0x0800a690
 8006d74:	7ff00000 	.word	0x7ff00000
 8006d78:	7ca00000 	.word	0x7ca00000
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	f018 0310 	ands.w	r3, r8, #16
 8006d84:	bf18      	it	ne
 8006d86:	236a      	movne	r3, #106	; 0x6a
 8006d88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007138 <_strtod_l+0x970>
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	4650      	mov	r0, sl
 8006d90:	4659      	mov	r1, fp
 8006d92:	2300      	movs	r3, #0
 8006d94:	f018 0f01 	tst.w	r8, #1
 8006d98:	d004      	beq.n	8006da4 <_strtod_l+0x5dc>
 8006d9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d9e:	f7f9 fc4b 	bl	8000638 <__aeabi_dmul>
 8006da2:	2301      	movs	r3, #1
 8006da4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006da8:	f109 0908 	add.w	r9, r9, #8
 8006dac:	d1f2      	bne.n	8006d94 <_strtod_l+0x5cc>
 8006dae:	b10b      	cbz	r3, 8006db4 <_strtod_l+0x5ec>
 8006db0:	4682      	mov	sl, r0
 8006db2:	468b      	mov	fp, r1
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	b1c3      	cbz	r3, 8006dea <_strtod_l+0x622>
 8006db8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006dbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	dd11      	ble.n	8006dea <_strtod_l+0x622>
 8006dc6:	2b1f      	cmp	r3, #31
 8006dc8:	f340 8124 	ble.w	8007014 <_strtod_l+0x84c>
 8006dcc:	2b34      	cmp	r3, #52	; 0x34
 8006dce:	bfde      	ittt	le
 8006dd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006dd4:	f04f 33ff 	movle.w	r3, #4294967295
 8006dd8:	fa03 f202 	lslle.w	r2, r3, r2
 8006ddc:	f04f 0a00 	mov.w	sl, #0
 8006de0:	bfcc      	ite	gt
 8006de2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006de6:	ea02 0b01 	andle.w	fp, r2, r1
 8006dea:	2200      	movs	r2, #0
 8006dec:	2300      	movs	r3, #0
 8006dee:	4650      	mov	r0, sl
 8006df0:	4659      	mov	r1, fp
 8006df2:	f7f9 fe89 	bl	8000b08 <__aeabi_dcmpeq>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1a2      	bne.n	8006d40 <_strtod_l+0x578>
 8006dfa:	9b07      	ldr	r3, [sp, #28]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	9908      	ldr	r1, [sp, #32]
 8006e00:	462b      	mov	r3, r5
 8006e02:	463a      	mov	r2, r7
 8006e04:	4620      	mov	r0, r4
 8006e06:	f001 fe2d 	bl	8008a64 <__s2b>
 8006e0a:	9007      	str	r0, [sp, #28]
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f43f af1f 	beq.w	8006c50 <_strtod_l+0x488>
 8006e12:	9b05      	ldr	r3, [sp, #20]
 8006e14:	1b9e      	subs	r6, r3, r6
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfb4      	ite	lt
 8006e1c:	4633      	movlt	r3, r6
 8006e1e:	2300      	movge	r3, #0
 8006e20:	930c      	str	r3, [sp, #48]	; 0x30
 8006e22:	9b06      	ldr	r3, [sp, #24]
 8006e24:	2500      	movs	r5, #0
 8006e26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8006e2c:	462e      	mov	r6, r5
 8006e2e:	9b07      	ldr	r3, [sp, #28]
 8006e30:	4620      	mov	r0, r4
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	f001 fd6e 	bl	8008914 <_Balloc>
 8006e38:	9005      	str	r0, [sp, #20]
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f43f af0c 	beq.w	8006c58 <_strtod_l+0x490>
 8006e40:	9b07      	ldr	r3, [sp, #28]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	3202      	adds	r2, #2
 8006e46:	f103 010c 	add.w	r1, r3, #12
 8006e4a:	0092      	lsls	r2, r2, #2
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	f001 fd53 	bl	80088f8 <memcpy>
 8006e52:	ec4b ab10 	vmov	d0, sl, fp
 8006e56:	aa1a      	add	r2, sp, #104	; 0x68
 8006e58:	a919      	add	r1, sp, #100	; 0x64
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f002 f948 	bl	80090f0 <__d2b>
 8006e60:	ec4b ab18 	vmov	d8, sl, fp
 8006e64:	9018      	str	r0, [sp, #96]	; 0x60
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f aef6 	beq.w	8006c58 <_strtod_l+0x490>
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f001 fe92 	bl	8008b98 <__i2b>
 8006e74:	4606      	mov	r6, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f aeee 	beq.w	8006c58 <_strtod_l+0x490>
 8006e7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e7e:	9904      	ldr	r1, [sp, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bfab      	itete	ge
 8006e84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006e86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006e88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006e8e:	bfac      	ite	ge
 8006e90:	eb03 0902 	addge.w	r9, r3, r2
 8006e94:	1ad7      	sublt	r7, r2, r3
 8006e96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e98:	eba3 0801 	sub.w	r8, r3, r1
 8006e9c:	4490      	add	r8, r2
 8006e9e:	4ba1      	ldr	r3, [pc, #644]	; (8007124 <_strtod_l+0x95c>)
 8006ea0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ea4:	4598      	cmp	r8, r3
 8006ea6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006eaa:	f280 80c7 	bge.w	800703c <_strtod_l+0x874>
 8006eae:	eba3 0308 	sub.w	r3, r3, r8
 8006eb2:	2b1f      	cmp	r3, #31
 8006eb4:	eba2 0203 	sub.w	r2, r2, r3
 8006eb8:	f04f 0101 	mov.w	r1, #1
 8006ebc:	f300 80b1 	bgt.w	8007022 <_strtod_l+0x85a>
 8006ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9308      	str	r3, [sp, #32]
 8006eca:	eb09 0802 	add.w	r8, r9, r2
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	45c1      	cmp	r9, r8
 8006ed2:	4417      	add	r7, r2
 8006ed4:	441f      	add	r7, r3
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	bfa8      	it	ge
 8006eda:	4643      	movge	r3, r8
 8006edc:	42bb      	cmp	r3, r7
 8006ede:	bfa8      	it	ge
 8006ee0:	463b      	movge	r3, r7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bfc2      	ittt	gt
 8006ee6:	eba8 0803 	subgt.w	r8, r8, r3
 8006eea:	1aff      	subgt	r7, r7, r3
 8006eec:	eba9 0903 	subgt.w	r9, r9, r3
 8006ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dd17      	ble.n	8006f26 <_strtod_l+0x75e>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4620      	mov	r0, r4
 8006efc:	f001 ff0c 	bl	8008d18 <__pow5mult>
 8006f00:	4606      	mov	r6, r0
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f43f aea8 	beq.w	8006c58 <_strtod_l+0x490>
 8006f08:	4601      	mov	r1, r0
 8006f0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f001 fe59 	bl	8008bc4 <__multiply>
 8006f12:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f43f ae9f 	beq.w	8006c58 <_strtod_l+0x490>
 8006f1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f001 fd39 	bl	8008994 <_Bfree>
 8006f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f24:	9318      	str	r3, [sp, #96]	; 0x60
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	f300 808c 	bgt.w	8007046 <_strtod_l+0x87e>
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dd08      	ble.n	8006f46 <_strtod_l+0x77e>
 8006f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f36:	9905      	ldr	r1, [sp, #20]
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 feed 	bl	8008d18 <__pow5mult>
 8006f3e:	9005      	str	r0, [sp, #20]
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f ae89 	beq.w	8006c58 <_strtod_l+0x490>
 8006f46:	2f00      	cmp	r7, #0
 8006f48:	dd08      	ble.n	8006f5c <_strtod_l+0x794>
 8006f4a:	9905      	ldr	r1, [sp, #20]
 8006f4c:	463a      	mov	r2, r7
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f001 ff3c 	bl	8008dcc <__lshift>
 8006f54:	9005      	str	r0, [sp, #20]
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f ae7e 	beq.w	8006c58 <_strtod_l+0x490>
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	dd08      	ble.n	8006f74 <_strtod_l+0x7ac>
 8006f62:	4631      	mov	r1, r6
 8006f64:	464a      	mov	r2, r9
 8006f66:	4620      	mov	r0, r4
 8006f68:	f001 ff30 	bl	8008dcc <__lshift>
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f43f ae72 	beq.w	8006c58 <_strtod_l+0x490>
 8006f74:	9a05      	ldr	r2, [sp, #20]
 8006f76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 ffb3 	bl	8008ee4 <__mdiff>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f43f ae69 	beq.w	8006c58 <_strtod_l+0x490>
 8006f86:	68c3      	ldr	r3, [r0, #12]
 8006f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60c3      	str	r3, [r0, #12]
 8006f8e:	4631      	mov	r1, r6
 8006f90:	f001 ff8c 	bl	8008eac <__mcmp>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	da60      	bge.n	800705a <_strtod_l+0x892>
 8006f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f9a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f9e:	f040 8082 	bne.w	80070a6 <_strtod_l+0x8de>
 8006fa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d17d      	bne.n	80070a6 <_strtod_l+0x8de>
 8006faa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fae:	0d1b      	lsrs	r3, r3, #20
 8006fb0:	051b      	lsls	r3, r3, #20
 8006fb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fb6:	d976      	bls.n	80070a6 <_strtod_l+0x8de>
 8006fb8:	696b      	ldr	r3, [r5, #20]
 8006fba:	b913      	cbnz	r3, 8006fc2 <_strtod_l+0x7fa>
 8006fbc:	692b      	ldr	r3, [r5, #16]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	dd71      	ble.n	80070a6 <_strtod_l+0x8de>
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f001 ff00 	bl	8008dcc <__lshift>
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4605      	mov	r5, r0
 8006fd0:	f001 ff6c 	bl	8008eac <__mcmp>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	dd66      	ble.n	80070a6 <_strtod_l+0x8de>
 8006fd8:	9904      	ldr	r1, [sp, #16]
 8006fda:	4a53      	ldr	r2, [pc, #332]	; (8007128 <_strtod_l+0x960>)
 8006fdc:	465b      	mov	r3, fp
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	f000 8081 	beq.w	80070e6 <_strtod_l+0x91e>
 8006fe4:	ea02 010b 	and.w	r1, r2, fp
 8006fe8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006fec:	dc7b      	bgt.n	80070e6 <_strtod_l+0x91e>
 8006fee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ff2:	f77f aea9 	ble.w	8006d48 <_strtod_l+0x580>
 8006ff6:	4b4d      	ldr	r3, [pc, #308]	; (800712c <_strtod_l+0x964>)
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	4659      	mov	r1, fp
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f7f9 fb1b 	bl	8000638 <__aeabi_dmul>
 8007002:	460b      	mov	r3, r1
 8007004:	4303      	orrs	r3, r0
 8007006:	bf08      	it	eq
 8007008:	2322      	moveq	r3, #34	; 0x22
 800700a:	4682      	mov	sl, r0
 800700c:	468b      	mov	fp, r1
 800700e:	bf08      	it	eq
 8007010:	6023      	streq	r3, [r4, #0]
 8007012:	e62b      	b.n	8006c6c <_strtod_l+0x4a4>
 8007014:	f04f 32ff 	mov.w	r2, #4294967295
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	ea03 0a0a 	and.w	sl, r3, sl
 8007020:	e6e3      	b.n	8006dea <_strtod_l+0x622>
 8007022:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007026:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800702a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800702e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007032:	fa01 f308 	lsl.w	r3, r1, r8
 8007036:	9308      	str	r3, [sp, #32]
 8007038:	910d      	str	r1, [sp, #52]	; 0x34
 800703a:	e746      	b.n	8006eca <_strtod_l+0x702>
 800703c:	2300      	movs	r3, #0
 800703e:	9308      	str	r3, [sp, #32]
 8007040:	2301      	movs	r3, #1
 8007042:	930d      	str	r3, [sp, #52]	; 0x34
 8007044:	e741      	b.n	8006eca <_strtod_l+0x702>
 8007046:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007048:	4642      	mov	r2, r8
 800704a:	4620      	mov	r0, r4
 800704c:	f001 febe 	bl	8008dcc <__lshift>
 8007050:	9018      	str	r0, [sp, #96]	; 0x60
 8007052:	2800      	cmp	r0, #0
 8007054:	f47f af6b 	bne.w	8006f2e <_strtod_l+0x766>
 8007058:	e5fe      	b.n	8006c58 <_strtod_l+0x490>
 800705a:	465f      	mov	r7, fp
 800705c:	d16e      	bne.n	800713c <_strtod_l+0x974>
 800705e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007060:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007064:	b342      	cbz	r2, 80070b8 <_strtod_l+0x8f0>
 8007066:	4a32      	ldr	r2, [pc, #200]	; (8007130 <_strtod_l+0x968>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d128      	bne.n	80070be <_strtod_l+0x8f6>
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	4651      	mov	r1, sl
 8007070:	b1eb      	cbz	r3, 80070ae <_strtod_l+0x8e6>
 8007072:	4b2d      	ldr	r3, [pc, #180]	; (8007128 <_strtod_l+0x960>)
 8007074:	403b      	ands	r3, r7
 8007076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	d819      	bhi.n	80070b4 <_strtod_l+0x8ec>
 8007080:	0d1b      	lsrs	r3, r3, #20
 8007082:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	4299      	cmp	r1, r3
 800708c:	d117      	bne.n	80070be <_strtod_l+0x8f6>
 800708e:	4b29      	ldr	r3, [pc, #164]	; (8007134 <_strtod_l+0x96c>)
 8007090:	429f      	cmp	r7, r3
 8007092:	d102      	bne.n	800709a <_strtod_l+0x8d2>
 8007094:	3101      	adds	r1, #1
 8007096:	f43f addf 	beq.w	8006c58 <_strtod_l+0x490>
 800709a:	4b23      	ldr	r3, [pc, #140]	; (8007128 <_strtod_l+0x960>)
 800709c:	403b      	ands	r3, r7
 800709e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80070a2:	f04f 0a00 	mov.w	sl, #0
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1a4      	bne.n	8006ff6 <_strtod_l+0x82e>
 80070ac:	e5de      	b.n	8006c6c <_strtod_l+0x4a4>
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295
 80070b2:	e7ea      	b.n	800708a <_strtod_l+0x8c2>
 80070b4:	4613      	mov	r3, r2
 80070b6:	e7e8      	b.n	800708a <_strtod_l+0x8c2>
 80070b8:	ea53 030a 	orrs.w	r3, r3, sl
 80070bc:	d08c      	beq.n	8006fd8 <_strtod_l+0x810>
 80070be:	9b08      	ldr	r3, [sp, #32]
 80070c0:	b1db      	cbz	r3, 80070fa <_strtod_l+0x932>
 80070c2:	423b      	tst	r3, r7
 80070c4:	d0ef      	beq.n	80070a6 <_strtod_l+0x8de>
 80070c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c8:	9a04      	ldr	r2, [sp, #16]
 80070ca:	4650      	mov	r0, sl
 80070cc:	4659      	mov	r1, fp
 80070ce:	b1c3      	cbz	r3, 8007102 <_strtod_l+0x93a>
 80070d0:	f7ff fb5b 	bl	800678a <sulp>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	ec51 0b18 	vmov	r0, r1, d8
 80070dc:	f7f9 f8f6 	bl	80002cc <__adddf3>
 80070e0:	4682      	mov	sl, r0
 80070e2:	468b      	mov	fp, r1
 80070e4:	e7df      	b.n	80070a6 <_strtod_l+0x8de>
 80070e6:	4013      	ands	r3, r2
 80070e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070f4:	f04f 3aff 	mov.w	sl, #4294967295
 80070f8:	e7d5      	b.n	80070a6 <_strtod_l+0x8de>
 80070fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070fc:	ea13 0f0a 	tst.w	r3, sl
 8007100:	e7e0      	b.n	80070c4 <_strtod_l+0x8fc>
 8007102:	f7ff fb42 	bl	800678a <sulp>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	ec51 0b18 	vmov	r0, r1, d8
 800710e:	f7f9 f8db 	bl	80002c8 <__aeabi_dsub>
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	4682      	mov	sl, r0
 8007118:	468b      	mov	fp, r1
 800711a:	f7f9 fcf5 	bl	8000b08 <__aeabi_dcmpeq>
 800711e:	2800      	cmp	r0, #0
 8007120:	d0c1      	beq.n	80070a6 <_strtod_l+0x8de>
 8007122:	e611      	b.n	8006d48 <_strtod_l+0x580>
 8007124:	fffffc02 	.word	0xfffffc02
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	39500000 	.word	0x39500000
 8007130:	000fffff 	.word	0x000fffff
 8007134:	7fefffff 	.word	0x7fefffff
 8007138:	0800a400 	.word	0x0800a400
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	f002 f832 	bl	80091a8 <__ratio>
 8007144:	ec59 8b10 	vmov	r8, r9, d0
 8007148:	ee10 0a10 	vmov	r0, s0
 800714c:	2200      	movs	r2, #0
 800714e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 fcec 	bl	8000b30 <__aeabi_dcmple>
 8007158:	2800      	cmp	r0, #0
 800715a:	d07a      	beq.n	8007252 <_strtod_l+0xa8a>
 800715c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d04a      	beq.n	80071f8 <_strtod_l+0xa30>
 8007162:	4b95      	ldr	r3, [pc, #596]	; (80073b8 <_strtod_l+0xbf0>)
 8007164:	2200      	movs	r2, #0
 8007166:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800716a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80073b8 <_strtod_l+0xbf0>
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	4b92      	ldr	r3, [pc, #584]	; (80073bc <_strtod_l+0xbf4>)
 8007174:	403b      	ands	r3, r7
 8007176:	930d      	str	r3, [sp, #52]	; 0x34
 8007178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800717a:	4b91      	ldr	r3, [pc, #580]	; (80073c0 <_strtod_l+0xbf8>)
 800717c:	429a      	cmp	r2, r3
 800717e:	f040 80b0 	bne.w	80072e2 <_strtod_l+0xb1a>
 8007182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007186:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800718a:	ec4b ab10 	vmov	d0, sl, fp
 800718e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007192:	f001 ff31 	bl	8008ff8 <__ulp>
 8007196:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800719a:	ec53 2b10 	vmov	r2, r3, d0
 800719e:	f7f9 fa4b 	bl	8000638 <__aeabi_dmul>
 80071a2:	4652      	mov	r2, sl
 80071a4:	465b      	mov	r3, fp
 80071a6:	f7f9 f891 	bl	80002cc <__adddf3>
 80071aa:	460b      	mov	r3, r1
 80071ac:	4983      	ldr	r1, [pc, #524]	; (80073bc <_strtod_l+0xbf4>)
 80071ae:	4a85      	ldr	r2, [pc, #532]	; (80073c4 <_strtod_l+0xbfc>)
 80071b0:	4019      	ands	r1, r3
 80071b2:	4291      	cmp	r1, r2
 80071b4:	4682      	mov	sl, r0
 80071b6:	d960      	bls.n	800727a <_strtod_l+0xab2>
 80071b8:	ee18 3a90 	vmov	r3, s17
 80071bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d104      	bne.n	80071ce <_strtod_l+0xa06>
 80071c4:	ee18 3a10 	vmov	r3, s16
 80071c8:	3301      	adds	r3, #1
 80071ca:	f43f ad45 	beq.w	8006c58 <_strtod_l+0x490>
 80071ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80073d0 <_strtod_l+0xc08>
 80071d2:	f04f 3aff 	mov.w	sl, #4294967295
 80071d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071d8:	4620      	mov	r0, r4
 80071da:	f001 fbdb 	bl	8008994 <_Bfree>
 80071de:	9905      	ldr	r1, [sp, #20]
 80071e0:	4620      	mov	r0, r4
 80071e2:	f001 fbd7 	bl	8008994 <_Bfree>
 80071e6:	4631      	mov	r1, r6
 80071e8:	4620      	mov	r0, r4
 80071ea:	f001 fbd3 	bl	8008994 <_Bfree>
 80071ee:	4629      	mov	r1, r5
 80071f0:	4620      	mov	r0, r4
 80071f2:	f001 fbcf 	bl	8008994 <_Bfree>
 80071f6:	e61a      	b.n	8006e2e <_strtod_l+0x666>
 80071f8:	f1ba 0f00 	cmp.w	sl, #0
 80071fc:	d11b      	bne.n	8007236 <_strtod_l+0xa6e>
 80071fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007202:	b9f3      	cbnz	r3, 8007242 <_strtod_l+0xa7a>
 8007204:	4b6c      	ldr	r3, [pc, #432]	; (80073b8 <_strtod_l+0xbf0>)
 8007206:	2200      	movs	r2, #0
 8007208:	4640      	mov	r0, r8
 800720a:	4649      	mov	r1, r9
 800720c:	f7f9 fc86 	bl	8000b1c <__aeabi_dcmplt>
 8007210:	b9d0      	cbnz	r0, 8007248 <_strtod_l+0xa80>
 8007212:	4640      	mov	r0, r8
 8007214:	4649      	mov	r1, r9
 8007216:	4b6c      	ldr	r3, [pc, #432]	; (80073c8 <_strtod_l+0xc00>)
 8007218:	2200      	movs	r2, #0
 800721a:	f7f9 fa0d 	bl	8000638 <__aeabi_dmul>
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007226:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800722a:	9315      	str	r3, [sp, #84]	; 0x54
 800722c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007234:	e79d      	b.n	8007172 <_strtod_l+0x9aa>
 8007236:	f1ba 0f01 	cmp.w	sl, #1
 800723a:	d102      	bne.n	8007242 <_strtod_l+0xa7a>
 800723c:	2f00      	cmp	r7, #0
 800723e:	f43f ad83 	beq.w	8006d48 <_strtod_l+0x580>
 8007242:	4b62      	ldr	r3, [pc, #392]	; (80073cc <_strtod_l+0xc04>)
 8007244:	2200      	movs	r2, #0
 8007246:	e78e      	b.n	8007166 <_strtod_l+0x99e>
 8007248:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80073c8 <_strtod_l+0xc00>
 800724c:	f04f 0800 	mov.w	r8, #0
 8007250:	e7e7      	b.n	8007222 <_strtod_l+0xa5a>
 8007252:	4b5d      	ldr	r3, [pc, #372]	; (80073c8 <_strtod_l+0xc00>)
 8007254:	4640      	mov	r0, r8
 8007256:	4649      	mov	r1, r9
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 f9ed 	bl	8000638 <__aeabi_dmul>
 800725e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007260:	4680      	mov	r8, r0
 8007262:	4689      	mov	r9, r1
 8007264:	b933      	cbnz	r3, 8007274 <_strtod_l+0xaac>
 8007266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800726a:	900e      	str	r0, [sp, #56]	; 0x38
 800726c:	930f      	str	r3, [sp, #60]	; 0x3c
 800726e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007272:	e7dd      	b.n	8007230 <_strtod_l+0xa68>
 8007274:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007278:	e7f9      	b.n	800726e <_strtod_l+0xaa6>
 800727a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1a8      	bne.n	80071d6 <_strtod_l+0xa0e>
 8007284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800728a:	0d1b      	lsrs	r3, r3, #20
 800728c:	051b      	lsls	r3, r3, #20
 800728e:	429a      	cmp	r2, r3
 8007290:	d1a1      	bne.n	80071d6 <_strtod_l+0xa0e>
 8007292:	4640      	mov	r0, r8
 8007294:	4649      	mov	r1, r9
 8007296:	f7f9 fd2f 	bl	8000cf8 <__aeabi_d2lz>
 800729a:	f7f9 f99f 	bl	80005dc <__aeabi_l2d>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	f7f9 f80f 	bl	80002c8 <__aeabi_dsub>
 80072aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072b0:	ea43 030a 	orr.w	r3, r3, sl
 80072b4:	4313      	orrs	r3, r2
 80072b6:	4680      	mov	r8, r0
 80072b8:	4689      	mov	r9, r1
 80072ba:	d055      	beq.n	8007368 <_strtod_l+0xba0>
 80072bc:	a336      	add	r3, pc, #216	; (adr r3, 8007398 <_strtod_l+0xbd0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f9 fc2b 	bl	8000b1c <__aeabi_dcmplt>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f47f acd0 	bne.w	8006c6c <_strtod_l+0x4a4>
 80072cc:	a334      	add	r3, pc, #208	; (adr r3, 80073a0 <_strtod_l+0xbd8>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	4640      	mov	r0, r8
 80072d4:	4649      	mov	r1, r9
 80072d6:	f7f9 fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f af7b 	beq.w	80071d6 <_strtod_l+0xa0e>
 80072e0:	e4c4      	b.n	8006c6c <_strtod_l+0x4a4>
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	b333      	cbz	r3, 8007334 <_strtod_l+0xb6c>
 80072e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072ec:	d822      	bhi.n	8007334 <_strtod_l+0xb6c>
 80072ee:	a32e      	add	r3, pc, #184	; (adr r3, 80073a8 <_strtod_l+0xbe0>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	4640      	mov	r0, r8
 80072f6:	4649      	mov	r1, r9
 80072f8:	f7f9 fc1a 	bl	8000b30 <__aeabi_dcmple>
 80072fc:	b1a0      	cbz	r0, 8007328 <_strtod_l+0xb60>
 80072fe:	4649      	mov	r1, r9
 8007300:	4640      	mov	r0, r8
 8007302:	f7f9 fc71 	bl	8000be8 <__aeabi_d2uiz>
 8007306:	2801      	cmp	r0, #1
 8007308:	bf38      	it	cc
 800730a:	2001      	movcc	r0, #1
 800730c:	f7f9 f91a 	bl	8000544 <__aeabi_ui2d>
 8007310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	bb23      	cbnz	r3, 8007362 <_strtod_l+0xb9a>
 8007318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800731c:	9010      	str	r0, [sp, #64]	; 0x40
 800731e:	9311      	str	r3, [sp, #68]	; 0x44
 8007320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007324:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800732c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007330:	1a9b      	subs	r3, r3, r2
 8007332:	9309      	str	r3, [sp, #36]	; 0x24
 8007334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007338:	eeb0 0a48 	vmov.f32	s0, s16
 800733c:	eef0 0a68 	vmov.f32	s1, s17
 8007340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007344:	f001 fe58 	bl	8008ff8 <__ulp>
 8007348:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800734c:	ec53 2b10 	vmov	r2, r3, d0
 8007350:	f7f9 f972 	bl	8000638 <__aeabi_dmul>
 8007354:	ec53 2b18 	vmov	r2, r3, d8
 8007358:	f7f8 ffb8 	bl	80002cc <__adddf3>
 800735c:	4682      	mov	sl, r0
 800735e:	468b      	mov	fp, r1
 8007360:	e78d      	b.n	800727e <_strtod_l+0xab6>
 8007362:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007366:	e7db      	b.n	8007320 <_strtod_l+0xb58>
 8007368:	a311      	add	r3, pc, #68	; (adr r3, 80073b0 <_strtod_l+0xbe8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f9 fbd5 	bl	8000b1c <__aeabi_dcmplt>
 8007372:	e7b2      	b.n	80072da <_strtod_l+0xb12>
 8007374:	2300      	movs	r3, #0
 8007376:	930a      	str	r3, [sp, #40]	; 0x28
 8007378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800737a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	f7ff ba6b 	b.w	8006858 <_strtod_l+0x90>
 8007382:	2a65      	cmp	r2, #101	; 0x65
 8007384:	f43f ab5f 	beq.w	8006a46 <_strtod_l+0x27e>
 8007388:	2a45      	cmp	r2, #69	; 0x45
 800738a:	f43f ab5c 	beq.w	8006a46 <_strtod_l+0x27e>
 800738e:	2301      	movs	r3, #1
 8007390:	f7ff bb94 	b.w	8006abc <_strtod_l+0x2f4>
 8007394:	f3af 8000 	nop.w
 8007398:	94a03595 	.word	0x94a03595
 800739c:	3fdfffff 	.word	0x3fdfffff
 80073a0:	35afe535 	.word	0x35afe535
 80073a4:	3fe00000 	.word	0x3fe00000
 80073a8:	ffc00000 	.word	0xffc00000
 80073ac:	41dfffff 	.word	0x41dfffff
 80073b0:	94a03595 	.word	0x94a03595
 80073b4:	3fcfffff 	.word	0x3fcfffff
 80073b8:	3ff00000 	.word	0x3ff00000
 80073bc:	7ff00000 	.word	0x7ff00000
 80073c0:	7fe00000 	.word	0x7fe00000
 80073c4:	7c9fffff 	.word	0x7c9fffff
 80073c8:	3fe00000 	.word	0x3fe00000
 80073cc:	bff00000 	.word	0xbff00000
 80073d0:	7fefffff 	.word	0x7fefffff

080073d4 <_strtod_r>:
 80073d4:	4b01      	ldr	r3, [pc, #4]	; (80073dc <_strtod_r+0x8>)
 80073d6:	f7ff b9f7 	b.w	80067c8 <_strtod_l>
 80073da:	bf00      	nop
 80073dc:	20000074 	.word	0x20000074

080073e0 <_strtol_l.constprop.0>:
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e6:	d001      	beq.n	80073ec <_strtol_l.constprop.0+0xc>
 80073e8:	2b24      	cmp	r3, #36	; 0x24
 80073ea:	d906      	bls.n	80073fa <_strtol_l.constprop.0+0x1a>
 80073ec:	f7fe fae8 	bl	80059c0 <__errno>
 80073f0:	2316      	movs	r3, #22
 80073f2:	6003      	str	r3, [r0, #0]
 80073f4:	2000      	movs	r0, #0
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80074e0 <_strtol_l.constprop.0+0x100>
 80073fe:	460d      	mov	r5, r1
 8007400:	462e      	mov	r6, r5
 8007402:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007406:	f814 700c 	ldrb.w	r7, [r4, ip]
 800740a:	f017 0708 	ands.w	r7, r7, #8
 800740e:	d1f7      	bne.n	8007400 <_strtol_l.constprop.0+0x20>
 8007410:	2c2d      	cmp	r4, #45	; 0x2d
 8007412:	d132      	bne.n	800747a <_strtol_l.constprop.0+0x9a>
 8007414:	782c      	ldrb	r4, [r5, #0]
 8007416:	2701      	movs	r7, #1
 8007418:	1cb5      	adds	r5, r6, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d05b      	beq.n	80074d6 <_strtol_l.constprop.0+0xf6>
 800741e:	2b10      	cmp	r3, #16
 8007420:	d109      	bne.n	8007436 <_strtol_l.constprop.0+0x56>
 8007422:	2c30      	cmp	r4, #48	; 0x30
 8007424:	d107      	bne.n	8007436 <_strtol_l.constprop.0+0x56>
 8007426:	782c      	ldrb	r4, [r5, #0]
 8007428:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800742c:	2c58      	cmp	r4, #88	; 0x58
 800742e:	d14d      	bne.n	80074cc <_strtol_l.constprop.0+0xec>
 8007430:	786c      	ldrb	r4, [r5, #1]
 8007432:	2310      	movs	r3, #16
 8007434:	3502      	adds	r5, #2
 8007436:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800743a:	f108 38ff 	add.w	r8, r8, #4294967295
 800743e:	f04f 0c00 	mov.w	ip, #0
 8007442:	fbb8 f9f3 	udiv	r9, r8, r3
 8007446:	4666      	mov	r6, ip
 8007448:	fb03 8a19 	mls	sl, r3, r9, r8
 800744c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007450:	f1be 0f09 	cmp.w	lr, #9
 8007454:	d816      	bhi.n	8007484 <_strtol_l.constprop.0+0xa4>
 8007456:	4674      	mov	r4, lr
 8007458:	42a3      	cmp	r3, r4
 800745a:	dd24      	ble.n	80074a6 <_strtol_l.constprop.0+0xc6>
 800745c:	f1bc 0f00 	cmp.w	ip, #0
 8007460:	db1e      	blt.n	80074a0 <_strtol_l.constprop.0+0xc0>
 8007462:	45b1      	cmp	r9, r6
 8007464:	d31c      	bcc.n	80074a0 <_strtol_l.constprop.0+0xc0>
 8007466:	d101      	bne.n	800746c <_strtol_l.constprop.0+0x8c>
 8007468:	45a2      	cmp	sl, r4
 800746a:	db19      	blt.n	80074a0 <_strtol_l.constprop.0+0xc0>
 800746c:	fb06 4603 	mla	r6, r6, r3, r4
 8007470:	f04f 0c01 	mov.w	ip, #1
 8007474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007478:	e7e8      	b.n	800744c <_strtol_l.constprop.0+0x6c>
 800747a:	2c2b      	cmp	r4, #43	; 0x2b
 800747c:	bf04      	itt	eq
 800747e:	782c      	ldrbeq	r4, [r5, #0]
 8007480:	1cb5      	addeq	r5, r6, #2
 8007482:	e7ca      	b.n	800741a <_strtol_l.constprop.0+0x3a>
 8007484:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007488:	f1be 0f19 	cmp.w	lr, #25
 800748c:	d801      	bhi.n	8007492 <_strtol_l.constprop.0+0xb2>
 800748e:	3c37      	subs	r4, #55	; 0x37
 8007490:	e7e2      	b.n	8007458 <_strtol_l.constprop.0+0x78>
 8007492:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007496:	f1be 0f19 	cmp.w	lr, #25
 800749a:	d804      	bhi.n	80074a6 <_strtol_l.constprop.0+0xc6>
 800749c:	3c57      	subs	r4, #87	; 0x57
 800749e:	e7db      	b.n	8007458 <_strtol_l.constprop.0+0x78>
 80074a0:	f04f 3cff 	mov.w	ip, #4294967295
 80074a4:	e7e6      	b.n	8007474 <_strtol_l.constprop.0+0x94>
 80074a6:	f1bc 0f00 	cmp.w	ip, #0
 80074aa:	da05      	bge.n	80074b8 <_strtol_l.constprop.0+0xd8>
 80074ac:	2322      	movs	r3, #34	; 0x22
 80074ae:	6003      	str	r3, [r0, #0]
 80074b0:	4646      	mov	r6, r8
 80074b2:	b942      	cbnz	r2, 80074c6 <_strtol_l.constprop.0+0xe6>
 80074b4:	4630      	mov	r0, r6
 80074b6:	e79e      	b.n	80073f6 <_strtol_l.constprop.0+0x16>
 80074b8:	b107      	cbz	r7, 80074bc <_strtol_l.constprop.0+0xdc>
 80074ba:	4276      	negs	r6, r6
 80074bc:	2a00      	cmp	r2, #0
 80074be:	d0f9      	beq.n	80074b4 <_strtol_l.constprop.0+0xd4>
 80074c0:	f1bc 0f00 	cmp.w	ip, #0
 80074c4:	d000      	beq.n	80074c8 <_strtol_l.constprop.0+0xe8>
 80074c6:	1e69      	subs	r1, r5, #1
 80074c8:	6011      	str	r1, [r2, #0]
 80074ca:	e7f3      	b.n	80074b4 <_strtol_l.constprop.0+0xd4>
 80074cc:	2430      	movs	r4, #48	; 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1b1      	bne.n	8007436 <_strtol_l.constprop.0+0x56>
 80074d2:	2308      	movs	r3, #8
 80074d4:	e7af      	b.n	8007436 <_strtol_l.constprop.0+0x56>
 80074d6:	2c30      	cmp	r4, #48	; 0x30
 80074d8:	d0a5      	beq.n	8007426 <_strtol_l.constprop.0+0x46>
 80074da:	230a      	movs	r3, #10
 80074dc:	e7ab      	b.n	8007436 <_strtol_l.constprop.0+0x56>
 80074de:	bf00      	nop
 80074e0:	0800a429 	.word	0x0800a429

080074e4 <_strtol_r>:
 80074e4:	f7ff bf7c 	b.w	80073e0 <_strtol_l.constprop.0>

080074e8 <quorem>:
 80074e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	6903      	ldr	r3, [r0, #16]
 80074ee:	690c      	ldr	r4, [r1, #16]
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	4607      	mov	r7, r0
 80074f4:	f2c0 8081 	blt.w	80075fa <quorem+0x112>
 80074f8:	3c01      	subs	r4, #1
 80074fa:	f101 0814 	add.w	r8, r1, #20
 80074fe:	f100 0514 	add.w	r5, r0, #20
 8007502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800750c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007510:	3301      	adds	r3, #1
 8007512:	429a      	cmp	r2, r3
 8007514:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007518:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800751c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007520:	d331      	bcc.n	8007586 <quorem+0x9e>
 8007522:	f04f 0e00 	mov.w	lr, #0
 8007526:	4640      	mov	r0, r8
 8007528:	46ac      	mov	ip, r5
 800752a:	46f2      	mov	sl, lr
 800752c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007530:	b293      	uxth	r3, r2
 8007532:	fb06 e303 	mla	r3, r6, r3, lr
 8007536:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800753a:	b29b      	uxth	r3, r3
 800753c:	ebaa 0303 	sub.w	r3, sl, r3
 8007540:	f8dc a000 	ldr.w	sl, [ip]
 8007544:	0c12      	lsrs	r2, r2, #16
 8007546:	fa13 f38a 	uxtah	r3, r3, sl
 800754a:	fb06 e202 	mla	r2, r6, r2, lr
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	9b00      	ldr	r3, [sp, #0]
 8007552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007556:	b292      	uxth	r2, r2
 8007558:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800755c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007560:	f8bd 3000 	ldrh.w	r3, [sp]
 8007564:	4581      	cmp	r9, r0
 8007566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800756a:	f84c 3b04 	str.w	r3, [ip], #4
 800756e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007572:	d2db      	bcs.n	800752c <quorem+0x44>
 8007574:	f855 300b 	ldr.w	r3, [r5, fp]
 8007578:	b92b      	cbnz	r3, 8007586 <quorem+0x9e>
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	3b04      	subs	r3, #4
 800757e:	429d      	cmp	r5, r3
 8007580:	461a      	mov	r2, r3
 8007582:	d32e      	bcc.n	80075e2 <quorem+0xfa>
 8007584:	613c      	str	r4, [r7, #16]
 8007586:	4638      	mov	r0, r7
 8007588:	f001 fc90 	bl	8008eac <__mcmp>
 800758c:	2800      	cmp	r0, #0
 800758e:	db24      	blt.n	80075da <quorem+0xf2>
 8007590:	3601      	adds	r6, #1
 8007592:	4628      	mov	r0, r5
 8007594:	f04f 0c00 	mov.w	ip, #0
 8007598:	f858 2b04 	ldr.w	r2, [r8], #4
 800759c:	f8d0 e000 	ldr.w	lr, [r0]
 80075a0:	b293      	uxth	r3, r2
 80075a2:	ebac 0303 	sub.w	r3, ip, r3
 80075a6:	0c12      	lsrs	r2, r2, #16
 80075a8:	fa13 f38e 	uxtah	r3, r3, lr
 80075ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ba:	45c1      	cmp	r9, r8
 80075bc:	f840 3b04 	str.w	r3, [r0], #4
 80075c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075c4:	d2e8      	bcs.n	8007598 <quorem+0xb0>
 80075c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ce:	b922      	cbnz	r2, 80075da <quorem+0xf2>
 80075d0:	3b04      	subs	r3, #4
 80075d2:	429d      	cmp	r5, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	d30a      	bcc.n	80075ee <quorem+0x106>
 80075d8:	613c      	str	r4, [r7, #16]
 80075da:	4630      	mov	r0, r6
 80075dc:	b003      	add	sp, #12
 80075de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d1cc      	bne.n	8007584 <quorem+0x9c>
 80075ea:	3c01      	subs	r4, #1
 80075ec:	e7c7      	b.n	800757e <quorem+0x96>
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	d1f0      	bne.n	80075d8 <quorem+0xf0>
 80075f6:	3c01      	subs	r4, #1
 80075f8:	e7eb      	b.n	80075d2 <quorem+0xea>
 80075fa:	2000      	movs	r0, #0
 80075fc:	e7ee      	b.n	80075dc <quorem+0xf4>
	...

08007600 <_dtoa_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b04 	vpush	{d8-d9}
 8007608:	ec57 6b10 	vmov	r6, r7, d0
 800760c:	b093      	sub	sp, #76	; 0x4c
 800760e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007614:	9106      	str	r1, [sp, #24]
 8007616:	ee10 aa10 	vmov	sl, s0
 800761a:	4604      	mov	r4, r0
 800761c:	9209      	str	r2, [sp, #36]	; 0x24
 800761e:	930c      	str	r3, [sp, #48]	; 0x30
 8007620:	46bb      	mov	fp, r7
 8007622:	b975      	cbnz	r5, 8007642 <_dtoa_r+0x42>
 8007624:	2010      	movs	r0, #16
 8007626:	f001 f94d 	bl	80088c4 <malloc>
 800762a:	4602      	mov	r2, r0
 800762c:	6260      	str	r0, [r4, #36]	; 0x24
 800762e:	b920      	cbnz	r0, 800763a <_dtoa_r+0x3a>
 8007630:	4ba7      	ldr	r3, [pc, #668]	; (80078d0 <_dtoa_r+0x2d0>)
 8007632:	21ea      	movs	r1, #234	; 0xea
 8007634:	48a7      	ldr	r0, [pc, #668]	; (80078d4 <_dtoa_r+0x2d4>)
 8007636:	f002 f8bd 	bl	80097b4 <__assert_func>
 800763a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800763e:	6005      	str	r5, [r0, #0]
 8007640:	60c5      	str	r5, [r0, #12]
 8007642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007644:	6819      	ldr	r1, [r3, #0]
 8007646:	b151      	cbz	r1, 800765e <_dtoa_r+0x5e>
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	604a      	str	r2, [r1, #4]
 800764c:	2301      	movs	r3, #1
 800764e:	4093      	lsls	r3, r2
 8007650:	608b      	str	r3, [r1, #8]
 8007652:	4620      	mov	r0, r4
 8007654:	f001 f99e 	bl	8008994 <_Bfree>
 8007658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	1e3b      	subs	r3, r7, #0
 8007660:	bfaa      	itet	ge
 8007662:	2300      	movge	r3, #0
 8007664:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007668:	f8c8 3000 	strge.w	r3, [r8]
 800766c:	4b9a      	ldr	r3, [pc, #616]	; (80078d8 <_dtoa_r+0x2d8>)
 800766e:	bfbc      	itt	lt
 8007670:	2201      	movlt	r2, #1
 8007672:	f8c8 2000 	strlt.w	r2, [r8]
 8007676:	ea33 030b 	bics.w	r3, r3, fp
 800767a:	d11b      	bne.n	80076b4 <_dtoa_r+0xb4>
 800767c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800767e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007688:	4333      	orrs	r3, r6
 800768a:	f000 8592 	beq.w	80081b2 <_dtoa_r+0xbb2>
 800768e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007690:	b963      	cbnz	r3, 80076ac <_dtoa_r+0xac>
 8007692:	4b92      	ldr	r3, [pc, #584]	; (80078dc <_dtoa_r+0x2dc>)
 8007694:	e022      	b.n	80076dc <_dtoa_r+0xdc>
 8007696:	4b92      	ldr	r3, [pc, #584]	; (80078e0 <_dtoa_r+0x2e0>)
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	3308      	adds	r3, #8
 800769c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	9801      	ldr	r0, [sp, #4]
 80076a2:	b013      	add	sp, #76	; 0x4c
 80076a4:	ecbd 8b04 	vpop	{d8-d9}
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	4b8b      	ldr	r3, [pc, #556]	; (80078dc <_dtoa_r+0x2dc>)
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	3303      	adds	r3, #3
 80076b2:	e7f3      	b.n	800769c <_dtoa_r+0x9c>
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	4650      	mov	r0, sl
 80076ba:	4659      	mov	r1, fp
 80076bc:	f7f9 fa24 	bl	8000b08 <__aeabi_dcmpeq>
 80076c0:	ec4b ab19 	vmov	d9, sl, fp
 80076c4:	4680      	mov	r8, r0
 80076c6:	b158      	cbz	r0, 80076e0 <_dtoa_r+0xe0>
 80076c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076ca:	2301      	movs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 856b 	beq.w	80081ac <_dtoa_r+0xbac>
 80076d6:	4883      	ldr	r0, [pc, #524]	; (80078e4 <_dtoa_r+0x2e4>)
 80076d8:	6018      	str	r0, [r3, #0]
 80076da:	1e43      	subs	r3, r0, #1
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	e7df      	b.n	80076a0 <_dtoa_r+0xa0>
 80076e0:	ec4b ab10 	vmov	d0, sl, fp
 80076e4:	aa10      	add	r2, sp, #64	; 0x40
 80076e6:	a911      	add	r1, sp, #68	; 0x44
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 fd01 	bl	80090f0 <__d2b>
 80076ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80076f2:	ee08 0a10 	vmov	s16, r0
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	f000 8084 	beq.w	8007804 <_dtoa_r+0x204>
 80076fc:	ee19 3a90 	vmov	r3, s19
 8007700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007704:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007708:	4656      	mov	r6, sl
 800770a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800770e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007712:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007716:	4b74      	ldr	r3, [pc, #464]	; (80078e8 <_dtoa_r+0x2e8>)
 8007718:	2200      	movs	r2, #0
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 fdd3 	bl	80002c8 <__aeabi_dsub>
 8007722:	a365      	add	r3, pc, #404	; (adr r3, 80078b8 <_dtoa_r+0x2b8>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 ff86 	bl	8000638 <__aeabi_dmul>
 800772c:	a364      	add	r3, pc, #400	; (adr r3, 80078c0 <_dtoa_r+0x2c0>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fdcb 	bl	80002cc <__adddf3>
 8007736:	4606      	mov	r6, r0
 8007738:	4628      	mov	r0, r5
 800773a:	460f      	mov	r7, r1
 800773c:	f7f8 ff12 	bl	8000564 <__aeabi_i2d>
 8007740:	a361      	add	r3, pc, #388	; (adr r3, 80078c8 <_dtoa_r+0x2c8>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f7f8 ff77 	bl	8000638 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f8 fdbb 	bl	80002cc <__adddf3>
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	f7f9 fa1d 	bl	8000b98 <__aeabi_d2iz>
 800775e:	2200      	movs	r2, #0
 8007760:	9000      	str	r0, [sp, #0]
 8007762:	2300      	movs	r3, #0
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f9 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800776c:	b150      	cbz	r0, 8007784 <_dtoa_r+0x184>
 800776e:	9800      	ldr	r0, [sp, #0]
 8007770:	f7f8 fef8 	bl	8000564 <__aeabi_i2d>
 8007774:	4632      	mov	r2, r6
 8007776:	463b      	mov	r3, r7
 8007778:	f7f9 f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 800777c:	b910      	cbnz	r0, 8007784 <_dtoa_r+0x184>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	3b01      	subs	r3, #1
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	9b00      	ldr	r3, [sp, #0]
 8007786:	2b16      	cmp	r3, #22
 8007788:	d85a      	bhi.n	8007840 <_dtoa_r+0x240>
 800778a:	9a00      	ldr	r2, [sp, #0]
 800778c:	4b57      	ldr	r3, [pc, #348]	; (80078ec <_dtoa_r+0x2ec>)
 800778e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	ec51 0b19 	vmov	r0, r1, d9
 800779a:	f7f9 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d050      	beq.n	8007844 <_dtoa_r+0x244>
 80077a2:	9b00      	ldr	r3, [sp, #0]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077ae:	1b5d      	subs	r5, r3, r5
 80077b0:	1e6b      	subs	r3, r5, #1
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	bf45      	ittet	mi
 80077b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80077ba:	9304      	strmi	r3, [sp, #16]
 80077bc:	2300      	movpl	r3, #0
 80077be:	2300      	movmi	r3, #0
 80077c0:	bf4c      	ite	mi
 80077c2:	9305      	strmi	r3, [sp, #20]
 80077c4:	9304      	strpl	r3, [sp, #16]
 80077c6:	9b00      	ldr	r3, [sp, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db3d      	blt.n	8007848 <_dtoa_r+0x248>
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	9a00      	ldr	r2, [sp, #0]
 80077d0:	920a      	str	r2, [sp, #40]	; 0x28
 80077d2:	4413      	add	r3, r2
 80077d4:	9305      	str	r3, [sp, #20]
 80077d6:	2300      	movs	r3, #0
 80077d8:	9307      	str	r3, [sp, #28]
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2b09      	cmp	r3, #9
 80077de:	f200 8089 	bhi.w	80078f4 <_dtoa_r+0x2f4>
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	bfc4      	itt	gt
 80077e6:	3b04      	subgt	r3, #4
 80077e8:	9306      	strgt	r3, [sp, #24]
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	f1a3 0302 	sub.w	r3, r3, #2
 80077f0:	bfcc      	ite	gt
 80077f2:	2500      	movgt	r5, #0
 80077f4:	2501      	movle	r5, #1
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	f200 8087 	bhi.w	800790a <_dtoa_r+0x30a>
 80077fc:	e8df f003 	tbb	[pc, r3]
 8007800:	59383a2d 	.word	0x59383a2d
 8007804:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007808:	441d      	add	r5, r3
 800780a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800780e:	2b20      	cmp	r3, #32
 8007810:	bfc1      	itttt	gt
 8007812:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007816:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800781a:	fa0b f303 	lslgt.w	r3, fp, r3
 800781e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007822:	bfda      	itte	le
 8007824:	f1c3 0320 	rsble	r3, r3, #32
 8007828:	fa06 f003 	lslle.w	r0, r6, r3
 800782c:	4318      	orrgt	r0, r3
 800782e:	f7f8 fe89 	bl	8000544 <__aeabi_ui2d>
 8007832:	2301      	movs	r3, #1
 8007834:	4606      	mov	r6, r0
 8007836:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800783a:	3d01      	subs	r5, #1
 800783c:	930e      	str	r3, [sp, #56]	; 0x38
 800783e:	e76a      	b.n	8007716 <_dtoa_r+0x116>
 8007840:	2301      	movs	r3, #1
 8007842:	e7b2      	b.n	80077aa <_dtoa_r+0x1aa>
 8007844:	900b      	str	r0, [sp, #44]	; 0x2c
 8007846:	e7b1      	b.n	80077ac <_dtoa_r+0x1ac>
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	9a00      	ldr	r2, [sp, #0]
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	4253      	negs	r3, r2
 8007852:	9307      	str	r3, [sp, #28]
 8007854:	2300      	movs	r3, #0
 8007856:	930a      	str	r3, [sp, #40]	; 0x28
 8007858:	e7bf      	b.n	80077da <_dtoa_r+0x1da>
 800785a:	2300      	movs	r3, #0
 800785c:	9308      	str	r3, [sp, #32]
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	dc55      	bgt.n	8007910 <_dtoa_r+0x310>
 8007864:	2301      	movs	r3, #1
 8007866:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800786a:	461a      	mov	r2, r3
 800786c:	9209      	str	r2, [sp, #36]	; 0x24
 800786e:	e00c      	b.n	800788a <_dtoa_r+0x28a>
 8007870:	2301      	movs	r3, #1
 8007872:	e7f3      	b.n	800785c <_dtoa_r+0x25c>
 8007874:	2300      	movs	r3, #0
 8007876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007878:	9308      	str	r3, [sp, #32]
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	4413      	add	r3, r2
 800787e:	9302      	str	r3, [sp, #8]
 8007880:	3301      	adds	r3, #1
 8007882:	2b01      	cmp	r3, #1
 8007884:	9303      	str	r3, [sp, #12]
 8007886:	bfb8      	it	lt
 8007888:	2301      	movlt	r3, #1
 800788a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800788c:	2200      	movs	r2, #0
 800788e:	6042      	str	r2, [r0, #4]
 8007890:	2204      	movs	r2, #4
 8007892:	f102 0614 	add.w	r6, r2, #20
 8007896:	429e      	cmp	r6, r3
 8007898:	6841      	ldr	r1, [r0, #4]
 800789a:	d93d      	bls.n	8007918 <_dtoa_r+0x318>
 800789c:	4620      	mov	r0, r4
 800789e:	f001 f839 	bl	8008914 <_Balloc>
 80078a2:	9001      	str	r0, [sp, #4]
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d13b      	bne.n	8007920 <_dtoa_r+0x320>
 80078a8:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <_dtoa_r+0x2f0>)
 80078aa:	4602      	mov	r2, r0
 80078ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078b0:	e6c0      	b.n	8007634 <_dtoa_r+0x34>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7df      	b.n	8007876 <_dtoa_r+0x276>
 80078b6:	bf00      	nop
 80078b8:	636f4361 	.word	0x636f4361
 80078bc:	3fd287a7 	.word	0x3fd287a7
 80078c0:	8b60c8b3 	.word	0x8b60c8b3
 80078c4:	3fc68a28 	.word	0x3fc68a28
 80078c8:	509f79fb 	.word	0x509f79fb
 80078cc:	3fd34413 	.word	0x3fd34413
 80078d0:	0800a536 	.word	0x0800a536
 80078d4:	0800a54d 	.word	0x0800a54d
 80078d8:	7ff00000 	.word	0x7ff00000
 80078dc:	0800a532 	.word	0x0800a532
 80078e0:	0800a529 	.word	0x0800a529
 80078e4:	0800a3a9 	.word	0x0800a3a9
 80078e8:	3ff80000 	.word	0x3ff80000
 80078ec:	0800a6b8 	.word	0x0800a6b8
 80078f0:	0800a5a8 	.word	0x0800a5a8
 80078f4:	2501      	movs	r5, #1
 80078f6:	2300      	movs	r3, #0
 80078f8:	9306      	str	r3, [sp, #24]
 80078fa:	9508      	str	r5, [sp, #32]
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007900:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	2312      	movs	r3, #18
 8007908:	e7b0      	b.n	800786c <_dtoa_r+0x26c>
 800790a:	2301      	movs	r3, #1
 800790c:	9308      	str	r3, [sp, #32]
 800790e:	e7f5      	b.n	80078fc <_dtoa_r+0x2fc>
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007916:	e7b8      	b.n	800788a <_dtoa_r+0x28a>
 8007918:	3101      	adds	r1, #1
 800791a:	6041      	str	r1, [r0, #4]
 800791c:	0052      	lsls	r2, r2, #1
 800791e:	e7b8      	b.n	8007892 <_dtoa_r+0x292>
 8007920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007922:	9a01      	ldr	r2, [sp, #4]
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	2b0e      	cmp	r3, #14
 800792a:	f200 809d 	bhi.w	8007a68 <_dtoa_r+0x468>
 800792e:	2d00      	cmp	r5, #0
 8007930:	f000 809a 	beq.w	8007a68 <_dtoa_r+0x468>
 8007934:	9b00      	ldr	r3, [sp, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	dd32      	ble.n	80079a0 <_dtoa_r+0x3a0>
 800793a:	4ab7      	ldr	r2, [pc, #732]	; (8007c18 <_dtoa_r+0x618>)
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007944:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	05d8      	lsls	r0, r3, #23
 800794c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007950:	d516      	bpl.n	8007980 <_dtoa_r+0x380>
 8007952:	4bb2      	ldr	r3, [pc, #712]	; (8007c1c <_dtoa_r+0x61c>)
 8007954:	ec51 0b19 	vmov	r0, r1, d9
 8007958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800795c:	f7f8 ff96 	bl	800088c <__aeabi_ddiv>
 8007960:	f007 070f 	and.w	r7, r7, #15
 8007964:	4682      	mov	sl, r0
 8007966:	468b      	mov	fp, r1
 8007968:	2503      	movs	r5, #3
 800796a:	4eac      	ldr	r6, [pc, #688]	; (8007c1c <_dtoa_r+0x61c>)
 800796c:	b957      	cbnz	r7, 8007984 <_dtoa_r+0x384>
 800796e:	4642      	mov	r2, r8
 8007970:	464b      	mov	r3, r9
 8007972:	4650      	mov	r0, sl
 8007974:	4659      	mov	r1, fp
 8007976:	f7f8 ff89 	bl	800088c <__aeabi_ddiv>
 800797a:	4682      	mov	sl, r0
 800797c:	468b      	mov	fp, r1
 800797e:	e028      	b.n	80079d2 <_dtoa_r+0x3d2>
 8007980:	2502      	movs	r5, #2
 8007982:	e7f2      	b.n	800796a <_dtoa_r+0x36a>
 8007984:	07f9      	lsls	r1, r7, #31
 8007986:	d508      	bpl.n	800799a <_dtoa_r+0x39a>
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007990:	f7f8 fe52 	bl	8000638 <__aeabi_dmul>
 8007994:	3501      	adds	r5, #1
 8007996:	4680      	mov	r8, r0
 8007998:	4689      	mov	r9, r1
 800799a:	107f      	asrs	r7, r7, #1
 800799c:	3608      	adds	r6, #8
 800799e:	e7e5      	b.n	800796c <_dtoa_r+0x36c>
 80079a0:	f000 809b 	beq.w	8007ada <_dtoa_r+0x4da>
 80079a4:	9b00      	ldr	r3, [sp, #0]
 80079a6:	4f9d      	ldr	r7, [pc, #628]	; (8007c1c <_dtoa_r+0x61c>)
 80079a8:	425e      	negs	r6, r3
 80079aa:	4b9b      	ldr	r3, [pc, #620]	; (8007c18 <_dtoa_r+0x618>)
 80079ac:	f006 020f 	and.w	r2, r6, #15
 80079b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	ec51 0b19 	vmov	r0, r1, d9
 80079bc:	f7f8 fe3c 	bl	8000638 <__aeabi_dmul>
 80079c0:	1136      	asrs	r6, r6, #4
 80079c2:	4682      	mov	sl, r0
 80079c4:	468b      	mov	fp, r1
 80079c6:	2300      	movs	r3, #0
 80079c8:	2502      	movs	r5, #2
 80079ca:	2e00      	cmp	r6, #0
 80079cc:	d17a      	bne.n	8007ac4 <_dtoa_r+0x4c4>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1d3      	bne.n	800797a <_dtoa_r+0x37a>
 80079d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8082 	beq.w	8007ade <_dtoa_r+0x4de>
 80079da:	4b91      	ldr	r3, [pc, #580]	; (8007c20 <_dtoa_r+0x620>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4650      	mov	r0, sl
 80079e0:	4659      	mov	r1, fp
 80079e2:	f7f9 f89b 	bl	8000b1c <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d079      	beq.n	8007ade <_dtoa_r+0x4de>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d076      	beq.n	8007ade <_dtoa_r+0x4de>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dd36      	ble.n	8007a64 <_dtoa_r+0x464>
 80079f6:	9b00      	ldr	r3, [sp, #0]
 80079f8:	4650      	mov	r0, sl
 80079fa:	4659      	mov	r1, fp
 80079fc:	1e5f      	subs	r7, r3, #1
 80079fe:	2200      	movs	r2, #0
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <_dtoa_r+0x624>)
 8007a02:	f7f8 fe19 	bl	8000638 <__aeabi_dmul>
 8007a06:	9e02      	ldr	r6, [sp, #8]
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f7f8 fda8 	bl	8000564 <__aeabi_i2d>
 8007a14:	4652      	mov	r2, sl
 8007a16:	465b      	mov	r3, fp
 8007a18:	f7f8 fe0e 	bl	8000638 <__aeabi_dmul>
 8007a1c:	4b82      	ldr	r3, [pc, #520]	; (8007c28 <_dtoa_r+0x628>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f7f8 fc54 	bl	80002cc <__adddf3>
 8007a24:	46d0      	mov	r8, sl
 8007a26:	46d9      	mov	r9, fp
 8007a28:	4682      	mov	sl, r0
 8007a2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d158      	bne.n	8007ae4 <_dtoa_r+0x4e4>
 8007a32:	4b7e      	ldr	r3, [pc, #504]	; (8007c2c <_dtoa_r+0x62c>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	4640      	mov	r0, r8
 8007a38:	4649      	mov	r1, r9
 8007a3a:	f7f8 fc45 	bl	80002c8 <__aeabi_dsub>
 8007a3e:	4652      	mov	r2, sl
 8007a40:	465b      	mov	r3, fp
 8007a42:	4680      	mov	r8, r0
 8007a44:	4689      	mov	r9, r1
 8007a46:	f7f9 f887 	bl	8000b58 <__aeabi_dcmpgt>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f040 8295 	bne.w	8007f7a <_dtoa_r+0x97a>
 8007a50:	4652      	mov	r2, sl
 8007a52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a56:	4640      	mov	r0, r8
 8007a58:	4649      	mov	r1, r9
 8007a5a:	f7f9 f85f 	bl	8000b1c <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f040 8289 	bne.w	8007f76 <_dtoa_r+0x976>
 8007a64:	ec5b ab19 	vmov	sl, fp, d9
 8007a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f2c0 8148 	blt.w	8007d00 <_dtoa_r+0x700>
 8007a70:	9a00      	ldr	r2, [sp, #0]
 8007a72:	2a0e      	cmp	r2, #14
 8007a74:	f300 8144 	bgt.w	8007d00 <_dtoa_r+0x700>
 8007a78:	4b67      	ldr	r3, [pc, #412]	; (8007c18 <_dtoa_r+0x618>)
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f280 80d5 	bge.w	8007c34 <_dtoa_r+0x634>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f300 80d1 	bgt.w	8007c34 <_dtoa_r+0x634>
 8007a92:	f040 826f 	bne.w	8007f74 <_dtoa_r+0x974>
 8007a96:	4b65      	ldr	r3, [pc, #404]	; (8007c2c <_dtoa_r+0x62c>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fdcb 	bl	8000638 <__aeabi_dmul>
 8007aa2:	4652      	mov	r2, sl
 8007aa4:	465b      	mov	r3, fp
 8007aa6:	f7f9 f84d 	bl	8000b44 <__aeabi_dcmpge>
 8007aaa:	9e03      	ldr	r6, [sp, #12]
 8007aac:	4637      	mov	r7, r6
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f040 8245 	bne.w	8007f3e <_dtoa_r+0x93e>
 8007ab4:	9d01      	ldr	r5, [sp, #4]
 8007ab6:	2331      	movs	r3, #49	; 0x31
 8007ab8:	f805 3b01 	strb.w	r3, [r5], #1
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	e240      	b.n	8007f46 <_dtoa_r+0x946>
 8007ac4:	07f2      	lsls	r2, r6, #31
 8007ac6:	d505      	bpl.n	8007ad4 <_dtoa_r+0x4d4>
 8007ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007acc:	f7f8 fdb4 	bl	8000638 <__aeabi_dmul>
 8007ad0:	3501      	adds	r5, #1
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	1076      	asrs	r6, r6, #1
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	e777      	b.n	80079ca <_dtoa_r+0x3ca>
 8007ada:	2502      	movs	r5, #2
 8007adc:	e779      	b.n	80079d2 <_dtoa_r+0x3d2>
 8007ade:	9f00      	ldr	r7, [sp, #0]
 8007ae0:	9e03      	ldr	r6, [sp, #12]
 8007ae2:	e794      	b.n	8007a0e <_dtoa_r+0x40e>
 8007ae4:	9901      	ldr	r1, [sp, #4]
 8007ae6:	4b4c      	ldr	r3, [pc, #304]	; (8007c18 <_dtoa_r+0x618>)
 8007ae8:	4431      	add	r1, r6
 8007aea:	910d      	str	r1, [sp, #52]	; 0x34
 8007aec:	9908      	ldr	r1, [sp, #32]
 8007aee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007af2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007af6:	2900      	cmp	r1, #0
 8007af8:	d043      	beq.n	8007b82 <_dtoa_r+0x582>
 8007afa:	494d      	ldr	r1, [pc, #308]	; (8007c30 <_dtoa_r+0x630>)
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7f8 fec5 	bl	800088c <__aeabi_ddiv>
 8007b02:	4652      	mov	r2, sl
 8007b04:	465b      	mov	r3, fp
 8007b06:	f7f8 fbdf 	bl	80002c8 <__aeabi_dsub>
 8007b0a:	9d01      	ldr	r5, [sp, #4]
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	468b      	mov	fp, r1
 8007b10:	4649      	mov	r1, r9
 8007b12:	4640      	mov	r0, r8
 8007b14:	f7f9 f840 	bl	8000b98 <__aeabi_d2iz>
 8007b18:	4606      	mov	r6, r0
 8007b1a:	f7f8 fd23 	bl	8000564 <__aeabi_i2d>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 fbcf 	bl	80002c8 <__aeabi_dsub>
 8007b2a:	3630      	adds	r6, #48	; 0x30
 8007b2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	465b      	mov	r3, fp
 8007b34:	4680      	mov	r8, r0
 8007b36:	4689      	mov	r9, r1
 8007b38:	f7f8 fff0 	bl	8000b1c <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d163      	bne.n	8007c08 <_dtoa_r+0x608>
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	4936      	ldr	r1, [pc, #216]	; (8007c20 <_dtoa_r+0x620>)
 8007b46:	2000      	movs	r0, #0
 8007b48:	f7f8 fbbe 	bl	80002c8 <__aeabi_dsub>
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	465b      	mov	r3, fp
 8007b50:	f7f8 ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 80b5 	bne.w	8007cc4 <_dtoa_r+0x6c4>
 8007b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5c:	429d      	cmp	r5, r3
 8007b5e:	d081      	beq.n	8007a64 <_dtoa_r+0x464>
 8007b60:	4b30      	ldr	r3, [pc, #192]	; (8007c24 <_dtoa_r+0x624>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	4650      	mov	r0, sl
 8007b66:	4659      	mov	r1, fp
 8007b68:	f7f8 fd66 	bl	8000638 <__aeabi_dmul>
 8007b6c:	4b2d      	ldr	r3, [pc, #180]	; (8007c24 <_dtoa_r+0x624>)
 8007b6e:	4682      	mov	sl, r0
 8007b70:	468b      	mov	fp, r1
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	2200      	movs	r2, #0
 8007b78:	f7f8 fd5e 	bl	8000638 <__aeabi_dmul>
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	4689      	mov	r9, r1
 8007b80:	e7c6      	b.n	8007b10 <_dtoa_r+0x510>
 8007b82:	4650      	mov	r0, sl
 8007b84:	4659      	mov	r1, fp
 8007b86:	f7f8 fd57 	bl	8000638 <__aeabi_dmul>
 8007b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8c:	9d01      	ldr	r5, [sp, #4]
 8007b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b90:	4682      	mov	sl, r0
 8007b92:	468b      	mov	fp, r1
 8007b94:	4649      	mov	r1, r9
 8007b96:	4640      	mov	r0, r8
 8007b98:	f7f8 fffe 	bl	8000b98 <__aeabi_d2iz>
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	f7f8 fce1 	bl	8000564 <__aeabi_i2d>
 8007ba2:	3630      	adds	r6, #48	; 0x30
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 fb8c 	bl	80002c8 <__aeabi_dsub>
 8007bb0:	f805 6b01 	strb.w	r6, [r5], #1
 8007bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	4680      	mov	r8, r0
 8007bba:	4689      	mov	r9, r1
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	d124      	bne.n	8007c0c <_dtoa_r+0x60c>
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <_dtoa_r+0x630>)
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	4659      	mov	r1, fp
 8007bc8:	f7f8 fb80 	bl	80002cc <__adddf3>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 ffc0 	bl	8000b58 <__aeabi_dcmpgt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d173      	bne.n	8007cc4 <_dtoa_r+0x6c4>
 8007bdc:	4652      	mov	r2, sl
 8007bde:	465b      	mov	r3, fp
 8007be0:	4913      	ldr	r1, [pc, #76]	; (8007c30 <_dtoa_r+0x630>)
 8007be2:	2000      	movs	r0, #0
 8007be4:	f7f8 fb70 	bl	80002c8 <__aeabi_dsub>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4640      	mov	r0, r8
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 ff94 	bl	8000b1c <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f af35 	beq.w	8007a64 <_dtoa_r+0x464>
 8007bfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bfc:	1e6b      	subs	r3, r5, #1
 8007bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c04:	2b30      	cmp	r3, #48	; 0x30
 8007c06:	d0f8      	beq.n	8007bfa <_dtoa_r+0x5fa>
 8007c08:	9700      	str	r7, [sp, #0]
 8007c0a:	e049      	b.n	8007ca0 <_dtoa_r+0x6a0>
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <_dtoa_r+0x624>)
 8007c0e:	f7f8 fd13 	bl	8000638 <__aeabi_dmul>
 8007c12:	4680      	mov	r8, r0
 8007c14:	4689      	mov	r9, r1
 8007c16:	e7bd      	b.n	8007b94 <_dtoa_r+0x594>
 8007c18:	0800a6b8 	.word	0x0800a6b8
 8007c1c:	0800a690 	.word	0x0800a690
 8007c20:	3ff00000 	.word	0x3ff00000
 8007c24:	40240000 	.word	0x40240000
 8007c28:	401c0000 	.word	0x401c0000
 8007c2c:	40140000 	.word	0x40140000
 8007c30:	3fe00000 	.word	0x3fe00000
 8007c34:	9d01      	ldr	r5, [sp, #4]
 8007c36:	4656      	mov	r6, sl
 8007c38:	465f      	mov	r7, fp
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	4630      	mov	r0, r6
 8007c40:	4639      	mov	r1, r7
 8007c42:	f7f8 fe23 	bl	800088c <__aeabi_ddiv>
 8007c46:	f7f8 ffa7 	bl	8000b98 <__aeabi_d2iz>
 8007c4a:	4682      	mov	sl, r0
 8007c4c:	f7f8 fc8a 	bl	8000564 <__aeabi_i2d>
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	f7f8 fcf0 	bl	8000638 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c64:	f7f8 fb30 	bl	80002c8 <__aeabi_dsub>
 8007c68:	f805 6b01 	strb.w	r6, [r5], #1
 8007c6c:	9e01      	ldr	r6, [sp, #4]
 8007c6e:	9f03      	ldr	r7, [sp, #12]
 8007c70:	1bae      	subs	r6, r5, r6
 8007c72:	42b7      	cmp	r7, r6
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	d135      	bne.n	8007ce6 <_dtoa_r+0x6e6>
 8007c7a:	f7f8 fb27 	bl	80002cc <__adddf3>
 8007c7e:	4642      	mov	r2, r8
 8007c80:	464b      	mov	r3, r9
 8007c82:	4606      	mov	r6, r0
 8007c84:	460f      	mov	r7, r1
 8007c86:	f7f8 ff67 	bl	8000b58 <__aeabi_dcmpgt>
 8007c8a:	b9d0      	cbnz	r0, 8007cc2 <_dtoa_r+0x6c2>
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8007c98:	b110      	cbz	r0, 8007ca0 <_dtoa_r+0x6a0>
 8007c9a:	f01a 0f01 	tst.w	sl, #1
 8007c9e:	d110      	bne.n	8007cc2 <_dtoa_r+0x6c2>
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	ee18 1a10 	vmov	r1, s16
 8007ca6:	f000 fe75 	bl	8008994 <_Bfree>
 8007caa:	2300      	movs	r3, #0
 8007cac:	9800      	ldr	r0, [sp, #0]
 8007cae:	702b      	strb	r3, [r5, #0]
 8007cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	6018      	str	r0, [r3, #0]
 8007cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f43f acf1 	beq.w	80076a0 <_dtoa_r+0xa0>
 8007cbe:	601d      	str	r5, [r3, #0]
 8007cc0:	e4ee      	b.n	80076a0 <_dtoa_r+0xa0>
 8007cc2:	9f00      	ldr	r7, [sp, #0]
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ccc:	2a39      	cmp	r2, #57	; 0x39
 8007cce:	d106      	bne.n	8007cde <_dtoa_r+0x6de>
 8007cd0:	9a01      	ldr	r2, [sp, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d1f7      	bne.n	8007cc6 <_dtoa_r+0x6c6>
 8007cd6:	9901      	ldr	r1, [sp, #4]
 8007cd8:	2230      	movs	r2, #48	; 0x30
 8007cda:	3701      	adds	r7, #1
 8007cdc:	700a      	strb	r2, [r1, #0]
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	3201      	adds	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e790      	b.n	8007c08 <_dtoa_r+0x608>
 8007ce6:	4ba6      	ldr	r3, [pc, #664]	; (8007f80 <_dtoa_r+0x980>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fca5 	bl	8000638 <__aeabi_dmul>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	f7f8 ff07 	bl	8000b08 <__aeabi_dcmpeq>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d09d      	beq.n	8007c3a <_dtoa_r+0x63a>
 8007cfe:	e7cf      	b.n	8007ca0 <_dtoa_r+0x6a0>
 8007d00:	9a08      	ldr	r2, [sp, #32]
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	f000 80d7 	beq.w	8007eb6 <_dtoa_r+0x8b6>
 8007d08:	9a06      	ldr	r2, [sp, #24]
 8007d0a:	2a01      	cmp	r2, #1
 8007d0c:	f300 80ba 	bgt.w	8007e84 <_dtoa_r+0x884>
 8007d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	f000 80b2 	beq.w	8007e7c <_dtoa_r+0x87c>
 8007d18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d1c:	9e07      	ldr	r6, [sp, #28]
 8007d1e:	9d04      	ldr	r5, [sp, #16]
 8007d20:	9a04      	ldr	r2, [sp, #16]
 8007d22:	441a      	add	r2, r3
 8007d24:	9204      	str	r2, [sp, #16]
 8007d26:	9a05      	ldr	r2, [sp, #20]
 8007d28:	2101      	movs	r1, #1
 8007d2a:	441a      	add	r2, r3
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	9205      	str	r2, [sp, #20]
 8007d30:	f000 ff32 	bl	8008b98 <__i2b>
 8007d34:	4607      	mov	r7, r0
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	dd0c      	ble.n	8007d54 <_dtoa_r+0x754>
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dd09      	ble.n	8007d54 <_dtoa_r+0x754>
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	9a04      	ldr	r2, [sp, #16]
 8007d44:	bfa8      	it	ge
 8007d46:	462b      	movge	r3, r5
 8007d48:	1ad2      	subs	r2, r2, r3
 8007d4a:	9204      	str	r2, [sp, #16]
 8007d4c:	9a05      	ldr	r2, [sp, #20]
 8007d4e:	1aed      	subs	r5, r5, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	9305      	str	r3, [sp, #20]
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	b31b      	cbz	r3, 8007da0 <_dtoa_r+0x7a0>
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80af 	beq.w	8007ebe <_dtoa_r+0x8be>
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	dd13      	ble.n	8007d8c <_dtoa_r+0x78c>
 8007d64:	4639      	mov	r1, r7
 8007d66:	4632      	mov	r2, r6
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 ffd5 	bl	8008d18 <__pow5mult>
 8007d6e:	ee18 2a10 	vmov	r2, s16
 8007d72:	4601      	mov	r1, r0
 8007d74:	4607      	mov	r7, r0
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 ff24 	bl	8008bc4 <__multiply>
 8007d7c:	ee18 1a10 	vmov	r1, s16
 8007d80:	4680      	mov	r8, r0
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fe06 	bl	8008994 <_Bfree>
 8007d88:	ee08 8a10 	vmov	s16, r8
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	1b9a      	subs	r2, r3, r6
 8007d90:	d006      	beq.n	8007da0 <_dtoa_r+0x7a0>
 8007d92:	ee18 1a10 	vmov	r1, s16
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 ffbe 	bl	8008d18 <__pow5mult>
 8007d9c:	ee08 0a10 	vmov	s16, r0
 8007da0:	2101      	movs	r1, #1
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fef8 	bl	8008b98 <__i2b>
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	4606      	mov	r6, r0
 8007dae:	f340 8088 	ble.w	8007ec2 <_dtoa_r+0x8c2>
 8007db2:	461a      	mov	r2, r3
 8007db4:	4601      	mov	r1, r0
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 ffae 	bl	8008d18 <__pow5mult>
 8007dbc:	9b06      	ldr	r3, [sp, #24]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	f340 8081 	ble.w	8007ec8 <_dtoa_r+0x8c8>
 8007dc6:	f04f 0800 	mov.w	r8, #0
 8007dca:	6933      	ldr	r3, [r6, #16]
 8007dcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007dd0:	6918      	ldr	r0, [r3, #16]
 8007dd2:	f000 fe91 	bl	8008af8 <__hi0bits>
 8007dd6:	f1c0 0020 	rsb	r0, r0, #32
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	4418      	add	r0, r3
 8007dde:	f010 001f 	ands.w	r0, r0, #31
 8007de2:	f000 8092 	beq.w	8007f0a <_dtoa_r+0x90a>
 8007de6:	f1c0 0320 	rsb	r3, r0, #32
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	f340 808a 	ble.w	8007f04 <_dtoa_r+0x904>
 8007df0:	f1c0 001c 	rsb	r0, r0, #28
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	4403      	add	r3, r0
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	9b05      	ldr	r3, [sp, #20]
 8007dfc:	4403      	add	r3, r0
 8007dfe:	4405      	add	r5, r0
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd07      	ble.n	8007e18 <_dtoa_r+0x818>
 8007e08:	ee18 1a10 	vmov	r1, s16
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 ffdc 	bl	8008dcc <__lshift>
 8007e14:	ee08 0a10 	vmov	s16, r0
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dd05      	ble.n	8007e2a <_dtoa_r+0x82a>
 8007e1e:	4631      	mov	r1, r6
 8007e20:	461a      	mov	r2, r3
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 ffd2 	bl	8008dcc <__lshift>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d06e      	beq.n	8007f0e <_dtoa_r+0x90e>
 8007e30:	ee18 0a10 	vmov	r0, s16
 8007e34:	4631      	mov	r1, r6
 8007e36:	f001 f839 	bl	8008eac <__mcmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	da67      	bge.n	8007f0e <_dtoa_r+0x90e>
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	ee18 1a10 	vmov	r1, s16
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	220a      	movs	r2, #10
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fdc3 	bl	80089d8 <__multadd>
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	ee08 0a10 	vmov	s16, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 81b1 	beq.w	80081c0 <_dtoa_r+0xbc0>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4639      	mov	r1, r7
 8007e62:	220a      	movs	r2, #10
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fdb7 	bl	80089d8 <__multadd>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	4607      	mov	r7, r0
 8007e70:	f300 808e 	bgt.w	8007f90 <_dtoa_r+0x990>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	dc51      	bgt.n	8007f1e <_dtoa_r+0x91e>
 8007e7a:	e089      	b.n	8007f90 <_dtoa_r+0x990>
 8007e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e82:	e74b      	b.n	8007d1c <_dtoa_r+0x71c>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	1e5e      	subs	r6, r3, #1
 8007e88:	9b07      	ldr	r3, [sp, #28]
 8007e8a:	42b3      	cmp	r3, r6
 8007e8c:	bfbf      	itttt	lt
 8007e8e:	9b07      	ldrlt	r3, [sp, #28]
 8007e90:	9607      	strlt	r6, [sp, #28]
 8007e92:	1af2      	sublt	r2, r6, r3
 8007e94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e96:	bfb6      	itet	lt
 8007e98:	189b      	addlt	r3, r3, r2
 8007e9a:	1b9e      	subge	r6, r3, r6
 8007e9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	bfb8      	it	lt
 8007ea2:	2600      	movlt	r6, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfb7      	itett	lt
 8007ea8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007eac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007eb0:	1a9d      	sublt	r5, r3, r2
 8007eb2:	2300      	movlt	r3, #0
 8007eb4:	e734      	b.n	8007d20 <_dtoa_r+0x720>
 8007eb6:	9e07      	ldr	r6, [sp, #28]
 8007eb8:	9d04      	ldr	r5, [sp, #16]
 8007eba:	9f08      	ldr	r7, [sp, #32]
 8007ebc:	e73b      	b.n	8007d36 <_dtoa_r+0x736>
 8007ebe:	9a07      	ldr	r2, [sp, #28]
 8007ec0:	e767      	b.n	8007d92 <_dtoa_r+0x792>
 8007ec2:	9b06      	ldr	r3, [sp, #24]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	dc18      	bgt.n	8007efa <_dtoa_r+0x8fa>
 8007ec8:	f1ba 0f00 	cmp.w	sl, #0
 8007ecc:	d115      	bne.n	8007efa <_dtoa_r+0x8fa>
 8007ece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ed2:	b993      	cbnz	r3, 8007efa <_dtoa_r+0x8fa>
 8007ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ed8:	0d1b      	lsrs	r3, r3, #20
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	b183      	cbz	r3, 8007f00 <_dtoa_r+0x900>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	9b05      	ldr	r3, [sp, #20]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	f04f 0801 	mov.w	r8, #1
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f47f af6a 	bne.w	8007dca <_dtoa_r+0x7ca>
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	e76f      	b.n	8007dda <_dtoa_r+0x7da>
 8007efa:	f04f 0800 	mov.w	r8, #0
 8007efe:	e7f6      	b.n	8007eee <_dtoa_r+0x8ee>
 8007f00:	4698      	mov	r8, r3
 8007f02:	e7f4      	b.n	8007eee <_dtoa_r+0x8ee>
 8007f04:	f43f af7d 	beq.w	8007e02 <_dtoa_r+0x802>
 8007f08:	4618      	mov	r0, r3
 8007f0a:	301c      	adds	r0, #28
 8007f0c:	e772      	b.n	8007df4 <_dtoa_r+0x7f4>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc37      	bgt.n	8007f84 <_dtoa_r+0x984>
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dd34      	ble.n	8007f84 <_dtoa_r+0x984>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	9302      	str	r3, [sp, #8]
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	b96b      	cbnz	r3, 8007f3e <_dtoa_r+0x93e>
 8007f22:	4631      	mov	r1, r6
 8007f24:	2205      	movs	r2, #5
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fd56 	bl	80089d8 <__multadd>
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	4606      	mov	r6, r0
 8007f30:	ee18 0a10 	vmov	r0, s16
 8007f34:	f000 ffba 	bl	8008eac <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f73f adbb 	bgt.w	8007ab4 <_dtoa_r+0x4b4>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	9d01      	ldr	r5, [sp, #4]
 8007f42:	43db      	mvns	r3, r3
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fd21 	bl	8008994 <_Bfree>
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	f43f aea4 	beq.w	8007ca0 <_dtoa_r+0x6a0>
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	d005      	beq.n	8007f6a <_dtoa_r+0x96a>
 8007f5e:	45b8      	cmp	r8, r7
 8007f60:	d003      	beq.n	8007f6a <_dtoa_r+0x96a>
 8007f62:	4641      	mov	r1, r8
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fd15 	bl	8008994 <_Bfree>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fd11 	bl	8008994 <_Bfree>
 8007f72:	e695      	b.n	8007ca0 <_dtoa_r+0x6a0>
 8007f74:	2600      	movs	r6, #0
 8007f76:	4637      	mov	r7, r6
 8007f78:	e7e1      	b.n	8007f3e <_dtoa_r+0x93e>
 8007f7a:	9700      	str	r7, [sp, #0]
 8007f7c:	4637      	mov	r7, r6
 8007f7e:	e599      	b.n	8007ab4 <_dtoa_r+0x4b4>
 8007f80:	40240000 	.word	0x40240000
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80ca 	beq.w	8008120 <_dtoa_r+0xb20>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	9302      	str	r3, [sp, #8]
 8007f90:	2d00      	cmp	r5, #0
 8007f92:	dd05      	ble.n	8007fa0 <_dtoa_r+0x9a0>
 8007f94:	4639      	mov	r1, r7
 8007f96:	462a      	mov	r2, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 ff17 	bl	8008dcc <__lshift>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	f1b8 0f00 	cmp.w	r8, #0
 8007fa4:	d05b      	beq.n	800805e <_dtoa_r+0xa5e>
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fcb3 	bl	8008914 <_Balloc>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b928      	cbnz	r0, 8007fbe <_dtoa_r+0x9be>
 8007fb2:	4b87      	ldr	r3, [pc, #540]	; (80081d0 <_dtoa_r+0xbd0>)
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fba:	f7ff bb3b 	b.w	8007634 <_dtoa_r+0x34>
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	3202      	adds	r2, #2
 8007fc2:	0092      	lsls	r2, r2, #2
 8007fc4:	f107 010c 	add.w	r1, r7, #12
 8007fc8:	300c      	adds	r0, #12
 8007fca:	f000 fc95 	bl	80088f8 <memcpy>
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fefa 	bl	8008dcc <__lshift>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	f103 0901 	add.w	r9, r3, #1
 8007fde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	f00a 0301 	and.w	r3, sl, #1
 8007fea:	46b8      	mov	r8, r7
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	4607      	mov	r7, r0
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	ee18 0a10 	vmov	r0, s16
 8007ff6:	f7ff fa77 	bl	80074e8 <quorem>
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008002:	ee18 0a10 	vmov	r0, s16
 8008006:	f000 ff51 	bl	8008eac <__mcmp>
 800800a:	463a      	mov	r2, r7
 800800c:	9003      	str	r0, [sp, #12]
 800800e:	4631      	mov	r1, r6
 8008010:	4620      	mov	r0, r4
 8008012:	f000 ff67 	bl	8008ee4 <__mdiff>
 8008016:	68c2      	ldr	r2, [r0, #12]
 8008018:	f109 3bff 	add.w	fp, r9, #4294967295
 800801c:	4605      	mov	r5, r0
 800801e:	bb02      	cbnz	r2, 8008062 <_dtoa_r+0xa62>
 8008020:	4601      	mov	r1, r0
 8008022:	ee18 0a10 	vmov	r0, s16
 8008026:	f000 ff41 	bl	8008eac <__mcmp>
 800802a:	4602      	mov	r2, r0
 800802c:	4629      	mov	r1, r5
 800802e:	4620      	mov	r0, r4
 8008030:	9207      	str	r2, [sp, #28]
 8008032:	f000 fcaf 	bl	8008994 <_Bfree>
 8008036:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800803a:	ea43 0102 	orr.w	r1, r3, r2
 800803e:	9b04      	ldr	r3, [sp, #16]
 8008040:	430b      	orrs	r3, r1
 8008042:	464d      	mov	r5, r9
 8008044:	d10f      	bne.n	8008066 <_dtoa_r+0xa66>
 8008046:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800804a:	d02a      	beq.n	80080a2 <_dtoa_r+0xaa2>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dd02      	ble.n	8008058 <_dtoa_r+0xa58>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008058:	f88b a000 	strb.w	sl, [fp]
 800805c:	e775      	b.n	8007f4a <_dtoa_r+0x94a>
 800805e:	4638      	mov	r0, r7
 8008060:	e7ba      	b.n	8007fd8 <_dtoa_r+0x9d8>
 8008062:	2201      	movs	r2, #1
 8008064:	e7e2      	b.n	800802c <_dtoa_r+0xa2c>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db04      	blt.n	8008076 <_dtoa_r+0xa76>
 800806c:	9906      	ldr	r1, [sp, #24]
 800806e:	430b      	orrs	r3, r1
 8008070:	9904      	ldr	r1, [sp, #16]
 8008072:	430b      	orrs	r3, r1
 8008074:	d122      	bne.n	80080bc <_dtoa_r+0xabc>
 8008076:	2a00      	cmp	r2, #0
 8008078:	ddee      	ble.n	8008058 <_dtoa_r+0xa58>
 800807a:	ee18 1a10 	vmov	r1, s16
 800807e:	2201      	movs	r2, #1
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fea3 	bl	8008dcc <__lshift>
 8008086:	4631      	mov	r1, r6
 8008088:	ee08 0a10 	vmov	s16, r0
 800808c:	f000 ff0e 	bl	8008eac <__mcmp>
 8008090:	2800      	cmp	r0, #0
 8008092:	dc03      	bgt.n	800809c <_dtoa_r+0xa9c>
 8008094:	d1e0      	bne.n	8008058 <_dtoa_r+0xa58>
 8008096:	f01a 0f01 	tst.w	sl, #1
 800809a:	d0dd      	beq.n	8008058 <_dtoa_r+0xa58>
 800809c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080a0:	d1d7      	bne.n	8008052 <_dtoa_r+0xa52>
 80080a2:	2339      	movs	r3, #57	; 0x39
 80080a4:	f88b 3000 	strb.w	r3, [fp]
 80080a8:	462b      	mov	r3, r5
 80080aa:	461d      	mov	r5, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080b2:	2a39      	cmp	r2, #57	; 0x39
 80080b4:	d071      	beq.n	800819a <_dtoa_r+0xb9a>
 80080b6:	3201      	adds	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e746      	b.n	8007f4a <_dtoa_r+0x94a>
 80080bc:	2a00      	cmp	r2, #0
 80080be:	dd07      	ble.n	80080d0 <_dtoa_r+0xad0>
 80080c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080c4:	d0ed      	beq.n	80080a2 <_dtoa_r+0xaa2>
 80080c6:	f10a 0301 	add.w	r3, sl, #1
 80080ca:	f88b 3000 	strb.w	r3, [fp]
 80080ce:	e73c      	b.n	8007f4a <_dtoa_r+0x94a>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80080d6:	4599      	cmp	r9, r3
 80080d8:	d047      	beq.n	800816a <_dtoa_r+0xb6a>
 80080da:	ee18 1a10 	vmov	r1, s16
 80080de:	2300      	movs	r3, #0
 80080e0:	220a      	movs	r2, #10
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fc78 	bl	80089d8 <__multadd>
 80080e8:	45b8      	cmp	r8, r7
 80080ea:	ee08 0a10 	vmov	s16, r0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	f04f 020a 	mov.w	r2, #10
 80080f6:	4641      	mov	r1, r8
 80080f8:	4620      	mov	r0, r4
 80080fa:	d106      	bne.n	800810a <_dtoa_r+0xb0a>
 80080fc:	f000 fc6c 	bl	80089d8 <__multadd>
 8008100:	4680      	mov	r8, r0
 8008102:	4607      	mov	r7, r0
 8008104:	f109 0901 	add.w	r9, r9, #1
 8008108:	e772      	b.n	8007ff0 <_dtoa_r+0x9f0>
 800810a:	f000 fc65 	bl	80089d8 <__multadd>
 800810e:	4639      	mov	r1, r7
 8008110:	4680      	mov	r8, r0
 8008112:	2300      	movs	r3, #0
 8008114:	220a      	movs	r2, #10
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fc5e 	bl	80089d8 <__multadd>
 800811c:	4607      	mov	r7, r0
 800811e:	e7f1      	b.n	8008104 <_dtoa_r+0xb04>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	9302      	str	r3, [sp, #8]
 8008124:	9d01      	ldr	r5, [sp, #4]
 8008126:	ee18 0a10 	vmov	r0, s16
 800812a:	4631      	mov	r1, r6
 800812c:	f7ff f9dc 	bl	80074e8 <quorem>
 8008130:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	f805 ab01 	strb.w	sl, [r5], #1
 800813a:	1aea      	subs	r2, r5, r3
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	4293      	cmp	r3, r2
 8008140:	dd09      	ble.n	8008156 <_dtoa_r+0xb56>
 8008142:	ee18 1a10 	vmov	r1, s16
 8008146:	2300      	movs	r3, #0
 8008148:	220a      	movs	r2, #10
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fc44 	bl	80089d8 <__multadd>
 8008150:	ee08 0a10 	vmov	s16, r0
 8008154:	e7e7      	b.n	8008126 <_dtoa_r+0xb26>
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfc8      	it	gt
 800815c:	461d      	movgt	r5, r3
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	bfd8      	it	le
 8008162:	2501      	movle	r5, #1
 8008164:	441d      	add	r5, r3
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	ee18 1a10 	vmov	r1, s16
 800816e:	2201      	movs	r2, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fe2b 	bl	8008dcc <__lshift>
 8008176:	4631      	mov	r1, r6
 8008178:	ee08 0a10 	vmov	s16, r0
 800817c:	f000 fe96 	bl	8008eac <__mcmp>
 8008180:	2800      	cmp	r0, #0
 8008182:	dc91      	bgt.n	80080a8 <_dtoa_r+0xaa8>
 8008184:	d102      	bne.n	800818c <_dtoa_r+0xb8c>
 8008186:	f01a 0f01 	tst.w	sl, #1
 800818a:	d18d      	bne.n	80080a8 <_dtoa_r+0xaa8>
 800818c:	462b      	mov	r3, r5
 800818e:	461d      	mov	r5, r3
 8008190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008194:	2a30      	cmp	r2, #48	; 0x30
 8008196:	d0fa      	beq.n	800818e <_dtoa_r+0xb8e>
 8008198:	e6d7      	b.n	8007f4a <_dtoa_r+0x94a>
 800819a:	9a01      	ldr	r2, [sp, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d184      	bne.n	80080aa <_dtoa_r+0xaaa>
 80081a0:	9b00      	ldr	r3, [sp, #0]
 80081a2:	3301      	adds	r3, #1
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	2331      	movs	r3, #49	; 0x31
 80081a8:	7013      	strb	r3, [r2, #0]
 80081aa:	e6ce      	b.n	8007f4a <_dtoa_r+0x94a>
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <_dtoa_r+0xbd4>)
 80081ae:	f7ff ba95 	b.w	80076dc <_dtoa_r+0xdc>
 80081b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f47f aa6e 	bne.w	8007696 <_dtoa_r+0x96>
 80081ba:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <_dtoa_r+0xbd8>)
 80081bc:	f7ff ba8e 	b.w	80076dc <_dtoa_r+0xdc>
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dcae      	bgt.n	8008124 <_dtoa_r+0xb24>
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	f73f aea8 	bgt.w	8007f1e <_dtoa_r+0x91e>
 80081ce:	e7a9      	b.n	8008124 <_dtoa_r+0xb24>
 80081d0:	0800a5a8 	.word	0x0800a5a8
 80081d4:	0800a3a8 	.word	0x0800a3a8
 80081d8:	0800a529 	.word	0x0800a529

080081dc <rshift>:
 80081dc:	6903      	ldr	r3, [r0, #16]
 80081de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80081e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081ea:	f100 0414 	add.w	r4, r0, #20
 80081ee:	dd45      	ble.n	800827c <rshift+0xa0>
 80081f0:	f011 011f 	ands.w	r1, r1, #31
 80081f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80081f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081fc:	d10c      	bne.n	8008218 <rshift+0x3c>
 80081fe:	f100 0710 	add.w	r7, r0, #16
 8008202:	4629      	mov	r1, r5
 8008204:	42b1      	cmp	r1, r6
 8008206:	d334      	bcc.n	8008272 <rshift+0x96>
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	1eea      	subs	r2, r5, #3
 800820e:	4296      	cmp	r6, r2
 8008210:	bf38      	it	cc
 8008212:	2300      	movcc	r3, #0
 8008214:	4423      	add	r3, r4
 8008216:	e015      	b.n	8008244 <rshift+0x68>
 8008218:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800821c:	f1c1 0820 	rsb	r8, r1, #32
 8008220:	40cf      	lsrs	r7, r1
 8008222:	f105 0e04 	add.w	lr, r5, #4
 8008226:	46a1      	mov	r9, r4
 8008228:	4576      	cmp	r6, lr
 800822a:	46f4      	mov	ip, lr
 800822c:	d815      	bhi.n	800825a <rshift+0x7e>
 800822e:	1a9a      	subs	r2, r3, r2
 8008230:	0092      	lsls	r2, r2, #2
 8008232:	3a04      	subs	r2, #4
 8008234:	3501      	adds	r5, #1
 8008236:	42ae      	cmp	r6, r5
 8008238:	bf38      	it	cc
 800823a:	2200      	movcc	r2, #0
 800823c:	18a3      	adds	r3, r4, r2
 800823e:	50a7      	str	r7, [r4, r2]
 8008240:	b107      	cbz	r7, 8008244 <rshift+0x68>
 8008242:	3304      	adds	r3, #4
 8008244:	1b1a      	subs	r2, r3, r4
 8008246:	42a3      	cmp	r3, r4
 8008248:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800824c:	bf08      	it	eq
 800824e:	2300      	moveq	r3, #0
 8008250:	6102      	str	r2, [r0, #16]
 8008252:	bf08      	it	eq
 8008254:	6143      	streq	r3, [r0, #20]
 8008256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800825a:	f8dc c000 	ldr.w	ip, [ip]
 800825e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008262:	ea4c 0707 	orr.w	r7, ip, r7
 8008266:	f849 7b04 	str.w	r7, [r9], #4
 800826a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800826e:	40cf      	lsrs	r7, r1
 8008270:	e7da      	b.n	8008228 <rshift+0x4c>
 8008272:	f851 cb04 	ldr.w	ip, [r1], #4
 8008276:	f847 cf04 	str.w	ip, [r7, #4]!
 800827a:	e7c3      	b.n	8008204 <rshift+0x28>
 800827c:	4623      	mov	r3, r4
 800827e:	e7e1      	b.n	8008244 <rshift+0x68>

08008280 <__hexdig_fun>:
 8008280:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008284:	2b09      	cmp	r3, #9
 8008286:	d802      	bhi.n	800828e <__hexdig_fun+0xe>
 8008288:	3820      	subs	r0, #32
 800828a:	b2c0      	uxtb	r0, r0
 800828c:	4770      	bx	lr
 800828e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008292:	2b05      	cmp	r3, #5
 8008294:	d801      	bhi.n	800829a <__hexdig_fun+0x1a>
 8008296:	3847      	subs	r0, #71	; 0x47
 8008298:	e7f7      	b.n	800828a <__hexdig_fun+0xa>
 800829a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800829e:	2b05      	cmp	r3, #5
 80082a0:	d801      	bhi.n	80082a6 <__hexdig_fun+0x26>
 80082a2:	3827      	subs	r0, #39	; 0x27
 80082a4:	e7f1      	b.n	800828a <__hexdig_fun+0xa>
 80082a6:	2000      	movs	r0, #0
 80082a8:	4770      	bx	lr
	...

080082ac <__gethex>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	ed2d 8b02 	vpush	{d8}
 80082b4:	b089      	sub	sp, #36	; 0x24
 80082b6:	ee08 0a10 	vmov	s16, r0
 80082ba:	9304      	str	r3, [sp, #16]
 80082bc:	4bb4      	ldr	r3, [pc, #720]	; (8008590 <__gethex+0x2e4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	4618      	mov	r0, r3
 80082c4:	468b      	mov	fp, r1
 80082c6:	4690      	mov	r8, r2
 80082c8:	f7f7 ffa2 	bl	8000210 <strlen>
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	f8db 2000 	ldr.w	r2, [fp]
 80082d2:	4403      	add	r3, r0
 80082d4:	4682      	mov	sl, r0
 80082d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	1c93      	adds	r3, r2, #2
 80082de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80082e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082e6:	32fe      	adds	r2, #254	; 0xfe
 80082e8:	18d1      	adds	r1, r2, r3
 80082ea:	461f      	mov	r7, r3
 80082ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082f0:	9100      	str	r1, [sp, #0]
 80082f2:	2830      	cmp	r0, #48	; 0x30
 80082f4:	d0f8      	beq.n	80082e8 <__gethex+0x3c>
 80082f6:	f7ff ffc3 	bl	8008280 <__hexdig_fun>
 80082fa:	4604      	mov	r4, r0
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d13a      	bne.n	8008376 <__gethex+0xca>
 8008300:	9901      	ldr	r1, [sp, #4]
 8008302:	4652      	mov	r2, sl
 8008304:	4638      	mov	r0, r7
 8008306:	f001 fa33 	bl	8009770 <strncmp>
 800830a:	4605      	mov	r5, r0
 800830c:	2800      	cmp	r0, #0
 800830e:	d168      	bne.n	80083e2 <__gethex+0x136>
 8008310:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008314:	eb07 060a 	add.w	r6, r7, sl
 8008318:	f7ff ffb2 	bl	8008280 <__hexdig_fun>
 800831c:	2800      	cmp	r0, #0
 800831e:	d062      	beq.n	80083e6 <__gethex+0x13a>
 8008320:	4633      	mov	r3, r6
 8008322:	7818      	ldrb	r0, [r3, #0]
 8008324:	2830      	cmp	r0, #48	; 0x30
 8008326:	461f      	mov	r7, r3
 8008328:	f103 0301 	add.w	r3, r3, #1
 800832c:	d0f9      	beq.n	8008322 <__gethex+0x76>
 800832e:	f7ff ffa7 	bl	8008280 <__hexdig_fun>
 8008332:	2301      	movs	r3, #1
 8008334:	fab0 f480 	clz	r4, r0
 8008338:	0964      	lsrs	r4, r4, #5
 800833a:	4635      	mov	r5, r6
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	463a      	mov	r2, r7
 8008340:	4616      	mov	r6, r2
 8008342:	3201      	adds	r2, #1
 8008344:	7830      	ldrb	r0, [r6, #0]
 8008346:	f7ff ff9b 	bl	8008280 <__hexdig_fun>
 800834a:	2800      	cmp	r0, #0
 800834c:	d1f8      	bne.n	8008340 <__gethex+0x94>
 800834e:	9901      	ldr	r1, [sp, #4]
 8008350:	4652      	mov	r2, sl
 8008352:	4630      	mov	r0, r6
 8008354:	f001 fa0c 	bl	8009770 <strncmp>
 8008358:	b980      	cbnz	r0, 800837c <__gethex+0xd0>
 800835a:	b94d      	cbnz	r5, 8008370 <__gethex+0xc4>
 800835c:	eb06 050a 	add.w	r5, r6, sl
 8008360:	462a      	mov	r2, r5
 8008362:	4616      	mov	r6, r2
 8008364:	3201      	adds	r2, #1
 8008366:	7830      	ldrb	r0, [r6, #0]
 8008368:	f7ff ff8a 	bl	8008280 <__hexdig_fun>
 800836c:	2800      	cmp	r0, #0
 800836e:	d1f8      	bne.n	8008362 <__gethex+0xb6>
 8008370:	1bad      	subs	r5, r5, r6
 8008372:	00ad      	lsls	r5, r5, #2
 8008374:	e004      	b.n	8008380 <__gethex+0xd4>
 8008376:	2400      	movs	r4, #0
 8008378:	4625      	mov	r5, r4
 800837a:	e7e0      	b.n	800833e <__gethex+0x92>
 800837c:	2d00      	cmp	r5, #0
 800837e:	d1f7      	bne.n	8008370 <__gethex+0xc4>
 8008380:	7833      	ldrb	r3, [r6, #0]
 8008382:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008386:	2b50      	cmp	r3, #80	; 0x50
 8008388:	d13b      	bne.n	8008402 <__gethex+0x156>
 800838a:	7873      	ldrb	r3, [r6, #1]
 800838c:	2b2b      	cmp	r3, #43	; 0x2b
 800838e:	d02c      	beq.n	80083ea <__gethex+0x13e>
 8008390:	2b2d      	cmp	r3, #45	; 0x2d
 8008392:	d02e      	beq.n	80083f2 <__gethex+0x146>
 8008394:	1c71      	adds	r1, r6, #1
 8008396:	f04f 0900 	mov.w	r9, #0
 800839a:	7808      	ldrb	r0, [r1, #0]
 800839c:	f7ff ff70 	bl	8008280 <__hexdig_fun>
 80083a0:	1e43      	subs	r3, r0, #1
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b18      	cmp	r3, #24
 80083a6:	d82c      	bhi.n	8008402 <__gethex+0x156>
 80083a8:	f1a0 0210 	sub.w	r2, r0, #16
 80083ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083b0:	f7ff ff66 	bl	8008280 <__hexdig_fun>
 80083b4:	1e43      	subs	r3, r0, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b18      	cmp	r3, #24
 80083ba:	d91d      	bls.n	80083f8 <__gethex+0x14c>
 80083bc:	f1b9 0f00 	cmp.w	r9, #0
 80083c0:	d000      	beq.n	80083c4 <__gethex+0x118>
 80083c2:	4252      	negs	r2, r2
 80083c4:	4415      	add	r5, r2
 80083c6:	f8cb 1000 	str.w	r1, [fp]
 80083ca:	b1e4      	cbz	r4, 8008406 <__gethex+0x15a>
 80083cc:	9b00      	ldr	r3, [sp, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bf14      	ite	ne
 80083d2:	2700      	movne	r7, #0
 80083d4:	2706      	moveq	r7, #6
 80083d6:	4638      	mov	r0, r7
 80083d8:	b009      	add	sp, #36	; 0x24
 80083da:	ecbd 8b02 	vpop	{d8}
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	463e      	mov	r6, r7
 80083e4:	4625      	mov	r5, r4
 80083e6:	2401      	movs	r4, #1
 80083e8:	e7ca      	b.n	8008380 <__gethex+0xd4>
 80083ea:	f04f 0900 	mov.w	r9, #0
 80083ee:	1cb1      	adds	r1, r6, #2
 80083f0:	e7d3      	b.n	800839a <__gethex+0xee>
 80083f2:	f04f 0901 	mov.w	r9, #1
 80083f6:	e7fa      	b.n	80083ee <__gethex+0x142>
 80083f8:	230a      	movs	r3, #10
 80083fa:	fb03 0202 	mla	r2, r3, r2, r0
 80083fe:	3a10      	subs	r2, #16
 8008400:	e7d4      	b.n	80083ac <__gethex+0x100>
 8008402:	4631      	mov	r1, r6
 8008404:	e7df      	b.n	80083c6 <__gethex+0x11a>
 8008406:	1bf3      	subs	r3, r6, r7
 8008408:	3b01      	subs	r3, #1
 800840a:	4621      	mov	r1, r4
 800840c:	2b07      	cmp	r3, #7
 800840e:	dc0b      	bgt.n	8008428 <__gethex+0x17c>
 8008410:	ee18 0a10 	vmov	r0, s16
 8008414:	f000 fa7e 	bl	8008914 <_Balloc>
 8008418:	4604      	mov	r4, r0
 800841a:	b940      	cbnz	r0, 800842e <__gethex+0x182>
 800841c:	4b5d      	ldr	r3, [pc, #372]	; (8008594 <__gethex+0x2e8>)
 800841e:	4602      	mov	r2, r0
 8008420:	21de      	movs	r1, #222	; 0xde
 8008422:	485d      	ldr	r0, [pc, #372]	; (8008598 <__gethex+0x2ec>)
 8008424:	f001 f9c6 	bl	80097b4 <__assert_func>
 8008428:	3101      	adds	r1, #1
 800842a:	105b      	asrs	r3, r3, #1
 800842c:	e7ee      	b.n	800840c <__gethex+0x160>
 800842e:	f100 0914 	add.w	r9, r0, #20
 8008432:	f04f 0b00 	mov.w	fp, #0
 8008436:	f1ca 0301 	rsb	r3, sl, #1
 800843a:	f8cd 9008 	str.w	r9, [sp, #8]
 800843e:	f8cd b000 	str.w	fp, [sp]
 8008442:	9306      	str	r3, [sp, #24]
 8008444:	42b7      	cmp	r7, r6
 8008446:	d340      	bcc.n	80084ca <__gethex+0x21e>
 8008448:	9802      	ldr	r0, [sp, #8]
 800844a:	9b00      	ldr	r3, [sp, #0]
 800844c:	f840 3b04 	str.w	r3, [r0], #4
 8008450:	eba0 0009 	sub.w	r0, r0, r9
 8008454:	1080      	asrs	r0, r0, #2
 8008456:	0146      	lsls	r6, r0, #5
 8008458:	6120      	str	r0, [r4, #16]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fb4c 	bl	8008af8 <__hi0bits>
 8008460:	1a30      	subs	r0, r6, r0
 8008462:	f8d8 6000 	ldr.w	r6, [r8]
 8008466:	42b0      	cmp	r0, r6
 8008468:	dd63      	ble.n	8008532 <__gethex+0x286>
 800846a:	1b87      	subs	r7, r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	4620      	mov	r0, r4
 8008470:	f000 fef0 	bl	8009254 <__any_on>
 8008474:	4682      	mov	sl, r0
 8008476:	b1a8      	cbz	r0, 80084a4 <__gethex+0x1f8>
 8008478:	1e7b      	subs	r3, r7, #1
 800847a:	1159      	asrs	r1, r3, #5
 800847c:	f003 021f 	and.w	r2, r3, #31
 8008480:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008484:	f04f 0a01 	mov.w	sl, #1
 8008488:	fa0a f202 	lsl.w	r2, sl, r2
 800848c:	420a      	tst	r2, r1
 800848e:	d009      	beq.n	80084a4 <__gethex+0x1f8>
 8008490:	4553      	cmp	r3, sl
 8008492:	dd05      	ble.n	80084a0 <__gethex+0x1f4>
 8008494:	1eb9      	subs	r1, r7, #2
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fedc 	bl	8009254 <__any_on>
 800849c:	2800      	cmp	r0, #0
 800849e:	d145      	bne.n	800852c <__gethex+0x280>
 80084a0:	f04f 0a02 	mov.w	sl, #2
 80084a4:	4639      	mov	r1, r7
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff fe98 	bl	80081dc <rshift>
 80084ac:	443d      	add	r5, r7
 80084ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084b2:	42ab      	cmp	r3, r5
 80084b4:	da4c      	bge.n	8008550 <__gethex+0x2a4>
 80084b6:	ee18 0a10 	vmov	r0, s16
 80084ba:	4621      	mov	r1, r4
 80084bc:	f000 fa6a 	bl	8008994 <_Bfree>
 80084c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084c2:	2300      	movs	r3, #0
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	27a3      	movs	r7, #163	; 0xa3
 80084c8:	e785      	b.n	80083d6 <__gethex+0x12a>
 80084ca:	1e73      	subs	r3, r6, #1
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	9303      	str	r3, [sp, #12]
 80084d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d019      	beq.n	800850c <__gethex+0x260>
 80084d8:	f1bb 0f20 	cmp.w	fp, #32
 80084dc:	d107      	bne.n	80084ee <__gethex+0x242>
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	9a00      	ldr	r2, [sp, #0]
 80084e2:	f843 2b04 	str.w	r2, [r3], #4
 80084e6:	9302      	str	r3, [sp, #8]
 80084e8:	2300      	movs	r3, #0
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	469b      	mov	fp, r3
 80084ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80084f2:	f7ff fec5 	bl	8008280 <__hexdig_fun>
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	f000 000f 	and.w	r0, r0, #15
 80084fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008500:	4303      	orrs	r3, r0
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	f10b 0b04 	add.w	fp, fp, #4
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	e00d      	b.n	8008528 <__gethex+0x27c>
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	9a06      	ldr	r2, [sp, #24]
 8008510:	4413      	add	r3, r2
 8008512:	42bb      	cmp	r3, r7
 8008514:	d3e0      	bcc.n	80084d8 <__gethex+0x22c>
 8008516:	4618      	mov	r0, r3
 8008518:	9901      	ldr	r1, [sp, #4]
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	4652      	mov	r2, sl
 800851e:	f001 f927 	bl	8009770 <strncmp>
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	2800      	cmp	r0, #0
 8008526:	d1d7      	bne.n	80084d8 <__gethex+0x22c>
 8008528:	461e      	mov	r6, r3
 800852a:	e78b      	b.n	8008444 <__gethex+0x198>
 800852c:	f04f 0a03 	mov.w	sl, #3
 8008530:	e7b8      	b.n	80084a4 <__gethex+0x1f8>
 8008532:	da0a      	bge.n	800854a <__gethex+0x29e>
 8008534:	1a37      	subs	r7, r6, r0
 8008536:	4621      	mov	r1, r4
 8008538:	ee18 0a10 	vmov	r0, s16
 800853c:	463a      	mov	r2, r7
 800853e:	f000 fc45 	bl	8008dcc <__lshift>
 8008542:	1bed      	subs	r5, r5, r7
 8008544:	4604      	mov	r4, r0
 8008546:	f100 0914 	add.w	r9, r0, #20
 800854a:	f04f 0a00 	mov.w	sl, #0
 800854e:	e7ae      	b.n	80084ae <__gethex+0x202>
 8008550:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008554:	42a8      	cmp	r0, r5
 8008556:	dd72      	ble.n	800863e <__gethex+0x392>
 8008558:	1b45      	subs	r5, r0, r5
 800855a:	42ae      	cmp	r6, r5
 800855c:	dc36      	bgt.n	80085cc <__gethex+0x320>
 800855e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d02a      	beq.n	80085bc <__gethex+0x310>
 8008566:	2b03      	cmp	r3, #3
 8008568:	d02c      	beq.n	80085c4 <__gethex+0x318>
 800856a:	2b01      	cmp	r3, #1
 800856c:	d11c      	bne.n	80085a8 <__gethex+0x2fc>
 800856e:	42ae      	cmp	r6, r5
 8008570:	d11a      	bne.n	80085a8 <__gethex+0x2fc>
 8008572:	2e01      	cmp	r6, #1
 8008574:	d112      	bne.n	800859c <__gethex+0x2f0>
 8008576:	9a04      	ldr	r2, [sp, #16]
 8008578:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	2301      	movs	r3, #1
 8008580:	6123      	str	r3, [r4, #16]
 8008582:	f8c9 3000 	str.w	r3, [r9]
 8008586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008588:	2762      	movs	r7, #98	; 0x62
 800858a:	601c      	str	r4, [r3, #0]
 800858c:	e723      	b.n	80083d6 <__gethex+0x12a>
 800858e:	bf00      	nop
 8008590:	0800a620 	.word	0x0800a620
 8008594:	0800a5a8 	.word	0x0800a5a8
 8008598:	0800a5b9 	.word	0x0800a5b9
 800859c:	1e71      	subs	r1, r6, #1
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fe58 	bl	8009254 <__any_on>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d1e6      	bne.n	8008576 <__gethex+0x2ca>
 80085a8:	ee18 0a10 	vmov	r0, s16
 80085ac:	4621      	mov	r1, r4
 80085ae:	f000 f9f1 	bl	8008994 <_Bfree>
 80085b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085b4:	2300      	movs	r3, #0
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	2750      	movs	r7, #80	; 0x50
 80085ba:	e70c      	b.n	80083d6 <__gethex+0x12a>
 80085bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f2      	bne.n	80085a8 <__gethex+0x2fc>
 80085c2:	e7d8      	b.n	8008576 <__gethex+0x2ca>
 80085c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1d5      	bne.n	8008576 <__gethex+0x2ca>
 80085ca:	e7ed      	b.n	80085a8 <__gethex+0x2fc>
 80085cc:	1e6f      	subs	r7, r5, #1
 80085ce:	f1ba 0f00 	cmp.w	sl, #0
 80085d2:	d131      	bne.n	8008638 <__gethex+0x38c>
 80085d4:	b127      	cbz	r7, 80085e0 <__gethex+0x334>
 80085d6:	4639      	mov	r1, r7
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fe3b 	bl	8009254 <__any_on>
 80085de:	4682      	mov	sl, r0
 80085e0:	117b      	asrs	r3, r7, #5
 80085e2:	2101      	movs	r1, #1
 80085e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80085e8:	f007 071f 	and.w	r7, r7, #31
 80085ec:	fa01 f707 	lsl.w	r7, r1, r7
 80085f0:	421f      	tst	r7, r3
 80085f2:	4629      	mov	r1, r5
 80085f4:	4620      	mov	r0, r4
 80085f6:	bf18      	it	ne
 80085f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80085fc:	1b76      	subs	r6, r6, r5
 80085fe:	f7ff fded 	bl	80081dc <rshift>
 8008602:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008606:	2702      	movs	r7, #2
 8008608:	f1ba 0f00 	cmp.w	sl, #0
 800860c:	d048      	beq.n	80086a0 <__gethex+0x3f4>
 800860e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d015      	beq.n	8008642 <__gethex+0x396>
 8008616:	2b03      	cmp	r3, #3
 8008618:	d017      	beq.n	800864a <__gethex+0x39e>
 800861a:	2b01      	cmp	r3, #1
 800861c:	d109      	bne.n	8008632 <__gethex+0x386>
 800861e:	f01a 0f02 	tst.w	sl, #2
 8008622:	d006      	beq.n	8008632 <__gethex+0x386>
 8008624:	f8d9 0000 	ldr.w	r0, [r9]
 8008628:	ea4a 0a00 	orr.w	sl, sl, r0
 800862c:	f01a 0f01 	tst.w	sl, #1
 8008630:	d10e      	bne.n	8008650 <__gethex+0x3a4>
 8008632:	f047 0710 	orr.w	r7, r7, #16
 8008636:	e033      	b.n	80086a0 <__gethex+0x3f4>
 8008638:	f04f 0a01 	mov.w	sl, #1
 800863c:	e7d0      	b.n	80085e0 <__gethex+0x334>
 800863e:	2701      	movs	r7, #1
 8008640:	e7e2      	b.n	8008608 <__gethex+0x35c>
 8008642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008644:	f1c3 0301 	rsb	r3, r3, #1
 8008648:	9315      	str	r3, [sp, #84]	; 0x54
 800864a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f0      	beq.n	8008632 <__gethex+0x386>
 8008650:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008654:	f104 0314 	add.w	r3, r4, #20
 8008658:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800865c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008660:	f04f 0c00 	mov.w	ip, #0
 8008664:	4618      	mov	r0, r3
 8008666:	f853 2b04 	ldr.w	r2, [r3], #4
 800866a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800866e:	d01c      	beq.n	80086aa <__gethex+0x3fe>
 8008670:	3201      	adds	r2, #1
 8008672:	6002      	str	r2, [r0, #0]
 8008674:	2f02      	cmp	r7, #2
 8008676:	f104 0314 	add.w	r3, r4, #20
 800867a:	d13f      	bne.n	80086fc <__gethex+0x450>
 800867c:	f8d8 2000 	ldr.w	r2, [r8]
 8008680:	3a01      	subs	r2, #1
 8008682:	42b2      	cmp	r2, r6
 8008684:	d10a      	bne.n	800869c <__gethex+0x3f0>
 8008686:	1171      	asrs	r1, r6, #5
 8008688:	2201      	movs	r2, #1
 800868a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800868e:	f006 061f 	and.w	r6, r6, #31
 8008692:	fa02 f606 	lsl.w	r6, r2, r6
 8008696:	421e      	tst	r6, r3
 8008698:	bf18      	it	ne
 800869a:	4617      	movne	r7, r2
 800869c:	f047 0720 	orr.w	r7, r7, #32
 80086a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086a2:	601c      	str	r4, [r3, #0]
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	601d      	str	r5, [r3, #0]
 80086a8:	e695      	b.n	80083d6 <__gethex+0x12a>
 80086aa:	4299      	cmp	r1, r3
 80086ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80086b0:	d8d8      	bhi.n	8008664 <__gethex+0x3b8>
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	459b      	cmp	fp, r3
 80086b6:	db19      	blt.n	80086ec <__gethex+0x440>
 80086b8:	6861      	ldr	r1, [r4, #4]
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	3101      	adds	r1, #1
 80086c0:	f000 f928 	bl	8008914 <_Balloc>
 80086c4:	4681      	mov	r9, r0
 80086c6:	b918      	cbnz	r0, 80086d0 <__gethex+0x424>
 80086c8:	4b1a      	ldr	r3, [pc, #104]	; (8008734 <__gethex+0x488>)
 80086ca:	4602      	mov	r2, r0
 80086cc:	2184      	movs	r1, #132	; 0x84
 80086ce:	e6a8      	b.n	8008422 <__gethex+0x176>
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	3202      	adds	r2, #2
 80086d4:	f104 010c 	add.w	r1, r4, #12
 80086d8:	0092      	lsls	r2, r2, #2
 80086da:	300c      	adds	r0, #12
 80086dc:	f000 f90c 	bl	80088f8 <memcpy>
 80086e0:	4621      	mov	r1, r4
 80086e2:	ee18 0a10 	vmov	r0, s16
 80086e6:	f000 f955 	bl	8008994 <_Bfree>
 80086ea:	464c      	mov	r4, r9
 80086ec:	6923      	ldr	r3, [r4, #16]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086f4:	6122      	str	r2, [r4, #16]
 80086f6:	2201      	movs	r2, #1
 80086f8:	615a      	str	r2, [r3, #20]
 80086fa:	e7bb      	b.n	8008674 <__gethex+0x3c8>
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	455a      	cmp	r2, fp
 8008700:	dd0b      	ble.n	800871a <__gethex+0x46e>
 8008702:	2101      	movs	r1, #1
 8008704:	4620      	mov	r0, r4
 8008706:	f7ff fd69 	bl	80081dc <rshift>
 800870a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800870e:	3501      	adds	r5, #1
 8008710:	42ab      	cmp	r3, r5
 8008712:	f6ff aed0 	blt.w	80084b6 <__gethex+0x20a>
 8008716:	2701      	movs	r7, #1
 8008718:	e7c0      	b.n	800869c <__gethex+0x3f0>
 800871a:	f016 061f 	ands.w	r6, r6, #31
 800871e:	d0fa      	beq.n	8008716 <__gethex+0x46a>
 8008720:	4453      	add	r3, sl
 8008722:	f1c6 0620 	rsb	r6, r6, #32
 8008726:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800872a:	f000 f9e5 	bl	8008af8 <__hi0bits>
 800872e:	42b0      	cmp	r0, r6
 8008730:	dbe7      	blt.n	8008702 <__gethex+0x456>
 8008732:	e7f0      	b.n	8008716 <__gethex+0x46a>
 8008734:	0800a5a8 	.word	0x0800a5a8

08008738 <L_shift>:
 8008738:	f1c2 0208 	rsb	r2, r2, #8
 800873c:	0092      	lsls	r2, r2, #2
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	f1c2 0620 	rsb	r6, r2, #32
 8008744:	6843      	ldr	r3, [r0, #4]
 8008746:	6804      	ldr	r4, [r0, #0]
 8008748:	fa03 f506 	lsl.w	r5, r3, r6
 800874c:	432c      	orrs	r4, r5
 800874e:	40d3      	lsrs	r3, r2
 8008750:	6004      	str	r4, [r0, #0]
 8008752:	f840 3f04 	str.w	r3, [r0, #4]!
 8008756:	4288      	cmp	r0, r1
 8008758:	d3f4      	bcc.n	8008744 <L_shift+0xc>
 800875a:	bd70      	pop	{r4, r5, r6, pc}

0800875c <__match>:
 800875c:	b530      	push	{r4, r5, lr}
 800875e:	6803      	ldr	r3, [r0, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008766:	b914      	cbnz	r4, 800876e <__match+0x12>
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	2001      	movs	r0, #1
 800876c:	bd30      	pop	{r4, r5, pc}
 800876e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008772:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008776:	2d19      	cmp	r5, #25
 8008778:	bf98      	it	ls
 800877a:	3220      	addls	r2, #32
 800877c:	42a2      	cmp	r2, r4
 800877e:	d0f0      	beq.n	8008762 <__match+0x6>
 8008780:	2000      	movs	r0, #0
 8008782:	e7f3      	b.n	800876c <__match+0x10>

08008784 <__hexnan>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	680b      	ldr	r3, [r1, #0]
 800878a:	115e      	asrs	r6, r3, #5
 800878c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008790:	f013 031f 	ands.w	r3, r3, #31
 8008794:	b087      	sub	sp, #28
 8008796:	bf18      	it	ne
 8008798:	3604      	addne	r6, #4
 800879a:	2500      	movs	r5, #0
 800879c:	1f37      	subs	r7, r6, #4
 800879e:	4690      	mov	r8, r2
 80087a0:	6802      	ldr	r2, [r0, #0]
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	4682      	mov	sl, r0
 80087a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80087aa:	46b9      	mov	r9, r7
 80087ac:	463c      	mov	r4, r7
 80087ae:	9502      	str	r5, [sp, #8]
 80087b0:	46ab      	mov	fp, r5
 80087b2:	7851      	ldrb	r1, [r2, #1]
 80087b4:	1c53      	adds	r3, r2, #1
 80087b6:	9303      	str	r3, [sp, #12]
 80087b8:	b341      	cbz	r1, 800880c <__hexnan+0x88>
 80087ba:	4608      	mov	r0, r1
 80087bc:	9205      	str	r2, [sp, #20]
 80087be:	9104      	str	r1, [sp, #16]
 80087c0:	f7ff fd5e 	bl	8008280 <__hexdig_fun>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d14f      	bne.n	8008868 <__hexnan+0xe4>
 80087c8:	9904      	ldr	r1, [sp, #16]
 80087ca:	9a05      	ldr	r2, [sp, #20]
 80087cc:	2920      	cmp	r1, #32
 80087ce:	d818      	bhi.n	8008802 <__hexnan+0x7e>
 80087d0:	9b02      	ldr	r3, [sp, #8]
 80087d2:	459b      	cmp	fp, r3
 80087d4:	dd13      	ble.n	80087fe <__hexnan+0x7a>
 80087d6:	454c      	cmp	r4, r9
 80087d8:	d206      	bcs.n	80087e8 <__hexnan+0x64>
 80087da:	2d07      	cmp	r5, #7
 80087dc:	dc04      	bgt.n	80087e8 <__hexnan+0x64>
 80087de:	462a      	mov	r2, r5
 80087e0:	4649      	mov	r1, r9
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7ff ffa8 	bl	8008738 <L_shift>
 80087e8:	4544      	cmp	r4, r8
 80087ea:	d950      	bls.n	800888e <__hexnan+0x10a>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f1a4 0904 	sub.w	r9, r4, #4
 80087f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80087f6:	f8cd b008 	str.w	fp, [sp, #8]
 80087fa:	464c      	mov	r4, r9
 80087fc:	461d      	mov	r5, r3
 80087fe:	9a03      	ldr	r2, [sp, #12]
 8008800:	e7d7      	b.n	80087b2 <__hexnan+0x2e>
 8008802:	2929      	cmp	r1, #41	; 0x29
 8008804:	d156      	bne.n	80088b4 <__hexnan+0x130>
 8008806:	3202      	adds	r2, #2
 8008808:	f8ca 2000 	str.w	r2, [sl]
 800880c:	f1bb 0f00 	cmp.w	fp, #0
 8008810:	d050      	beq.n	80088b4 <__hexnan+0x130>
 8008812:	454c      	cmp	r4, r9
 8008814:	d206      	bcs.n	8008824 <__hexnan+0xa0>
 8008816:	2d07      	cmp	r5, #7
 8008818:	dc04      	bgt.n	8008824 <__hexnan+0xa0>
 800881a:	462a      	mov	r2, r5
 800881c:	4649      	mov	r1, r9
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff ff8a 	bl	8008738 <L_shift>
 8008824:	4544      	cmp	r4, r8
 8008826:	d934      	bls.n	8008892 <__hexnan+0x10e>
 8008828:	f1a8 0204 	sub.w	r2, r8, #4
 800882c:	4623      	mov	r3, r4
 800882e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008832:	f842 1f04 	str.w	r1, [r2, #4]!
 8008836:	429f      	cmp	r7, r3
 8008838:	d2f9      	bcs.n	800882e <__hexnan+0xaa>
 800883a:	1b3b      	subs	r3, r7, r4
 800883c:	f023 0303 	bic.w	r3, r3, #3
 8008840:	3304      	adds	r3, #4
 8008842:	3401      	adds	r4, #1
 8008844:	3e03      	subs	r6, #3
 8008846:	42b4      	cmp	r4, r6
 8008848:	bf88      	it	hi
 800884a:	2304      	movhi	r3, #4
 800884c:	4443      	add	r3, r8
 800884e:	2200      	movs	r2, #0
 8008850:	f843 2b04 	str.w	r2, [r3], #4
 8008854:	429f      	cmp	r7, r3
 8008856:	d2fb      	bcs.n	8008850 <__hexnan+0xcc>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	b91b      	cbnz	r3, 8008864 <__hexnan+0xe0>
 800885c:	4547      	cmp	r7, r8
 800885e:	d127      	bne.n	80088b0 <__hexnan+0x12c>
 8008860:	2301      	movs	r3, #1
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	2005      	movs	r0, #5
 8008866:	e026      	b.n	80088b6 <__hexnan+0x132>
 8008868:	3501      	adds	r5, #1
 800886a:	2d08      	cmp	r5, #8
 800886c:	f10b 0b01 	add.w	fp, fp, #1
 8008870:	dd06      	ble.n	8008880 <__hexnan+0xfc>
 8008872:	4544      	cmp	r4, r8
 8008874:	d9c3      	bls.n	80087fe <__hexnan+0x7a>
 8008876:	2300      	movs	r3, #0
 8008878:	f844 3c04 	str.w	r3, [r4, #-4]
 800887c:	2501      	movs	r5, #1
 800887e:	3c04      	subs	r4, #4
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	f000 000f 	and.w	r0, r0, #15
 8008886:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	e7b7      	b.n	80087fe <__hexnan+0x7a>
 800888e:	2508      	movs	r5, #8
 8008890:	e7b5      	b.n	80087fe <__hexnan+0x7a>
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0df      	beq.n	8008858 <__hexnan+0xd4>
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	f1c3 0320 	rsb	r3, r3, #32
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
 80088a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088a8:	401a      	ands	r2, r3
 80088aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80088ae:	e7d3      	b.n	8008858 <__hexnan+0xd4>
 80088b0:	3f04      	subs	r7, #4
 80088b2:	e7d1      	b.n	8008858 <__hexnan+0xd4>
 80088b4:	2004      	movs	r0, #4
 80088b6:	b007      	add	sp, #28
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088bc <_localeconv_r>:
 80088bc:	4800      	ldr	r0, [pc, #0]	; (80088c0 <_localeconv_r+0x4>)
 80088be:	4770      	bx	lr
 80088c0:	20000164 	.word	0x20000164

080088c4 <malloc>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <malloc+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 bd67 	b.w	800939c <_malloc_r>
 80088ce:	bf00      	nop
 80088d0:	2000000c 	.word	0x2000000c

080088d4 <__ascii_mbtowc>:
 80088d4:	b082      	sub	sp, #8
 80088d6:	b901      	cbnz	r1, 80088da <__ascii_mbtowc+0x6>
 80088d8:	a901      	add	r1, sp, #4
 80088da:	b142      	cbz	r2, 80088ee <__ascii_mbtowc+0x1a>
 80088dc:	b14b      	cbz	r3, 80088f2 <__ascii_mbtowc+0x1e>
 80088de:	7813      	ldrb	r3, [r2, #0]
 80088e0:	600b      	str	r3, [r1, #0]
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	1e10      	subs	r0, r2, #0
 80088e6:	bf18      	it	ne
 80088e8:	2001      	movne	r0, #1
 80088ea:	b002      	add	sp, #8
 80088ec:	4770      	bx	lr
 80088ee:	4610      	mov	r0, r2
 80088f0:	e7fb      	b.n	80088ea <__ascii_mbtowc+0x16>
 80088f2:	f06f 0001 	mvn.w	r0, #1
 80088f6:	e7f8      	b.n	80088ea <__ascii_mbtowc+0x16>

080088f8 <memcpy>:
 80088f8:	440a      	add	r2, r1
 80088fa:	4291      	cmp	r1, r2
 80088fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008900:	d100      	bne.n	8008904 <memcpy+0xc>
 8008902:	4770      	bx	lr
 8008904:	b510      	push	{r4, lr}
 8008906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800890a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890e:	4291      	cmp	r1, r2
 8008910:	d1f9      	bne.n	8008906 <memcpy+0xe>
 8008912:	bd10      	pop	{r4, pc}

08008914 <_Balloc>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	b976      	cbnz	r6, 800893c <_Balloc+0x28>
 800891e:	2010      	movs	r0, #16
 8008920:	f7ff ffd0 	bl	80088c4 <malloc>
 8008924:	4602      	mov	r2, r0
 8008926:	6260      	str	r0, [r4, #36]	; 0x24
 8008928:	b920      	cbnz	r0, 8008934 <_Balloc+0x20>
 800892a:	4b18      	ldr	r3, [pc, #96]	; (800898c <_Balloc+0x78>)
 800892c:	4818      	ldr	r0, [pc, #96]	; (8008990 <_Balloc+0x7c>)
 800892e:	2166      	movs	r1, #102	; 0x66
 8008930:	f000 ff40 	bl	80097b4 <__assert_func>
 8008934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008938:	6006      	str	r6, [r0, #0]
 800893a:	60c6      	str	r6, [r0, #12]
 800893c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800893e:	68f3      	ldr	r3, [r6, #12]
 8008940:	b183      	cbz	r3, 8008964 <_Balloc+0x50>
 8008942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800894a:	b9b8      	cbnz	r0, 800897c <_Balloc+0x68>
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f605 	lsl.w	r6, r1, r5
 8008952:	1d72      	adds	r2, r6, #5
 8008954:	0092      	lsls	r2, r2, #2
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fc9d 	bl	8009296 <_calloc_r>
 800895c:	b160      	cbz	r0, 8008978 <_Balloc+0x64>
 800895e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008962:	e00e      	b.n	8008982 <_Balloc+0x6e>
 8008964:	2221      	movs	r2, #33	; 0x21
 8008966:	2104      	movs	r1, #4
 8008968:	4620      	mov	r0, r4
 800896a:	f000 fc94 	bl	8009296 <_calloc_r>
 800896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008970:	60f0      	str	r0, [r6, #12]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e4      	bne.n	8008942 <_Balloc+0x2e>
 8008978:	2000      	movs	r0, #0
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	6802      	ldr	r2, [r0, #0]
 800897e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008982:	2300      	movs	r3, #0
 8008984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008988:	e7f7      	b.n	800897a <_Balloc+0x66>
 800898a:	bf00      	nop
 800898c:	0800a536 	.word	0x0800a536
 8008990:	0800a634 	.word	0x0800a634

08008994 <_Bfree>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b976      	cbnz	r6, 80089bc <_Bfree+0x28>
 800899e:	2010      	movs	r0, #16
 80089a0:	f7ff ff90 	bl	80088c4 <malloc>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6268      	str	r0, [r5, #36]	; 0x24
 80089a8:	b920      	cbnz	r0, 80089b4 <_Bfree+0x20>
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <_Bfree+0x3c>)
 80089ac:	4809      	ldr	r0, [pc, #36]	; (80089d4 <_Bfree+0x40>)
 80089ae:	218a      	movs	r1, #138	; 0x8a
 80089b0:	f000 ff00 	bl	80097b4 <__assert_func>
 80089b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b8:	6006      	str	r6, [r0, #0]
 80089ba:	60c6      	str	r6, [r0, #12]
 80089bc:	b13c      	cbz	r4, 80089ce <_Bfree+0x3a>
 80089be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089c0:	6862      	ldr	r2, [r4, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c8:	6021      	str	r1, [r4, #0]
 80089ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	0800a536 	.word	0x0800a536
 80089d4:	0800a634 	.word	0x0800a634

080089d8 <__multadd>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	690d      	ldr	r5, [r1, #16]
 80089de:	4607      	mov	r7, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	461e      	mov	r6, r3
 80089e4:	f101 0c14 	add.w	ip, r1, #20
 80089e8:	2000      	movs	r0, #0
 80089ea:	f8dc 3000 	ldr.w	r3, [ip]
 80089ee:	b299      	uxth	r1, r3
 80089f0:	fb02 6101 	mla	r1, r2, r1, r6
 80089f4:	0c1e      	lsrs	r6, r3, #16
 80089f6:	0c0b      	lsrs	r3, r1, #16
 80089f8:	fb02 3306 	mla	r3, r2, r6, r3
 80089fc:	b289      	uxth	r1, r1
 80089fe:	3001      	adds	r0, #1
 8008a00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a04:	4285      	cmp	r5, r0
 8008a06:	f84c 1b04 	str.w	r1, [ip], #4
 8008a0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a0e:	dcec      	bgt.n	80089ea <__multadd+0x12>
 8008a10:	b30e      	cbz	r6, 8008a56 <__multadd+0x7e>
 8008a12:	68a3      	ldr	r3, [r4, #8]
 8008a14:	42ab      	cmp	r3, r5
 8008a16:	dc19      	bgt.n	8008a4c <__multadd+0x74>
 8008a18:	6861      	ldr	r1, [r4, #4]
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	3101      	adds	r1, #1
 8008a1e:	f7ff ff79 	bl	8008914 <_Balloc>
 8008a22:	4680      	mov	r8, r0
 8008a24:	b928      	cbnz	r0, 8008a32 <__multadd+0x5a>
 8008a26:	4602      	mov	r2, r0
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <__multadd+0x84>)
 8008a2a:	480d      	ldr	r0, [pc, #52]	; (8008a60 <__multadd+0x88>)
 8008a2c:	21b5      	movs	r1, #181	; 0xb5
 8008a2e:	f000 fec1 	bl	80097b4 <__assert_func>
 8008a32:	6922      	ldr	r2, [r4, #16]
 8008a34:	3202      	adds	r2, #2
 8008a36:	f104 010c 	add.w	r1, r4, #12
 8008a3a:	0092      	lsls	r2, r2, #2
 8008a3c:	300c      	adds	r0, #12
 8008a3e:	f7ff ff5b 	bl	80088f8 <memcpy>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff ffa5 	bl	8008994 <_Bfree>
 8008a4a:	4644      	mov	r4, r8
 8008a4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a50:	3501      	adds	r5, #1
 8008a52:	615e      	str	r6, [r3, #20]
 8008a54:	6125      	str	r5, [r4, #16]
 8008a56:	4620      	mov	r0, r4
 8008a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5c:	0800a5a8 	.word	0x0800a5a8
 8008a60:	0800a634 	.word	0x0800a634

08008a64 <__s2b>:
 8008a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a68:	460c      	mov	r4, r1
 8008a6a:	4615      	mov	r5, r2
 8008a6c:	461f      	mov	r7, r3
 8008a6e:	2209      	movs	r2, #9
 8008a70:	3308      	adds	r3, #8
 8008a72:	4606      	mov	r6, r0
 8008a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a78:	2100      	movs	r1, #0
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	db09      	blt.n	8008a94 <__s2b+0x30>
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7ff ff47 	bl	8008914 <_Balloc>
 8008a86:	b940      	cbnz	r0, 8008a9a <__s2b+0x36>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <__s2b+0x8c>)
 8008a8c:	4819      	ldr	r0, [pc, #100]	; (8008af4 <__s2b+0x90>)
 8008a8e:	21ce      	movs	r1, #206	; 0xce
 8008a90:	f000 fe90 	bl	80097b4 <__assert_func>
 8008a94:	0052      	lsls	r2, r2, #1
 8008a96:	3101      	adds	r1, #1
 8008a98:	e7f0      	b.n	8008a7c <__s2b+0x18>
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	6143      	str	r3, [r0, #20]
 8008a9e:	2d09      	cmp	r5, #9
 8008aa0:	f04f 0301 	mov.w	r3, #1
 8008aa4:	6103      	str	r3, [r0, #16]
 8008aa6:	dd16      	ble.n	8008ad6 <__s2b+0x72>
 8008aa8:	f104 0909 	add.w	r9, r4, #9
 8008aac:	46c8      	mov	r8, r9
 8008aae:	442c      	add	r4, r5
 8008ab0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	3b30      	subs	r3, #48	; 0x30
 8008ab8:	220a      	movs	r2, #10
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff ff8c 	bl	80089d8 <__multadd>
 8008ac0:	45a0      	cmp	r8, r4
 8008ac2:	d1f5      	bne.n	8008ab0 <__s2b+0x4c>
 8008ac4:	f1a5 0408 	sub.w	r4, r5, #8
 8008ac8:	444c      	add	r4, r9
 8008aca:	1b2d      	subs	r5, r5, r4
 8008acc:	1963      	adds	r3, r4, r5
 8008ace:	42bb      	cmp	r3, r7
 8008ad0:	db04      	blt.n	8008adc <__s2b+0x78>
 8008ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad6:	340a      	adds	r4, #10
 8008ad8:	2509      	movs	r5, #9
 8008ada:	e7f6      	b.n	8008aca <__s2b+0x66>
 8008adc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	3b30      	subs	r3, #48	; 0x30
 8008ae4:	220a      	movs	r2, #10
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ff76 	bl	80089d8 <__multadd>
 8008aec:	e7ee      	b.n	8008acc <__s2b+0x68>
 8008aee:	bf00      	nop
 8008af0:	0800a5a8 	.word	0x0800a5a8
 8008af4:	0800a634 	.word	0x0800a634

08008af8 <__hi0bits>:
 8008af8:	0c03      	lsrs	r3, r0, #16
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	b9d3      	cbnz	r3, 8008b34 <__hi0bits+0x3c>
 8008afe:	0400      	lsls	r0, r0, #16
 8008b00:	2310      	movs	r3, #16
 8008b02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b06:	bf04      	itt	eq
 8008b08:	0200      	lsleq	r0, r0, #8
 8008b0a:	3308      	addeq	r3, #8
 8008b0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b10:	bf04      	itt	eq
 8008b12:	0100      	lsleq	r0, r0, #4
 8008b14:	3304      	addeq	r3, #4
 8008b16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b1a:	bf04      	itt	eq
 8008b1c:	0080      	lsleq	r0, r0, #2
 8008b1e:	3302      	addeq	r3, #2
 8008b20:	2800      	cmp	r0, #0
 8008b22:	db05      	blt.n	8008b30 <__hi0bits+0x38>
 8008b24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b28:	f103 0301 	add.w	r3, r3, #1
 8008b2c:	bf08      	it	eq
 8008b2e:	2320      	moveq	r3, #32
 8008b30:	4618      	mov	r0, r3
 8008b32:	4770      	bx	lr
 8008b34:	2300      	movs	r3, #0
 8008b36:	e7e4      	b.n	8008b02 <__hi0bits+0xa>

08008b38 <__lo0bits>:
 8008b38:	6803      	ldr	r3, [r0, #0]
 8008b3a:	f013 0207 	ands.w	r2, r3, #7
 8008b3e:	4601      	mov	r1, r0
 8008b40:	d00b      	beq.n	8008b5a <__lo0bits+0x22>
 8008b42:	07da      	lsls	r2, r3, #31
 8008b44:	d423      	bmi.n	8008b8e <__lo0bits+0x56>
 8008b46:	0798      	lsls	r0, r3, #30
 8008b48:	bf49      	itett	mi
 8008b4a:	085b      	lsrmi	r3, r3, #1
 8008b4c:	089b      	lsrpl	r3, r3, #2
 8008b4e:	2001      	movmi	r0, #1
 8008b50:	600b      	strmi	r3, [r1, #0]
 8008b52:	bf5c      	itt	pl
 8008b54:	600b      	strpl	r3, [r1, #0]
 8008b56:	2002      	movpl	r0, #2
 8008b58:	4770      	bx	lr
 8008b5a:	b298      	uxth	r0, r3
 8008b5c:	b9a8      	cbnz	r0, 8008b8a <__lo0bits+0x52>
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	2010      	movs	r0, #16
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	b90a      	cbnz	r2, 8008b6a <__lo0bits+0x32>
 8008b66:	3008      	adds	r0, #8
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	071a      	lsls	r2, r3, #28
 8008b6c:	bf04      	itt	eq
 8008b6e:	091b      	lsreq	r3, r3, #4
 8008b70:	3004      	addeq	r0, #4
 8008b72:	079a      	lsls	r2, r3, #30
 8008b74:	bf04      	itt	eq
 8008b76:	089b      	lsreq	r3, r3, #2
 8008b78:	3002      	addeq	r0, #2
 8008b7a:	07da      	lsls	r2, r3, #31
 8008b7c:	d403      	bmi.n	8008b86 <__lo0bits+0x4e>
 8008b7e:	085b      	lsrs	r3, r3, #1
 8008b80:	f100 0001 	add.w	r0, r0, #1
 8008b84:	d005      	beq.n	8008b92 <__lo0bits+0x5a>
 8008b86:	600b      	str	r3, [r1, #0]
 8008b88:	4770      	bx	lr
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	e7e9      	b.n	8008b62 <__lo0bits+0x2a>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	4770      	bx	lr
 8008b92:	2020      	movs	r0, #32
 8008b94:	4770      	bx	lr
	...

08008b98 <__i2b>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	f7ff feb9 	bl	8008914 <_Balloc>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	b928      	cbnz	r0, 8008bb2 <__i2b+0x1a>
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <__i2b+0x24>)
 8008ba8:	4805      	ldr	r0, [pc, #20]	; (8008bc0 <__i2b+0x28>)
 8008baa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bae:	f000 fe01 	bl	80097b4 <__assert_func>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	6144      	str	r4, [r0, #20]
 8008bb6:	6103      	str	r3, [r0, #16]
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	bf00      	nop
 8008bbc:	0800a5a8 	.word	0x0800a5a8
 8008bc0:	0800a634 	.word	0x0800a634

08008bc4 <__multiply>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	4691      	mov	r9, r2
 8008bca:	690a      	ldr	r2, [r1, #16]
 8008bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	bfb8      	it	lt
 8008bd4:	460b      	movlt	r3, r1
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	bfbc      	itt	lt
 8008bda:	464c      	movlt	r4, r9
 8008bdc:	4699      	movlt	r9, r3
 8008bde:	6927      	ldr	r7, [r4, #16]
 8008be0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	6861      	ldr	r1, [r4, #4]
 8008be8:	eb07 060a 	add.w	r6, r7, sl
 8008bec:	42b3      	cmp	r3, r6
 8008bee:	b085      	sub	sp, #20
 8008bf0:	bfb8      	it	lt
 8008bf2:	3101      	addlt	r1, #1
 8008bf4:	f7ff fe8e 	bl	8008914 <_Balloc>
 8008bf8:	b930      	cbnz	r0, 8008c08 <__multiply+0x44>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	4b44      	ldr	r3, [pc, #272]	; (8008d10 <__multiply+0x14c>)
 8008bfe:	4845      	ldr	r0, [pc, #276]	; (8008d14 <__multiply+0x150>)
 8008c00:	f240 115d 	movw	r1, #349	; 0x15d
 8008c04:	f000 fdd6 	bl	80097b4 <__assert_func>
 8008c08:	f100 0514 	add.w	r5, r0, #20
 8008c0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c10:	462b      	mov	r3, r5
 8008c12:	2200      	movs	r2, #0
 8008c14:	4543      	cmp	r3, r8
 8008c16:	d321      	bcc.n	8008c5c <__multiply+0x98>
 8008c18:	f104 0314 	add.w	r3, r4, #20
 8008c1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c20:	f109 0314 	add.w	r3, r9, #20
 8008c24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c28:	9202      	str	r2, [sp, #8]
 8008c2a:	1b3a      	subs	r2, r7, r4
 8008c2c:	3a15      	subs	r2, #21
 8008c2e:	f022 0203 	bic.w	r2, r2, #3
 8008c32:	3204      	adds	r2, #4
 8008c34:	f104 0115 	add.w	r1, r4, #21
 8008c38:	428f      	cmp	r7, r1
 8008c3a:	bf38      	it	cc
 8008c3c:	2204      	movcc	r2, #4
 8008c3e:	9201      	str	r2, [sp, #4]
 8008c40:	9a02      	ldr	r2, [sp, #8]
 8008c42:	9303      	str	r3, [sp, #12]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d80c      	bhi.n	8008c62 <__multiply+0x9e>
 8008c48:	2e00      	cmp	r6, #0
 8008c4a:	dd03      	ble.n	8008c54 <__multiply+0x90>
 8008c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d05a      	beq.n	8008d0a <__multiply+0x146>
 8008c54:	6106      	str	r6, [r0, #16]
 8008c56:	b005      	add	sp, #20
 8008c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	f843 2b04 	str.w	r2, [r3], #4
 8008c60:	e7d8      	b.n	8008c14 <__multiply+0x50>
 8008c62:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c66:	f1ba 0f00 	cmp.w	sl, #0
 8008c6a:	d024      	beq.n	8008cb6 <__multiply+0xf2>
 8008c6c:	f104 0e14 	add.w	lr, r4, #20
 8008c70:	46a9      	mov	r9, r5
 8008c72:	f04f 0c00 	mov.w	ip, #0
 8008c76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c7a:	f8d9 1000 	ldr.w	r1, [r9]
 8008c7e:	fa1f fb82 	uxth.w	fp, r2
 8008c82:	b289      	uxth	r1, r1
 8008c84:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c90:	4461      	add	r1, ip
 8008c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c96:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c9e:	b289      	uxth	r1, r1
 8008ca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ca4:	4577      	cmp	r7, lr
 8008ca6:	f849 1b04 	str.w	r1, [r9], #4
 8008caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cae:	d8e2      	bhi.n	8008c76 <__multiply+0xb2>
 8008cb0:	9a01      	ldr	r2, [sp, #4]
 8008cb2:	f845 c002 	str.w	ip, [r5, r2]
 8008cb6:	9a03      	ldr	r2, [sp, #12]
 8008cb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	f1b9 0f00 	cmp.w	r9, #0
 8008cc2:	d020      	beq.n	8008d06 <__multiply+0x142>
 8008cc4:	6829      	ldr	r1, [r5, #0]
 8008cc6:	f104 0c14 	add.w	ip, r4, #20
 8008cca:	46ae      	mov	lr, r5
 8008ccc:	f04f 0a00 	mov.w	sl, #0
 8008cd0:	f8bc b000 	ldrh.w	fp, [ip]
 8008cd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cd8:	fb09 220b 	mla	r2, r9, fp, r2
 8008cdc:	4492      	add	sl, r2
 8008cde:	b289      	uxth	r1, r1
 8008ce0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ce4:	f84e 1b04 	str.w	r1, [lr], #4
 8008ce8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008cec:	f8be 1000 	ldrh.w	r1, [lr]
 8008cf0:	0c12      	lsrs	r2, r2, #16
 8008cf2:	fb09 1102 	mla	r1, r9, r2, r1
 8008cf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cfa:	4567      	cmp	r7, ip
 8008cfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d00:	d8e6      	bhi.n	8008cd0 <__multiply+0x10c>
 8008d02:	9a01      	ldr	r2, [sp, #4]
 8008d04:	50a9      	str	r1, [r5, r2]
 8008d06:	3504      	adds	r5, #4
 8008d08:	e79a      	b.n	8008c40 <__multiply+0x7c>
 8008d0a:	3e01      	subs	r6, #1
 8008d0c:	e79c      	b.n	8008c48 <__multiply+0x84>
 8008d0e:	bf00      	nop
 8008d10:	0800a5a8 	.word	0x0800a5a8
 8008d14:	0800a634 	.word	0x0800a634

08008d18 <__pow5mult>:
 8008d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	4615      	mov	r5, r2
 8008d1e:	f012 0203 	ands.w	r2, r2, #3
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	d007      	beq.n	8008d38 <__pow5mult+0x20>
 8008d28:	4c25      	ldr	r4, [pc, #148]	; (8008dc0 <__pow5mult+0xa8>)
 8008d2a:	3a01      	subs	r2, #1
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d32:	f7ff fe51 	bl	80089d8 <__multadd>
 8008d36:	4607      	mov	r7, r0
 8008d38:	10ad      	asrs	r5, r5, #2
 8008d3a:	d03d      	beq.n	8008db8 <__pow5mult+0xa0>
 8008d3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d3e:	b97c      	cbnz	r4, 8008d60 <__pow5mult+0x48>
 8008d40:	2010      	movs	r0, #16
 8008d42:	f7ff fdbf 	bl	80088c4 <malloc>
 8008d46:	4602      	mov	r2, r0
 8008d48:	6270      	str	r0, [r6, #36]	; 0x24
 8008d4a:	b928      	cbnz	r0, 8008d58 <__pow5mult+0x40>
 8008d4c:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <__pow5mult+0xac>)
 8008d4e:	481e      	ldr	r0, [pc, #120]	; (8008dc8 <__pow5mult+0xb0>)
 8008d50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d54:	f000 fd2e 	bl	80097b4 <__assert_func>
 8008d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d5c:	6004      	str	r4, [r0, #0]
 8008d5e:	60c4      	str	r4, [r0, #12]
 8008d60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d68:	b94c      	cbnz	r4, 8008d7e <__pow5mult+0x66>
 8008d6a:	f240 2171 	movw	r1, #625	; 0x271
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff ff12 	bl	8008b98 <__i2b>
 8008d74:	2300      	movs	r3, #0
 8008d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	f04f 0900 	mov.w	r9, #0
 8008d82:	07eb      	lsls	r3, r5, #31
 8008d84:	d50a      	bpl.n	8008d9c <__pow5mult+0x84>
 8008d86:	4639      	mov	r1, r7
 8008d88:	4622      	mov	r2, r4
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7ff ff1a 	bl	8008bc4 <__multiply>
 8008d90:	4639      	mov	r1, r7
 8008d92:	4680      	mov	r8, r0
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff fdfd 	bl	8008994 <_Bfree>
 8008d9a:	4647      	mov	r7, r8
 8008d9c:	106d      	asrs	r5, r5, #1
 8008d9e:	d00b      	beq.n	8008db8 <__pow5mult+0xa0>
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	b938      	cbnz	r0, 8008db4 <__pow5mult+0x9c>
 8008da4:	4622      	mov	r2, r4
 8008da6:	4621      	mov	r1, r4
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff ff0b 	bl	8008bc4 <__multiply>
 8008dae:	6020      	str	r0, [r4, #0]
 8008db0:	f8c0 9000 	str.w	r9, [r0]
 8008db4:	4604      	mov	r4, r0
 8008db6:	e7e4      	b.n	8008d82 <__pow5mult+0x6a>
 8008db8:	4638      	mov	r0, r7
 8008dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0800a780 	.word	0x0800a780
 8008dc4:	0800a536 	.word	0x0800a536
 8008dc8:	0800a634 	.word	0x0800a634

08008dcc <__lshift>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	6849      	ldr	r1, [r1, #4]
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	4607      	mov	r7, r0
 8008dde:	4691      	mov	r9, r2
 8008de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008de4:	f108 0601 	add.w	r6, r8, #1
 8008de8:	42b3      	cmp	r3, r6
 8008dea:	db0b      	blt.n	8008e04 <__lshift+0x38>
 8008dec:	4638      	mov	r0, r7
 8008dee:	f7ff fd91 	bl	8008914 <_Balloc>
 8008df2:	4605      	mov	r5, r0
 8008df4:	b948      	cbnz	r0, 8008e0a <__lshift+0x3e>
 8008df6:	4602      	mov	r2, r0
 8008df8:	4b2a      	ldr	r3, [pc, #168]	; (8008ea4 <__lshift+0xd8>)
 8008dfa:	482b      	ldr	r0, [pc, #172]	; (8008ea8 <__lshift+0xdc>)
 8008dfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e00:	f000 fcd8 	bl	80097b4 <__assert_func>
 8008e04:	3101      	adds	r1, #1
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	e7ee      	b.n	8008de8 <__lshift+0x1c>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f100 0114 	add.w	r1, r0, #20
 8008e10:	f100 0210 	add.w	r2, r0, #16
 8008e14:	4618      	mov	r0, r3
 8008e16:	4553      	cmp	r3, sl
 8008e18:	db37      	blt.n	8008e8a <__lshift+0xbe>
 8008e1a:	6920      	ldr	r0, [r4, #16]
 8008e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e20:	f104 0314 	add.w	r3, r4, #20
 8008e24:	f019 091f 	ands.w	r9, r9, #31
 8008e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e30:	d02f      	beq.n	8008e92 <__lshift+0xc6>
 8008e32:	f1c9 0e20 	rsb	lr, r9, #32
 8008e36:	468a      	mov	sl, r1
 8008e38:	f04f 0c00 	mov.w	ip, #0
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	fa02 f209 	lsl.w	r2, r2, r9
 8008e42:	ea42 020c 	orr.w	r2, r2, ip
 8008e46:	f84a 2b04 	str.w	r2, [sl], #4
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	4298      	cmp	r0, r3
 8008e50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e54:	d8f2      	bhi.n	8008e3c <__lshift+0x70>
 8008e56:	1b03      	subs	r3, r0, r4
 8008e58:	3b15      	subs	r3, #21
 8008e5a:	f023 0303 	bic.w	r3, r3, #3
 8008e5e:	3304      	adds	r3, #4
 8008e60:	f104 0215 	add.w	r2, r4, #21
 8008e64:	4290      	cmp	r0, r2
 8008e66:	bf38      	it	cc
 8008e68:	2304      	movcc	r3, #4
 8008e6a:	f841 c003 	str.w	ip, [r1, r3]
 8008e6e:	f1bc 0f00 	cmp.w	ip, #0
 8008e72:	d001      	beq.n	8008e78 <__lshift+0xac>
 8008e74:	f108 0602 	add.w	r6, r8, #2
 8008e78:	3e01      	subs	r6, #1
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	612e      	str	r6, [r5, #16]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	f7ff fd88 	bl	8008994 <_Bfree>
 8008e84:	4628      	mov	r0, r5
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e8e:	3301      	adds	r3, #1
 8008e90:	e7c1      	b.n	8008e16 <__lshift+0x4a>
 8008e92:	3904      	subs	r1, #4
 8008e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e9c:	4298      	cmp	r0, r3
 8008e9e:	d8f9      	bhi.n	8008e94 <__lshift+0xc8>
 8008ea0:	e7ea      	b.n	8008e78 <__lshift+0xac>
 8008ea2:	bf00      	nop
 8008ea4:	0800a5a8 	.word	0x0800a5a8
 8008ea8:	0800a634 	.word	0x0800a634

08008eac <__mcmp>:
 8008eac:	b530      	push	{r4, r5, lr}
 8008eae:	6902      	ldr	r2, [r0, #16]
 8008eb0:	690c      	ldr	r4, [r1, #16]
 8008eb2:	1b12      	subs	r2, r2, r4
 8008eb4:	d10e      	bne.n	8008ed4 <__mcmp+0x28>
 8008eb6:	f100 0314 	add.w	r3, r0, #20
 8008eba:	3114      	adds	r1, #20
 8008ebc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ec0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ec4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ec8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d003      	beq.n	8008ed8 <__mcmp+0x2c>
 8008ed0:	d305      	bcc.n	8008ede <__mcmp+0x32>
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	bd30      	pop	{r4, r5, pc}
 8008ed8:	4283      	cmp	r3, r0
 8008eda:	d3f3      	bcc.n	8008ec4 <__mcmp+0x18>
 8008edc:	e7fa      	b.n	8008ed4 <__mcmp+0x28>
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	e7f7      	b.n	8008ed4 <__mcmp+0x28>

08008ee4 <__mdiff>:
 8008ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee8:	460c      	mov	r4, r1
 8008eea:	4606      	mov	r6, r0
 8008eec:	4611      	mov	r1, r2
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4690      	mov	r8, r2
 8008ef2:	f7ff ffdb 	bl	8008eac <__mcmp>
 8008ef6:	1e05      	subs	r5, r0, #0
 8008ef8:	d110      	bne.n	8008f1c <__mdiff+0x38>
 8008efa:	4629      	mov	r1, r5
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7ff fd09 	bl	8008914 <_Balloc>
 8008f02:	b930      	cbnz	r0, 8008f12 <__mdiff+0x2e>
 8008f04:	4b3a      	ldr	r3, [pc, #232]	; (8008ff0 <__mdiff+0x10c>)
 8008f06:	4602      	mov	r2, r0
 8008f08:	f240 2132 	movw	r1, #562	; 0x232
 8008f0c:	4839      	ldr	r0, [pc, #228]	; (8008ff4 <__mdiff+0x110>)
 8008f0e:	f000 fc51 	bl	80097b4 <__assert_func>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	bfa4      	itt	ge
 8008f1e:	4643      	movge	r3, r8
 8008f20:	46a0      	movge	r8, r4
 8008f22:	4630      	mov	r0, r6
 8008f24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f28:	bfa6      	itte	ge
 8008f2a:	461c      	movge	r4, r3
 8008f2c:	2500      	movge	r5, #0
 8008f2e:	2501      	movlt	r5, #1
 8008f30:	f7ff fcf0 	bl	8008914 <_Balloc>
 8008f34:	b920      	cbnz	r0, 8008f40 <__mdiff+0x5c>
 8008f36:	4b2e      	ldr	r3, [pc, #184]	; (8008ff0 <__mdiff+0x10c>)
 8008f38:	4602      	mov	r2, r0
 8008f3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f3e:	e7e5      	b.n	8008f0c <__mdiff+0x28>
 8008f40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f44:	6926      	ldr	r6, [r4, #16]
 8008f46:	60c5      	str	r5, [r0, #12]
 8008f48:	f104 0914 	add.w	r9, r4, #20
 8008f4c:	f108 0514 	add.w	r5, r8, #20
 8008f50:	f100 0e14 	add.w	lr, r0, #20
 8008f54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f5c:	f108 0210 	add.w	r2, r8, #16
 8008f60:	46f2      	mov	sl, lr
 8008f62:	2100      	movs	r1, #0
 8008f64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f6c:	fa1f f883 	uxth.w	r8, r3
 8008f70:	fa11 f18b 	uxtah	r1, r1, fp
 8008f74:	0c1b      	lsrs	r3, r3, #16
 8008f76:	eba1 0808 	sub.w	r8, r1, r8
 8008f7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f82:	fa1f f888 	uxth.w	r8, r8
 8008f86:	1419      	asrs	r1, r3, #16
 8008f88:	454e      	cmp	r6, r9
 8008f8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f8e:	f84a 3b04 	str.w	r3, [sl], #4
 8008f92:	d8e7      	bhi.n	8008f64 <__mdiff+0x80>
 8008f94:	1b33      	subs	r3, r6, r4
 8008f96:	3b15      	subs	r3, #21
 8008f98:	f023 0303 	bic.w	r3, r3, #3
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	3415      	adds	r4, #21
 8008fa0:	42a6      	cmp	r6, r4
 8008fa2:	bf38      	it	cc
 8008fa4:	2304      	movcc	r3, #4
 8008fa6:	441d      	add	r5, r3
 8008fa8:	4473      	add	r3, lr
 8008faa:	469e      	mov	lr, r3
 8008fac:	462e      	mov	r6, r5
 8008fae:	4566      	cmp	r6, ip
 8008fb0:	d30e      	bcc.n	8008fd0 <__mdiff+0xec>
 8008fb2:	f10c 0203 	add.w	r2, ip, #3
 8008fb6:	1b52      	subs	r2, r2, r5
 8008fb8:	f022 0203 	bic.w	r2, r2, #3
 8008fbc:	3d03      	subs	r5, #3
 8008fbe:	45ac      	cmp	ip, r5
 8008fc0:	bf38      	it	cc
 8008fc2:	2200      	movcc	r2, #0
 8008fc4:	441a      	add	r2, r3
 8008fc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008fca:	b17b      	cbz	r3, 8008fec <__mdiff+0x108>
 8008fcc:	6107      	str	r7, [r0, #16]
 8008fce:	e7a3      	b.n	8008f18 <__mdiff+0x34>
 8008fd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fd4:	fa11 f288 	uxtah	r2, r1, r8
 8008fd8:	1414      	asrs	r4, r2, #16
 8008fda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fde:	b292      	uxth	r2, r2
 8008fe0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fe4:	f84e 2b04 	str.w	r2, [lr], #4
 8008fe8:	1421      	asrs	r1, r4, #16
 8008fea:	e7e0      	b.n	8008fae <__mdiff+0xca>
 8008fec:	3f01      	subs	r7, #1
 8008fee:	e7ea      	b.n	8008fc6 <__mdiff+0xe2>
 8008ff0:	0800a5a8 	.word	0x0800a5a8
 8008ff4:	0800a634 	.word	0x0800a634

08008ff8 <__ulp>:
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	ed8d 0b00 	vstr	d0, [sp]
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	4912      	ldr	r1, [pc, #72]	; (800904c <__ulp+0x54>)
 8009002:	4019      	ands	r1, r3
 8009004:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009008:	2900      	cmp	r1, #0
 800900a:	dd05      	ble.n	8009018 <__ulp+0x20>
 800900c:	2200      	movs	r2, #0
 800900e:	460b      	mov	r3, r1
 8009010:	ec43 2b10 	vmov	d0, r2, r3
 8009014:	b002      	add	sp, #8
 8009016:	4770      	bx	lr
 8009018:	4249      	negs	r1, r1
 800901a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800901e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	da04      	bge.n	8009036 <__ulp+0x3e>
 800902c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009030:	fa41 f300 	asr.w	r3, r1, r0
 8009034:	e7ec      	b.n	8009010 <__ulp+0x18>
 8009036:	f1a0 0114 	sub.w	r1, r0, #20
 800903a:	291e      	cmp	r1, #30
 800903c:	bfda      	itte	le
 800903e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009042:	fa20 f101 	lsrle.w	r1, r0, r1
 8009046:	2101      	movgt	r1, #1
 8009048:	460a      	mov	r2, r1
 800904a:	e7e1      	b.n	8009010 <__ulp+0x18>
 800904c:	7ff00000 	.word	0x7ff00000

08009050 <__b2d>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	6905      	ldr	r5, [r0, #16]
 8009054:	f100 0714 	add.w	r7, r0, #20
 8009058:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800905c:	1f2e      	subs	r6, r5, #4
 800905e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff fd48 	bl	8008af8 <__hi0bits>
 8009068:	f1c0 0320 	rsb	r3, r0, #32
 800906c:	280a      	cmp	r0, #10
 800906e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80090ec <__b2d+0x9c>
 8009072:	600b      	str	r3, [r1, #0]
 8009074:	dc14      	bgt.n	80090a0 <__b2d+0x50>
 8009076:	f1c0 0e0b 	rsb	lr, r0, #11
 800907a:	fa24 f10e 	lsr.w	r1, r4, lr
 800907e:	42b7      	cmp	r7, r6
 8009080:	ea41 030c 	orr.w	r3, r1, ip
 8009084:	bf34      	ite	cc
 8009086:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800908a:	2100      	movcs	r1, #0
 800908c:	3015      	adds	r0, #21
 800908e:	fa04 f000 	lsl.w	r0, r4, r0
 8009092:	fa21 f10e 	lsr.w	r1, r1, lr
 8009096:	ea40 0201 	orr.w	r2, r0, r1
 800909a:	ec43 2b10 	vmov	d0, r2, r3
 800909e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a0:	42b7      	cmp	r7, r6
 80090a2:	bf3a      	itte	cc
 80090a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80090ac:	2100      	movcs	r1, #0
 80090ae:	380b      	subs	r0, #11
 80090b0:	d017      	beq.n	80090e2 <__b2d+0x92>
 80090b2:	f1c0 0c20 	rsb	ip, r0, #32
 80090b6:	fa04 f500 	lsl.w	r5, r4, r0
 80090ba:	42be      	cmp	r6, r7
 80090bc:	fa21 f40c 	lsr.w	r4, r1, ip
 80090c0:	ea45 0504 	orr.w	r5, r5, r4
 80090c4:	bf8c      	ite	hi
 80090c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80090ca:	2400      	movls	r4, #0
 80090cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80090d0:	fa01 f000 	lsl.w	r0, r1, r0
 80090d4:	fa24 f40c 	lsr.w	r4, r4, ip
 80090d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090dc:	ea40 0204 	orr.w	r2, r0, r4
 80090e0:	e7db      	b.n	800909a <__b2d+0x4a>
 80090e2:	ea44 030c 	orr.w	r3, r4, ip
 80090e6:	460a      	mov	r2, r1
 80090e8:	e7d7      	b.n	800909a <__b2d+0x4a>
 80090ea:	bf00      	nop
 80090ec:	3ff00000 	.word	0x3ff00000

080090f0 <__d2b>:
 80090f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090f4:	4689      	mov	r9, r1
 80090f6:	2101      	movs	r1, #1
 80090f8:	ec57 6b10 	vmov	r6, r7, d0
 80090fc:	4690      	mov	r8, r2
 80090fe:	f7ff fc09 	bl	8008914 <_Balloc>
 8009102:	4604      	mov	r4, r0
 8009104:	b930      	cbnz	r0, 8009114 <__d2b+0x24>
 8009106:	4602      	mov	r2, r0
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <__d2b+0xb0>)
 800910a:	4826      	ldr	r0, [pc, #152]	; (80091a4 <__d2b+0xb4>)
 800910c:	f240 310a 	movw	r1, #778	; 0x30a
 8009110:	f000 fb50 	bl	80097b4 <__assert_func>
 8009114:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800911c:	bb35      	cbnz	r5, 800916c <__d2b+0x7c>
 800911e:	2e00      	cmp	r6, #0
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	d028      	beq.n	8009176 <__d2b+0x86>
 8009124:	4668      	mov	r0, sp
 8009126:	9600      	str	r6, [sp, #0]
 8009128:	f7ff fd06 	bl	8008b38 <__lo0bits>
 800912c:	9900      	ldr	r1, [sp, #0]
 800912e:	b300      	cbz	r0, 8009172 <__d2b+0x82>
 8009130:	9a01      	ldr	r2, [sp, #4]
 8009132:	f1c0 0320 	rsb	r3, r0, #32
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	430b      	orrs	r3, r1
 800913c:	40c2      	lsrs	r2, r0
 800913e:	6163      	str	r3, [r4, #20]
 8009140:	9201      	str	r2, [sp, #4]
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	61a3      	str	r3, [r4, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	bf14      	ite	ne
 800914a:	2202      	movne	r2, #2
 800914c:	2201      	moveq	r2, #1
 800914e:	6122      	str	r2, [r4, #16]
 8009150:	b1d5      	cbz	r5, 8009188 <__d2b+0x98>
 8009152:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009156:	4405      	add	r5, r0
 8009158:	f8c9 5000 	str.w	r5, [r9]
 800915c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009160:	f8c8 0000 	str.w	r0, [r8]
 8009164:	4620      	mov	r0, r4
 8009166:	b003      	add	sp, #12
 8009168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800916c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009170:	e7d5      	b.n	800911e <__d2b+0x2e>
 8009172:	6161      	str	r1, [r4, #20]
 8009174:	e7e5      	b.n	8009142 <__d2b+0x52>
 8009176:	a801      	add	r0, sp, #4
 8009178:	f7ff fcde 	bl	8008b38 <__lo0bits>
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	6163      	str	r3, [r4, #20]
 8009180:	2201      	movs	r2, #1
 8009182:	6122      	str	r2, [r4, #16]
 8009184:	3020      	adds	r0, #32
 8009186:	e7e3      	b.n	8009150 <__d2b+0x60>
 8009188:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800918c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009190:	f8c9 0000 	str.w	r0, [r9]
 8009194:	6918      	ldr	r0, [r3, #16]
 8009196:	f7ff fcaf 	bl	8008af8 <__hi0bits>
 800919a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800919e:	e7df      	b.n	8009160 <__d2b+0x70>
 80091a0:	0800a5a8 	.word	0x0800a5a8
 80091a4:	0800a634 	.word	0x0800a634

080091a8 <__ratio>:
 80091a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	4688      	mov	r8, r1
 80091ae:	4669      	mov	r1, sp
 80091b0:	4681      	mov	r9, r0
 80091b2:	f7ff ff4d 	bl	8009050 <__b2d>
 80091b6:	a901      	add	r1, sp, #4
 80091b8:	4640      	mov	r0, r8
 80091ba:	ec55 4b10 	vmov	r4, r5, d0
 80091be:	f7ff ff47 	bl	8009050 <__b2d>
 80091c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80091ca:	eba3 0c02 	sub.w	ip, r3, r2
 80091ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091d2:	1a9b      	subs	r3, r3, r2
 80091d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80091d8:	ec51 0b10 	vmov	r0, r1, d0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfd6      	itet	le
 80091e0:	460a      	movle	r2, r1
 80091e2:	462a      	movgt	r2, r5
 80091e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091e8:	468b      	mov	fp, r1
 80091ea:	462f      	mov	r7, r5
 80091ec:	bfd4      	ite	le
 80091ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80091f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091f6:	4620      	mov	r0, r4
 80091f8:	ee10 2a10 	vmov	r2, s0
 80091fc:	465b      	mov	r3, fp
 80091fe:	4639      	mov	r1, r7
 8009200:	f7f7 fb44 	bl	800088c <__aeabi_ddiv>
 8009204:	ec41 0b10 	vmov	d0, r0, r1
 8009208:	b003      	add	sp, #12
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800920e <__copybits>:
 800920e:	3901      	subs	r1, #1
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	1149      	asrs	r1, r1, #5
 8009214:	6914      	ldr	r4, [r2, #16]
 8009216:	3101      	adds	r1, #1
 8009218:	f102 0314 	add.w	r3, r2, #20
 800921c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009220:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009224:	1f05      	subs	r5, r0, #4
 8009226:	42a3      	cmp	r3, r4
 8009228:	d30c      	bcc.n	8009244 <__copybits+0x36>
 800922a:	1aa3      	subs	r3, r4, r2
 800922c:	3b11      	subs	r3, #17
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	3211      	adds	r2, #17
 8009234:	42a2      	cmp	r2, r4
 8009236:	bf88      	it	hi
 8009238:	2300      	movhi	r3, #0
 800923a:	4418      	add	r0, r3
 800923c:	2300      	movs	r3, #0
 800923e:	4288      	cmp	r0, r1
 8009240:	d305      	bcc.n	800924e <__copybits+0x40>
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	f853 6b04 	ldr.w	r6, [r3], #4
 8009248:	f845 6f04 	str.w	r6, [r5, #4]!
 800924c:	e7eb      	b.n	8009226 <__copybits+0x18>
 800924e:	f840 3b04 	str.w	r3, [r0], #4
 8009252:	e7f4      	b.n	800923e <__copybits+0x30>

08009254 <__any_on>:
 8009254:	f100 0214 	add.w	r2, r0, #20
 8009258:	6900      	ldr	r0, [r0, #16]
 800925a:	114b      	asrs	r3, r1, #5
 800925c:	4298      	cmp	r0, r3
 800925e:	b510      	push	{r4, lr}
 8009260:	db11      	blt.n	8009286 <__any_on+0x32>
 8009262:	dd0a      	ble.n	800927a <__any_on+0x26>
 8009264:	f011 011f 	ands.w	r1, r1, #31
 8009268:	d007      	beq.n	800927a <__any_on+0x26>
 800926a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800926e:	fa24 f001 	lsr.w	r0, r4, r1
 8009272:	fa00 f101 	lsl.w	r1, r0, r1
 8009276:	428c      	cmp	r4, r1
 8009278:	d10b      	bne.n	8009292 <__any_on+0x3e>
 800927a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800927e:	4293      	cmp	r3, r2
 8009280:	d803      	bhi.n	800928a <__any_on+0x36>
 8009282:	2000      	movs	r0, #0
 8009284:	bd10      	pop	{r4, pc}
 8009286:	4603      	mov	r3, r0
 8009288:	e7f7      	b.n	800927a <__any_on+0x26>
 800928a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800928e:	2900      	cmp	r1, #0
 8009290:	d0f5      	beq.n	800927e <__any_on+0x2a>
 8009292:	2001      	movs	r0, #1
 8009294:	e7f6      	b.n	8009284 <__any_on+0x30>

08009296 <_calloc_r>:
 8009296:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009298:	fba1 2402 	umull	r2, r4, r1, r2
 800929c:	b94c      	cbnz	r4, 80092b2 <_calloc_r+0x1c>
 800929e:	4611      	mov	r1, r2
 80092a0:	9201      	str	r2, [sp, #4]
 80092a2:	f000 f87b 	bl	800939c <_malloc_r>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	4605      	mov	r5, r0
 80092aa:	b930      	cbnz	r0, 80092ba <_calloc_r+0x24>
 80092ac:	4628      	mov	r0, r5
 80092ae:	b003      	add	sp, #12
 80092b0:	bd30      	pop	{r4, r5, pc}
 80092b2:	220c      	movs	r2, #12
 80092b4:	6002      	str	r2, [r0, #0]
 80092b6:	2500      	movs	r5, #0
 80092b8:	e7f8      	b.n	80092ac <_calloc_r+0x16>
 80092ba:	4621      	mov	r1, r4
 80092bc:	f7fc fbaa 	bl	8005a14 <memset>
 80092c0:	e7f4      	b.n	80092ac <_calloc_r+0x16>
	...

080092c4 <_free_r>:
 80092c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d044      	beq.n	8009354 <_free_r+0x90>
 80092ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ce:	9001      	str	r0, [sp, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f1a1 0404 	sub.w	r4, r1, #4
 80092d6:	bfb8      	it	lt
 80092d8:	18e4      	addlt	r4, r4, r3
 80092da:	f000 fab5 	bl	8009848 <__malloc_lock>
 80092de:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <_free_r+0x94>)
 80092e0:	9801      	ldr	r0, [sp, #4]
 80092e2:	6813      	ldr	r3, [r2, #0]
 80092e4:	b933      	cbnz	r3, 80092f4 <_free_r+0x30>
 80092e6:	6063      	str	r3, [r4, #4]
 80092e8:	6014      	str	r4, [r2, #0]
 80092ea:	b003      	add	sp, #12
 80092ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092f0:	f000 bab0 	b.w	8009854 <__malloc_unlock>
 80092f4:	42a3      	cmp	r3, r4
 80092f6:	d908      	bls.n	800930a <_free_r+0x46>
 80092f8:	6825      	ldr	r5, [r4, #0]
 80092fa:	1961      	adds	r1, r4, r5
 80092fc:	428b      	cmp	r3, r1
 80092fe:	bf01      	itttt	eq
 8009300:	6819      	ldreq	r1, [r3, #0]
 8009302:	685b      	ldreq	r3, [r3, #4]
 8009304:	1949      	addeq	r1, r1, r5
 8009306:	6021      	streq	r1, [r4, #0]
 8009308:	e7ed      	b.n	80092e6 <_free_r+0x22>
 800930a:	461a      	mov	r2, r3
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	b10b      	cbz	r3, 8009314 <_free_r+0x50>
 8009310:	42a3      	cmp	r3, r4
 8009312:	d9fa      	bls.n	800930a <_free_r+0x46>
 8009314:	6811      	ldr	r1, [r2, #0]
 8009316:	1855      	adds	r5, r2, r1
 8009318:	42a5      	cmp	r5, r4
 800931a:	d10b      	bne.n	8009334 <_free_r+0x70>
 800931c:	6824      	ldr	r4, [r4, #0]
 800931e:	4421      	add	r1, r4
 8009320:	1854      	adds	r4, r2, r1
 8009322:	42a3      	cmp	r3, r4
 8009324:	6011      	str	r1, [r2, #0]
 8009326:	d1e0      	bne.n	80092ea <_free_r+0x26>
 8009328:	681c      	ldr	r4, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	6053      	str	r3, [r2, #4]
 800932e:	4421      	add	r1, r4
 8009330:	6011      	str	r1, [r2, #0]
 8009332:	e7da      	b.n	80092ea <_free_r+0x26>
 8009334:	d902      	bls.n	800933c <_free_r+0x78>
 8009336:	230c      	movs	r3, #12
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	e7d6      	b.n	80092ea <_free_r+0x26>
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	1961      	adds	r1, r4, r5
 8009340:	428b      	cmp	r3, r1
 8009342:	bf04      	itt	eq
 8009344:	6819      	ldreq	r1, [r3, #0]
 8009346:	685b      	ldreq	r3, [r3, #4]
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	bf04      	itt	eq
 800934c:	1949      	addeq	r1, r1, r5
 800934e:	6021      	streq	r1, [r4, #0]
 8009350:	6054      	str	r4, [r2, #4]
 8009352:	e7ca      	b.n	80092ea <_free_r+0x26>
 8009354:	b003      	add	sp, #12
 8009356:	bd30      	pop	{r4, r5, pc}
 8009358:	2000037c 	.word	0x2000037c

0800935c <sbrk_aligned>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	4e0e      	ldr	r6, [pc, #56]	; (8009398 <sbrk_aligned+0x3c>)
 8009360:	460c      	mov	r4, r1
 8009362:	6831      	ldr	r1, [r6, #0]
 8009364:	4605      	mov	r5, r0
 8009366:	b911      	cbnz	r1, 800936e <sbrk_aligned+0x12>
 8009368:	f000 f9f2 	bl	8009750 <_sbrk_r>
 800936c:	6030      	str	r0, [r6, #0]
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	f000 f9ed 	bl	8009750 <_sbrk_r>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d00a      	beq.n	8009390 <sbrk_aligned+0x34>
 800937a:	1cc4      	adds	r4, r0, #3
 800937c:	f024 0403 	bic.w	r4, r4, #3
 8009380:	42a0      	cmp	r0, r4
 8009382:	d007      	beq.n	8009394 <sbrk_aligned+0x38>
 8009384:	1a21      	subs	r1, r4, r0
 8009386:	4628      	mov	r0, r5
 8009388:	f000 f9e2 	bl	8009750 <_sbrk_r>
 800938c:	3001      	adds	r0, #1
 800938e:	d101      	bne.n	8009394 <sbrk_aligned+0x38>
 8009390:	f04f 34ff 	mov.w	r4, #4294967295
 8009394:	4620      	mov	r0, r4
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	20000380 	.word	0x20000380

0800939c <_malloc_r>:
 800939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	1ccd      	adds	r5, r1, #3
 80093a2:	f025 0503 	bic.w	r5, r5, #3
 80093a6:	3508      	adds	r5, #8
 80093a8:	2d0c      	cmp	r5, #12
 80093aa:	bf38      	it	cc
 80093ac:	250c      	movcc	r5, #12
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	4607      	mov	r7, r0
 80093b2:	db01      	blt.n	80093b8 <_malloc_r+0x1c>
 80093b4:	42a9      	cmp	r1, r5
 80093b6:	d905      	bls.n	80093c4 <_malloc_r+0x28>
 80093b8:	230c      	movs	r3, #12
 80093ba:	603b      	str	r3, [r7, #0]
 80093bc:	2600      	movs	r6, #0
 80093be:	4630      	mov	r0, r6
 80093c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c4:	4e2e      	ldr	r6, [pc, #184]	; (8009480 <_malloc_r+0xe4>)
 80093c6:	f000 fa3f 	bl	8009848 <__malloc_lock>
 80093ca:	6833      	ldr	r3, [r6, #0]
 80093cc:	461c      	mov	r4, r3
 80093ce:	bb34      	cbnz	r4, 800941e <_malloc_r+0x82>
 80093d0:	4629      	mov	r1, r5
 80093d2:	4638      	mov	r0, r7
 80093d4:	f7ff ffc2 	bl	800935c <sbrk_aligned>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	4604      	mov	r4, r0
 80093dc:	d14d      	bne.n	800947a <_malloc_r+0xde>
 80093de:	6834      	ldr	r4, [r6, #0]
 80093e0:	4626      	mov	r6, r4
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d140      	bne.n	8009468 <_malloc_r+0xcc>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	4631      	mov	r1, r6
 80093ea:	4638      	mov	r0, r7
 80093ec:	eb04 0803 	add.w	r8, r4, r3
 80093f0:	f000 f9ae 	bl	8009750 <_sbrk_r>
 80093f4:	4580      	cmp	r8, r0
 80093f6:	d13a      	bne.n	800946e <_malloc_r+0xd2>
 80093f8:	6821      	ldr	r1, [r4, #0]
 80093fa:	3503      	adds	r5, #3
 80093fc:	1a6d      	subs	r5, r5, r1
 80093fe:	f025 0503 	bic.w	r5, r5, #3
 8009402:	3508      	adds	r5, #8
 8009404:	2d0c      	cmp	r5, #12
 8009406:	bf38      	it	cc
 8009408:	250c      	movcc	r5, #12
 800940a:	4629      	mov	r1, r5
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ffa5 	bl	800935c <sbrk_aligned>
 8009412:	3001      	adds	r0, #1
 8009414:	d02b      	beq.n	800946e <_malloc_r+0xd2>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	442b      	add	r3, r5
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	e00e      	b.n	800943c <_malloc_r+0xa0>
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	1b52      	subs	r2, r2, r5
 8009422:	d41e      	bmi.n	8009462 <_malloc_r+0xc6>
 8009424:	2a0b      	cmp	r2, #11
 8009426:	d916      	bls.n	8009456 <_malloc_r+0xba>
 8009428:	1961      	adds	r1, r4, r5
 800942a:	42a3      	cmp	r3, r4
 800942c:	6025      	str	r5, [r4, #0]
 800942e:	bf18      	it	ne
 8009430:	6059      	strne	r1, [r3, #4]
 8009432:	6863      	ldr	r3, [r4, #4]
 8009434:	bf08      	it	eq
 8009436:	6031      	streq	r1, [r6, #0]
 8009438:	5162      	str	r2, [r4, r5]
 800943a:	604b      	str	r3, [r1, #4]
 800943c:	4638      	mov	r0, r7
 800943e:	f104 060b 	add.w	r6, r4, #11
 8009442:	f000 fa07 	bl	8009854 <__malloc_unlock>
 8009446:	f026 0607 	bic.w	r6, r6, #7
 800944a:	1d23      	adds	r3, r4, #4
 800944c:	1af2      	subs	r2, r6, r3
 800944e:	d0b6      	beq.n	80093be <_malloc_r+0x22>
 8009450:	1b9b      	subs	r3, r3, r6
 8009452:	50a3      	str	r3, [r4, r2]
 8009454:	e7b3      	b.n	80093be <_malloc_r+0x22>
 8009456:	6862      	ldr	r2, [r4, #4]
 8009458:	42a3      	cmp	r3, r4
 800945a:	bf0c      	ite	eq
 800945c:	6032      	streq	r2, [r6, #0]
 800945e:	605a      	strne	r2, [r3, #4]
 8009460:	e7ec      	b.n	800943c <_malloc_r+0xa0>
 8009462:	4623      	mov	r3, r4
 8009464:	6864      	ldr	r4, [r4, #4]
 8009466:	e7b2      	b.n	80093ce <_malloc_r+0x32>
 8009468:	4634      	mov	r4, r6
 800946a:	6876      	ldr	r6, [r6, #4]
 800946c:	e7b9      	b.n	80093e2 <_malloc_r+0x46>
 800946e:	230c      	movs	r3, #12
 8009470:	603b      	str	r3, [r7, #0]
 8009472:	4638      	mov	r0, r7
 8009474:	f000 f9ee 	bl	8009854 <__malloc_unlock>
 8009478:	e7a1      	b.n	80093be <_malloc_r+0x22>
 800947a:	6025      	str	r5, [r4, #0]
 800947c:	e7de      	b.n	800943c <_malloc_r+0xa0>
 800947e:	bf00      	nop
 8009480:	2000037c 	.word	0x2000037c

08009484 <__ssputs_r>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	688e      	ldr	r6, [r1, #8]
 800948a:	429e      	cmp	r6, r3
 800948c:	4682      	mov	sl, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4690      	mov	r8, r2
 8009492:	461f      	mov	r7, r3
 8009494:	d838      	bhi.n	8009508 <__ssputs_r+0x84>
 8009496:	898a      	ldrh	r2, [r1, #12]
 8009498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800949c:	d032      	beq.n	8009504 <__ssputs_r+0x80>
 800949e:	6825      	ldr	r5, [r4, #0]
 80094a0:	6909      	ldr	r1, [r1, #16]
 80094a2:	eba5 0901 	sub.w	r9, r5, r1
 80094a6:	6965      	ldr	r5, [r4, #20]
 80094a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094b0:	3301      	adds	r3, #1
 80094b2:	444b      	add	r3, r9
 80094b4:	106d      	asrs	r5, r5, #1
 80094b6:	429d      	cmp	r5, r3
 80094b8:	bf38      	it	cc
 80094ba:	461d      	movcc	r5, r3
 80094bc:	0553      	lsls	r3, r2, #21
 80094be:	d531      	bpl.n	8009524 <__ssputs_r+0xa0>
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7ff ff6b 	bl	800939c <_malloc_r>
 80094c6:	4606      	mov	r6, r0
 80094c8:	b950      	cbnz	r0, 80094e0 <__ssputs_r+0x5c>
 80094ca:	230c      	movs	r3, #12
 80094cc:	f8ca 3000 	str.w	r3, [sl]
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e0:	6921      	ldr	r1, [r4, #16]
 80094e2:	464a      	mov	r2, r9
 80094e4:	f7ff fa08 	bl	80088f8 <memcpy>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	6126      	str	r6, [r4, #16]
 80094f6:	6165      	str	r5, [r4, #20]
 80094f8:	444e      	add	r6, r9
 80094fa:	eba5 0509 	sub.w	r5, r5, r9
 80094fe:	6026      	str	r6, [r4, #0]
 8009500:	60a5      	str	r5, [r4, #8]
 8009502:	463e      	mov	r6, r7
 8009504:	42be      	cmp	r6, r7
 8009506:	d900      	bls.n	800950a <__ssputs_r+0x86>
 8009508:	463e      	mov	r6, r7
 800950a:	6820      	ldr	r0, [r4, #0]
 800950c:	4632      	mov	r2, r6
 800950e:	4641      	mov	r1, r8
 8009510:	f000 f980 	bl	8009814 <memmove>
 8009514:	68a3      	ldr	r3, [r4, #8]
 8009516:	1b9b      	subs	r3, r3, r6
 8009518:	60a3      	str	r3, [r4, #8]
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	4433      	add	r3, r6
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	2000      	movs	r0, #0
 8009522:	e7db      	b.n	80094dc <__ssputs_r+0x58>
 8009524:	462a      	mov	r2, r5
 8009526:	f000 f99b 	bl	8009860 <_realloc_r>
 800952a:	4606      	mov	r6, r0
 800952c:	2800      	cmp	r0, #0
 800952e:	d1e1      	bne.n	80094f4 <__ssputs_r+0x70>
 8009530:	6921      	ldr	r1, [r4, #16]
 8009532:	4650      	mov	r0, sl
 8009534:	f7ff fec6 	bl	80092c4 <_free_r>
 8009538:	e7c7      	b.n	80094ca <__ssputs_r+0x46>
	...

0800953c <_svfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4698      	mov	r8, r3
 8009542:	898b      	ldrh	r3, [r1, #12]
 8009544:	061b      	lsls	r3, r3, #24
 8009546:	b09d      	sub	sp, #116	; 0x74
 8009548:	4607      	mov	r7, r0
 800954a:	460d      	mov	r5, r1
 800954c:	4614      	mov	r4, r2
 800954e:	d50e      	bpl.n	800956e <_svfiprintf_r+0x32>
 8009550:	690b      	ldr	r3, [r1, #16]
 8009552:	b963      	cbnz	r3, 800956e <_svfiprintf_r+0x32>
 8009554:	2140      	movs	r1, #64	; 0x40
 8009556:	f7ff ff21 	bl	800939c <_malloc_r>
 800955a:	6028      	str	r0, [r5, #0]
 800955c:	6128      	str	r0, [r5, #16]
 800955e:	b920      	cbnz	r0, 800956a <_svfiprintf_r+0x2e>
 8009560:	230c      	movs	r3, #12
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	e0d1      	b.n	800970e <_svfiprintf_r+0x1d2>
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	616b      	str	r3, [r5, #20]
 800956e:	2300      	movs	r3, #0
 8009570:	9309      	str	r3, [sp, #36]	; 0x24
 8009572:	2320      	movs	r3, #32
 8009574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009578:	f8cd 800c 	str.w	r8, [sp, #12]
 800957c:	2330      	movs	r3, #48	; 0x30
 800957e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009728 <_svfiprintf_r+0x1ec>
 8009582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009586:	f04f 0901 	mov.w	r9, #1
 800958a:	4623      	mov	r3, r4
 800958c:	469a      	mov	sl, r3
 800958e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009592:	b10a      	cbz	r2, 8009598 <_svfiprintf_r+0x5c>
 8009594:	2a25      	cmp	r2, #37	; 0x25
 8009596:	d1f9      	bne.n	800958c <_svfiprintf_r+0x50>
 8009598:	ebba 0b04 	subs.w	fp, sl, r4
 800959c:	d00b      	beq.n	80095b6 <_svfiprintf_r+0x7a>
 800959e:	465b      	mov	r3, fp
 80095a0:	4622      	mov	r2, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	4638      	mov	r0, r7
 80095a6:	f7ff ff6d 	bl	8009484 <__ssputs_r>
 80095aa:	3001      	adds	r0, #1
 80095ac:	f000 80aa 	beq.w	8009704 <_svfiprintf_r+0x1c8>
 80095b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b2:	445a      	add	r2, fp
 80095b4:	9209      	str	r2, [sp, #36]	; 0x24
 80095b6:	f89a 3000 	ldrb.w	r3, [sl]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80a2 	beq.w	8009704 <_svfiprintf_r+0x1c8>
 80095c0:	2300      	movs	r3, #0
 80095c2:	f04f 32ff 	mov.w	r2, #4294967295
 80095c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ca:	f10a 0a01 	add.w	sl, sl, #1
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	9307      	str	r3, [sp, #28]
 80095d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095d6:	931a      	str	r3, [sp, #104]	; 0x68
 80095d8:	4654      	mov	r4, sl
 80095da:	2205      	movs	r2, #5
 80095dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e0:	4851      	ldr	r0, [pc, #324]	; (8009728 <_svfiprintf_r+0x1ec>)
 80095e2:	f7f6 fe1d 	bl	8000220 <memchr>
 80095e6:	9a04      	ldr	r2, [sp, #16]
 80095e8:	b9d8      	cbnz	r0, 8009622 <_svfiprintf_r+0xe6>
 80095ea:	06d0      	lsls	r0, r2, #27
 80095ec:	bf44      	itt	mi
 80095ee:	2320      	movmi	r3, #32
 80095f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f4:	0711      	lsls	r1, r2, #28
 80095f6:	bf44      	itt	mi
 80095f8:	232b      	movmi	r3, #43	; 0x2b
 80095fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009602:	2b2a      	cmp	r3, #42	; 0x2a
 8009604:	d015      	beq.n	8009632 <_svfiprintf_r+0xf6>
 8009606:	9a07      	ldr	r2, [sp, #28]
 8009608:	4654      	mov	r4, sl
 800960a:	2000      	movs	r0, #0
 800960c:	f04f 0c0a 	mov.w	ip, #10
 8009610:	4621      	mov	r1, r4
 8009612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	2b09      	cmp	r3, #9
 800961a:	d94e      	bls.n	80096ba <_svfiprintf_r+0x17e>
 800961c:	b1b0      	cbz	r0, 800964c <_svfiprintf_r+0x110>
 800961e:	9207      	str	r2, [sp, #28]
 8009620:	e014      	b.n	800964c <_svfiprintf_r+0x110>
 8009622:	eba0 0308 	sub.w	r3, r0, r8
 8009626:	fa09 f303 	lsl.w	r3, r9, r3
 800962a:	4313      	orrs	r3, r2
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	46a2      	mov	sl, r4
 8009630:	e7d2      	b.n	80095d8 <_svfiprintf_r+0x9c>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	1d19      	adds	r1, r3, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	9103      	str	r1, [sp, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	bfbb      	ittet	lt
 800963e:	425b      	neglt	r3, r3
 8009640:	f042 0202 	orrlt.w	r2, r2, #2
 8009644:	9307      	strge	r3, [sp, #28]
 8009646:	9307      	strlt	r3, [sp, #28]
 8009648:	bfb8      	it	lt
 800964a:	9204      	strlt	r2, [sp, #16]
 800964c:	7823      	ldrb	r3, [r4, #0]
 800964e:	2b2e      	cmp	r3, #46	; 0x2e
 8009650:	d10c      	bne.n	800966c <_svfiprintf_r+0x130>
 8009652:	7863      	ldrb	r3, [r4, #1]
 8009654:	2b2a      	cmp	r3, #42	; 0x2a
 8009656:	d135      	bne.n	80096c4 <_svfiprintf_r+0x188>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	9203      	str	r2, [sp, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfb8      	it	lt
 8009664:	f04f 33ff 	movlt.w	r3, #4294967295
 8009668:	3402      	adds	r4, #2
 800966a:	9305      	str	r3, [sp, #20]
 800966c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009738 <_svfiprintf_r+0x1fc>
 8009670:	7821      	ldrb	r1, [r4, #0]
 8009672:	2203      	movs	r2, #3
 8009674:	4650      	mov	r0, sl
 8009676:	f7f6 fdd3 	bl	8000220 <memchr>
 800967a:	b140      	cbz	r0, 800968e <_svfiprintf_r+0x152>
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	eba0 000a 	sub.w	r0, r0, sl
 8009682:	fa03 f000 	lsl.w	r0, r3, r0
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	4303      	orrs	r3, r0
 800968a:	3401      	adds	r4, #1
 800968c:	9304      	str	r3, [sp, #16]
 800968e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009692:	4826      	ldr	r0, [pc, #152]	; (800972c <_svfiprintf_r+0x1f0>)
 8009694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009698:	2206      	movs	r2, #6
 800969a:	f7f6 fdc1 	bl	8000220 <memchr>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d038      	beq.n	8009714 <_svfiprintf_r+0x1d8>
 80096a2:	4b23      	ldr	r3, [pc, #140]	; (8009730 <_svfiprintf_r+0x1f4>)
 80096a4:	bb1b      	cbnz	r3, 80096ee <_svfiprintf_r+0x1b2>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	3307      	adds	r3, #7
 80096aa:	f023 0307 	bic.w	r3, r3, #7
 80096ae:	3308      	adds	r3, #8
 80096b0:	9303      	str	r3, [sp, #12]
 80096b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b4:	4433      	add	r3, r6
 80096b6:	9309      	str	r3, [sp, #36]	; 0x24
 80096b8:	e767      	b.n	800958a <_svfiprintf_r+0x4e>
 80096ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80096be:	460c      	mov	r4, r1
 80096c0:	2001      	movs	r0, #1
 80096c2:	e7a5      	b.n	8009610 <_svfiprintf_r+0xd4>
 80096c4:	2300      	movs	r3, #0
 80096c6:	3401      	adds	r4, #1
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	4619      	mov	r1, r3
 80096cc:	f04f 0c0a 	mov.w	ip, #10
 80096d0:	4620      	mov	r0, r4
 80096d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d6:	3a30      	subs	r2, #48	; 0x30
 80096d8:	2a09      	cmp	r2, #9
 80096da:	d903      	bls.n	80096e4 <_svfiprintf_r+0x1a8>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0c5      	beq.n	800966c <_svfiprintf_r+0x130>
 80096e0:	9105      	str	r1, [sp, #20]
 80096e2:	e7c3      	b.n	800966c <_svfiprintf_r+0x130>
 80096e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e8:	4604      	mov	r4, r0
 80096ea:	2301      	movs	r3, #1
 80096ec:	e7f0      	b.n	80096d0 <_svfiprintf_r+0x194>
 80096ee:	ab03      	add	r3, sp, #12
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	462a      	mov	r2, r5
 80096f4:	4b0f      	ldr	r3, [pc, #60]	; (8009734 <_svfiprintf_r+0x1f8>)
 80096f6:	a904      	add	r1, sp, #16
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7fc fa33 	bl	8005b64 <_printf_float>
 80096fe:	1c42      	adds	r2, r0, #1
 8009700:	4606      	mov	r6, r0
 8009702:	d1d6      	bne.n	80096b2 <_svfiprintf_r+0x176>
 8009704:	89ab      	ldrh	r3, [r5, #12]
 8009706:	065b      	lsls	r3, r3, #25
 8009708:	f53f af2c 	bmi.w	8009564 <_svfiprintf_r+0x28>
 800970c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800970e:	b01d      	add	sp, #116	; 0x74
 8009710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009714:	ab03      	add	r3, sp, #12
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	462a      	mov	r2, r5
 800971a:	4b06      	ldr	r3, [pc, #24]	; (8009734 <_svfiprintf_r+0x1f8>)
 800971c:	a904      	add	r1, sp, #16
 800971e:	4638      	mov	r0, r7
 8009720:	f7fc fcc4 	bl	80060ac <_printf_i>
 8009724:	e7eb      	b.n	80096fe <_svfiprintf_r+0x1c2>
 8009726:	bf00      	nop
 8009728:	0800a78c 	.word	0x0800a78c
 800972c:	0800a796 	.word	0x0800a796
 8009730:	08005b65 	.word	0x08005b65
 8009734:	08009485 	.word	0x08009485
 8009738:	0800a792 	.word	0x0800a792
 800973c:	00000000 	.word	0x00000000

08009740 <nan>:
 8009740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009748 <nan+0x8>
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	00000000 	.word	0x00000000
 800974c:	7ff80000 	.word	0x7ff80000

08009750 <_sbrk_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d06      	ldr	r5, [pc, #24]	; (800976c <_sbrk_r+0x1c>)
 8009754:	2300      	movs	r3, #0
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	f7f8 fb98 	bl	8001e90 <_sbrk>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_sbrk_r+0x1a>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_sbrk_r+0x1a>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20000384 	.word	0x20000384

08009770 <strncmp>:
 8009770:	b510      	push	{r4, lr}
 8009772:	b17a      	cbz	r2, 8009794 <strncmp+0x24>
 8009774:	4603      	mov	r3, r0
 8009776:	3901      	subs	r1, #1
 8009778:	1884      	adds	r4, r0, r2
 800977a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800977e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009782:	4290      	cmp	r0, r2
 8009784:	d101      	bne.n	800978a <strncmp+0x1a>
 8009786:	42a3      	cmp	r3, r4
 8009788:	d101      	bne.n	800978e <strncmp+0x1e>
 800978a:	1a80      	subs	r0, r0, r2
 800978c:	bd10      	pop	{r4, pc}
 800978e:	2800      	cmp	r0, #0
 8009790:	d1f3      	bne.n	800977a <strncmp+0xa>
 8009792:	e7fa      	b.n	800978a <strncmp+0x1a>
 8009794:	4610      	mov	r0, r2
 8009796:	e7f9      	b.n	800978c <strncmp+0x1c>

08009798 <__ascii_wctomb>:
 8009798:	b149      	cbz	r1, 80097ae <__ascii_wctomb+0x16>
 800979a:	2aff      	cmp	r2, #255	; 0xff
 800979c:	bf85      	ittet	hi
 800979e:	238a      	movhi	r3, #138	; 0x8a
 80097a0:	6003      	strhi	r3, [r0, #0]
 80097a2:	700a      	strbls	r2, [r1, #0]
 80097a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80097a8:	bf98      	it	ls
 80097aa:	2001      	movls	r0, #1
 80097ac:	4770      	bx	lr
 80097ae:	4608      	mov	r0, r1
 80097b0:	4770      	bx	lr
	...

080097b4 <__assert_func>:
 80097b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097b6:	4614      	mov	r4, r2
 80097b8:	461a      	mov	r2, r3
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <__assert_func+0x2c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4605      	mov	r5, r0
 80097c0:	68d8      	ldr	r0, [r3, #12]
 80097c2:	b14c      	cbz	r4, 80097d8 <__assert_func+0x24>
 80097c4:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <__assert_func+0x30>)
 80097c6:	9100      	str	r1, [sp, #0]
 80097c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097cc:	4906      	ldr	r1, [pc, #24]	; (80097e8 <__assert_func+0x34>)
 80097ce:	462b      	mov	r3, r5
 80097d0:	f000 f80e 	bl	80097f0 <fiprintf>
 80097d4:	f000 fa8c 	bl	8009cf0 <abort>
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <__assert_func+0x38>)
 80097da:	461c      	mov	r4, r3
 80097dc:	e7f3      	b.n	80097c6 <__assert_func+0x12>
 80097de:	bf00      	nop
 80097e0:	2000000c 	.word	0x2000000c
 80097e4:	0800a79d 	.word	0x0800a79d
 80097e8:	0800a7aa 	.word	0x0800a7aa
 80097ec:	0800a7d8 	.word	0x0800a7d8

080097f0 <fiprintf>:
 80097f0:	b40e      	push	{r1, r2, r3}
 80097f2:	b503      	push	{r0, r1, lr}
 80097f4:	4601      	mov	r1, r0
 80097f6:	ab03      	add	r3, sp, #12
 80097f8:	4805      	ldr	r0, [pc, #20]	; (8009810 <fiprintf+0x20>)
 80097fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fe:	6800      	ldr	r0, [r0, #0]
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	f000 f885 	bl	8009910 <_vfiprintf_r>
 8009806:	b002      	add	sp, #8
 8009808:	f85d eb04 	ldr.w	lr, [sp], #4
 800980c:	b003      	add	sp, #12
 800980e:	4770      	bx	lr
 8009810:	2000000c 	.word	0x2000000c

08009814 <memmove>:
 8009814:	4288      	cmp	r0, r1
 8009816:	b510      	push	{r4, lr}
 8009818:	eb01 0402 	add.w	r4, r1, r2
 800981c:	d902      	bls.n	8009824 <memmove+0x10>
 800981e:	4284      	cmp	r4, r0
 8009820:	4623      	mov	r3, r4
 8009822:	d807      	bhi.n	8009834 <memmove+0x20>
 8009824:	1e43      	subs	r3, r0, #1
 8009826:	42a1      	cmp	r1, r4
 8009828:	d008      	beq.n	800983c <memmove+0x28>
 800982a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800982e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009832:	e7f8      	b.n	8009826 <memmove+0x12>
 8009834:	4402      	add	r2, r0
 8009836:	4601      	mov	r1, r0
 8009838:	428a      	cmp	r2, r1
 800983a:	d100      	bne.n	800983e <memmove+0x2a>
 800983c:	bd10      	pop	{r4, pc}
 800983e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009846:	e7f7      	b.n	8009838 <memmove+0x24>

08009848 <__malloc_lock>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__malloc_lock+0x8>)
 800984a:	f000 bc11 	b.w	800a070 <__retarget_lock_acquire_recursive>
 800984e:	bf00      	nop
 8009850:	20000388 	.word	0x20000388

08009854 <__malloc_unlock>:
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <__malloc_unlock+0x8>)
 8009856:	f000 bc0c 	b.w	800a072 <__retarget_lock_release_recursive>
 800985a:	bf00      	nop
 800985c:	20000388 	.word	0x20000388

08009860 <_realloc_r>:
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	4680      	mov	r8, r0
 8009866:	4614      	mov	r4, r2
 8009868:	460e      	mov	r6, r1
 800986a:	b921      	cbnz	r1, 8009876 <_realloc_r+0x16>
 800986c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009870:	4611      	mov	r1, r2
 8009872:	f7ff bd93 	b.w	800939c <_malloc_r>
 8009876:	b92a      	cbnz	r2, 8009884 <_realloc_r+0x24>
 8009878:	f7ff fd24 	bl	80092c4 <_free_r>
 800987c:	4625      	mov	r5, r4
 800987e:	4628      	mov	r0, r5
 8009880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009884:	f000 fc5c 	bl	800a140 <_malloc_usable_size_r>
 8009888:	4284      	cmp	r4, r0
 800988a:	4607      	mov	r7, r0
 800988c:	d802      	bhi.n	8009894 <_realloc_r+0x34>
 800988e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009892:	d812      	bhi.n	80098ba <_realloc_r+0x5a>
 8009894:	4621      	mov	r1, r4
 8009896:	4640      	mov	r0, r8
 8009898:	f7ff fd80 	bl	800939c <_malloc_r>
 800989c:	4605      	mov	r5, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	d0ed      	beq.n	800987e <_realloc_r+0x1e>
 80098a2:	42bc      	cmp	r4, r7
 80098a4:	4622      	mov	r2, r4
 80098a6:	4631      	mov	r1, r6
 80098a8:	bf28      	it	cs
 80098aa:	463a      	movcs	r2, r7
 80098ac:	f7ff f824 	bl	80088f8 <memcpy>
 80098b0:	4631      	mov	r1, r6
 80098b2:	4640      	mov	r0, r8
 80098b4:	f7ff fd06 	bl	80092c4 <_free_r>
 80098b8:	e7e1      	b.n	800987e <_realloc_r+0x1e>
 80098ba:	4635      	mov	r5, r6
 80098bc:	e7df      	b.n	800987e <_realloc_r+0x1e>

080098be <__sfputc_r>:
 80098be:	6893      	ldr	r3, [r2, #8]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	b410      	push	{r4}
 80098c6:	6093      	str	r3, [r2, #8]
 80098c8:	da08      	bge.n	80098dc <__sfputc_r+0x1e>
 80098ca:	6994      	ldr	r4, [r2, #24]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	db01      	blt.n	80098d4 <__sfputc_r+0x16>
 80098d0:	290a      	cmp	r1, #10
 80098d2:	d103      	bne.n	80098dc <__sfputc_r+0x1e>
 80098d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d8:	f000 b94a 	b.w	8009b70 <__swbuf_r>
 80098dc:	6813      	ldr	r3, [r2, #0]
 80098de:	1c58      	adds	r0, r3, #1
 80098e0:	6010      	str	r0, [r2, #0]
 80098e2:	7019      	strb	r1, [r3, #0]
 80098e4:	4608      	mov	r0, r1
 80098e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <__sfputs_r>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	4614      	mov	r4, r2
 80098f4:	18d5      	adds	r5, r2, r3
 80098f6:	42ac      	cmp	r4, r5
 80098f8:	d101      	bne.n	80098fe <__sfputs_r+0x12>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e007      	b.n	800990e <__sfputs_r+0x22>
 80098fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009902:	463a      	mov	r2, r7
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff ffda 	bl	80098be <__sfputc_r>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d1f3      	bne.n	80098f6 <__sfputs_r+0xa>
 800990e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009910 <_vfiprintf_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	460d      	mov	r5, r1
 8009916:	b09d      	sub	sp, #116	; 0x74
 8009918:	4614      	mov	r4, r2
 800991a:	4698      	mov	r8, r3
 800991c:	4606      	mov	r6, r0
 800991e:	b118      	cbz	r0, 8009928 <_vfiprintf_r+0x18>
 8009920:	6983      	ldr	r3, [r0, #24]
 8009922:	b90b      	cbnz	r3, 8009928 <_vfiprintf_r+0x18>
 8009924:	f000 fb06 	bl	8009f34 <__sinit>
 8009928:	4b89      	ldr	r3, [pc, #548]	; (8009b50 <_vfiprintf_r+0x240>)
 800992a:	429d      	cmp	r5, r3
 800992c:	d11b      	bne.n	8009966 <_vfiprintf_r+0x56>
 800992e:	6875      	ldr	r5, [r6, #4]
 8009930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009932:	07d9      	lsls	r1, r3, #31
 8009934:	d405      	bmi.n	8009942 <_vfiprintf_r+0x32>
 8009936:	89ab      	ldrh	r3, [r5, #12]
 8009938:	059a      	lsls	r2, r3, #22
 800993a:	d402      	bmi.n	8009942 <_vfiprintf_r+0x32>
 800993c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800993e:	f000 fb97 	bl	800a070 <__retarget_lock_acquire_recursive>
 8009942:	89ab      	ldrh	r3, [r5, #12]
 8009944:	071b      	lsls	r3, r3, #28
 8009946:	d501      	bpl.n	800994c <_vfiprintf_r+0x3c>
 8009948:	692b      	ldr	r3, [r5, #16]
 800994a:	b9eb      	cbnz	r3, 8009988 <_vfiprintf_r+0x78>
 800994c:	4629      	mov	r1, r5
 800994e:	4630      	mov	r0, r6
 8009950:	f000 f960 	bl	8009c14 <__swsetup_r>
 8009954:	b1c0      	cbz	r0, 8009988 <_vfiprintf_r+0x78>
 8009956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009958:	07dc      	lsls	r4, r3, #31
 800995a:	d50e      	bpl.n	800997a <_vfiprintf_r+0x6a>
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	b01d      	add	sp, #116	; 0x74
 8009962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009966:	4b7b      	ldr	r3, [pc, #492]	; (8009b54 <_vfiprintf_r+0x244>)
 8009968:	429d      	cmp	r5, r3
 800996a:	d101      	bne.n	8009970 <_vfiprintf_r+0x60>
 800996c:	68b5      	ldr	r5, [r6, #8]
 800996e:	e7df      	b.n	8009930 <_vfiprintf_r+0x20>
 8009970:	4b79      	ldr	r3, [pc, #484]	; (8009b58 <_vfiprintf_r+0x248>)
 8009972:	429d      	cmp	r5, r3
 8009974:	bf08      	it	eq
 8009976:	68f5      	ldreq	r5, [r6, #12]
 8009978:	e7da      	b.n	8009930 <_vfiprintf_r+0x20>
 800997a:	89ab      	ldrh	r3, [r5, #12]
 800997c:	0598      	lsls	r0, r3, #22
 800997e:	d4ed      	bmi.n	800995c <_vfiprintf_r+0x4c>
 8009980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009982:	f000 fb76 	bl	800a072 <__retarget_lock_release_recursive>
 8009986:	e7e9      	b.n	800995c <_vfiprintf_r+0x4c>
 8009988:	2300      	movs	r3, #0
 800998a:	9309      	str	r3, [sp, #36]	; 0x24
 800998c:	2320      	movs	r3, #32
 800998e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009992:	f8cd 800c 	str.w	r8, [sp, #12]
 8009996:	2330      	movs	r3, #48	; 0x30
 8009998:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b5c <_vfiprintf_r+0x24c>
 800999c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099a0:	f04f 0901 	mov.w	r9, #1
 80099a4:	4623      	mov	r3, r4
 80099a6:	469a      	mov	sl, r3
 80099a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ac:	b10a      	cbz	r2, 80099b2 <_vfiprintf_r+0xa2>
 80099ae:	2a25      	cmp	r2, #37	; 0x25
 80099b0:	d1f9      	bne.n	80099a6 <_vfiprintf_r+0x96>
 80099b2:	ebba 0b04 	subs.w	fp, sl, r4
 80099b6:	d00b      	beq.n	80099d0 <_vfiprintf_r+0xc0>
 80099b8:	465b      	mov	r3, fp
 80099ba:	4622      	mov	r2, r4
 80099bc:	4629      	mov	r1, r5
 80099be:	4630      	mov	r0, r6
 80099c0:	f7ff ff94 	bl	80098ec <__sfputs_r>
 80099c4:	3001      	adds	r0, #1
 80099c6:	f000 80aa 	beq.w	8009b1e <_vfiprintf_r+0x20e>
 80099ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099cc:	445a      	add	r2, fp
 80099ce:	9209      	str	r2, [sp, #36]	; 0x24
 80099d0:	f89a 3000 	ldrb.w	r3, [sl]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 80a2 	beq.w	8009b1e <_vfiprintf_r+0x20e>
 80099da:	2300      	movs	r3, #0
 80099dc:	f04f 32ff 	mov.w	r2, #4294967295
 80099e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e4:	f10a 0a01 	add.w	sl, sl, #1
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	9307      	str	r3, [sp, #28]
 80099ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099f0:	931a      	str	r3, [sp, #104]	; 0x68
 80099f2:	4654      	mov	r4, sl
 80099f4:	2205      	movs	r2, #5
 80099f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fa:	4858      	ldr	r0, [pc, #352]	; (8009b5c <_vfiprintf_r+0x24c>)
 80099fc:	f7f6 fc10 	bl	8000220 <memchr>
 8009a00:	9a04      	ldr	r2, [sp, #16]
 8009a02:	b9d8      	cbnz	r0, 8009a3c <_vfiprintf_r+0x12c>
 8009a04:	06d1      	lsls	r1, r2, #27
 8009a06:	bf44      	itt	mi
 8009a08:	2320      	movmi	r3, #32
 8009a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0e:	0713      	lsls	r3, r2, #28
 8009a10:	bf44      	itt	mi
 8009a12:	232b      	movmi	r3, #43	; 0x2b
 8009a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a18:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a1e:	d015      	beq.n	8009a4c <_vfiprintf_r+0x13c>
 8009a20:	9a07      	ldr	r2, [sp, #28]
 8009a22:	4654      	mov	r4, sl
 8009a24:	2000      	movs	r0, #0
 8009a26:	f04f 0c0a 	mov.w	ip, #10
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a30:	3b30      	subs	r3, #48	; 0x30
 8009a32:	2b09      	cmp	r3, #9
 8009a34:	d94e      	bls.n	8009ad4 <_vfiprintf_r+0x1c4>
 8009a36:	b1b0      	cbz	r0, 8009a66 <_vfiprintf_r+0x156>
 8009a38:	9207      	str	r2, [sp, #28]
 8009a3a:	e014      	b.n	8009a66 <_vfiprintf_r+0x156>
 8009a3c:	eba0 0308 	sub.w	r3, r0, r8
 8009a40:	fa09 f303 	lsl.w	r3, r9, r3
 8009a44:	4313      	orrs	r3, r2
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	46a2      	mov	sl, r4
 8009a4a:	e7d2      	b.n	80099f2 <_vfiprintf_r+0xe2>
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	1d19      	adds	r1, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	9103      	str	r1, [sp, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bfbb      	ittet	lt
 8009a58:	425b      	neglt	r3, r3
 8009a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5e:	9307      	strge	r3, [sp, #28]
 8009a60:	9307      	strlt	r3, [sp, #28]
 8009a62:	bfb8      	it	lt
 8009a64:	9204      	strlt	r2, [sp, #16]
 8009a66:	7823      	ldrb	r3, [r4, #0]
 8009a68:	2b2e      	cmp	r3, #46	; 0x2e
 8009a6a:	d10c      	bne.n	8009a86 <_vfiprintf_r+0x176>
 8009a6c:	7863      	ldrb	r3, [r4, #1]
 8009a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a70:	d135      	bne.n	8009ade <_vfiprintf_r+0x1ce>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	9203      	str	r2, [sp, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfb8      	it	lt
 8009a7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a82:	3402      	adds	r4, #2
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b6c <_vfiprintf_r+0x25c>
 8009a8a:	7821      	ldrb	r1, [r4, #0]
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	4650      	mov	r0, sl
 8009a90:	f7f6 fbc6 	bl	8000220 <memchr>
 8009a94:	b140      	cbz	r0, 8009aa8 <_vfiprintf_r+0x198>
 8009a96:	2340      	movs	r3, #64	; 0x40
 8009a98:	eba0 000a 	sub.w	r0, r0, sl
 8009a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8009aa0:	9b04      	ldr	r3, [sp, #16]
 8009aa2:	4303      	orrs	r3, r0
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	9304      	str	r3, [sp, #16]
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	482c      	ldr	r0, [pc, #176]	; (8009b60 <_vfiprintf_r+0x250>)
 8009aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ab2:	2206      	movs	r2, #6
 8009ab4:	f7f6 fbb4 	bl	8000220 <memchr>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d03f      	beq.n	8009b3c <_vfiprintf_r+0x22c>
 8009abc:	4b29      	ldr	r3, [pc, #164]	; (8009b64 <_vfiprintf_r+0x254>)
 8009abe:	bb1b      	cbnz	r3, 8009b08 <_vfiprintf_r+0x1f8>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	3307      	adds	r3, #7
 8009ac4:	f023 0307 	bic.w	r3, r3, #7
 8009ac8:	3308      	adds	r3, #8
 8009aca:	9303      	str	r3, [sp, #12]
 8009acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ace:	443b      	add	r3, r7
 8009ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad2:	e767      	b.n	80099a4 <_vfiprintf_r+0x94>
 8009ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad8:	460c      	mov	r4, r1
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7a5      	b.n	8009a2a <_vfiprintf_r+0x11a>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	3401      	adds	r4, #1
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f04f 0c0a 	mov.w	ip, #10
 8009aea:	4620      	mov	r0, r4
 8009aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af0:	3a30      	subs	r2, #48	; 0x30
 8009af2:	2a09      	cmp	r2, #9
 8009af4:	d903      	bls.n	8009afe <_vfiprintf_r+0x1ee>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0c5      	beq.n	8009a86 <_vfiprintf_r+0x176>
 8009afa:	9105      	str	r1, [sp, #20]
 8009afc:	e7c3      	b.n	8009a86 <_vfiprintf_r+0x176>
 8009afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b02:	4604      	mov	r4, r0
 8009b04:	2301      	movs	r3, #1
 8009b06:	e7f0      	b.n	8009aea <_vfiprintf_r+0x1da>
 8009b08:	ab03      	add	r3, sp, #12
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4b16      	ldr	r3, [pc, #88]	; (8009b68 <_vfiprintf_r+0x258>)
 8009b10:	a904      	add	r1, sp, #16
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7fc f826 	bl	8005b64 <_printf_float>
 8009b18:	4607      	mov	r7, r0
 8009b1a:	1c78      	adds	r0, r7, #1
 8009b1c:	d1d6      	bne.n	8009acc <_vfiprintf_r+0x1bc>
 8009b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b20:	07d9      	lsls	r1, r3, #31
 8009b22:	d405      	bmi.n	8009b30 <_vfiprintf_r+0x220>
 8009b24:	89ab      	ldrh	r3, [r5, #12]
 8009b26:	059a      	lsls	r2, r3, #22
 8009b28:	d402      	bmi.n	8009b30 <_vfiprintf_r+0x220>
 8009b2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b2c:	f000 faa1 	bl	800a072 <__retarget_lock_release_recursive>
 8009b30:	89ab      	ldrh	r3, [r5, #12]
 8009b32:	065b      	lsls	r3, r3, #25
 8009b34:	f53f af12 	bmi.w	800995c <_vfiprintf_r+0x4c>
 8009b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b3a:	e711      	b.n	8009960 <_vfiprintf_r+0x50>
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	462a      	mov	r2, r5
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <_vfiprintf_r+0x258>)
 8009b44:	a904      	add	r1, sp, #16
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7fc fab0 	bl	80060ac <_printf_i>
 8009b4c:	e7e4      	b.n	8009b18 <_vfiprintf_r+0x208>
 8009b4e:	bf00      	nop
 8009b50:	0800a7fc 	.word	0x0800a7fc
 8009b54:	0800a81c 	.word	0x0800a81c
 8009b58:	0800a7dc 	.word	0x0800a7dc
 8009b5c:	0800a78c 	.word	0x0800a78c
 8009b60:	0800a796 	.word	0x0800a796
 8009b64:	08005b65 	.word	0x08005b65
 8009b68:	080098ed 	.word	0x080098ed
 8009b6c:	0800a792 	.word	0x0800a792

08009b70 <__swbuf_r>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	460e      	mov	r6, r1
 8009b74:	4614      	mov	r4, r2
 8009b76:	4605      	mov	r5, r0
 8009b78:	b118      	cbz	r0, 8009b82 <__swbuf_r+0x12>
 8009b7a:	6983      	ldr	r3, [r0, #24]
 8009b7c:	b90b      	cbnz	r3, 8009b82 <__swbuf_r+0x12>
 8009b7e:	f000 f9d9 	bl	8009f34 <__sinit>
 8009b82:	4b21      	ldr	r3, [pc, #132]	; (8009c08 <__swbuf_r+0x98>)
 8009b84:	429c      	cmp	r4, r3
 8009b86:	d12b      	bne.n	8009be0 <__swbuf_r+0x70>
 8009b88:	686c      	ldr	r4, [r5, #4]
 8009b8a:	69a3      	ldr	r3, [r4, #24]
 8009b8c:	60a3      	str	r3, [r4, #8]
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	071a      	lsls	r2, r3, #28
 8009b92:	d52f      	bpl.n	8009bf4 <__swbuf_r+0x84>
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	b36b      	cbz	r3, 8009bf4 <__swbuf_r+0x84>
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	1ac0      	subs	r0, r0, r3
 8009b9e:	6963      	ldr	r3, [r4, #20]
 8009ba0:	b2f6      	uxtb	r6, r6
 8009ba2:	4283      	cmp	r3, r0
 8009ba4:	4637      	mov	r7, r6
 8009ba6:	dc04      	bgt.n	8009bb2 <__swbuf_r+0x42>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 f92e 	bl	8009e0c <_fflush_r>
 8009bb0:	bb30      	cbnz	r0, 8009c00 <__swbuf_r+0x90>
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	6022      	str	r2, [r4, #0]
 8009bbe:	701e      	strb	r6, [r3, #0]
 8009bc0:	6963      	ldr	r3, [r4, #20]
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	4283      	cmp	r3, r0
 8009bc6:	d004      	beq.n	8009bd2 <__swbuf_r+0x62>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	07db      	lsls	r3, r3, #31
 8009bcc:	d506      	bpl.n	8009bdc <__swbuf_r+0x6c>
 8009bce:	2e0a      	cmp	r6, #10
 8009bd0:	d104      	bne.n	8009bdc <__swbuf_r+0x6c>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f919 	bl	8009e0c <_fflush_r>
 8009bda:	b988      	cbnz	r0, 8009c00 <__swbuf_r+0x90>
 8009bdc:	4638      	mov	r0, r7
 8009bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <__swbuf_r+0x9c>)
 8009be2:	429c      	cmp	r4, r3
 8009be4:	d101      	bne.n	8009bea <__swbuf_r+0x7a>
 8009be6:	68ac      	ldr	r4, [r5, #8]
 8009be8:	e7cf      	b.n	8009b8a <__swbuf_r+0x1a>
 8009bea:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <__swbuf_r+0xa0>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	bf08      	it	eq
 8009bf0:	68ec      	ldreq	r4, [r5, #12]
 8009bf2:	e7ca      	b.n	8009b8a <__swbuf_r+0x1a>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f000 f80c 	bl	8009c14 <__swsetup_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d0cb      	beq.n	8009b98 <__swbuf_r+0x28>
 8009c00:	f04f 37ff 	mov.w	r7, #4294967295
 8009c04:	e7ea      	b.n	8009bdc <__swbuf_r+0x6c>
 8009c06:	bf00      	nop
 8009c08:	0800a7fc 	.word	0x0800a7fc
 8009c0c:	0800a81c 	.word	0x0800a81c
 8009c10:	0800a7dc 	.word	0x0800a7dc

08009c14 <__swsetup_r>:
 8009c14:	4b32      	ldr	r3, [pc, #200]	; (8009ce0 <__swsetup_r+0xcc>)
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	681d      	ldr	r5, [r3, #0]
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b125      	cbz	r5, 8009c2a <__swsetup_r+0x16>
 8009c20:	69ab      	ldr	r3, [r5, #24]
 8009c22:	b913      	cbnz	r3, 8009c2a <__swsetup_r+0x16>
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 f985 	bl	8009f34 <__sinit>
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <__swsetup_r+0xd0>)
 8009c2c:	429c      	cmp	r4, r3
 8009c2e:	d10f      	bne.n	8009c50 <__swsetup_r+0x3c>
 8009c30:	686c      	ldr	r4, [r5, #4]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c38:	0719      	lsls	r1, r3, #28
 8009c3a:	d42c      	bmi.n	8009c96 <__swsetup_r+0x82>
 8009c3c:	06dd      	lsls	r5, r3, #27
 8009c3e:	d411      	bmi.n	8009c64 <__swsetup_r+0x50>
 8009c40:	2309      	movs	r3, #9
 8009c42:	6033      	str	r3, [r6, #0]
 8009c44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	e03e      	b.n	8009cce <__swsetup_r+0xba>
 8009c50:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <__swsetup_r+0xd4>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d101      	bne.n	8009c5a <__swsetup_r+0x46>
 8009c56:	68ac      	ldr	r4, [r5, #8]
 8009c58:	e7eb      	b.n	8009c32 <__swsetup_r+0x1e>
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <__swsetup_r+0xd8>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	bf08      	it	eq
 8009c60:	68ec      	ldreq	r4, [r5, #12]
 8009c62:	e7e6      	b.n	8009c32 <__swsetup_r+0x1e>
 8009c64:	0758      	lsls	r0, r3, #29
 8009c66:	d512      	bpl.n	8009c8e <__swsetup_r+0x7a>
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	b141      	cbz	r1, 8009c7e <__swsetup_r+0x6a>
 8009c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <__swsetup_r+0x66>
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7ff fb25 	bl	80092c4 <_free_r>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	2300      	movs	r3, #0
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0308 	orr.w	r3, r3, #8
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	b94b      	cbnz	r3, 8009cae <__swsetup_r+0x9a>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca4:	d003      	beq.n	8009cae <__swsetup_r+0x9a>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f000 fa09 	bl	800a0c0 <__smakebuf_r>
 8009cae:	89a0      	ldrh	r0, [r4, #12]
 8009cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cb4:	f010 0301 	ands.w	r3, r0, #1
 8009cb8:	d00a      	beq.n	8009cd0 <__swsetup_r+0xbc>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	61a3      	str	r3, [r4, #24]
 8009cc4:	6923      	ldr	r3, [r4, #16]
 8009cc6:	b943      	cbnz	r3, 8009cda <__swsetup_r+0xc6>
 8009cc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ccc:	d1ba      	bne.n	8009c44 <__swsetup_r+0x30>
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	0781      	lsls	r1, r0, #30
 8009cd2:	bf58      	it	pl
 8009cd4:	6963      	ldrpl	r3, [r4, #20]
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	e7f4      	b.n	8009cc4 <__swsetup_r+0xb0>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e7f7      	b.n	8009cce <__swsetup_r+0xba>
 8009cde:	bf00      	nop
 8009ce0:	2000000c 	.word	0x2000000c
 8009ce4:	0800a7fc 	.word	0x0800a7fc
 8009ce8:	0800a81c 	.word	0x0800a81c
 8009cec:	0800a7dc 	.word	0x0800a7dc

08009cf0 <abort>:
 8009cf0:	b508      	push	{r3, lr}
 8009cf2:	2006      	movs	r0, #6
 8009cf4:	f000 fa54 	bl	800a1a0 <raise>
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	f7f8 f851 	bl	8001da0 <_exit>
	...

08009d00 <__sflush_r>:
 8009d00:	898a      	ldrh	r2, [r1, #12]
 8009d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	4605      	mov	r5, r0
 8009d08:	0710      	lsls	r0, r2, #28
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	d458      	bmi.n	8009dc0 <__sflush_r+0xc0>
 8009d0e:	684b      	ldr	r3, [r1, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dc05      	bgt.n	8009d20 <__sflush_r+0x20>
 8009d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dc02      	bgt.n	8009d20 <__sflush_r+0x20>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d0f9      	beq.n	8009d1a <__sflush_r+0x1a>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d2c:	682f      	ldr	r7, [r5, #0]
 8009d2e:	602b      	str	r3, [r5, #0]
 8009d30:	d032      	beq.n	8009d98 <__sflush_r+0x98>
 8009d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	075a      	lsls	r2, r3, #29
 8009d38:	d505      	bpl.n	8009d46 <__sflush_r+0x46>
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	1ac0      	subs	r0, r0, r3
 8009d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d40:	b10b      	cbz	r3, 8009d46 <__sflush_r+0x46>
 8009d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d44:	1ac0      	subs	r0, r0, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b0      	blx	r6
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	d106      	bne.n	8009d66 <__sflush_r+0x66>
 8009d58:	6829      	ldr	r1, [r5, #0]
 8009d5a:	291d      	cmp	r1, #29
 8009d5c:	d82c      	bhi.n	8009db8 <__sflush_r+0xb8>
 8009d5e:	4a2a      	ldr	r2, [pc, #168]	; (8009e08 <__sflush_r+0x108>)
 8009d60:	40ca      	lsrs	r2, r1
 8009d62:	07d6      	lsls	r6, r2, #31
 8009d64:	d528      	bpl.n	8009db8 <__sflush_r+0xb8>
 8009d66:	2200      	movs	r2, #0
 8009d68:	6062      	str	r2, [r4, #4]
 8009d6a:	04d9      	lsls	r1, r3, #19
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	6022      	str	r2, [r4, #0]
 8009d70:	d504      	bpl.n	8009d7c <__sflush_r+0x7c>
 8009d72:	1c42      	adds	r2, r0, #1
 8009d74:	d101      	bne.n	8009d7a <__sflush_r+0x7a>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b903      	cbnz	r3, 8009d7c <__sflush_r+0x7c>
 8009d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d7e:	602f      	str	r7, [r5, #0]
 8009d80:	2900      	cmp	r1, #0
 8009d82:	d0ca      	beq.n	8009d1a <__sflush_r+0x1a>
 8009d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d002      	beq.n	8009d92 <__sflush_r+0x92>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7ff fa99 	bl	80092c4 <_free_r>
 8009d92:	2000      	movs	r0, #0
 8009d94:	6360      	str	r0, [r4, #52]	; 0x34
 8009d96:	e7c1      	b.n	8009d1c <__sflush_r+0x1c>
 8009d98:	6a21      	ldr	r1, [r4, #32]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b0      	blx	r6
 8009da0:	1c41      	adds	r1, r0, #1
 8009da2:	d1c7      	bne.n	8009d34 <__sflush_r+0x34>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0c4      	beq.n	8009d34 <__sflush_r+0x34>
 8009daa:	2b1d      	cmp	r3, #29
 8009dac:	d001      	beq.n	8009db2 <__sflush_r+0xb2>
 8009dae:	2b16      	cmp	r3, #22
 8009db0:	d101      	bne.n	8009db6 <__sflush_r+0xb6>
 8009db2:	602f      	str	r7, [r5, #0]
 8009db4:	e7b1      	b.n	8009d1a <__sflush_r+0x1a>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	e7ad      	b.n	8009d1c <__sflush_r+0x1c>
 8009dc0:	690f      	ldr	r7, [r1, #16]
 8009dc2:	2f00      	cmp	r7, #0
 8009dc4:	d0a9      	beq.n	8009d1a <__sflush_r+0x1a>
 8009dc6:	0793      	lsls	r3, r2, #30
 8009dc8:	680e      	ldr	r6, [r1, #0]
 8009dca:	bf08      	it	eq
 8009dcc:	694b      	ldreq	r3, [r1, #20]
 8009dce:	600f      	str	r7, [r1, #0]
 8009dd0:	bf18      	it	ne
 8009dd2:	2300      	movne	r3, #0
 8009dd4:	eba6 0807 	sub.w	r8, r6, r7
 8009dd8:	608b      	str	r3, [r1, #8]
 8009dda:	f1b8 0f00 	cmp.w	r8, #0
 8009dde:	dd9c      	ble.n	8009d1a <__sflush_r+0x1a>
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009de4:	4643      	mov	r3, r8
 8009de6:	463a      	mov	r2, r7
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b0      	blx	r6
 8009dec:	2800      	cmp	r0, #0
 8009dee:	dc06      	bgt.n	8009dfe <__sflush_r+0xfe>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	e78e      	b.n	8009d1c <__sflush_r+0x1c>
 8009dfe:	4407      	add	r7, r0
 8009e00:	eba8 0800 	sub.w	r8, r8, r0
 8009e04:	e7e9      	b.n	8009dda <__sflush_r+0xda>
 8009e06:	bf00      	nop
 8009e08:	20400001 	.word	0x20400001

08009e0c <_fflush_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	690b      	ldr	r3, [r1, #16]
 8009e10:	4605      	mov	r5, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	b913      	cbnz	r3, 8009e1c <_fflush_r+0x10>
 8009e16:	2500      	movs	r5, #0
 8009e18:	4628      	mov	r0, r5
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	b118      	cbz	r0, 8009e26 <_fflush_r+0x1a>
 8009e1e:	6983      	ldr	r3, [r0, #24]
 8009e20:	b90b      	cbnz	r3, 8009e26 <_fflush_r+0x1a>
 8009e22:	f000 f887 	bl	8009f34 <__sinit>
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <_fflush_r+0x6c>)
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	d11b      	bne.n	8009e64 <_fflush_r+0x58>
 8009e2c:	686c      	ldr	r4, [r5, #4]
 8009e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <_fflush_r+0xa>
 8009e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e38:	07d0      	lsls	r0, r2, #31
 8009e3a:	d404      	bmi.n	8009e46 <_fflush_r+0x3a>
 8009e3c:	0599      	lsls	r1, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_fflush_r+0x3a>
 8009e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e42:	f000 f915 	bl	800a070 <__retarget_lock_acquire_recursive>
 8009e46:	4628      	mov	r0, r5
 8009e48:	4621      	mov	r1, r4
 8009e4a:	f7ff ff59 	bl	8009d00 <__sflush_r>
 8009e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e50:	07da      	lsls	r2, r3, #31
 8009e52:	4605      	mov	r5, r0
 8009e54:	d4e0      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	059b      	lsls	r3, r3, #22
 8009e5a:	d4dd      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e5e:	f000 f908 	bl	800a072 <__retarget_lock_release_recursive>
 8009e62:	e7d9      	b.n	8009e18 <_fflush_r+0xc>
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <_fflush_r+0x70>)
 8009e66:	429c      	cmp	r4, r3
 8009e68:	d101      	bne.n	8009e6e <_fflush_r+0x62>
 8009e6a:	68ac      	ldr	r4, [r5, #8]
 8009e6c:	e7df      	b.n	8009e2e <_fflush_r+0x22>
 8009e6e:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <_fflush_r+0x74>)
 8009e70:	429c      	cmp	r4, r3
 8009e72:	bf08      	it	eq
 8009e74:	68ec      	ldreq	r4, [r5, #12]
 8009e76:	e7da      	b.n	8009e2e <_fflush_r+0x22>
 8009e78:	0800a7fc 	.word	0x0800a7fc
 8009e7c:	0800a81c 	.word	0x0800a81c
 8009e80:	0800a7dc 	.word	0x0800a7dc

08009e84 <std>:
 8009e84:	2300      	movs	r3, #0
 8009e86:	b510      	push	{r4, lr}
 8009e88:	4604      	mov	r4, r0
 8009e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e92:	6083      	str	r3, [r0, #8]
 8009e94:	8181      	strh	r1, [r0, #12]
 8009e96:	6643      	str	r3, [r0, #100]	; 0x64
 8009e98:	81c2      	strh	r2, [r0, #14]
 8009e9a:	6183      	str	r3, [r0, #24]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	2208      	movs	r2, #8
 8009ea0:	305c      	adds	r0, #92	; 0x5c
 8009ea2:	f7fb fdb7 	bl	8005a14 <memset>
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <std+0x38>)
 8009ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <std+0x3c>)
 8009eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <std+0x40>)
 8009eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <std+0x44>)
 8009eb4:	6224      	str	r4, [r4, #32]
 8009eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	bf00      	nop
 8009ebc:	0800a1d9 	.word	0x0800a1d9
 8009ec0:	0800a1fb 	.word	0x0800a1fb
 8009ec4:	0800a233 	.word	0x0800a233
 8009ec8:	0800a257 	.word	0x0800a257

08009ecc <_cleanup_r>:
 8009ecc:	4901      	ldr	r1, [pc, #4]	; (8009ed4 <_cleanup_r+0x8>)
 8009ece:	f000 b8af 	b.w	800a030 <_fwalk_reent>
 8009ed2:	bf00      	nop
 8009ed4:	08009e0d 	.word	0x08009e0d

08009ed8 <__sfmoreglue>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	2268      	movs	r2, #104	; 0x68
 8009edc:	1e4d      	subs	r5, r1, #1
 8009ede:	4355      	muls	r5, r2
 8009ee0:	460e      	mov	r6, r1
 8009ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ee6:	f7ff fa59 	bl	800939c <_malloc_r>
 8009eea:	4604      	mov	r4, r0
 8009eec:	b140      	cbz	r0, 8009f00 <__sfmoreglue+0x28>
 8009eee:	2100      	movs	r1, #0
 8009ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ef4:	300c      	adds	r0, #12
 8009ef6:	60a0      	str	r0, [r4, #8]
 8009ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009efc:	f7fb fd8a 	bl	8005a14 <memset>
 8009f00:	4620      	mov	r0, r4
 8009f02:	bd70      	pop	{r4, r5, r6, pc}

08009f04 <__sfp_lock_acquire>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__sfp_lock_acquire+0x8>)
 8009f06:	f000 b8b3 	b.w	800a070 <__retarget_lock_acquire_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	20000389 	.word	0x20000389

08009f10 <__sfp_lock_release>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__sfp_lock_release+0x8>)
 8009f12:	f000 b8ae 	b.w	800a072 <__retarget_lock_release_recursive>
 8009f16:	bf00      	nop
 8009f18:	20000389 	.word	0x20000389

08009f1c <__sinit_lock_acquire>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__sinit_lock_acquire+0x8>)
 8009f1e:	f000 b8a7 	b.w	800a070 <__retarget_lock_acquire_recursive>
 8009f22:	bf00      	nop
 8009f24:	2000038a 	.word	0x2000038a

08009f28 <__sinit_lock_release>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__sinit_lock_release+0x8>)
 8009f2a:	f000 b8a2 	b.w	800a072 <__retarget_lock_release_recursive>
 8009f2e:	bf00      	nop
 8009f30:	2000038a 	.word	0x2000038a

08009f34 <__sinit>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	4604      	mov	r4, r0
 8009f38:	f7ff fff0 	bl	8009f1c <__sinit_lock_acquire>
 8009f3c:	69a3      	ldr	r3, [r4, #24]
 8009f3e:	b11b      	cbz	r3, 8009f48 <__sinit+0x14>
 8009f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f44:	f7ff bff0 	b.w	8009f28 <__sinit_lock_release>
 8009f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <__sinit+0x68>)
 8009f50:	4a13      	ldr	r2, [pc, #76]	; (8009fa0 <__sinit+0x6c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	bf04      	itt	eq
 8009f5a:	2301      	moveq	r3, #1
 8009f5c:	61a3      	streq	r3, [r4, #24]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 f820 	bl	8009fa4 <__sfp>
 8009f64:	6060      	str	r0, [r4, #4]
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f81c 	bl	8009fa4 <__sfp>
 8009f6c:	60a0      	str	r0, [r4, #8]
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f818 	bl	8009fa4 <__sfp>
 8009f74:	2200      	movs	r2, #0
 8009f76:	60e0      	str	r0, [r4, #12]
 8009f78:	2104      	movs	r1, #4
 8009f7a:	6860      	ldr	r0, [r4, #4]
 8009f7c:	f7ff ff82 	bl	8009e84 <std>
 8009f80:	68a0      	ldr	r0, [r4, #8]
 8009f82:	2201      	movs	r2, #1
 8009f84:	2109      	movs	r1, #9
 8009f86:	f7ff ff7d 	bl	8009e84 <std>
 8009f8a:	68e0      	ldr	r0, [r4, #12]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	2112      	movs	r1, #18
 8009f90:	f7ff ff78 	bl	8009e84 <std>
 8009f94:	2301      	movs	r3, #1
 8009f96:	61a3      	str	r3, [r4, #24]
 8009f98:	e7d2      	b.n	8009f40 <__sinit+0xc>
 8009f9a:	bf00      	nop
 8009f9c:	0800a394 	.word	0x0800a394
 8009fa0:	08009ecd 	.word	0x08009ecd

08009fa4 <__sfp>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	f7ff ffac 	bl	8009f04 <__sfp_lock_acquire>
 8009fac:	4b1e      	ldr	r3, [pc, #120]	; (800a028 <__sfp+0x84>)
 8009fae:	681e      	ldr	r6, [r3, #0]
 8009fb0:	69b3      	ldr	r3, [r6, #24]
 8009fb2:	b913      	cbnz	r3, 8009fba <__sfp+0x16>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ffbd 	bl	8009f34 <__sinit>
 8009fba:	3648      	adds	r6, #72	; 0x48
 8009fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	d503      	bpl.n	8009fcc <__sfp+0x28>
 8009fc4:	6833      	ldr	r3, [r6, #0]
 8009fc6:	b30b      	cbz	r3, 800a00c <__sfp+0x68>
 8009fc8:	6836      	ldr	r6, [r6, #0]
 8009fca:	e7f7      	b.n	8009fbc <__sfp+0x18>
 8009fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fd0:	b9d5      	cbnz	r5, 800a008 <__sfp+0x64>
 8009fd2:	4b16      	ldr	r3, [pc, #88]	; (800a02c <__sfp+0x88>)
 8009fd4:	60e3      	str	r3, [r4, #12]
 8009fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fda:	6665      	str	r5, [r4, #100]	; 0x64
 8009fdc:	f000 f847 	bl	800a06e <__retarget_lock_init_recursive>
 8009fe0:	f7ff ff96 	bl	8009f10 <__sfp_lock_release>
 8009fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fec:	6025      	str	r5, [r4, #0]
 8009fee:	61a5      	str	r5, [r4, #24]
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ff8:	f7fb fd0c 	bl	8005a14 <memset>
 8009ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a004:	4620      	mov	r0, r4
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a008:	3468      	adds	r4, #104	; 0x68
 800a00a:	e7d9      	b.n	8009fc0 <__sfp+0x1c>
 800a00c:	2104      	movs	r1, #4
 800a00e:	4638      	mov	r0, r7
 800a010:	f7ff ff62 	bl	8009ed8 <__sfmoreglue>
 800a014:	4604      	mov	r4, r0
 800a016:	6030      	str	r0, [r6, #0]
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1d5      	bne.n	8009fc8 <__sfp+0x24>
 800a01c:	f7ff ff78 	bl	8009f10 <__sfp_lock_release>
 800a020:	230c      	movs	r3, #12
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	e7ee      	b.n	800a004 <__sfp+0x60>
 800a026:	bf00      	nop
 800a028:	0800a394 	.word	0x0800a394
 800a02c:	ffff0001 	.word	0xffff0001

0800a030 <_fwalk_reent>:
 800a030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a034:	4606      	mov	r6, r0
 800a036:	4688      	mov	r8, r1
 800a038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a03c:	2700      	movs	r7, #0
 800a03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a042:	f1b9 0901 	subs.w	r9, r9, #1
 800a046:	d505      	bpl.n	800a054 <_fwalk_reent+0x24>
 800a048:	6824      	ldr	r4, [r4, #0]
 800a04a:	2c00      	cmp	r4, #0
 800a04c:	d1f7      	bne.n	800a03e <_fwalk_reent+0xe>
 800a04e:	4638      	mov	r0, r7
 800a050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a054:	89ab      	ldrh	r3, [r5, #12]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d907      	bls.n	800a06a <_fwalk_reent+0x3a>
 800a05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a05e:	3301      	adds	r3, #1
 800a060:	d003      	beq.n	800a06a <_fwalk_reent+0x3a>
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	47c0      	blx	r8
 800a068:	4307      	orrs	r7, r0
 800a06a:	3568      	adds	r5, #104	; 0x68
 800a06c:	e7e9      	b.n	800a042 <_fwalk_reent+0x12>

0800a06e <__retarget_lock_init_recursive>:
 800a06e:	4770      	bx	lr

0800a070 <__retarget_lock_acquire_recursive>:
 800a070:	4770      	bx	lr

0800a072 <__retarget_lock_release_recursive>:
 800a072:	4770      	bx	lr

0800a074 <__swhatbuf_r>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	460e      	mov	r6, r1
 800a078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a07c:	2900      	cmp	r1, #0
 800a07e:	b096      	sub	sp, #88	; 0x58
 800a080:	4614      	mov	r4, r2
 800a082:	461d      	mov	r5, r3
 800a084:	da08      	bge.n	800a098 <__swhatbuf_r+0x24>
 800a086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	602a      	str	r2, [r5, #0]
 800a08e:	061a      	lsls	r2, r3, #24
 800a090:	d410      	bmi.n	800a0b4 <__swhatbuf_r+0x40>
 800a092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a096:	e00e      	b.n	800a0b6 <__swhatbuf_r+0x42>
 800a098:	466a      	mov	r2, sp
 800a09a:	f000 f903 	bl	800a2a4 <_fstat_r>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	dbf1      	blt.n	800a086 <__swhatbuf_r+0x12>
 800a0a2:	9a01      	ldr	r2, [sp, #4]
 800a0a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0ac:	425a      	negs	r2, r3
 800a0ae:	415a      	adcs	r2, r3
 800a0b0:	602a      	str	r2, [r5, #0]
 800a0b2:	e7ee      	b.n	800a092 <__swhatbuf_r+0x1e>
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	b016      	add	sp, #88	; 0x58
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0c0 <__smakebuf_r>:
 800a0c0:	898b      	ldrh	r3, [r1, #12]
 800a0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0c4:	079d      	lsls	r5, r3, #30
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	d507      	bpl.n	800a0dc <__smakebuf_r+0x1c>
 800a0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	6123      	str	r3, [r4, #16]
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	6163      	str	r3, [r4, #20]
 800a0d8:	b002      	add	sp, #8
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	ab01      	add	r3, sp, #4
 800a0de:	466a      	mov	r2, sp
 800a0e0:	f7ff ffc8 	bl	800a074 <__swhatbuf_r>
 800a0e4:	9900      	ldr	r1, [sp, #0]
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f7ff f957 	bl	800939c <_malloc_r>
 800a0ee:	b948      	cbnz	r0, 800a104 <__smakebuf_r+0x44>
 800a0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f4:	059a      	lsls	r2, r3, #22
 800a0f6:	d4ef      	bmi.n	800a0d8 <__smakebuf_r+0x18>
 800a0f8:	f023 0303 	bic.w	r3, r3, #3
 800a0fc:	f043 0302 	orr.w	r3, r3, #2
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	e7e3      	b.n	800a0cc <__smakebuf_r+0xc>
 800a104:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <__smakebuf_r+0x7c>)
 800a106:	62b3      	str	r3, [r6, #40]	; 0x28
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	6020      	str	r0, [r4, #0]
 800a10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	9b00      	ldr	r3, [sp, #0]
 800a114:	6163      	str	r3, [r4, #20]
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	6120      	str	r0, [r4, #16]
 800a11a:	b15b      	cbz	r3, 800a134 <__smakebuf_r+0x74>
 800a11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a120:	4630      	mov	r0, r6
 800a122:	f000 f8d1 	bl	800a2c8 <_isatty_r>
 800a126:	b128      	cbz	r0, 800a134 <__smakebuf_r+0x74>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f023 0303 	bic.w	r3, r3, #3
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	89a0      	ldrh	r0, [r4, #12]
 800a136:	4305      	orrs	r5, r0
 800a138:	81a5      	strh	r5, [r4, #12]
 800a13a:	e7cd      	b.n	800a0d8 <__smakebuf_r+0x18>
 800a13c:	08009ecd 	.word	0x08009ecd

0800a140 <_malloc_usable_size_r>:
 800a140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a144:	1f18      	subs	r0, r3, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	bfbc      	itt	lt
 800a14a:	580b      	ldrlt	r3, [r1, r0]
 800a14c:	18c0      	addlt	r0, r0, r3
 800a14e:	4770      	bx	lr

0800a150 <_raise_r>:
 800a150:	291f      	cmp	r1, #31
 800a152:	b538      	push	{r3, r4, r5, lr}
 800a154:	4604      	mov	r4, r0
 800a156:	460d      	mov	r5, r1
 800a158:	d904      	bls.n	800a164 <_raise_r+0x14>
 800a15a:	2316      	movs	r3, #22
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	f04f 30ff 	mov.w	r0, #4294967295
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a166:	b112      	cbz	r2, 800a16e <_raise_r+0x1e>
 800a168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a16c:	b94b      	cbnz	r3, 800a182 <_raise_r+0x32>
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 f830 	bl	800a1d4 <_getpid_r>
 800a174:	462a      	mov	r2, r5
 800a176:	4601      	mov	r1, r0
 800a178:	4620      	mov	r0, r4
 800a17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a17e:	f000 b817 	b.w	800a1b0 <_kill_r>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d00a      	beq.n	800a19c <_raise_r+0x4c>
 800a186:	1c59      	adds	r1, r3, #1
 800a188:	d103      	bne.n	800a192 <_raise_r+0x42>
 800a18a:	2316      	movs	r3, #22
 800a18c:	6003      	str	r3, [r0, #0]
 800a18e:	2001      	movs	r0, #1
 800a190:	e7e7      	b.n	800a162 <_raise_r+0x12>
 800a192:	2400      	movs	r4, #0
 800a194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a198:	4628      	mov	r0, r5
 800a19a:	4798      	blx	r3
 800a19c:	2000      	movs	r0, #0
 800a19e:	e7e0      	b.n	800a162 <_raise_r+0x12>

0800a1a0 <raise>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <raise+0xc>)
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f7ff bfd3 	b.w	800a150 <_raise_r>
 800a1aa:	bf00      	nop
 800a1ac:	2000000c 	.word	0x2000000c

0800a1b0 <_kill_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d07      	ldr	r5, [pc, #28]	; (800a1d0 <_kill_r+0x20>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	f7f7 fddf 	bl	8001d80 <_kill>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d102      	bne.n	800a1cc <_kill_r+0x1c>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	b103      	cbz	r3, 800a1cc <_kill_r+0x1c>
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000384 	.word	0x20000384

0800a1d4 <_getpid_r>:
 800a1d4:	f7f7 bdcc 	b.w	8001d70 <_getpid>

0800a1d8 <__sread>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	460c      	mov	r4, r1
 800a1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e0:	f000 f894 	bl	800a30c <_read_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	bfab      	itete	ge
 800a1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a1ec:	181b      	addge	r3, r3, r0
 800a1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1f2:	bfac      	ite	ge
 800a1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1f6:	81a3      	strhlt	r3, [r4, #12]
 800a1f8:	bd10      	pop	{r4, pc}

0800a1fa <__swrite>:
 800a1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	461f      	mov	r7, r3
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	05db      	lsls	r3, r3, #23
 800a204:	4605      	mov	r5, r0
 800a206:	460c      	mov	r4, r1
 800a208:	4616      	mov	r6, r2
 800a20a:	d505      	bpl.n	800a218 <__swrite+0x1e>
 800a20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a210:	2302      	movs	r3, #2
 800a212:	2200      	movs	r2, #0
 800a214:	f000 f868 	bl	800a2e8 <_lseek_r>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a222:	81a3      	strh	r3, [r4, #12]
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	4628      	mov	r0, r5
 800a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22e:	f000 b817 	b.w	800a260 <_write_r>

0800a232 <__sseek>:
 800a232:	b510      	push	{r4, lr}
 800a234:	460c      	mov	r4, r1
 800a236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23a:	f000 f855 	bl	800a2e8 <_lseek_r>
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	bf15      	itete	ne
 800a244:	6560      	strne	r0, [r4, #84]	; 0x54
 800a246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a24a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a24e:	81a3      	strheq	r3, [r4, #12]
 800a250:	bf18      	it	ne
 800a252:	81a3      	strhne	r3, [r4, #12]
 800a254:	bd10      	pop	{r4, pc}

0800a256 <__sclose>:
 800a256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25a:	f000 b813 	b.w	800a284 <_close_r>
	...

0800a260 <_write_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	; (800a280 <_write_r+0x20>)
 800a264:	4604      	mov	r4, r0
 800a266:	4608      	mov	r0, r1
 800a268:	4611      	mov	r1, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	602a      	str	r2, [r5, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	f7f7 fdbd 	bl	8001dee <_write>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_write_r+0x1e>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_write_r+0x1e>
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	20000384 	.word	0x20000384

0800a284 <_close_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	; (800a2a0 <_close_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f7 fdc9 	bl	8001e26 <_close>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_close_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_close_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20000384 	.word	0x20000384

0800a2a4 <_fstat_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d07      	ldr	r5, [pc, #28]	; (800a2c4 <_fstat_r+0x20>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	f7f7 fdc4 	bl	8001e3e <_fstat>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d102      	bne.n	800a2c0 <_fstat_r+0x1c>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	b103      	cbz	r3, 800a2c0 <_fstat_r+0x1c>
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000384 	.word	0x20000384

0800a2c8 <_isatty_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d06      	ldr	r5, [pc, #24]	; (800a2e4 <_isatty_r+0x1c>)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	602b      	str	r3, [r5, #0]
 800a2d4:	f7f7 fdc3 	bl	8001e5e <_isatty>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_isatty_r+0x1a>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_isatty_r+0x1a>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	20000384 	.word	0x20000384

0800a2e8 <_lseek_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d07      	ldr	r5, [pc, #28]	; (800a308 <_lseek_r+0x20>)
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	602a      	str	r2, [r5, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7f7 fdbc 	bl	8001e74 <_lseek>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_lseek_r+0x1e>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_lseek_r+0x1e>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000384 	.word	0x20000384

0800a30c <_read_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d07      	ldr	r5, [pc, #28]	; (800a32c <_read_r+0x20>)
 800a310:	4604      	mov	r4, r0
 800a312:	4608      	mov	r0, r1
 800a314:	4611      	mov	r1, r2
 800a316:	2200      	movs	r2, #0
 800a318:	602a      	str	r2, [r5, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	f7f7 fd4a 	bl	8001db4 <_read>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_read_r+0x1e>
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	b103      	cbz	r3, 800a32a <_read_r+0x1e>
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	20000384 	.word	0x20000384

0800a330 <_init>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	bf00      	nop
 800a334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a336:	bc08      	pop	{r3}
 800a338:	469e      	mov	lr, r3
 800a33a:	4770      	bx	lr

0800a33c <_fini>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	bf00      	nop
 800a340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a342:	bc08      	pop	{r3}
 800a344:	469e      	mov	lr, r3
 800a346:	4770      	bx	lr
