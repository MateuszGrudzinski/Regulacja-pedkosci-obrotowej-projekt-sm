
Zadanie_Zaliczeniowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a910  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800aae0  0800aae0  0001aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd4  0800afd4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afdc  0800afdc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800afe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000210  0800b1f4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800b1f4  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a55  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd4  00000000  00000000  00033c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00036a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a15  00000000  00000000  000389c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015224  00000000  00000000  000613d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f75e4  00000000  00000000  000765f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dbdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  0016dc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aac8 	.word	0x0800aac8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800aac8 	.word	0x0800aac8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <wire_init>:
#include "1wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <wire_init+0x10>)
 800103e:	f003 fa67 	bl	8004510 <HAL_TIM_Base_Start>
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000320 	.word	0x20000320

0800104c <delay_us>:

static void delay_us(uint32_t us)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <delay_us+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 800105c:	bf00      	nop
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <delay_us+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8f9      	bhi.n	800105e <delay_us+0x12>
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000320 	.word	0x20000320

0800107c <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2110      	movs	r1, #16
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <wire_reset+0x50>)
 8001088:	f002 f8ee 	bl	8003268 <HAL_GPIO_WritePin>
  delay_us(480);
 800108c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001090:	f7ff ffdc 	bl	800104c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <wire_reset+0x50>)
 800109a:	f002 f8e5 	bl	8003268 <HAL_GPIO_WritePin>
  delay_us(70);
 800109e:	2046      	movs	r0, #70	; 0x46
 80010a0:	f7ff ffd4 	bl	800104c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010a4:	2110      	movs	r1, #16
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <wire_reset+0x50>)
 80010a8:	f002 f8c6 	bl	8003238 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80010b0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80010b4:	f7ff ffca 	bl	800104c <delay_us>

  if (rc == 0)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <wire_reset+0x46>
    return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <wire_reset+0x48>
  else
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020000 	.word	0x40020000

080010d0 <read_bit>:

static int read_bit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <read_bit+0x44>)
 80010dc:	f002 f8c4 	bl	8003268 <HAL_GPIO_WritePin>
  delay_us(6);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f7ff ffb3 	bl	800104c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2110      	movs	r1, #16
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <read_bit+0x44>)
 80010ec:	f002 f8bc 	bl	8003268 <HAL_GPIO_WritePin>
  delay_us(9);
 80010f0:	2009      	movs	r0, #9
 80010f2:	f7ff ffab 	bl	800104c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010f6:	2110      	movs	r1, #16
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <read_bit+0x44>)
 80010fa:	f002 f89d 	bl	8003238 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001102:	2037      	movs	r0, #55	; 0x37
 8001104:	f7ff ffa2 	bl	800104c <delay_us>
  return rc;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000

08001118 <wire_read>:

uint8_t wire_read(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e00e      	b.n	8001146 <wire_read+0x2e>
    value >>= 1;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800112e:	f7ff ffcf 	bl	80010d0 <read_bit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <wire_read+0x28>
      value |= 0x80;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	dded      	ble.n	8001128 <wire_read+0x10>
  }
  return value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <write_bit>:

static void write_bit(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (value) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2110      	movs	r1, #16
 800116a:	4811      	ldr	r0, [pc, #68]	; (80011b0 <write_bit+0x58>)
 800116c:	f002 f87c 	bl	8003268 <HAL_GPIO_WritePin>
    delay_us(6);
 8001170:	2006      	movs	r0, #6
 8001172:	f7ff ff6b 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2110      	movs	r1, #16
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <write_bit+0x58>)
 800117c:	f002 f874 	bl	8003268 <HAL_GPIO_WritePin>
    delay_us(64);
 8001180:	2040      	movs	r0, #64	; 0x40
 8001182:	f7ff ff63 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8001186:	e00f      	b.n	80011a8 <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <write_bit+0x58>)
 800118e:	f002 f86b 	bl	8003268 <HAL_GPIO_WritePin>
    delay_us(60);
 8001192:	203c      	movs	r0, #60	; 0x3c
 8001194:	f7ff ff5a 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <write_bit+0x58>)
 800119e:	f002 f863 	bl	8003268 <HAL_GPIO_WritePin>
    delay_us(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff ff52 	bl	800104c <delay_us>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40020000 	.word	0x40020000

080011b4 <wire_write>:

void wire_write(uint8_t byte)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e00b      	b.n	80011dc <wire_write+0x28>
    write_bit(byte & 0x01);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffc4 	bl	8001158 <write_bit>
    byte >>= 1;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	ddf0      	ble.n	80011c4 <wire_write+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e016      	b.n	8001230 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	4053      	eors	r3, r2
 8001208:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	085b      	lsrs	r3, r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <byte_crc+0x38>
      crc ^= 0x8c;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001220:	43db      	mvns	r3, r3
 8001222:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b07      	cmp	r3, #7
 8001234:	dde5      	ble.n	8001202 <byte_crc+0x16>
  }
  return crc;
 8001236:	79fb      	ldrb	r3, [r7, #7]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e00d      	b.n	8001274 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffc1 	bl	80011ec <byte_crc>
 800126a:	4603      	mov	r3, r0
 800126c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbed      	blt.n	8001258 <wire_crc+0x14>

    return crc;
 800127c:	7afb      	ldrb	r3, [r7, #11]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  return wire_init();
 800128a:	f7ff fed5 	bl	8001038 <wire_init>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}

08001294 <ds18b20_read_address>:
HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 800129c:	f7ff feee 	bl	800107c <wire_reset>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <ds18b20_read_address+0x16>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e021      	b.n	80012ee <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 80012aa:	2033      	movs	r0, #51	; 0x33
 80012ac:	f7ff ff82 	bl	80011b4 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e009      	b.n	80012ca <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	18d4      	adds	r4, r2, r3
 80012bc:	f7ff ff2c 	bl	8001118 <wire_read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	ddf2      	ble.n	80012b6 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 80012d0:	2107      	movs	r1, #7
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb6 	bl	8001244 <wire_crc>
 80012d8:	4603      	mov	r3, r0
 80012da:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3307      	adds	r3, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	7afa      	ldrb	r2, [r7, #11]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d101      	bne.n	80012ec <ds18b20_read_address+0x58>
    return HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e000      	b.n	80012ee <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}

080012f6 <send_cmd>:
static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8001302:	f7ff febb 	bl	800107c <wire_reset>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <send_cmd+0x1a>
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e01e      	b.n	800134e <send_cmd+0x58>

  if (!rom_code) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8001316:	20cc      	movs	r0, #204	; 0xcc
 8001318:	f7ff ff4c 	bl	80011b4 <wire_write>
 800131c:	e012      	b.n	8001344 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 800131e:	2055      	movs	r0, #85	; 0x55
 8001320:	f7ff ff48 	bl	80011b4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e009      	b.n	800133e <send_cmd+0x48>
      wire_write(rom_code[i]);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff3e 	bl	80011b4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b07      	cmp	r3, #7
 8001342:	ddf2      	ble.n	800132a <send_cmd+0x34>
  }
  wire_write(cmd);
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff34 	bl	80011b4 <wire_write>
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <ds18b20_start_measure>:
HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 800135e:	2144      	movs	r1, #68	; 0x44
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffc8 	bl	80012f6 <send_cmd>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <ds18b20_read_scratchpad>:
static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800137a:	21be      	movs	r1, #190	; 0xbe
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffba 	bl	80012f6 <send_cmd>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e01e      	b.n	80013ca <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e009      	b.n	80013a6 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	18d4      	adds	r4, r2, r3
 8001398:	f7ff febe 	bl	8001118 <wire_read>
 800139c:	4603      	mov	r3, r0
 800139e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	ddf2      	ble.n	8001392 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80013ac:	2108      	movs	r1, #8
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f7ff ff48 	bl	8001244 <wire_crc>
 80013b4:	4603      	mov	r3, r0
 80013b6:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3308      	adds	r3, #8
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	7afa      	ldrb	r2, [r7, #11]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d101      	bne.n	80013c8 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
	...

080013d4 <ds18b20_get_temp>:
float ds18b20_get_temp(const uint8_t* rom_code)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffc4 	bl	8001370 <ds18b20_read_scratchpad>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <ds18b20_get_temp+0x20>
    return 85.0f;
 80013ee:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800141c <ds18b20_get_temp+0x48>
 80013f2:	e00b      	b.n	800140c <ds18b20_get_temp+0x38>
 80013f4:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80013f6:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 80013f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800140c:	eef0 7a47 	vmov.f32	s15, s14
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	42aa0000 	.word	0x42aa0000

08001420 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800142e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800143a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001440:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001442:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f80e 	bl	8001476 <Lcd_init>

	return lcd;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	461d      	mov	r5, r3
 800145e:	f107 0410 	add.w	r4, r7, #16
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bdb0      	pop	{r4, r5, r7, pc}

08001476 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7d9b      	ldrb	r3, [r3, #22]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001486:	2133      	movs	r1, #51	; 0x33
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8a9 	bl	80015e0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800148e:	2132      	movs	r1, #50	; 0x32
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f8a5 	bl	80015e0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001496:	2128      	movs	r1, #40	; 0x28
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8a1 	bl	80015e0 <lcd_write_command>
 800149e:	e003      	b.n	80014a8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80014a0:	2138      	movs	r1, #56	; 0x38
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f89c 	bl	80015e0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80014a8:	2101      	movs	r1, #1
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f898 	bl	80015e0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80014b0:	210c      	movs	r1, #12
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f894 	bl	80015e0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80014b8:	2106      	movs	r1, #6
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f890 	bl	80015e0 <lcd_write_command>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <Lcd_float>:

/**
 * Write a number on the current position
 */
void Lcd_float(Lcd_HandleTypeDef * lcd, float number)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	ed87 0a00 	vstr	s0, [r7]
	char buffer[11];
	char buffer_out[11];
	sprintf(buffer, "%f", number);
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f7ff f857 	bl	8000588 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	f107 0018 	add.w	r0, r7, #24
 80014e2:	4915      	ldr	r1, [pc, #84]	; (8001538 <Lcd_float+0x70>)
 80014e4:	f005 fcec 	bl	8006ec0 <siprintf>
	int period = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
	for(period = 0; period<sizeof(buffer); period++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	e009      	b.n	8001506 <Lcd_float+0x3e>
	{
		if(buffer[period] == '.')
 80014f2:	f107 0218 	add.w	r2, r7, #24
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b2e      	cmp	r3, #46	; 0x2e
 80014fe:	d006      	beq.n	800150e <Lcd_float+0x46>
	for(period = 0; period<sizeof(buffer); period++)
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3301      	adds	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	2b0a      	cmp	r3, #10
 800150a:	d9f2      	bls.n	80014f2 <Lcd_float+0x2a>
 800150c:	e000      	b.n	8001510 <Lcd_float+0x48>
			break;
 800150e:	bf00      	nop
	}
	strncpy(buffer_out, buffer, period + 4);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3304      	adds	r3, #4
 8001514:	461a      	mov	r2, r3
 8001516:	f107 0118 	add.w	r1, r7, #24
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fcee 	bl	8006f00 <strncpy>
	Lcd_string(lcd, buffer_out);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f81e 	bl	800156c <Lcd_string>
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800aae0 	.word	0x0800aae0

0800153c <Lcd_int>:
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <Lcd_int+0x2c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f005 fcb6 	bl	8006ec0 <siprintf>
	Lcd_string(lcd, buffer);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f806 	bl	800156c <Lcd_string>
}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	0800aae4 	.word	0x0800aae4

0800156c <Lcd_string>:
/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e00a      	b.n	8001592 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f858 	bl	800163c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	3301      	adds	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	7bfc      	ldrb	r4, [r7, #15]
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7fe fe3b 	bl	8000210 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	429c      	cmp	r4, r3
 800159e:	d3ed      	bcc.n	800157c <Lcd_string+0x10>
	}
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
	...

080015ac <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	4613      	mov	r3, r2
 80015ba:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <Lcd_cursor+0x30>)
 80015c0:	5cd2      	ldrb	r2, [r2, r3]
 80015c2:	78bb      	ldrb	r3, [r7, #2]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3b80      	subs	r3, #128	; 0x80
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f806 	bl	80015e0 <lcd_write_command>
	#endif
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	0800ab10 	.word	0x0800ab10

080015e0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6898      	ldr	r0, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	f001 fe36 	bl	8003268 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7d9b      	ldrb	r3, [r3, #22]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2204      	movs	r2, #4
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f842 	bl	8001698 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f839 	bl	8001698 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001626:	e005      	b.n	8001634 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2208      	movs	r2, #8
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f832 	bl	8001698 <lcd_write>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6898      	ldr	r0, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	899b      	ldrh	r3, [r3, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	f001 fe08 	bl	8003268 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d9b      	ldrb	r3, [r3, #22]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2204      	movs	r2, #4
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f814 	bl	8001698 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2204      	movs	r2, #4
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f80b 	bl	8001698 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001682:	e005      	b.n	8001690 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2208      	movs	r2, #8
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f804 	bl	8001698 <lcd_write>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	4613      	mov	r3, r2
 80016a6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e019      	b.n	80016e2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	8819      	ldrh	r1, [r3, #0]
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	fa42 f303 	asr.w	r3, r2, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	f001 fdc6 	bl	8003268 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3e1      	bcc.n	80016ae <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6918      	ldr	r0, [r3, #16]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8a9b      	ldrh	r3, [r3, #20]
 80016f2:	2201      	movs	r2, #1
 80016f4:	4619      	mov	r1, r3
 80016f6:	f001 fdb7 	bl	8003268 <HAL_GPIO_WritePin>
	DELAY(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f001 f826 	bl	800274c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6918      	ldr	r0, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8a9b      	ldrh	r3, [r3, #20]
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	f001 fdac 	bl	8003268 <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <MX_ADC1_Init+0x98>)
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <MX_ADC1_Init+0x9c>)
 800172e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_ADC1_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_ADC1_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <MX_ADC1_Init+0xa0>)
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001764:	2201      	movs	r2, #1
 8001766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_ADC1_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001772:	2201      	movs	r2, #1
 8001774:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001778:	f001 f80c 	bl	8002794 <HAL_ADC_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001782:	f000 fb49 	bl	8001e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178a:	2301      	movs	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_ADC1_Init+0x98>)
 8001798:	f001 f840 	bl	800281c <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017a2:	f000 fb39 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000022c 	.word	0x2000022c
 80017b4:	40012000 	.word	0x40012000
 80017b8:	0f000001 	.word	0x0f000001

080017bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <HAL_ADC_MspInit+0x74>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d123      	bne.n	8001826 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_ADC_MspInit+0x78>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <HAL_ADC_MspInit+0x78>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_ADC_MspInit+0x78>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_ADC_MspInit+0x78>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_ADC_MspInit+0x78>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_ADC_MspInit+0x78>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001812:	2303      	movs	r3, #3
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_ADC_MspInit+0x7c>)
 8001822:	f001 fb5d 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40012000 	.word	0x40012000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000

0800183c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4baf      	ldr	r3, [pc, #700]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4aae      	ldr	r2, [pc, #696]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4bac      	ldr	r3, [pc, #688]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4ba9      	ldr	r3, [pc, #676]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4aa8      	ldr	r2, [pc, #672]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4ba6      	ldr	r3, [pc, #664]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	4ba3      	ldr	r3, [pc, #652]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4aa2      	ldr	r2, [pc, #648]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4ba0      	ldr	r3, [pc, #640]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b9d      	ldr	r3, [pc, #628]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a9c      	ldr	r2, [pc, #624]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b9a      	ldr	r3, [pc, #616]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	4b97      	ldr	r3, [pc, #604]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a96      	ldr	r2, [pc, #600]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b94      	ldr	r3, [pc, #592]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	4b91      	ldr	r3, [pc, #580]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a90      	ldr	r2, [pc, #576]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b8e      	ldr	r3, [pc, #568]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a8a      	ldr	r2, [pc, #552]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <MX_GPIO_Init+0x2d4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|RS_Pin|EN_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001900:	4884      	ldr	r0, [pc, #528]	; (8001b14 <MX_GPIO_Init+0x2d8>)
 8001902:	f001 fcb1 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D5_Pin|D6_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2109      	movs	r1, #9
 800190a:	4883      	ldr	r0, [pc, #524]	; (8001b18 <MX_GPIO_Init+0x2dc>)
 800190c:	f001 fcac 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2108      	movs	r1, #8
 8001914:	4881      	ldr	r0, [pc, #516]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 8001916:	f001 fca7 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	2110      	movs	r1, #16
 800191e:	487f      	ldr	r0, [pc, #508]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 8001920:	f001 fca2 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f244 0181 	movw	r1, #16513	; 0x4081
 800192a:	487d      	ldr	r0, [pc, #500]	; (8001b20 <MX_GPIO_Init+0x2e4>)
 800192c:	f001 fc9c 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2140      	movs	r1, #64	; 0x40
 8001934:	487b      	ldr	r0, [pc, #492]	; (8001b24 <MX_GPIO_Init+0x2e8>)
 8001936:	f001 fc97 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800193a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001940:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4871      	ldr	r0, [pc, #452]	; (8001b18 <MX_GPIO_Init+0x2dc>)
 8001952:	f001 fac5 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin|EN_Pin;
 8001956:	f44f 6385 	mov.w	r3, #1064	; 0x428
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4869      	ldr	r0, [pc, #420]	; (8001b14 <MX_GPIO_Init+0x2d8>)
 8001970:	f001 fab6 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin;
 8001974:	2309      	movs	r3, #9
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4863      	ldr	r0, [pc, #396]	; (8001b18 <MX_GPIO_Init+0x2dc>)
 800198c:	f001 faa8 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001990:	2332      	movs	r3, #50	; 0x32
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a0:	230b      	movs	r3, #11
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	485b      	ldr	r0, [pc, #364]	; (8001b18 <MX_GPIO_Init+0x2dc>)
 80019ac:	f001 fa98 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019b0:	2386      	movs	r3, #134	; 0x86
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c0:	230b      	movs	r3, #11
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4854      	ldr	r0, [pc, #336]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 80019cc:	f001 fa88 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D4_Pin;
 80019d0:	2308      	movs	r3, #8
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	484d      	ldr	r0, [pc, #308]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 80019e8:	f001 fa7a 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 80019ec:	2310      	movs	r3, #16
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019f0:	2311      	movs	r3, #17
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4846      	ldr	r0, [pc, #280]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 8001a04:	f001 fa6c 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a08:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	483f      	ldr	r0, [pc, #252]	; (8001b20 <MX_GPIO_Init+0x2e4>)
 8001a22:	f001 fa5d 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TACH_Pin;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TACH_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4835      	ldr	r0, [pc, #212]	; (8001b14 <MX_GPIO_Init+0x2d8>)
 8001a3e:	f001 fa4f 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a54:	230b      	movs	r3, #11
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4830      	ldr	r0, [pc, #192]	; (8001b20 <MX_GPIO_Init+0x2e4>)
 8001a60:	f001 fa3e 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	482a      	ldr	r0, [pc, #168]	; (8001b24 <MX_GPIO_Init+0x2e8>)
 8001a7c:	f001 fa30 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <MX_GPIO_Init+0x2e8>)
 8001a94:	f001 fa24 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a98:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aaa:	230a      	movs	r3, #10
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4819      	ldr	r0, [pc, #100]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 8001ab6:	f001 fa13 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0x2e0>)
 8001ad0:	f001 fa06 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ad4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae6:	230b      	movs	r3, #11
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_GPIO_Init+0x2e8>)
 8001af2:	f001 f9f5 	bl	8002ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f001 f9b9 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b00:	2028      	movs	r0, #40	; 0x28
 8001b02:	f001 f9d2 	bl	8002eaa <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3730      	adds	r7, #48	; 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40021400 	.word	0x40021400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40021800 	.word	0x40021800

08001b28 <HAL_GPIO_EXTI_Callback>:
int Duty = 20;
int rpm_ref = 2500;
float e = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == TACH_Pin)
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b38:	d104      	bne.n	8001b44 <HAL_GPIO_EXTI_Callback+0x1c>
	tach_cnt++;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000274 	.word	0x20000274

08001b54 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d137      	bne.n	8001bd4 <HAL_TIM_PeriodElapsedCallback+0x80>
  {
	  rpm = 6*tach_cnt;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b74:	601a      	str	r2, [r3, #0]
	  tach_cnt = 0;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(Duty));
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
	  Duty = PID_GetOutput(&hpid1, rpm_ref, rpm);
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	ee07 3a10 	vmov	s14, r3
 8001b9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b9e:	eef0 0a47 	vmov.f32	s1, s14
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ba8:	f000 f93b 	bl	8001e22 <PID_GetOutput>
 8001bac:	eef0 7a40 	vmov.f32	s15, s0
 8001bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb4:	ee17 2a90 	vmov	r2, s15
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001bba:	601a      	str	r2, [r3, #0]
	  e = rpm_ref - rpm;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200002d4 	.word	0x200002d4
 8001be0:	20000274 	.word	0x20000274
 8001be4:	20000278 	.word	0x20000278
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000288 	.word	0x20000288
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000280 	.word	0x20000280

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b093      	sub	sp, #76	; 0x4c
 8001c00:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c02:	f000 fd46 	bl	8002692 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c06:	f000 f89f 	bl	8001d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0a:	f7ff fe17 	bl	800183c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c0e:	f000 fc87 	bl	8002520 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001c12:	f000 fbc1 	bl	8002398 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001c16:	f000 faf1 	bl	80021fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c1a:	f000 fb6d 	bl	80022f8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001c1e:	f7ff fd7b 	bl	8001718 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <main+0x128>)
 8001c24:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <main+0x12c>)
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c38:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001c3c:	f107 0008 	add.w	r0, r7, #8
 8001c40:	f107 0220 	add.w	r2, r7, #32
 8001c44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9303      	str	r3, [sp, #12]
 8001c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <main+0x130>)
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2320      	movs	r3, #32
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <main+0x130>)
 8001c5c:	f7ff fbe0 	bl	8001420 <Lcd_create>


  if (ds18b20_init() != HAL_OK) {
 8001c60:	f7ff fb11 	bl	8001286 <ds18b20_init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <main+0x72>
    Error_Handler();
 8001c6a:	f000 f8d5 	bl	8001e18 <Error_Handler>
  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb0f 	bl	8001294 <ds18b20_read_address>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <main+0x84>
    Error_Handler();
 8001c7c:	f000 f8cc 	bl	8001e18 <Error_Handler>
  }

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001c80:	2100      	movs	r1, #0
 8001c82:	482b      	ldr	r0, [pc, #172]	; (8001d30 <main+0x134>)
 8001c84:	f002 fd8e 	bl	80047a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001c88:	482a      	ldr	r0, [pc, #168]	; (8001d34 <main+0x138>)
 8001c8a:	f002 fcb1 	bl	80045f0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds18b20_start_measure(NULL);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fb61 	bl	8001356 <ds18b20_start_measure>

	  HAL_Delay(5000);
 8001c94:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c98:	f000 fd58 	bl	800274c <HAL_Delay>
	  temp = ds18b20_get_temp(NULL);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fb99 	bl	80013d4 <ds18b20_get_temp>
 8001ca2:	eef0 7a40 	vmov.f32	s15, s0
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <main+0x13c>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]

	  Lcd_cursor(&lcd, 0,1);
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fc79 	bl	80015ac <Lcd_cursor>
	  Lcd_string(&lcd, "TEMP: ");
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	491f      	ldr	r1, [pc, #124]	; (8001d3c <main+0x140>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc53 	bl	800156c <Lcd_string>
	  Lcd_cursor(&lcd, 0,7);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	2207      	movs	r2, #7
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fc6c 	bl	80015ac <Lcd_cursor>
	  Lcd_float(&lcd, temp);
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <main+0x13c>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fbf0 	bl	80014c8 <Lcd_float>

	  Lcd_cursor(&lcd, 1,1);
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2201      	movs	r2, #1
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fc5b 	bl	80015ac <Lcd_cursor>
	  Lcd_string(&lcd, "RPM: ");
 8001cf6:	f107 0308 	add.w	r3, r7, #8
 8001cfa:	4911      	ldr	r1, [pc, #68]	; (8001d40 <main+0x144>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fc35 	bl	800156c <Lcd_string>
	  Lcd_cursor(&lcd, 1,7);
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	2207      	movs	r2, #7
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fc4e 	bl	80015ac <Lcd_cursor>
	  Lcd_int(&lcd, rpm);
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <main+0x148>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fc0e 	bl	800153c <Lcd_int>
	  ds18b20_start_measure(NULL);
 8001d20:	e7b5      	b.n	8001c8e <main+0x92>
 8001d22:	bf00      	nop
 8001d24:	0800aaf8 	.word	0x0800aaf8
 8001d28:	0800ab08 	.word	0x0800ab08
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	20000288 	.word	0x20000288
 8001d34:	200002d4 	.word	0x200002d4
 8001d38:	2000027c 	.word	0x2000027c
 8001d3c:	0800aae8 	.word	0x0800aae8
 8001d40:	0800aaf0 	.word	0x0800aaf0
 8001d44:	20000278 	.word	0x20000278

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	; 0x50
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2230      	movs	r2, #48	; 0x30
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fa2a 	bl	80061b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d6c:	f001 faae 	bl	80032cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <SystemClock_Config+0xc8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <SystemClock_Config+0xc8>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <SystemClock_Config+0xc8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <SystemClock_Config+0xcc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d90:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <SystemClock_Config+0xcc>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <SystemClock_Config+0xcc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001da8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001db8:	2304      	movs	r3, #4
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001dbc:	2348      	movs	r3, #72	; 0x48
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fa8d 	bl	80032ec <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dd8:	f000 f81e 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2302      	movs	r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2102      	movs	r1, #2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 fd1b 	bl	8003834 <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e04:	f000 f808 	bl	8001e18 <Error_Handler>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3750      	adds	r7, #80	; 0x50
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <Error_Handler+0x8>

08001e22 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}

float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b089      	sub	sp, #36	; 0x24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e2e:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8001e32:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e80:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	dd03      	ble.n	8001f00 <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e00f      	b.n	8001f20 <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	d503      	bpl.n	8001f1c <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e001      	b.n	8001f20 <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8001f20:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f28:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d013      	beq.n	8001f5a <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	ee07 3a90 	vmov	s15, r3
}
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f000 fb82 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <TIM3_IRQHandler+0x10>)
 8002012:	f002 fcc1 	bl	8004998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000288 	.word	0x20000288

08002020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM4_IRQHandler+0x10>)
 8002026:	f002 fcb7 	bl	8004998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200002d4 	.word	0x200002d4

08002034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TACH_Pin);
 8002038:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800203c:	f001 f92e 	bl	800329c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002040:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002044:	f001 f92a 	bl	800329c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_kill>:

int _kill(int pid, int sig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002066:	f004 f879 	bl	800615c <__errno>
 800206a:	4603      	mov	r3, r0
 800206c:	2216      	movs	r2, #22
 800206e:	601a      	str	r2, [r3, #0]
	return -1;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_exit>:

void _exit (int status)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffe7 	bl	800205c <_kill>
	while (1) {}		/* Make sure we hang here */
 800208e:	e7fe      	b.n	800208e <_exit+0x12>

08002090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e00a      	b.n	80020b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020a2:	f3af 8000 	nop.w
 80020a6:	4601      	mov	r1, r0
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	60ba      	str	r2, [r7, #8]
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbf0      	blt.n	80020a2 <_read+0x12>
	}

return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e009      	b.n	80020f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	60ba      	str	r2, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dbf1      	blt.n	80020dc <_write+0x12>
	}
	return len;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_close>:

int _close(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	return -1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212a:	605a      	str	r2, [r3, #4]
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_isatty>:

int _isatty(int file)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	return 1;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f003 ffde 	bl	800615c <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20050000 	.word	0x20050000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	20000284 	.word	0x20000284
 80021d4:	20000408 	.word	0x20000408

080021d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221c:	463b      	mov	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <MX_TIM3_Init+0xf8>)
 8002232:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002236:	221b      	movs	r2, #27
 8002238:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <MX_TIM3_Init+0xf4>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002242:	2263      	movs	r2, #99	; 0x63
 8002244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <MX_TIM3_Init+0xf4>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002252:	4827      	ldr	r0, [pc, #156]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002254:	f002 f904 	bl	8004460 <HAL_TIM_Base_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800225e:	f7ff fddb 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226c:	4619      	mov	r1, r3
 800226e:	4820      	ldr	r0, [pc, #128]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002270:	f002 fdc6 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800227a:	f7ff fdcd 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800227e:	481c      	ldr	r0, [pc, #112]	; (80022f0 <MX_TIM3_Init+0xf4>)
 8002280:	f002 fa2e 	bl	80046e0 <HAL_TIM_PWM_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800228a:	f7ff fdc5 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4814      	ldr	r0, [pc, #80]	; (80022f0 <MX_TIM3_Init+0xf4>)
 800229e:	f003 fa5f 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022a8:	f7ff fdb6 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ac:	2360      	movs	r3, #96	; 0x60
 80022ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 39;
 80022b0:	2327      	movs	r3, #39	; 0x27
 80022b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	480b      	ldr	r0, [pc, #44]	; (80022f0 <MX_TIM3_Init+0xf4>)
 80022c4:	f002 fc88 	bl	8004bd8 <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022ce:	f7ff fda3 	bl	8001e18 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_TIM3_Init+0xf4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <MX_TIM3_Init+0xf4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0208 	bic.w	r2, r2, #8
 80022e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM3_Init+0xf4>)
 80022e4:	f000 f8e4 	bl	80024b0 <HAL_TIM_MspPostInit>

}
 80022e8:	bf00      	nop
 80022ea:	3738      	adds	r7, #56	; 0x38
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000288 	.word	0x20000288
 80022f4:	40000400 	.word	0x40000400

080022f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <MX_TIM4_Init+0x98>)
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <MX_TIM4_Init+0x9c>)
 800231a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_TIM4_Init+0x98>)
 800231e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002322:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_TIM4_Init+0x98>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <MX_TIM4_Init+0x98>)
 800232c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002330:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_TIM4_Init+0x98>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_TIM4_Init+0x98>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800233e:	4814      	ldr	r0, [pc, #80]	; (8002390 <MX_TIM4_Init+0x98>)
 8002340:	f002 f88e 	bl	8004460 <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800234a:	f7ff fd65 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4619      	mov	r1, r3
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <MX_TIM4_Init+0x98>)
 800235c:	f002 fd50 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002366:	f7ff fd57 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <MX_TIM4_Init+0x98>)
 8002378:	f003 f9f2 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002382:	f7ff fd49 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200002d4 	.word	0x200002d4
 8002394:	40000800 	.word	0x40000800

08002398 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_TIM6_Init+0x64>)
 80023aa:	4a15      	ldr	r2, [pc, #84]	; (8002400 <MX_TIM6_Init+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <MX_TIM6_Init+0x64>)
 80023b0:	2247      	movs	r2, #71	; 0x47
 80023b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_TIM6_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_TIM6_Init+0x64>)
 80023bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_TIM6_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <MX_TIM6_Init+0x64>)
 80023ca:	f002 f849 	bl	8004460 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80023d4:	f7ff fd20 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_TIM6_Init+0x64>)
 80023e6:	f003 f9bb 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80023f0:	f7ff fd12 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000320 	.word	0x20000320
 8002400:	40001000 	.word	0x40001000

08002404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <HAL_TIM_Base_MspInit+0x9c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d114      	bne.n	8002440 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	201d      	movs	r0, #29
 8002434:	f000 fd1d 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002438:	201d      	movs	r0, #29
 800243a:	f000 fd36 	bl	8002eaa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800243e:	e02a      	b.n	8002496 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <HAL_TIM_Base_MspInit+0xa4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d114      	bne.n	8002474 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	201e      	movs	r0, #30
 8002468:	f000 fd03 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800246c:	201e      	movs	r0, #30
 800246e:	f000 fd1c 	bl	8002eaa <HAL_NVIC_EnableIRQ>
}
 8002472:	e010      	b.n	8002496 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_TIM_Base_MspInit+0xa8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10b      	bne.n	8002496 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_TIM_Base_MspInit+0xa0>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40001000 	.word	0x40001000

080024b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_TIM_MspPostInit+0x64>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11b      	bne.n	800250a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_TIM_MspPostInit+0x68>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_TIM_MspPostInit+0x68>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_TIM_MspPostInit+0x68>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <HAL_TIM_MspPostInit+0x6c>)
 8002506:	f000 fceb 	bl	8002ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40000400 	.word	0x40000400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <MX_USART3_UART_Init+0x5c>)
 8002528:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800252c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002530:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002564:	f003 f9a8 	bl	80058b8 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800256e:	f7ff fc53 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000036c 	.word	0x2000036c
 800257c:	40004800 	.word	0x40004800

08002580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0aa      	sub	sp, #168	; 0xa8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	2284      	movs	r2, #132	; 0x84
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fe05 	bl	80061b0 <memset>
  if(uartHandle->Instance==USART3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_UART_MspInit+0xb4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d13c      	bne.n	800262a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fb5e 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025ca:	f7ff fc25 	bl	8001e18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_UART_MspInit+0xb8>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_UART_MspInit+0xb8>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_UART_MspInit+0xb8>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_UART_MspInit+0xb8>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a13      	ldr	r2, [pc, #76]	; (8002638 <HAL_UART_MspInit+0xb8>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_UART_MspInit+0xb8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002618:	2307      	movs	r3, #7
 800261a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002622:	4619      	mov	r1, r3
 8002624:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_UART_MspInit+0xbc>)
 8002626:	f000 fc5b 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800262a:	bf00      	nop
 800262c:	37a8      	adds	r7, #168	; 0xa8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40004800 	.word	0x40004800
 8002638:	40023800 	.word	0x40023800
 800263c:	40020c00 	.word	0x40020c00

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002646:	490e      	ldr	r1, [pc, #56]	; (8002680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800265c:	4c0b      	ldr	r4, [pc, #44]	; (800268c <LoopFillZerobss+0x26>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800266a:	f7ff fdb5 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266e:	f003 fd7b 	bl	8006168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7ff fac3 	bl	8001bfc <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002678:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002684:	0800afe4 	.word	0x0800afe4
  ldr r2, =_sbss
 8002688:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800268c:	20000408 	.word	0x20000408

08002690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC_IRQHandler>

08002692 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002696:	2003      	movs	r0, #3
 8002698:	f000 fbe0 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269c:	2000      	movs	r0, #0
 800269e:	f000 f805 	bl	80026ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a2:	f7ff fc65 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x54>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x58>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fbfb 	bl	8002ec6 <HAL_SYSTICK_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00e      	b.n	80026f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d80a      	bhi.n	80026f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f000 fbc3 	bl	8002e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <HAL_InitTick+0x5c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000030 	.word	0x20000030
 8002704:	20000038 	.word	0x20000038
 8002708:	20000034 	.word	0x20000034

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000038 	.word	0x20000038
 8002730:	200003f4 	.word	0x200003f4

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200003f4 	.word	0x200003f4

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002772:	bf00      	nop
 8002774:	f7ff ffde 	bl	8002734 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000038 	.word	0x20000038

08002794 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e031      	b.n	800280e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff f802 	bl	80017bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_Init+0x84>)
 80027d8:	4013      	ands	r3, r2
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f970 	bl	8002ac8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
 80027fe:	e001      	b.n	8002804 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	ffffeefd 	.word	0xffffeefd

0800281c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x1c>
 8002834:	2302      	movs	r3, #2
 8002836:	e136      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x28a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b09      	cmp	r3, #9
 8002846:	d93a      	bls.n	80028be <HAL_ADC_ConfigChannel+0xa2>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002850:	d035      	beq.n	80028be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68d9      	ldr	r1, [r3, #12]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	3b1e      	subs	r3, #30
 8002868:	2207      	movs	r2, #7
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	400a      	ands	r2, r1
 8002876:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a8d      	ldr	r2, [pc, #564]	; (8002ab4 <HAL_ADC_ConfigChannel+0x298>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10a      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	061a      	lsls	r2, r3, #24
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002896:	e035      	b.n	8002904 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68d9      	ldr	r1, [r3, #12]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4403      	add	r3, r0
 80028b0:	3b1e      	subs	r3, #30
 80028b2:	409a      	lsls	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028bc:	e022      	b.n	8002904 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	2207      	movs	r2, #7
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6919      	ldr	r1, [r3, #16]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4403      	add	r3, r0
 80028fa:	409a      	lsls	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d824      	bhi.n	8002956 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b05      	subs	r3, #5
 800291e:	221f      	movs	r2, #31
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43da      	mvns	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	400a      	ands	r2, r1
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b05      	subs	r3, #5
 8002948:	fa00 f203 	lsl.w	r2, r0, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
 8002954:	e04c      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d824      	bhi.n	80029a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3b23      	subs	r3, #35	; 0x23
 8002970:	221f      	movs	r2, #31
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	400a      	ands	r2, r1
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	3b23      	subs	r3, #35	; 0x23
 800299a:	fa00 f203 	lsl.w	r2, r0, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
 80029a6:	e023      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b41      	subs	r3, #65	; 0x41
 80029ba:	221f      	movs	r2, #31
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43da      	mvns	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	400a      	ands	r2, r1
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	3b41      	subs	r3, #65	; 0x41
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a30      	ldr	r2, [pc, #192]	; (8002ab8 <HAL_ADC_ConfigChannel+0x29c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10a      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1f4>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <HAL_ADC_ConfigChannel+0x29c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10f      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x21e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b12      	cmp	r3, #18
 8002a20:	d10b      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a22      	ldr	r2, [pc, #136]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_ADC_ConfigChannel+0x29c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12b      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x280>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_ADC_ConfigChannel+0x298>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x23a>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b11      	cmp	r3, #17
 8002a54:	d122      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_ADC_ConfigChannel+0x2a0>)
 8002a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_ADC_ConfigChannel+0x298>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d111      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0c9a      	lsrs	r2, r3, #18
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	10000012 	.word	0x10000012
 8002ab8:	40012000 	.word	0x40012000
 8002abc:	40012300 	.word	0x40012300
 8002ac0:	20000030 	.word	0x20000030
 8002ac4:	431bde83 	.word	0x431bde83

08002ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ad0:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <ADC_Init+0x1ec>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a77      	ldr	r2, [pc, #476]	; (8002cb4 <ADC_Init+0x1ec>)
 8002ad6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ada:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002adc:	4b75      	ldr	r3, [pc, #468]	; (8002cb4 <ADC_Init+0x1ec>)
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4973      	ldr	r1, [pc, #460]	; (8002cb4 <ADC_Init+0x1ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	021a      	lsls	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <ADC_Init+0x1f0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6899      	ldr	r1, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	e00f      	b.n	8002bc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0202 	bic.w	r2, r2, #2
 8002bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	005a      	lsls	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01b      	beq.n	8002c28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	035a      	lsls	r2, r3, #13
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	e007      	b.n	8002c38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	051a      	lsls	r2, r3, #20
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c7a:	025a      	lsls	r2, r3, #9
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	029a      	lsls	r2, r3, #10
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40012300 	.word	0x40012300
 8002cb8:	0f000001 	.word	0x0f000001

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <__NVIC_SetPriorityGrouping+0x40>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <__NVIC_SetPriorityGrouping+0x40>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	05fa0000 	.word	0x05fa0000

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	; (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e28:	d301      	bcc.n	8002e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <SysTick_Config+0x40>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e36:	210f      	movs	r1, #15
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f7ff ff8e 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SysTick_Config+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Config+0x40>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff29 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e84:	f7ff ff3e 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7ff ff8e 	bl	8002db0 <NVIC_EncodePriority>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff5d 	bl	8002d5c <__NVIC_SetPriority>
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff31 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ffa2 	bl	8002e18 <SysTick_Config>
 8002ed4:	4603      	mov	r3, r0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e175      	b.n	80031ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8164 	bne.w	80031e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d005      	beq.n	8002f36 <HAL_GPIO_Init+0x56>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d130      	bne.n	8002f98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	2203      	movs	r2, #3
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 0201 	and.w	r2, r3, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d017      	beq.n	8002fd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d123      	bne.n	8003028 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3208      	adds	r2, #8
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80be 	beq.w	80031e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_GPIO_Init+0x324>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a65      	ldr	r2, [pc, #404]	; (8003204 <HAL_GPIO_Init+0x324>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_GPIO_Init+0x324>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003082:	4a61      	ldr	r2, [pc, #388]	; (8003208 <HAL_GPIO_Init+0x328>)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_GPIO_Init+0x32c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d037      	beq.n	800311e <HAL_GPIO_Init+0x23e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <HAL_GPIO_Init+0x330>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_GPIO_Init+0x23a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a56      	ldr	r2, [pc, #344]	; (8003214 <HAL_GPIO_Init+0x334>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x236>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a55      	ldr	r2, [pc, #340]	; (8003218 <HAL_GPIO_Init+0x338>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x232>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a54      	ldr	r2, [pc, #336]	; (800321c <HAL_GPIO_Init+0x33c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x22e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a53      	ldr	r2, [pc, #332]	; (8003220 <HAL_GPIO_Init+0x340>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x22a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_GPIO_Init+0x344>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x226>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a51      	ldr	r2, [pc, #324]	; (8003228 <HAL_GPIO_Init+0x348>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x222>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_GPIO_Init+0x34c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x21e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4f      	ldr	r2, [pc, #316]	; (8003230 <HAL_GPIO_Init+0x350>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x21a>
 80030f6:	2309      	movs	r3, #9
 80030f8:	e012      	b.n	8003120 <HAL_GPIO_Init+0x240>
 80030fa:	230a      	movs	r3, #10
 80030fc:	e010      	b.n	8003120 <HAL_GPIO_Init+0x240>
 80030fe:	2308      	movs	r3, #8
 8003100:	e00e      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003102:	2307      	movs	r3, #7
 8003104:	e00c      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003106:	2306      	movs	r3, #6
 8003108:	e00a      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800310a:	2305      	movs	r3, #5
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800310e:	2304      	movs	r3, #4
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800311e:	2300      	movs	r3, #0
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_GPIO_Init+0x328>)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <HAL_GPIO_Init+0x354>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a34      	ldr	r2, [pc, #208]	; (8003234 <HAL_GPIO_Init+0x354>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b32      	ldr	r3, [pc, #200]	; (8003234 <HAL_GPIO_Init+0x354>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a29      	ldr	r2, [pc, #164]	; (8003234 <HAL_GPIO_Init+0x354>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_GPIO_Init+0x354>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <HAL_GPIO_Init+0x354>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_GPIO_Init+0x354>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_GPIO_Init+0x354>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	f67f ae86 	bls.w	8002f00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40022000 	.word	0x40022000
 8003230:	40022400 	.word	0x40022400
 8003234:	40013c00 	.word	0x40013c00

08003238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	887b      	ldrh	r3, [r7, #2]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e001      	b.n	800325a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003284:	e003      	b.n	800328e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fc34 	bl	8001b28 <HAL_GPIO_EXTI_Callback>
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40007000 	.word	0x40007000

080032ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e291      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8087 	beq.w	800341e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003310:	4b96      	ldr	r3, [pc, #600]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00c      	beq.n	8003336 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331c:	4b93      	ldr	r3, [pc, #588]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d112      	bne.n	800334e <HAL_RCC_OscConfig+0x62>
 8003328:	4b90      	ldr	r3, [pc, #576]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003334:	d10b      	bne.n	800334e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003336:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d06c      	beq.n	800341c <HAL_RCC_OscConfig+0x130>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d168      	bne.n	800341c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e26b      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x7a>
 8003358:	4b84      	ldr	r3, [pc, #528]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a83      	ldr	r2, [pc, #524]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e02e      	b.n	80033c4 <HAL_RCC_OscConfig+0xd8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x9c>
 800336e:	4b7f      	ldr	r3, [pc, #508]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7e      	ldr	r2, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b7c      	ldr	r3, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7b      	ldr	r2, [pc, #492]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xd8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0xc0>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a72      	ldr	r2, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xd8>
 80033ac:	4b6f      	ldr	r3, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b6c      	ldr	r3, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7ff f9b2 	bl	8002734 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7ff f9ae 	bl	8002734 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e21f      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xe8>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7ff f99e 	bl	8002734 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7ff f99a 	bl	8002734 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e20b      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	4b57      	ldr	r3, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x110>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d069      	beq.n	80034fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342a:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d11c      	bne.n	800347c <HAL_RCC_OscConfig+0x190>
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_RCC_OscConfig+0x17a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1df      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	493d      	ldr	r1, [pc, #244]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	e040      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d023      	beq.n	80034cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a38      	ldr	r2, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7ff f950 	bl	8002734 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003498:	f7ff f94c 	bl	8002734 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1bd      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4929      	ldr	r1, [pc, #164]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
 80034ca:	e018      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7ff f92c 	bl	8002734 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7ff f928 	bl	8002734 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e199      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d038      	beq.n	800357c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	4a15      	ldr	r2, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7ff f909 	bl	8002734 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003526:	f7ff f905 	bl	8002734 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e176      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x23a>
 8003544:	e01a      	b.n	800357c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7ff f8ef 	bl	8002734 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355a:	f7ff f8eb 	bl	8002734 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d903      	bls.n	8003570 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e15c      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
 800356c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ee      	bne.n	800355a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a4 	beq.w	80036d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a87      	ldr	r2, [pc, #540]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d118      	bne.n	80035f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035be:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7e      	ldr	r2, [pc, #504]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7ff f8b3 	bl	8002734 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7ff f8af 	bl	8002734 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	; 0x64
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e120      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x31a>
 80035f8:	4b6f      	ldr	r3, [pc, #444]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a6e      	ldr	r2, [pc, #440]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
 8003604:	e02d      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x33c>
 800360e:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a69      	ldr	r2, [pc, #420]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	4b67      	ldr	r3, [pc, #412]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a66      	ldr	r2, [pc, #408]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	e01c      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b05      	cmp	r3, #5
 800362e:	d10c      	bne.n	800364a <HAL_RCC_OscConfig+0x35e>
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a60      	ldr	r2, [pc, #384]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	4b5e      	ldr	r3, [pc, #376]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a5d      	ldr	r2, [pc, #372]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	e00b      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a5a      	ldr	r2, [pc, #360]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a57      	ldr	r2, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d015      	beq.n	8003696 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7ff f863 	bl	8002734 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7ff f85f 	bl	8002734 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0ce      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ee      	beq.n	8003672 <HAL_RCC_OscConfig+0x386>
 8003694:	e014      	b.n	80036c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7ff f84d 	bl	8002734 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7ff f849 	bl	8002734 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ee      	bne.n	800369e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a3b      	ldr	r2, [pc, #236]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a4 	beq.w	8003824 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036dc:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d06b      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d149      	bne.n	8003784 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80036f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7ff f81a 	bl	8002734 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7ff f816 	bl	8002734 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e087      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	4313      	orrs	r3, r2
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800374a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800374e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe ffea 	bl	8002734 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe ffe6 	bl	8002734 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e057      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x478>
 8003782:	e04f      	b.n	8003824 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe ffd0 	bl	8002734 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe ffcc 	bl	8002734 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e03d      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x4ac>
 80037b6:	e035      	b.n	8003824 <HAL_RCC_OscConfig+0x538>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_OscConfig+0x544>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d028      	beq.n	8003820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d121      	bne.n	8003820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11a      	bne.n	8003820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d111      	bne.n	8003820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d0      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	4965      	ldr	r1, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e073      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06b      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4936      	ldr	r1, [pc, #216]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fe ff04 	bl	8002734 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fe ff00 	bl	8002734 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e053      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d210      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020f 	bic.w	r2, r3, #15
 800396e:	4922      	ldr	r1, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1d4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fe60 	bl	80026ac <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	0800ab14 	.word	0x0800ab14
 8003a04:	20000030 	.word	0x20000030
 8003a08:	20000034 	.word	0x20000034

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b094      	sub	sp, #80	; 0x50
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	647b      	str	r3, [r7, #68]	; 0x44
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80e1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e0db      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b73      	ldr	r3, [pc, #460]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a44:	e0db      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a90:	0150      	lsls	r0, r2, #5
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4621      	mov	r1, r4
 8003a98:	1a51      	subs	r1, r2, r1
 8003a9a:	6139      	str	r1, [r7, #16]
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	018b      	lsls	r3, r1, #6
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aba:	4651      	mov	r1, sl
 8003abc:	018a      	lsls	r2, r1, #6
 8003abe:	4651      	mov	r1, sl
 8003ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eb18 0303 	adds.w	r3, r8, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	462b      	mov	r3, r5
 8003aec:	eb49 0303 	adc.w	r3, r9, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003afe:	4629      	mov	r1, r5
 8003b00:	024b      	lsls	r3, r1, #9
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b08:	4621      	mov	r1, r4
 8003b0a:	024a      	lsls	r2, r1, #9
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b1c:	f7fd f8d4 	bl	8000cc8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	e058      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	2200      	movs	r2, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	4611      	mov	r1, r2
 8003b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b62:	4649      	mov	r1, r9
 8003b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b80:	eb63 050b 	sbc.w	r5, r3, fp
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb45 0303 	adc.w	r3, r5, r3
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	61fa      	str	r2, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	f7fd f87a 	bl	8000cc8 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3750      	adds	r7, #80	; 0x50
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	007a1200 	.word	0x007a1200

08003c18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000030 	.word	0x20000030

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	0800ab24 	.word	0x0800ab24

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800ab24 	.word	0x0800ab24

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ca8:	4b69      	ldr	r3, [pc, #420]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a68      	ldr	r2, [pc, #416]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cb2:	6093      	str	r3, [r2, #8]
 8003cb4:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	4964      	ldr	r1, [pc, #400]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d017      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cda:	4b5d      	ldr	r3, [pc, #372]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	4959      	ldr	r1, [pc, #356]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d16:	4b4e      	ldr	r3, [pc, #312]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	494a      	ldr	r1, [pc, #296]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 808b 	beq.w	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d70:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d7c:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fe fcd4 	bl	8002734 <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fe fcd0 	bl	8002734 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e357      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003da2:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dae:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d035      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d02e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d114      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fc98 	bl	8002734 <HAL_GetTick>
 8003e04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e08:	f7fe fc94 	bl	8002734 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e319      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ee      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e36:	d111      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	4901      	ldr	r1, [pc, #4]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000
 8003e58:	0ffffcff 	.word	0x0ffffcff
 8003e5c:	4baa      	ldr	r3, [pc, #680]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4aa9      	ldr	r2, [pc, #676]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e66:	6093      	str	r3, [r2, #8]
 8003e68:	4ba7      	ldr	r3, [pc, #668]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	49a4      	ldr	r1, [pc, #656]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e86:	4ba0      	ldr	r3, [pc, #640]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8c:	4a9e      	ldr	r2, [pc, #632]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e96:	4b9c      	ldr	r3, [pc, #624]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	4999      	ldr	r1, [pc, #612]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb4:	4b94      	ldr	r3, [pc, #592]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec2:	4991      	ldr	r1, [pc, #580]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed6:	4b8c      	ldr	r3, [pc, #560]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee4:	4988      	ldr	r1, [pc, #544]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef8:	4b83      	ldr	r3, [pc, #524]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f06:	4980      	ldr	r1, [pc, #512]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f1a:	4b7b      	ldr	r3, [pc, #492]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4977      	ldr	r1, [pc, #476]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3c:	4b72      	ldr	r3, [pc, #456]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	496f      	ldr	r1, [pc, #444]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5e:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f023 020c 	bic.w	r2, r3, #12
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6c:	4966      	ldr	r1, [pc, #408]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f80:	4b61      	ldr	r3, [pc, #388]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	495e      	ldr	r1, [pc, #376]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa2:	4b59      	ldr	r3, [pc, #356]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb0:	4955      	ldr	r1, [pc, #340]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fc4:	4b50      	ldr	r3, [pc, #320]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	494d      	ldr	r1, [pc, #308]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fe6:	4b48      	ldr	r3, [pc, #288]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	4944      	ldr	r1, [pc, #272]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004008:	4b3f      	ldr	r3, [pc, #252]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	493c      	ldr	r1, [pc, #240]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	4933      	ldr	r1, [pc, #204]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800404c:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405a:	492b      	ldr	r1, [pc, #172]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d011      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407c:	4922      	ldr	r1, [pc, #136]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408c:	d101      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800408e:	2301      	movs	r3, #1
 8004090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800409e:	2301      	movs	r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	4912      	ldr	r1, [pc, #72]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e0:	4909      	ldr	r1, [pc, #36]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d006      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80d9 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040fc:	4b02      	ldr	r3, [pc, #8]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a01      	ldr	r2, [pc, #4]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004106:	e001      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004108:	40023800 	.word	0x40023800
 800410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7fe fb11 	bl	8002734 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004116:	f7fe fb0d 	bl	8002734 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b64      	cmp	r3, #100	; 0x64
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e194      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004128:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d021      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004148:	4b64      	ldr	r3, [pc, #400]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004156:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415c:	0e1b      	lsrs	r3, r3, #24
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	019a      	lsls	r2, r3, #6
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	071b      	lsls	r3, r3, #28
 800417c:	4957      	ldr	r1, [pc, #348]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02e      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ae:	d129      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041b0:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	0c1b      	lsrs	r3, r3, #16
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c4:	0f1b      	lsrs	r3, r3, #28
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	019a      	lsls	r2, r3, #6
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	071b      	lsls	r3, r3, #28
 80041e4:	493d      	ldr	r1, [pc, #244]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041ec:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f2:	f023 021f 	bic.w	r2, r3, #31
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4937      	ldr	r1, [pc, #220]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01d      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004210:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	0e1b      	lsrs	r3, r3, #24
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800421e:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004224:	0f1b      	lsrs	r3, r3, #28
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	019a      	lsls	r2, r3, #6
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	431a      	orrs	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	071b      	lsls	r3, r3, #28
 8004244:	4925      	ldr	r1, [pc, #148]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	019a      	lsls	r2, r3, #6
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	071b      	lsls	r3, r3, #28
 8004274:	4919      	ldr	r1, [pc, #100]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fe fa54 	bl	8002734 <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004290:	f7fe fa50 	bl	8002734 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0d7      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f040 80cd 	bne.w	8004450 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c2:	f7fe fa37 	bl	8002734 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042ca:	f7fe fa33 	bl	8002734 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b64      	cmp	r3, #100	; 0x64
 80042d6:	d903      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0ba      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80042dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042e0:	4b5e      	ldr	r3, [pc, #376]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ec:	d0ed      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02e      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d12a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004324:	4b4d      	ldr	r3, [pc, #308]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	0f1b      	lsrs	r3, r3, #28
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	019a      	lsls	r2, r3, #6
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	071b      	lsls	r3, r3, #28
 800434a:	4944      	ldr	r1, [pc, #272]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004352:	4b42      	ldr	r3, [pc, #264]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	493d      	ldr	r1, [pc, #244]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d022      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004380:	d11d      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	0e1b      	lsrs	r3, r3, #24
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	0f1b      	lsrs	r3, r3, #28
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	019a      	lsls	r2, r3, #6
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	4929      	ldr	r1, [pc, #164]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d028      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	0e1b      	lsrs	r3, r3, #24
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	019a      	lsls	r2, r3, #6
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	071b      	lsls	r3, r3, #28
 80043fe:	4917      	ldr	r1, [pc, #92]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4911      	ldr	r1, [pc, #68]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0e      	ldr	r2, [pc, #56]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004428:	f7fe f984 	bl	8002734 <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004430:	f7fe f980 	bl	8002734 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e007      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444e:	d1ef      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e049      	b.n	8004506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd ffbc 	bl	8002404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fda0 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04c      	b.n	80045c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <HAL_TIM_Base_Start+0xc0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d022      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d01d      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <HAL_TIM_Base_Start+0xc4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d018      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_TIM_Base_Start+0xc8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_TIM_Base_Start+0xcc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <HAL_TIM_Base_Start+0xd0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_TIM_Base_Start+0xd4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_Base_Start+0x70>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_TIM_Base_Start+0xd8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d115      	bne.n	80045ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_TIM_Base_Start+0xdc>)
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d015      	beq.n	80045be <HAL_TIM_Base_Start+0xae>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d011      	beq.n	80045be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e008      	b.n	80045be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e000      	b.n	80045c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40010400 	.word	0x40010400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40001800 	.word	0x40001800
 80045ec:	00010007 	.word	0x00010007

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e054      	b.n	80046b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d01d      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_TIM_Base_Start_IT+0xdc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d115      	bne.n	800469c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_TIM_Base_Start_IT+0xec>)
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d015      	beq.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d011      	beq.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	e008      	b.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40001800 	.word	0x40001800
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e049      	b.n	8004786 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f841 	bl	800478e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fc60 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x24>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e03c      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x3e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e02f      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start+0x58>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e022      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d109      	bne.n	8004816 <HAL_TIM_PWM_Start+0x72>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e015      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start+0x8c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e008      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e092      	b.n	8004970 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xb6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004858:	e023      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xc6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	e01b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xd6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004878:	e013      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xe6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b10      	cmp	r3, #16
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xf6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004898:	e003      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 ff32 	bl	8005714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a30      	ldr	r2, [pc, #192]	; (8004978 <HAL_TIM_PWM_Start+0x1d4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x120>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2f      	ldr	r2, [pc, #188]	; (800497c <HAL_TIM_PWM_Start+0x1d8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_PWM_Start+0x124>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_TIM_PWM_Start+0x126>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a25      	ldr	r2, [pc, #148]	; (8004978 <HAL_TIM_PWM_Start+0x1d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d01d      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a22      	ldr	r2, [pc, #136]	; (8004980 <HAL_TIM_PWM_Start+0x1dc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a20      	ldr	r2, [pc, #128]	; (8004984 <HAL_TIM_PWM_Start+0x1e0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <HAL_TIM_PWM_Start+0x1e4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <HAL_TIM_PWM_Start+0x1d8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1b      	ldr	r2, [pc, #108]	; (800498c <HAL_TIM_PWM_Start+0x1e8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIM_PWM_Start+0x1ec>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d115      	bne.n	800495a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <HAL_TIM_PWM_Start+0x1f0>)
 8004936:	4013      	ands	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d015      	beq.n	800496c <HAL_TIM_PWM_Start+0x1c8>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004946:	d011      	beq.n	800496c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	e008      	b.n	800496c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e000      	b.n	800496e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40010000 	.word	0x40010000
 800497c:	40010400 	.word	0x40010400
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0202 	mvn.w	r2, #2
 80049c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fae4 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fad6 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fae7 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0204 	mvn.w	r2, #4
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 faba 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 faac 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fabd 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0208 	mvn.w	r2, #8
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2204      	movs	r2, #4
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa90 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa82 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa93 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d122      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0210 	mvn.w	r2, #16
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa66 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa58 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fa69 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d10e      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0201 	mvn.w	r2, #1
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd f81c 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d10e      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d107      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fea4 	bl	8005890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fe97 	bl	80058a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fa17 	bl	8004fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0220 	mvn.w	r2, #32
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fe57 	bl	800587c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0ff      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b14      	cmp	r3, #20
 8004c02:	f200 80f0 	bhi.w	8004de6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004de7 	.word	0x08004de7
 8004c14:	08004de7 	.word	0x08004de7
 8004c18:	08004de7 	.word	0x08004de7
 8004c1c:	08004ca1 	.word	0x08004ca1
 8004c20:	08004de7 	.word	0x08004de7
 8004c24:	08004de7 	.word	0x08004de7
 8004c28:	08004de7 	.word	0x08004de7
 8004c2c:	08004ce3 	.word	0x08004ce3
 8004c30:	08004de7 	.word	0x08004de7
 8004c34:	08004de7 	.word	0x08004de7
 8004c38:	08004de7 	.word	0x08004de7
 8004c3c:	08004d23 	.word	0x08004d23
 8004c40:	08004de7 	.word	0x08004de7
 8004c44:	08004de7 	.word	0x08004de7
 8004c48:	08004de7 	.word	0x08004de7
 8004c4c:	08004d65 	.word	0x08004d65
 8004c50:	08004de7 	.word	0x08004de7
 8004c54:	08004de7 	.word	0x08004de7
 8004c58:	08004de7 	.word	0x08004de7
 8004c5c:	08004da5 	.word	0x08004da5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fa5c 	bl	8005124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0204 	bic.w	r2, r2, #4
 8004c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6999      	ldr	r1, [r3, #24]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	619a      	str	r2, [r3, #24]
      break;
 8004c9e:	e0a5      	b.n	8004dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 faae 	bl	8005208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6999      	ldr	r1, [r3, #24]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	619a      	str	r2, [r3, #24]
      break;
 8004ce0:	e084      	b.n	8004dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fb05 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0208 	orr.w	r2, r2, #8
 8004cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0204 	bic.w	r2, r2, #4
 8004d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69d9      	ldr	r1, [r3, #28]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	61da      	str	r2, [r3, #28]
      break;
 8004d20:	e064      	b.n	8004dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fb5b 	bl	80053e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69d9      	ldr	r1, [r3, #28]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	021a      	lsls	r2, r3, #8
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	61da      	str	r2, [r3, #28]
      break;
 8004d62:	e043      	b.n	8004dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fb92 	bl	8005494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004da2:	e023      	b.n	8004dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fbc4 	bl	8005538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004de4:	e002      	b.n	8004dec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop

08004e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_ConfigClockSource+0x1c>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e0b4      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x186>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	4b56      	ldr	r3, [pc, #344]	; (8004f90 <HAL_TIM_ConfigClockSource+0x190>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e54:	d03e      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5a:	f200 8087 	bhi.w	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e62:	f000 8086 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x172>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	d87f      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b70      	cmp	r3, #112	; 0x70
 8004e6e:	d01a      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8004e70:	2b70      	cmp	r3, #112	; 0x70
 8004e72:	d87b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b60      	cmp	r3, #96	; 0x60
 8004e76:	d050      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x11a>
 8004e78:	2b60      	cmp	r3, #96	; 0x60
 8004e7a:	d877      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d03c      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0xfa>
 8004e80:	2b50      	cmp	r3, #80	; 0x50
 8004e82:	d873      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d058      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x13a>
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d86f      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d064      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	2b30      	cmp	r3, #48	; 0x30
 8004e92:	d86b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d060      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d867      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05c      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d05a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	e062      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6899      	ldr	r1, [r3, #8]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f000 fc0d 	bl	80056d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	609a      	str	r2, [r3, #8]
      break;
 8004ed2:	e04f      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f000 fbf6 	bl	80056d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef6:	609a      	str	r2, [r3, #8]
      break;
 8004ef8:	e03c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 fb6a 	bl	80055e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2150      	movs	r1, #80	; 0x50
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fbc3 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f18:	e02c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 fb89 	bl	800563e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2160      	movs	r1, #96	; 0x60
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fbb3 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f38:	e01c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f000 fb4a 	bl	80055e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2140      	movs	r1, #64	; 0x40
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fba3 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f58:	e00c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f000 fb9a 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f6a:	e003      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e000      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	fffeff88 	.word	0xfffeff88

08004f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a40      	ldr	r2, [pc, #256]	; (80050f8 <TIM_Base_SetConfig+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3d      	ldr	r2, [pc, #244]	; (80050fc <TIM_Base_SetConfig+0x118>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a3c      	ldr	r2, [pc, #240]	; (8005100 <TIM_Base_SetConfig+0x11c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3b      	ldr	r2, [pc, #236]	; (8005104 <TIM_Base_SetConfig+0x120>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3a      	ldr	r2, [pc, #232]	; (8005108 <TIM_Base_SetConfig+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2f      	ldr	r2, [pc, #188]	; (80050f8 <TIM_Base_SetConfig+0x114>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d027      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <TIM_Base_SetConfig+0x118>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d023      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <TIM_Base_SetConfig+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <TIM_Base_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a29      	ldr	r2, [pc, #164]	; (8005108 <TIM_Base_SetConfig+0x124>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d017      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a28      	ldr	r2, [pc, #160]	; (800510c <TIM_Base_SetConfig+0x128>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a27      	ldr	r2, [pc, #156]	; (8005110 <TIM_Base_SetConfig+0x12c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_Base_SetConfig+0x130>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_Base_SetConfig+0x134>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a24      	ldr	r2, [pc, #144]	; (800511c <TIM_Base_SetConfig+0x138>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <TIM_Base_SetConfig+0x13c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <TIM_Base_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0xf8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <TIM_Base_SetConfig+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d103      	bne.n	80050e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	615a      	str	r2, [r3, #20]
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40010400 	.word	0x40010400
 800510c:	40014000 	.word	0x40014000
 8005110:	40014400 	.word	0x40014400
 8005114:	40014800 	.word	0x40014800
 8005118:	40001800 	.word	0x40001800
 800511c:	40001c00 	.word	0x40001c00
 8005120:	40002000 	.word	0x40002000

08005124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f023 0201 	bic.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <TIM_OC1_SetConfig+0xd8>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <TIM_OC1_SetConfig+0xdc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_OC1_SetConfig+0x64>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a20      	ldr	r2, [pc, #128]	; (8005204 <TIM_OC1_SetConfig+0xe0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10c      	bne.n	80051a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0308 	bic.w	r3, r3, #8
 800518e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <TIM_OC1_SetConfig+0xdc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC1_SetConfig+0x8e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <TIM_OC1_SetConfig+0xe0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	fffeff8f 	.word	0xfffeff8f
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400

08005208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <TIM_OC2_SetConfig+0xe4>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0320 	bic.w	r3, r3, #32
 8005252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <TIM_OC2_SetConfig+0xe8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0x68>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <TIM_OC2_SetConfig+0xec>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10d      	bne.n	800528c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <TIM_OC2_SetConfig+0xe8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC2_SetConfig+0x94>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <TIM_OC2_SetConfig+0xec>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d113      	bne.n	80052c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	feff8fff 	.word	0xfeff8fff
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <TIM_OC3_SetConfig+0xe0>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_OC3_SetConfig+0xe4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC3_SetConfig+0x66>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_OC3_SetConfig+0xe8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10d      	bne.n	800537a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC3_SetConfig+0xe4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_OC3_SetConfig+0x92>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC3_SetConfig+0xe8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d113      	bne.n	80053b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	fffeff8f 	.word	0xfffeff8f
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <TIM_OC4_SetConfig+0xa4>)
 8005410:	4013      	ands	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800542e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	031b      	lsls	r3, r3, #12
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <TIM_OC4_SetConfig+0xa8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC4_SetConfig+0x68>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <TIM_OC4_SetConfig+0xac>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d109      	bne.n	8005460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	feff8fff 	.word	0xfeff8fff
 800548c:	40010000 	.word	0x40010000
 8005490:	40010400 	.word	0x40010400

08005494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4b1b      	ldr	r3, [pc, #108]	; (800552c <TIM_OC5_SetConfig+0x98>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a12      	ldr	r2, [pc, #72]	; (8005530 <TIM_OC5_SetConfig+0x9c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_OC5_SetConfig+0x5e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a11      	ldr	r2, [pc, #68]	; (8005534 <TIM_OC5_SetConfig+0xa0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d109      	bne.n	8005506 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	fffeff8f 	.word	0xfffeff8f
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <TIM_OC6_SetConfig+0x9c>)
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800557a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	051b      	lsls	r3, r3, #20
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <TIM_OC6_SetConfig+0xa0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_OC6_SetConfig+0x60>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a12      	ldr	r2, [pc, #72]	; (80055dc <TIM_OC6_SetConfig+0xa4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	feff8fff 	.word	0xfeff8fff
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 030a 	bic.w	r3, r3, #10
 800561c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0210 	bic.w	r2, r3, #16
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2201      	movs	r2, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e06d      	b.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a30      	ldr	r2, [pc, #192]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2f      	ldr	r2, [pc, #188]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d108      	bne.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a20      	ldr	r2, [pc, #128]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d022      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ea:	d01d      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d018      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d10c      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40010000 	.word	0x40010000
 8005864:	40010400 	.word	0x40010400
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40014000 	.word	0x40014000
 8005878:	40001800 	.word	0x40001800

0800587c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e040      	b.n	800594c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc fe50 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	; 0x24
 80058e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f82c 	bl	8005954 <UART_SetConfig>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e022      	b.n	800594c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fa84 	bl	8005e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb0b 	bl	8005f60 <UART_CheckIdleState>
 800594a:	4603      	mov	r3, r0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4ba6      	ldr	r3, [pc, #664]	; (8005c18 <UART_SetConfig+0x2c4>)
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a94      	ldr	r2, [pc, #592]	; (8005c1c <UART_SetConfig+0x2c8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d120      	bne.n	8005a12 <UART_SetConfig+0xbe>
 80059d0:	4b93      	ldr	r3, [pc, #588]	; (8005c20 <UART_SetConfig+0x2cc>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d816      	bhi.n	8005a0c <UART_SetConfig+0xb8>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0x90>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a01 	.word	0x08005a01
 80059ec:	080059fb 	.word	0x080059fb
 80059f0:	08005a07 	.word	0x08005a07
 80059f4:	2301      	movs	r3, #1
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e150      	b.n	8005c9c <UART_SetConfig+0x348>
 80059fa:	2302      	movs	r3, #2
 80059fc:	77fb      	strb	r3, [r7, #31]
 80059fe:	e14d      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a00:	2304      	movs	r3, #4
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e14a      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a06:	2308      	movs	r3, #8
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e147      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e144      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a83      	ldr	r2, [pc, #524]	; (8005c24 <UART_SetConfig+0x2d0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d132      	bne.n	8005a82 <UART_SetConfig+0x12e>
 8005a1c:	4b80      	ldr	r3, [pc, #512]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d828      	bhi.n	8005a7c <UART_SetConfig+0x128>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0xdc>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a65 	.word	0x08005a65
 8005a34:	08005a7d 	.word	0x08005a7d
 8005a38:	08005a7d 	.word	0x08005a7d
 8005a3c:	08005a7d 	.word	0x08005a7d
 8005a40:	08005a71 	.word	0x08005a71
 8005a44:	08005a7d 	.word	0x08005a7d
 8005a48:	08005a7d 	.word	0x08005a7d
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a6b 	.word	0x08005a6b
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a7d 	.word	0x08005a7d
 8005a5c:	08005a7d 	.word	0x08005a7d
 8005a60:	08005a77 	.word	0x08005a77
 8005a64:	2300      	movs	r3, #0
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e118      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e115      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e112      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e10f      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e10c      	b.n	8005c9c <UART_SetConfig+0x348>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a68      	ldr	r2, [pc, #416]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d120      	bne.n	8005ace <UART_SetConfig+0x17a>
 8005a8c:	4b64      	ldr	r3, [pc, #400]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d013      	beq.n	8005ac2 <UART_SetConfig+0x16e>
 8005a9a:	2b30      	cmp	r3, #48	; 0x30
 8005a9c:	d814      	bhi.n	8005ac8 <UART_SetConfig+0x174>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d009      	beq.n	8005ab6 <UART_SetConfig+0x162>
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d810      	bhi.n	8005ac8 <UART_SetConfig+0x174>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <UART_SetConfig+0x15c>
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d006      	beq.n	8005abc <UART_SetConfig+0x168>
 8005aae:	e00b      	b.n	8005ac8 <UART_SetConfig+0x174>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e0f2      	b.n	8005c9c <UART_SetConfig+0x348>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e0ef      	b.n	8005c9c <UART_SetConfig+0x348>
 8005abc:	2304      	movs	r3, #4
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e0ec      	b.n	8005c9c <UART_SetConfig+0x348>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e0e9      	b.n	8005c9c <UART_SetConfig+0x348>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e0e6      	b.n	8005c9c <UART_SetConfig+0x348>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a56      	ldr	r2, [pc, #344]	; (8005c2c <UART_SetConfig+0x2d8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d120      	bne.n	8005b1a <UART_SetConfig+0x1c6>
 8005ad8:	4b51      	ldr	r3, [pc, #324]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae4:	d013      	beq.n	8005b0e <UART_SetConfig+0x1ba>
 8005ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae8:	d814      	bhi.n	8005b14 <UART_SetConfig+0x1c0>
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d009      	beq.n	8005b02 <UART_SetConfig+0x1ae>
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d810      	bhi.n	8005b14 <UART_SetConfig+0x1c0>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <UART_SetConfig+0x1a8>
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d006      	beq.n	8005b08 <UART_SetConfig+0x1b4>
 8005afa:	e00b      	b.n	8005b14 <UART_SetConfig+0x1c0>
 8005afc:	2300      	movs	r3, #0
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e0cc      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b02:	2302      	movs	r3, #2
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e0c9      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e0c6      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e0c3      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b14:	2310      	movs	r3, #16
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e0c0      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a44      	ldr	r2, [pc, #272]	; (8005c30 <UART_SetConfig+0x2dc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d125      	bne.n	8005b70 <UART_SetConfig+0x21c>
 8005b24:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b32:	d017      	beq.n	8005b64 <UART_SetConfig+0x210>
 8005b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b38:	d817      	bhi.n	8005b6a <UART_SetConfig+0x216>
 8005b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3e:	d00b      	beq.n	8005b58 <UART_SetConfig+0x204>
 8005b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b44:	d811      	bhi.n	8005b6a <UART_SetConfig+0x216>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <UART_SetConfig+0x1fe>
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d006      	beq.n	8005b5e <UART_SetConfig+0x20a>
 8005b50:	e00b      	b.n	8005b6a <UART_SetConfig+0x216>
 8005b52:	2300      	movs	r3, #0
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	e0a1      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e09e      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b5e:	2304      	movs	r3, #4
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e09b      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b64:	2308      	movs	r3, #8
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e098      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b6a:	2310      	movs	r3, #16
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e095      	b.n	8005c9c <UART_SetConfig+0x348>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <UART_SetConfig+0x2e0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d125      	bne.n	8005bc6 <UART_SetConfig+0x272>
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b88:	d017      	beq.n	8005bba <UART_SetConfig+0x266>
 8005b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b8e:	d817      	bhi.n	8005bc0 <UART_SetConfig+0x26c>
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d00b      	beq.n	8005bae <UART_SetConfig+0x25a>
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9a:	d811      	bhi.n	8005bc0 <UART_SetConfig+0x26c>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <UART_SetConfig+0x254>
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d006      	beq.n	8005bb4 <UART_SetConfig+0x260>
 8005ba6:	e00b      	b.n	8005bc0 <UART_SetConfig+0x26c>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e076      	b.n	8005c9c <UART_SetConfig+0x348>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e073      	b.n	8005c9c <UART_SetConfig+0x348>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e070      	b.n	8005c9c <UART_SetConfig+0x348>
 8005bba:	2308      	movs	r3, #8
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e06d      	b.n	8005c9c <UART_SetConfig+0x348>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e06a      	b.n	8005c9c <UART_SetConfig+0x348>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <UART_SetConfig+0x2e4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d138      	bne.n	8005c42 <UART_SetConfig+0x2ee>
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bde:	d017      	beq.n	8005c10 <UART_SetConfig+0x2bc>
 8005be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be4:	d82a      	bhi.n	8005c3c <UART_SetConfig+0x2e8>
 8005be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bea:	d00b      	beq.n	8005c04 <UART_SetConfig+0x2b0>
 8005bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf0:	d824      	bhi.n	8005c3c <UART_SetConfig+0x2e8>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <UART_SetConfig+0x2aa>
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d006      	beq.n	8005c0a <UART_SetConfig+0x2b6>
 8005bfc:	e01e      	b.n	8005c3c <UART_SetConfig+0x2e8>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e04b      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c04:	2302      	movs	r3, #2
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e048      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e045      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c10:	2308      	movs	r3, #8
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e042      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c16:	bf00      	nop
 8005c18:	efff69f3 	.word	0xefff69f3
 8005c1c:	40011000 	.word	0x40011000
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40004400 	.word	0x40004400
 8005c28:	40004800 	.word	0x40004800
 8005c2c:	40004c00 	.word	0x40004c00
 8005c30:	40005000 	.word	0x40005000
 8005c34:	40011400 	.word	0x40011400
 8005c38:	40007800 	.word	0x40007800
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e02c      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a72      	ldr	r2, [pc, #456]	; (8005e10 <UART_SetConfig+0x4bc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d125      	bne.n	8005c98 <UART_SetConfig+0x344>
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <UART_SetConfig+0x4c0>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c5a:	d017      	beq.n	8005c8c <UART_SetConfig+0x338>
 8005c5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c60:	d817      	bhi.n	8005c92 <UART_SetConfig+0x33e>
 8005c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c66:	d00b      	beq.n	8005c80 <UART_SetConfig+0x32c>
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6c:	d811      	bhi.n	8005c92 <UART_SetConfig+0x33e>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <UART_SetConfig+0x326>
 8005c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c76:	d006      	beq.n	8005c86 <UART_SetConfig+0x332>
 8005c78:	e00b      	b.n	8005c92 <UART_SetConfig+0x33e>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e00d      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c80:	2302      	movs	r3, #2
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e00a      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c86:	2304      	movs	r3, #4
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e007      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e004      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c92:	2310      	movs	r3, #16
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e001      	b.n	8005c9c <UART_SetConfig+0x348>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca4:	d15b      	bne.n	8005d5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ca6:	7ffb      	ldrb	r3, [r7, #31]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d828      	bhi.n	8005cfe <UART_SetConfig+0x3aa>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x360>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	08005cff 	.word	0x08005cff
 8005cc4:	08005cef 	.word	0x08005cef
 8005cc8:	08005cff 	.word	0x08005cff
 8005ccc:	08005cff 	.word	0x08005cff
 8005cd0:	08005cff 	.word	0x08005cff
 8005cd4:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd8:	f7fd ffaa 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005cdc:	61b8      	str	r0, [r7, #24]
        break;
 8005cde:	e013      	b.n	8005d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fd ffba 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	61b8      	str	r0, [r7, #24]
        break;
 8005ce6:	e00f      	b.n	8005d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <UART_SetConfig+0x4c4>)
 8005cea:	61bb      	str	r3, [r7, #24]
        break;
 8005cec:	e00c      	b.n	8005d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fd fe8d 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8005cf2:	61b8      	str	r0, [r7, #24]
        break;
 8005cf4:	e008      	b.n	8005d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	61bb      	str	r3, [r7, #24]
        break;
 8005cfc:	e004      	b.n	8005d08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	77bb      	strb	r3, [r7, #30]
        break;
 8005d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d074      	beq.n	8005df8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	441a      	add	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d916      	bls.n	8005d58 <UART_SetConfig+0x404>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d212      	bcs.n	8005d58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f023 030f 	bic.w	r3, r3, #15
 8005d3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	89fa      	ldrh	r2, [r7, #14]
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	e04f      	b.n	8005df8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	77bb      	strb	r3, [r7, #30]
 8005d5c:	e04c      	b.n	8005df8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d828      	bhi.n	8005db6 <UART_SetConfig+0x462>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0x418>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005db7 	.word	0x08005db7
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005db7 	.word	0x08005db7
 8005d88:	08005db7 	.word	0x08005db7
 8005d8c:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fd ff4e 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005d94:	61b8      	str	r0, [r7, #24]
        break;
 8005d96:	e013      	b.n	8005dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fd ff5e 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	61b8      	str	r0, [r7, #24]
        break;
 8005d9e:	e00f      	b.n	8005dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <UART_SetConfig+0x4c4>)
 8005da2:	61bb      	str	r3, [r7, #24]
        break;
 8005da4:	e00c      	b.n	8005dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7fd fe31 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8005daa:	61b8      	str	r0, [r7, #24]
        break;
 8005dac:	e008      	b.n	8005dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db2:	61bb      	str	r3, [r7, #24]
        break;
 8005db4:	e004      	b.n	8005dc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8005dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d018      	beq.n	8005df8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085a      	lsrs	r2, r3, #1
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	441a      	add	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d909      	bls.n	8005df4 <UART_SetConfig+0x4a0>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d205      	bcs.n	8005df4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60da      	str	r2, [r3, #12]
 8005df2:	e001      	b.n	8005df8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40007c00 	.word	0x40007c00
 8005e14:	40023800 	.word	0x40023800
 8005e18:	00f42400 	.word	0x00f42400

08005e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1a:	d10a      	bne.n	8005f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f70:	f7fc fbe0 	bl	8002734 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d10e      	bne.n	8005fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f81b 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e011      	b.n	8005fc6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b09c      	sub	sp, #112	; 0x70
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fde:	e0a7      	b.n	8006130 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	f000 80a3 	beq.w	8006130 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fc fba3 	bl	8002734 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d13f      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006014:	667b      	str	r3, [r7, #100]	; 0x64
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006020:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006024:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800602c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e6      	bne.n	8006000 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	663b      	str	r3, [r7, #96]	; 0x60
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006052:	64ba      	str	r2, [r7, #72]	; 0x48
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e5      	bne.n	8006032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e068      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d050      	beq.n	8006130 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d148      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
 80060c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e6      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3308      	adds	r3, #8
 80060f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060fa:	623a      	str	r2, [r7, #32]
 80060fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	69f9      	ldr	r1, [r7, #28]
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	61bb      	str	r3, [r7, #24]
   return(result);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e5      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e010      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	429a      	cmp	r2, r3
 800614c:	f43f af48 	beq.w	8005fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3770      	adds	r7, #112	; 0x70
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <__errno>:
 800615c:	4b01      	ldr	r3, [pc, #4]	; (8006164 <__errno+0x8>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000003c 	.word	0x2000003c

08006168 <__libc_init_array>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4d0d      	ldr	r5, [pc, #52]	; (80061a0 <__libc_init_array+0x38>)
 800616c:	4c0d      	ldr	r4, [pc, #52]	; (80061a4 <__libc_init_array+0x3c>)
 800616e:	1b64      	subs	r4, r4, r5
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	2600      	movs	r6, #0
 8006174:	42a6      	cmp	r6, r4
 8006176:	d109      	bne.n	800618c <__libc_init_array+0x24>
 8006178:	4d0b      	ldr	r5, [pc, #44]	; (80061a8 <__libc_init_array+0x40>)
 800617a:	4c0c      	ldr	r4, [pc, #48]	; (80061ac <__libc_init_array+0x44>)
 800617c:	f004 fca4 	bl	800aac8 <_init>
 8006180:	1b64      	subs	r4, r4, r5
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	2600      	movs	r6, #0
 8006186:	42a6      	cmp	r6, r4
 8006188:	d105      	bne.n	8006196 <__libc_init_array+0x2e>
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006190:	4798      	blx	r3
 8006192:	3601      	adds	r6, #1
 8006194:	e7ee      	b.n	8006174 <__libc_init_array+0xc>
 8006196:	f855 3b04 	ldr.w	r3, [r5], #4
 800619a:	4798      	blx	r3
 800619c:	3601      	adds	r6, #1
 800619e:	e7f2      	b.n	8006186 <__libc_init_array+0x1e>
 80061a0:	0800afdc 	.word	0x0800afdc
 80061a4:	0800afdc 	.word	0x0800afdc
 80061a8:	0800afdc 	.word	0x0800afdc
 80061ac:	0800afe0 	.word	0x0800afe0

080061b0 <memset>:
 80061b0:	4402      	add	r2, r0
 80061b2:	4603      	mov	r3, r0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d100      	bne.n	80061ba <memset+0xa>
 80061b8:	4770      	bx	lr
 80061ba:	f803 1b01 	strb.w	r1, [r3], #1
 80061be:	e7f9      	b.n	80061b4 <memset+0x4>

080061c0 <__cvt>:
 80061c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	ec55 4b10 	vmov	r4, r5, d0
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	460e      	mov	r6, r1
 80061cc:	4619      	mov	r1, r3
 80061ce:	462b      	mov	r3, r5
 80061d0:	bfbb      	ittet	lt
 80061d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061d6:	461d      	movlt	r5, r3
 80061d8:	2300      	movge	r3, #0
 80061da:	232d      	movlt	r3, #45	; 0x2d
 80061dc:	700b      	strb	r3, [r1, #0]
 80061de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061e4:	4691      	mov	r9, r2
 80061e6:	f023 0820 	bic.w	r8, r3, #32
 80061ea:	bfbc      	itt	lt
 80061ec:	4622      	movlt	r2, r4
 80061ee:	4614      	movlt	r4, r2
 80061f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f4:	d005      	beq.n	8006202 <__cvt+0x42>
 80061f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061fa:	d100      	bne.n	80061fe <__cvt+0x3e>
 80061fc:	3601      	adds	r6, #1
 80061fe:	2102      	movs	r1, #2
 8006200:	e000      	b.n	8006204 <__cvt+0x44>
 8006202:	2103      	movs	r1, #3
 8006204:	ab03      	add	r3, sp, #12
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	ab02      	add	r3, sp, #8
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	ec45 4b10 	vmov	d0, r4, r5
 8006210:	4653      	mov	r3, sl
 8006212:	4632      	mov	r2, r6
 8006214:	f001 fdc0 	bl	8007d98 <_dtoa_r>
 8006218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800621c:	4607      	mov	r7, r0
 800621e:	d102      	bne.n	8006226 <__cvt+0x66>
 8006220:	f019 0f01 	tst.w	r9, #1
 8006224:	d022      	beq.n	800626c <__cvt+0xac>
 8006226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800622a:	eb07 0906 	add.w	r9, r7, r6
 800622e:	d110      	bne.n	8006252 <__cvt+0x92>
 8006230:	783b      	ldrb	r3, [r7, #0]
 8006232:	2b30      	cmp	r3, #48	; 0x30
 8006234:	d10a      	bne.n	800624c <__cvt+0x8c>
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa fc63 	bl	8000b08 <__aeabi_dcmpeq>
 8006242:	b918      	cbnz	r0, 800624c <__cvt+0x8c>
 8006244:	f1c6 0601 	rsb	r6, r6, #1
 8006248:	f8ca 6000 	str.w	r6, [sl]
 800624c:	f8da 3000 	ldr.w	r3, [sl]
 8006250:	4499      	add	r9, r3
 8006252:	2200      	movs	r2, #0
 8006254:	2300      	movs	r3, #0
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa fc55 	bl	8000b08 <__aeabi_dcmpeq>
 800625e:	b108      	cbz	r0, 8006264 <__cvt+0xa4>
 8006260:	f8cd 900c 	str.w	r9, [sp, #12]
 8006264:	2230      	movs	r2, #48	; 0x30
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	454b      	cmp	r3, r9
 800626a:	d307      	bcc.n	800627c <__cvt+0xbc>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006270:	1bdb      	subs	r3, r3, r7
 8006272:	4638      	mov	r0, r7
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	b004      	add	sp, #16
 8006278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	9103      	str	r1, [sp, #12]
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e7f0      	b.n	8006266 <__cvt+0xa6>

08006284 <__exponent>:
 8006284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006286:	4603      	mov	r3, r0
 8006288:	2900      	cmp	r1, #0
 800628a:	bfb8      	it	lt
 800628c:	4249      	neglt	r1, r1
 800628e:	f803 2b02 	strb.w	r2, [r3], #2
 8006292:	bfb4      	ite	lt
 8006294:	222d      	movlt	r2, #45	; 0x2d
 8006296:	222b      	movge	r2, #43	; 0x2b
 8006298:	2909      	cmp	r1, #9
 800629a:	7042      	strb	r2, [r0, #1]
 800629c:	dd2a      	ble.n	80062f4 <__exponent+0x70>
 800629e:	f10d 0407 	add.w	r4, sp, #7
 80062a2:	46a4      	mov	ip, r4
 80062a4:	270a      	movs	r7, #10
 80062a6:	46a6      	mov	lr, r4
 80062a8:	460a      	mov	r2, r1
 80062aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80062ae:	fb07 1516 	mls	r5, r7, r6, r1
 80062b2:	3530      	adds	r5, #48	; 0x30
 80062b4:	2a63      	cmp	r2, #99	; 0x63
 80062b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80062ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062be:	4631      	mov	r1, r6
 80062c0:	dcf1      	bgt.n	80062a6 <__exponent+0x22>
 80062c2:	3130      	adds	r1, #48	; 0x30
 80062c4:	f1ae 0502 	sub.w	r5, lr, #2
 80062c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062cc:	1c44      	adds	r4, r0, #1
 80062ce:	4629      	mov	r1, r5
 80062d0:	4561      	cmp	r1, ip
 80062d2:	d30a      	bcc.n	80062ea <__exponent+0x66>
 80062d4:	f10d 0209 	add.w	r2, sp, #9
 80062d8:	eba2 020e 	sub.w	r2, r2, lr
 80062dc:	4565      	cmp	r5, ip
 80062de:	bf88      	it	hi
 80062e0:	2200      	movhi	r2, #0
 80062e2:	4413      	add	r3, r2
 80062e4:	1a18      	subs	r0, r3, r0
 80062e6:	b003      	add	sp, #12
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062f2:	e7ed      	b.n	80062d0 <__exponent+0x4c>
 80062f4:	2330      	movs	r3, #48	; 0x30
 80062f6:	3130      	adds	r1, #48	; 0x30
 80062f8:	7083      	strb	r3, [r0, #2]
 80062fa:	70c1      	strb	r1, [r0, #3]
 80062fc:	1d03      	adds	r3, r0, #4
 80062fe:	e7f1      	b.n	80062e4 <__exponent+0x60>

08006300 <_printf_float>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	ed2d 8b02 	vpush	{d8}
 8006308:	b08d      	sub	sp, #52	; 0x34
 800630a:	460c      	mov	r4, r1
 800630c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006310:	4616      	mov	r6, r2
 8006312:	461f      	mov	r7, r3
 8006314:	4605      	mov	r5, r0
 8006316:	f002 fe9d 	bl	8009054 <_localeconv_r>
 800631a:	f8d0 a000 	ldr.w	sl, [r0]
 800631e:	4650      	mov	r0, sl
 8006320:	f7f9 ff76 	bl	8000210 <strlen>
 8006324:	2300      	movs	r3, #0
 8006326:	930a      	str	r3, [sp, #40]	; 0x28
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	f8d8 3000 	ldr.w	r3, [r8]
 8006330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006334:	3307      	adds	r3, #7
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	f103 0208 	add.w	r2, r3, #8
 800633e:	f8c8 2000 	str.w	r2, [r8]
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800634a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800634e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006352:	9307      	str	r3, [sp, #28]
 8006354:	f8cd 8018 	str.w	r8, [sp, #24]
 8006358:	ee08 0a10 	vmov	s16, r0
 800635c:	4b9f      	ldr	r3, [pc, #636]	; (80065dc <_printf_float+0x2dc>)
 800635e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	f7fa fc01 	bl	8000b6c <__aeabi_dcmpun>
 800636a:	bb88      	cbnz	r0, 80063d0 <_printf_float+0xd0>
 800636c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006370:	4b9a      	ldr	r3, [pc, #616]	; (80065dc <_printf_float+0x2dc>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	f7fa fbdb 	bl	8000b30 <__aeabi_dcmple>
 800637a:	bb48      	cbnz	r0, 80063d0 <_printf_float+0xd0>
 800637c:	2200      	movs	r2, #0
 800637e:	2300      	movs	r3, #0
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7fa fbca 	bl	8000b1c <__aeabi_dcmplt>
 8006388:	b110      	cbz	r0, 8006390 <_printf_float+0x90>
 800638a:	232d      	movs	r3, #45	; 0x2d
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006390:	4b93      	ldr	r3, [pc, #588]	; (80065e0 <_printf_float+0x2e0>)
 8006392:	4894      	ldr	r0, [pc, #592]	; (80065e4 <_printf_float+0x2e4>)
 8006394:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006398:	bf94      	ite	ls
 800639a:	4698      	movls	r8, r3
 800639c:	4680      	movhi	r8, r0
 800639e:	2303      	movs	r3, #3
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	9b05      	ldr	r3, [sp, #20]
 80063a4:	f023 0204 	bic.w	r2, r3, #4
 80063a8:	6022      	str	r2, [r4, #0]
 80063aa:	f04f 0900 	mov.w	r9, #0
 80063ae:	9700      	str	r7, [sp, #0]
 80063b0:	4633      	mov	r3, r6
 80063b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f9d8 	bl	800676c <_printf_common>
 80063bc:	3001      	adds	r0, #1
 80063be:	f040 8090 	bne.w	80064e2 <_printf_float+0x1e2>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	b00d      	add	sp, #52	; 0x34
 80063c8:	ecbd 8b02 	vpop	{d8}
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	4649      	mov	r1, r9
 80063d8:	f7fa fbc8 	bl	8000b6c <__aeabi_dcmpun>
 80063dc:	b140      	cbz	r0, 80063f0 <_printf_float+0xf0>
 80063de:	464b      	mov	r3, r9
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bfbc      	itt	lt
 80063e4:	232d      	movlt	r3, #45	; 0x2d
 80063e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ea:	487f      	ldr	r0, [pc, #508]	; (80065e8 <_printf_float+0x2e8>)
 80063ec:	4b7f      	ldr	r3, [pc, #508]	; (80065ec <_printf_float+0x2ec>)
 80063ee:	e7d1      	b.n	8006394 <_printf_float+0x94>
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063f6:	9206      	str	r2, [sp, #24]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	d13f      	bne.n	800647c <_printf_float+0x17c>
 80063fc:	2306      	movs	r3, #6
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	6861      	ldr	r1, [r4, #4]
 8006404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006408:	2300      	movs	r3, #0
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	ab0a      	add	r3, sp, #40	; 0x28
 800640e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006412:	ab09      	add	r3, sp, #36	; 0x24
 8006414:	ec49 8b10 	vmov	d0, r8, r9
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	6022      	str	r2, [r4, #0]
 800641c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006420:	4628      	mov	r0, r5
 8006422:	f7ff fecd 	bl	80061c0 <__cvt>
 8006426:	9b06      	ldr	r3, [sp, #24]
 8006428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800642a:	2b47      	cmp	r3, #71	; 0x47
 800642c:	4680      	mov	r8, r0
 800642e:	d108      	bne.n	8006442 <_printf_float+0x142>
 8006430:	1cc8      	adds	r0, r1, #3
 8006432:	db02      	blt.n	800643a <_printf_float+0x13a>
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	4299      	cmp	r1, r3
 8006438:	dd41      	ble.n	80064be <_printf_float+0x1be>
 800643a:	f1ab 0b02 	sub.w	fp, fp, #2
 800643e:	fa5f fb8b 	uxtb.w	fp, fp
 8006442:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006446:	d820      	bhi.n	800648a <_printf_float+0x18a>
 8006448:	3901      	subs	r1, #1
 800644a:	465a      	mov	r2, fp
 800644c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006450:	9109      	str	r1, [sp, #36]	; 0x24
 8006452:	f7ff ff17 	bl	8006284 <__exponent>
 8006456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006458:	1813      	adds	r3, r2, r0
 800645a:	2a01      	cmp	r2, #1
 800645c:	4681      	mov	r9, r0
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	dc02      	bgt.n	8006468 <_printf_float+0x168>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	07d2      	lsls	r2, r2, #31
 8006466:	d501      	bpl.n	800646c <_printf_float+0x16c>
 8006468:	3301      	adds	r3, #1
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006470:	2b00      	cmp	r3, #0
 8006472:	d09c      	beq.n	80063ae <_printf_float+0xae>
 8006474:	232d      	movs	r3, #45	; 0x2d
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647a:	e798      	b.n	80063ae <_printf_float+0xae>
 800647c:	9a06      	ldr	r2, [sp, #24]
 800647e:	2a47      	cmp	r2, #71	; 0x47
 8006480:	d1be      	bne.n	8006400 <_printf_float+0x100>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1bc      	bne.n	8006400 <_printf_float+0x100>
 8006486:	2301      	movs	r3, #1
 8006488:	e7b9      	b.n	80063fe <_printf_float+0xfe>
 800648a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800648e:	d118      	bne.n	80064c2 <_printf_float+0x1c2>
 8006490:	2900      	cmp	r1, #0
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	dd0b      	ble.n	80064ae <_printf_float+0x1ae>
 8006496:	6121      	str	r1, [r4, #16]
 8006498:	b913      	cbnz	r3, 80064a0 <_printf_float+0x1a0>
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	07d0      	lsls	r0, r2, #31
 800649e:	d502      	bpl.n	80064a6 <_printf_float+0x1a6>
 80064a0:	3301      	adds	r3, #1
 80064a2:	440b      	add	r3, r1
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80064a8:	f04f 0900 	mov.w	r9, #0
 80064ac:	e7de      	b.n	800646c <_printf_float+0x16c>
 80064ae:	b913      	cbnz	r3, 80064b6 <_printf_float+0x1b6>
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	07d2      	lsls	r2, r2, #31
 80064b4:	d501      	bpl.n	80064ba <_printf_float+0x1ba>
 80064b6:	3302      	adds	r3, #2
 80064b8:	e7f4      	b.n	80064a4 <_printf_float+0x1a4>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7f2      	b.n	80064a4 <_printf_float+0x1a4>
 80064be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c4:	4299      	cmp	r1, r3
 80064c6:	db05      	blt.n	80064d4 <_printf_float+0x1d4>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	6121      	str	r1, [r4, #16]
 80064cc:	07d8      	lsls	r0, r3, #31
 80064ce:	d5ea      	bpl.n	80064a6 <_printf_float+0x1a6>
 80064d0:	1c4b      	adds	r3, r1, #1
 80064d2:	e7e7      	b.n	80064a4 <_printf_float+0x1a4>
 80064d4:	2900      	cmp	r1, #0
 80064d6:	bfd4      	ite	le
 80064d8:	f1c1 0202 	rsble	r2, r1, #2
 80064dc:	2201      	movgt	r2, #1
 80064de:	4413      	add	r3, r2
 80064e0:	e7e0      	b.n	80064a4 <_printf_float+0x1a4>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	055a      	lsls	r2, r3, #21
 80064e6:	d407      	bmi.n	80064f8 <_printf_float+0x1f8>
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	4642      	mov	r2, r8
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	d12c      	bne.n	8006550 <_printf_float+0x250>
 80064f6:	e764      	b.n	80063c2 <_printf_float+0xc2>
 80064f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064fc:	f240 80e0 	bls.w	80066c0 <_printf_float+0x3c0>
 8006500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	f7fa fafe 	bl	8000b08 <__aeabi_dcmpeq>
 800650c:	2800      	cmp	r0, #0
 800650e:	d034      	beq.n	800657a <_printf_float+0x27a>
 8006510:	4a37      	ldr	r2, [pc, #220]	; (80065f0 <_printf_float+0x2f0>)
 8006512:	2301      	movs	r3, #1
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f af51 	beq.w	80063c2 <_printf_float+0xc2>
 8006520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006524:	429a      	cmp	r2, r3
 8006526:	db02      	blt.n	800652e <_printf_float+0x22e>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07d8      	lsls	r0, r3, #31
 800652c:	d510      	bpl.n	8006550 <_printf_float+0x250>
 800652e:	ee18 3a10 	vmov	r3, s16
 8006532:	4652      	mov	r2, sl
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f af41 	beq.w	80063c2 <_printf_float+0xc2>
 8006540:	f04f 0800 	mov.w	r8, #0
 8006544:	f104 091a 	add.w	r9, r4, #26
 8006548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654a:	3b01      	subs	r3, #1
 800654c:	4543      	cmp	r3, r8
 800654e:	dc09      	bgt.n	8006564 <_printf_float+0x264>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	f100 8105 	bmi.w	8006762 <_printf_float+0x462>
 8006558:	68e0      	ldr	r0, [r4, #12]
 800655a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800655c:	4298      	cmp	r0, r3
 800655e:	bfb8      	it	lt
 8006560:	4618      	movlt	r0, r3
 8006562:	e730      	b.n	80063c6 <_printf_float+0xc6>
 8006564:	2301      	movs	r3, #1
 8006566:	464a      	mov	r2, r9
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af27 	beq.w	80063c2 <_printf_float+0xc2>
 8006574:	f108 0801 	add.w	r8, r8, #1
 8006578:	e7e6      	b.n	8006548 <_printf_float+0x248>
 800657a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	dc39      	bgt.n	80065f4 <_printf_float+0x2f4>
 8006580:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <_printf_float+0x2f0>)
 8006582:	2301      	movs	r3, #1
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f af19 	beq.w	80063c2 <_printf_float+0xc2>
 8006590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006594:	4313      	orrs	r3, r2
 8006596:	d102      	bne.n	800659e <_printf_float+0x29e>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d5d8      	bpl.n	8006550 <_printf_float+0x250>
 800659e:	ee18 3a10 	vmov	r3, s16
 80065a2:	4652      	mov	r2, sl
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f af09 	beq.w	80063c2 <_printf_float+0xc2>
 80065b0:	f04f 0900 	mov.w	r9, #0
 80065b4:	f104 0a1a 	add.w	sl, r4, #26
 80065b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ba:	425b      	negs	r3, r3
 80065bc:	454b      	cmp	r3, r9
 80065be:	dc01      	bgt.n	80065c4 <_printf_float+0x2c4>
 80065c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c2:	e792      	b.n	80064ea <_printf_float+0x1ea>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4652      	mov	r2, sl
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f aef7 	beq.w	80063c2 <_printf_float+0xc2>
 80065d4:	f109 0901 	add.w	r9, r9, #1
 80065d8:	e7ee      	b.n	80065b8 <_printf_float+0x2b8>
 80065da:	bf00      	nop
 80065dc:	7fefffff 	.word	0x7fefffff
 80065e0:	0800ab30 	.word	0x0800ab30
 80065e4:	0800ab34 	.word	0x0800ab34
 80065e8:	0800ab3c 	.word	0x0800ab3c
 80065ec:	0800ab38 	.word	0x0800ab38
 80065f0:	0800ab40 	.word	0x0800ab40
 80065f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f8:	429a      	cmp	r2, r3
 80065fa:	bfa8      	it	ge
 80065fc:	461a      	movge	r2, r3
 80065fe:	2a00      	cmp	r2, #0
 8006600:	4691      	mov	r9, r2
 8006602:	dc37      	bgt.n	8006674 <_printf_float+0x374>
 8006604:	f04f 0b00 	mov.w	fp, #0
 8006608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800660c:	f104 021a 	add.w	r2, r4, #26
 8006610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	eba3 0309 	sub.w	r3, r3, r9
 8006618:	455b      	cmp	r3, fp
 800661a:	dc33      	bgt.n	8006684 <_printf_float+0x384>
 800661c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006620:	429a      	cmp	r2, r3
 8006622:	db3b      	blt.n	800669c <_printf_float+0x39c>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	07da      	lsls	r2, r3, #31
 8006628:	d438      	bmi.n	800669c <_printf_float+0x39c>
 800662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662c:	9a05      	ldr	r2, [sp, #20]
 800662e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006630:	1a9a      	subs	r2, r3, r2
 8006632:	eba3 0901 	sub.w	r9, r3, r1
 8006636:	4591      	cmp	r9, r2
 8006638:	bfa8      	it	ge
 800663a:	4691      	movge	r9, r2
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	dc35      	bgt.n	80066ae <_printf_float+0x3ae>
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800664a:	f104 0a1a 	add.w	sl, r4, #26
 800664e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	eba3 0309 	sub.w	r3, r3, r9
 8006658:	4543      	cmp	r3, r8
 800665a:	f77f af79 	ble.w	8006550 <_printf_float+0x250>
 800665e:	2301      	movs	r3, #1
 8006660:	4652      	mov	r2, sl
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f aeaa 	beq.w	80063c2 <_printf_float+0xc2>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	e7ec      	b.n	800664e <_printf_float+0x34e>
 8006674:	4613      	mov	r3, r2
 8006676:	4631      	mov	r1, r6
 8006678:	4642      	mov	r2, r8
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	d1c0      	bne.n	8006604 <_printf_float+0x304>
 8006682:	e69e      	b.n	80063c2 <_printf_float+0xc2>
 8006684:	2301      	movs	r3, #1
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	9205      	str	r2, [sp, #20]
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f ae97 	beq.w	80063c2 <_printf_float+0xc2>
 8006694:	9a05      	ldr	r2, [sp, #20]
 8006696:	f10b 0b01 	add.w	fp, fp, #1
 800669a:	e7b9      	b.n	8006610 <_printf_float+0x310>
 800669c:	ee18 3a10 	vmov	r3, s16
 80066a0:	4652      	mov	r2, sl
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	d1be      	bne.n	800662a <_printf_float+0x32a>
 80066ac:	e689      	b.n	80063c2 <_printf_float+0xc2>
 80066ae:	9a05      	ldr	r2, [sp, #20]
 80066b0:	464b      	mov	r3, r9
 80066b2:	4442      	add	r2, r8
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	d1c1      	bne.n	8006642 <_printf_float+0x342>
 80066be:	e680      	b.n	80063c2 <_printf_float+0xc2>
 80066c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	dc01      	bgt.n	80066ca <_printf_float+0x3ca>
 80066c6:	07db      	lsls	r3, r3, #31
 80066c8:	d538      	bpl.n	800673c <_printf_float+0x43c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4642      	mov	r2, r8
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	f43f ae74 	beq.w	80063c2 <_printf_float+0xc2>
 80066da:	ee18 3a10 	vmov	r3, s16
 80066de:	4652      	mov	r2, sl
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	47b8      	blx	r7
 80066e6:	3001      	adds	r0, #1
 80066e8:	f43f ae6b 	beq.w	80063c2 <_printf_float+0xc2>
 80066ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	f7fa fa08 	bl	8000b08 <__aeabi_dcmpeq>
 80066f8:	b9d8      	cbnz	r0, 8006732 <_printf_float+0x432>
 80066fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fc:	f108 0201 	add.w	r2, r8, #1
 8006700:	3b01      	subs	r3, #1
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	d10e      	bne.n	800672a <_printf_float+0x42a>
 800670c:	e659      	b.n	80063c2 <_printf_float+0xc2>
 800670e:	2301      	movs	r3, #1
 8006710:	4652      	mov	r2, sl
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f ae52 	beq.w	80063c2 <_printf_float+0xc2>
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	4543      	cmp	r3, r8
 8006728:	dcf1      	bgt.n	800670e <_printf_float+0x40e>
 800672a:	464b      	mov	r3, r9
 800672c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006730:	e6dc      	b.n	80064ec <_printf_float+0x1ec>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	f104 0a1a 	add.w	sl, r4, #26
 800673a:	e7f2      	b.n	8006722 <_printf_float+0x422>
 800673c:	2301      	movs	r3, #1
 800673e:	4642      	mov	r2, r8
 8006740:	e7df      	b.n	8006702 <_printf_float+0x402>
 8006742:	2301      	movs	r3, #1
 8006744:	464a      	mov	r2, r9
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f ae38 	beq.w	80063c2 <_printf_float+0xc2>
 8006752:	f108 0801 	add.w	r8, r8, #1
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	4543      	cmp	r3, r8
 800675e:	dcf0      	bgt.n	8006742 <_printf_float+0x442>
 8006760:	e6fa      	b.n	8006558 <_printf_float+0x258>
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	f104 0919 	add.w	r9, r4, #25
 800676a:	e7f4      	b.n	8006756 <_printf_float+0x456>

0800676c <_printf_common>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	4616      	mov	r6, r2
 8006772:	4699      	mov	r9, r3
 8006774:	688a      	ldr	r2, [r1, #8]
 8006776:	690b      	ldr	r3, [r1, #16]
 8006778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800677c:	4293      	cmp	r3, r2
 800677e:	bfb8      	it	lt
 8006780:	4613      	movlt	r3, r2
 8006782:	6033      	str	r3, [r6, #0]
 8006784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006788:	4607      	mov	r7, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b10a      	cbz	r2, 8006792 <_printf_common+0x26>
 800678e:	3301      	adds	r3, #1
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	0699      	lsls	r1, r3, #26
 8006796:	bf42      	ittt	mi
 8006798:	6833      	ldrmi	r3, [r6, #0]
 800679a:	3302      	addmi	r3, #2
 800679c:	6033      	strmi	r3, [r6, #0]
 800679e:	6825      	ldr	r5, [r4, #0]
 80067a0:	f015 0506 	ands.w	r5, r5, #6
 80067a4:	d106      	bne.n	80067b4 <_printf_common+0x48>
 80067a6:	f104 0a19 	add.w	sl, r4, #25
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	6832      	ldr	r2, [r6, #0]
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	42ab      	cmp	r3, r5
 80067b2:	dc26      	bgt.n	8006802 <_printf_common+0x96>
 80067b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067b8:	1e13      	subs	r3, r2, #0
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	bf18      	it	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	0692      	lsls	r2, r2, #26
 80067c2:	d42b      	bmi.n	800681c <_printf_common+0xb0>
 80067c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067c8:	4649      	mov	r1, r9
 80067ca:	4638      	mov	r0, r7
 80067cc:	47c0      	blx	r8
 80067ce:	3001      	adds	r0, #1
 80067d0:	d01e      	beq.n	8006810 <_printf_common+0xa4>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	68e5      	ldr	r5, [r4, #12]
 80067d6:	6832      	ldr	r2, [r6, #0]
 80067d8:	f003 0306 	and.w	r3, r3, #6
 80067dc:	2b04      	cmp	r3, #4
 80067de:	bf08      	it	eq
 80067e0:	1aad      	subeq	r5, r5, r2
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	6922      	ldr	r2, [r4, #16]
 80067e6:	bf0c      	ite	eq
 80067e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067ec:	2500      	movne	r5, #0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	bfc4      	itt	gt
 80067f2:	1a9b      	subgt	r3, r3, r2
 80067f4:	18ed      	addgt	r5, r5, r3
 80067f6:	2600      	movs	r6, #0
 80067f8:	341a      	adds	r4, #26
 80067fa:	42b5      	cmp	r5, r6
 80067fc:	d11a      	bne.n	8006834 <_printf_common+0xc8>
 80067fe:	2000      	movs	r0, #0
 8006800:	e008      	b.n	8006814 <_printf_common+0xa8>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4649      	mov	r1, r9
 8006808:	4638      	mov	r0, r7
 800680a:	47c0      	blx	r8
 800680c:	3001      	adds	r0, #1
 800680e:	d103      	bne.n	8006818 <_printf_common+0xac>
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006818:	3501      	adds	r5, #1
 800681a:	e7c6      	b.n	80067aa <_printf_common+0x3e>
 800681c:	18e1      	adds	r1, r4, r3
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	2030      	movs	r0, #48	; 0x30
 8006822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006826:	4422      	add	r2, r4
 8006828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800682c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006830:	3302      	adds	r3, #2
 8006832:	e7c7      	b.n	80067c4 <_printf_common+0x58>
 8006834:	2301      	movs	r3, #1
 8006836:	4622      	mov	r2, r4
 8006838:	4649      	mov	r1, r9
 800683a:	4638      	mov	r0, r7
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d0e6      	beq.n	8006810 <_printf_common+0xa4>
 8006842:	3601      	adds	r6, #1
 8006844:	e7d9      	b.n	80067fa <_printf_common+0x8e>
	...

08006848 <_printf_i>:
 8006848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	7e0f      	ldrb	r7, [r1, #24]
 800684e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006850:	2f78      	cmp	r7, #120	; 0x78
 8006852:	4691      	mov	r9, r2
 8006854:	4680      	mov	r8, r0
 8006856:	460c      	mov	r4, r1
 8006858:	469a      	mov	sl, r3
 800685a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800685e:	d807      	bhi.n	8006870 <_printf_i+0x28>
 8006860:	2f62      	cmp	r7, #98	; 0x62
 8006862:	d80a      	bhi.n	800687a <_printf_i+0x32>
 8006864:	2f00      	cmp	r7, #0
 8006866:	f000 80d8 	beq.w	8006a1a <_printf_i+0x1d2>
 800686a:	2f58      	cmp	r7, #88	; 0x58
 800686c:	f000 80a3 	beq.w	80069b6 <_printf_i+0x16e>
 8006870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006878:	e03a      	b.n	80068f0 <_printf_i+0xa8>
 800687a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800687e:	2b15      	cmp	r3, #21
 8006880:	d8f6      	bhi.n	8006870 <_printf_i+0x28>
 8006882:	a101      	add	r1, pc, #4	; (adr r1, 8006888 <_printf_i+0x40>)
 8006884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068f5 	.word	0x080068f5
 8006890:	08006871 	.word	0x08006871
 8006894:	08006871 	.word	0x08006871
 8006898:	08006871 	.word	0x08006871
 800689c:	08006871 	.word	0x08006871
 80068a0:	080068f5 	.word	0x080068f5
 80068a4:	08006871 	.word	0x08006871
 80068a8:	08006871 	.word	0x08006871
 80068ac:	08006871 	.word	0x08006871
 80068b0:	08006871 	.word	0x08006871
 80068b4:	08006a01 	.word	0x08006a01
 80068b8:	08006925 	.word	0x08006925
 80068bc:	080069e3 	.word	0x080069e3
 80068c0:	08006871 	.word	0x08006871
 80068c4:	08006871 	.word	0x08006871
 80068c8:	08006a23 	.word	0x08006a23
 80068cc:	08006871 	.word	0x08006871
 80068d0:	08006925 	.word	0x08006925
 80068d4:	08006871 	.word	0x08006871
 80068d8:	08006871 	.word	0x08006871
 80068dc:	080069eb 	.word	0x080069eb
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	602a      	str	r2, [r5, #0]
 80068e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0a3      	b.n	8006a3c <_printf_i+0x1f4>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	6829      	ldr	r1, [r5, #0]
 80068f8:	0606      	lsls	r6, r0, #24
 80068fa:	f101 0304 	add.w	r3, r1, #4
 80068fe:	d50a      	bpl.n	8006916 <_printf_i+0xce>
 8006900:	680e      	ldr	r6, [r1, #0]
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	2e00      	cmp	r6, #0
 8006906:	da03      	bge.n	8006910 <_printf_i+0xc8>
 8006908:	232d      	movs	r3, #45	; 0x2d
 800690a:	4276      	negs	r6, r6
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006910:	485e      	ldr	r0, [pc, #376]	; (8006a8c <_printf_i+0x244>)
 8006912:	230a      	movs	r3, #10
 8006914:	e019      	b.n	800694a <_printf_i+0x102>
 8006916:	680e      	ldr	r6, [r1, #0]
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800691e:	bf18      	it	ne
 8006920:	b236      	sxthne	r6, r6
 8006922:	e7ef      	b.n	8006904 <_printf_i+0xbc>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	1d19      	adds	r1, r3, #4
 800692a:	6029      	str	r1, [r5, #0]
 800692c:	0601      	lsls	r1, r0, #24
 800692e:	d501      	bpl.n	8006934 <_printf_i+0xec>
 8006930:	681e      	ldr	r6, [r3, #0]
 8006932:	e002      	b.n	800693a <_printf_i+0xf2>
 8006934:	0646      	lsls	r6, r0, #25
 8006936:	d5fb      	bpl.n	8006930 <_printf_i+0xe8>
 8006938:	881e      	ldrh	r6, [r3, #0]
 800693a:	4854      	ldr	r0, [pc, #336]	; (8006a8c <_printf_i+0x244>)
 800693c:	2f6f      	cmp	r7, #111	; 0x6f
 800693e:	bf0c      	ite	eq
 8006940:	2308      	moveq	r3, #8
 8006942:	230a      	movne	r3, #10
 8006944:	2100      	movs	r1, #0
 8006946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694a:	6865      	ldr	r5, [r4, #4]
 800694c:	60a5      	str	r5, [r4, #8]
 800694e:	2d00      	cmp	r5, #0
 8006950:	bfa2      	ittt	ge
 8006952:	6821      	ldrge	r1, [r4, #0]
 8006954:	f021 0104 	bicge.w	r1, r1, #4
 8006958:	6021      	strge	r1, [r4, #0]
 800695a:	b90e      	cbnz	r6, 8006960 <_printf_i+0x118>
 800695c:	2d00      	cmp	r5, #0
 800695e:	d04d      	beq.n	80069fc <_printf_i+0x1b4>
 8006960:	4615      	mov	r5, r2
 8006962:	fbb6 f1f3 	udiv	r1, r6, r3
 8006966:	fb03 6711 	mls	r7, r3, r1, r6
 800696a:	5dc7      	ldrb	r7, [r0, r7]
 800696c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006970:	4637      	mov	r7, r6
 8006972:	42bb      	cmp	r3, r7
 8006974:	460e      	mov	r6, r1
 8006976:	d9f4      	bls.n	8006962 <_printf_i+0x11a>
 8006978:	2b08      	cmp	r3, #8
 800697a:	d10b      	bne.n	8006994 <_printf_i+0x14c>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	07de      	lsls	r6, r3, #31
 8006980:	d508      	bpl.n	8006994 <_printf_i+0x14c>
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6861      	ldr	r1, [r4, #4]
 8006986:	4299      	cmp	r1, r3
 8006988:	bfde      	ittt	le
 800698a:	2330      	movle	r3, #48	; 0x30
 800698c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006994:	1b52      	subs	r2, r2, r5
 8006996:	6122      	str	r2, [r4, #16]
 8006998:	f8cd a000 	str.w	sl, [sp]
 800699c:	464b      	mov	r3, r9
 800699e:	aa03      	add	r2, sp, #12
 80069a0:	4621      	mov	r1, r4
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7ff fee2 	bl	800676c <_printf_common>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d14c      	bne.n	8006a46 <_printf_i+0x1fe>
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	b004      	add	sp, #16
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b6:	4835      	ldr	r0, [pc, #212]	; (8006a8c <_printf_i+0x244>)
 80069b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069bc:	6829      	ldr	r1, [r5, #0]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80069c4:	6029      	str	r1, [r5, #0]
 80069c6:	061d      	lsls	r5, r3, #24
 80069c8:	d514      	bpl.n	80069f4 <_printf_i+0x1ac>
 80069ca:	07df      	lsls	r7, r3, #31
 80069cc:	bf44      	itt	mi
 80069ce:	f043 0320 	orrmi.w	r3, r3, #32
 80069d2:	6023      	strmi	r3, [r4, #0]
 80069d4:	b91e      	cbnz	r6, 80069de <_printf_i+0x196>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	f023 0320 	bic.w	r3, r3, #32
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	2310      	movs	r3, #16
 80069e0:	e7b0      	b.n	8006944 <_printf_i+0xfc>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	f043 0320 	orr.w	r3, r3, #32
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	2378      	movs	r3, #120	; 0x78
 80069ec:	4828      	ldr	r0, [pc, #160]	; (8006a90 <_printf_i+0x248>)
 80069ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f2:	e7e3      	b.n	80069bc <_printf_i+0x174>
 80069f4:	0659      	lsls	r1, r3, #25
 80069f6:	bf48      	it	mi
 80069f8:	b2b6      	uxthmi	r6, r6
 80069fa:	e7e6      	b.n	80069ca <_printf_i+0x182>
 80069fc:	4615      	mov	r5, r2
 80069fe:	e7bb      	b.n	8006978 <_printf_i+0x130>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	6826      	ldr	r6, [r4, #0]
 8006a04:	6961      	ldr	r1, [r4, #20]
 8006a06:	1d18      	adds	r0, r3, #4
 8006a08:	6028      	str	r0, [r5, #0]
 8006a0a:	0635      	lsls	r5, r6, #24
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0x1cc>
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <_printf_i+0x1d2>
 8006a14:	0670      	lsls	r0, r6, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0x1c8>
 8006a18:	8019      	strh	r1, [r3, #0]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	4615      	mov	r5, r2
 8006a20:	e7ba      	b.n	8006998 <_printf_i+0x150>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	602a      	str	r2, [r5, #0]
 8006a28:	681d      	ldr	r5, [r3, #0]
 8006a2a:	6862      	ldr	r2, [r4, #4]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f7f9 fbf6 	bl	8000220 <memchr>
 8006a34:	b108      	cbz	r0, 8006a3a <_printf_i+0x1f2>
 8006a36:	1b40      	subs	r0, r0, r5
 8006a38:	6060      	str	r0, [r4, #4]
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a44:	e7a8      	b.n	8006998 <_printf_i+0x150>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	462a      	mov	r2, r5
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	47d0      	blx	sl
 8006a50:	3001      	adds	r0, #1
 8006a52:	d0ab      	beq.n	80069ac <_printf_i+0x164>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	079b      	lsls	r3, r3, #30
 8006a58:	d413      	bmi.n	8006a82 <_printf_i+0x23a>
 8006a5a:	68e0      	ldr	r0, [r4, #12]
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	4298      	cmp	r0, r3
 8006a60:	bfb8      	it	lt
 8006a62:	4618      	movlt	r0, r3
 8006a64:	e7a4      	b.n	80069b0 <_printf_i+0x168>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4632      	mov	r2, r6
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	47d0      	blx	sl
 8006a70:	3001      	adds	r0, #1
 8006a72:	d09b      	beq.n	80069ac <_printf_i+0x164>
 8006a74:	3501      	adds	r5, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	9903      	ldr	r1, [sp, #12]
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	42ab      	cmp	r3, r5
 8006a7e:	dcf2      	bgt.n	8006a66 <_printf_i+0x21e>
 8006a80:	e7eb      	b.n	8006a5a <_printf_i+0x212>
 8006a82:	2500      	movs	r5, #0
 8006a84:	f104 0619 	add.w	r6, r4, #25
 8006a88:	e7f5      	b.n	8006a76 <_printf_i+0x22e>
 8006a8a:	bf00      	nop
 8006a8c:	0800ab42 	.word	0x0800ab42
 8006a90:	0800ab53 	.word	0x0800ab53

08006a94 <_scanf_float>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	4617      	mov	r7, r2
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	688b      	ldr	r3, [r1, #8]
 8006aa0:	1e5a      	subs	r2, r3, #1
 8006aa2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006aa6:	bf83      	ittte	hi
 8006aa8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006aac:	195b      	addhi	r3, r3, r5
 8006aae:	9302      	strhi	r3, [sp, #8]
 8006ab0:	2300      	movls	r3, #0
 8006ab2:	bf86      	itte	hi
 8006ab4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ab8:	608b      	strhi	r3, [r1, #8]
 8006aba:	9302      	strls	r3, [sp, #8]
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	468b      	mov	fp, r1
 8006ac0:	2500      	movs	r5, #0
 8006ac2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ac6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006aca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ace:	4680      	mov	r8, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	465e      	mov	r6, fp
 8006ad4:	46aa      	mov	sl, r5
 8006ad6:	46a9      	mov	r9, r5
 8006ad8:	9501      	str	r5, [sp, #4]
 8006ada:	68a2      	ldr	r2, [r4, #8]
 8006adc:	b152      	cbz	r2, 8006af4 <_scanf_float+0x60>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ae4:	d864      	bhi.n	8006bb0 <_scanf_float+0x11c>
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d83c      	bhi.n	8006b64 <_scanf_float+0xd0>
 8006aea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006aee:	b2c8      	uxtb	r0, r1
 8006af0:	280e      	cmp	r0, #14
 8006af2:	d93a      	bls.n	8006b6a <_scanf_float+0xd6>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	d003      	beq.n	8006b02 <_scanf_float+0x6e>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b06:	f1ba 0f01 	cmp.w	sl, #1
 8006b0a:	f200 8113 	bhi.w	8006d34 <_scanf_float+0x2a0>
 8006b0e:	455e      	cmp	r6, fp
 8006b10:	f200 8105 	bhi.w	8006d1e <_scanf_float+0x28a>
 8006b14:	2501      	movs	r5, #1
 8006b16:	4628      	mov	r0, r5
 8006b18:	b007      	add	sp, #28
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b22:	2a0d      	cmp	r2, #13
 8006b24:	d8e6      	bhi.n	8006af4 <_scanf_float+0x60>
 8006b26:	a101      	add	r1, pc, #4	; (adr r1, 8006b2c <_scanf_float+0x98>)
 8006b28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b2c:	08006c6b 	.word	0x08006c6b
 8006b30:	08006af5 	.word	0x08006af5
 8006b34:	08006af5 	.word	0x08006af5
 8006b38:	08006af5 	.word	0x08006af5
 8006b3c:	08006ccb 	.word	0x08006ccb
 8006b40:	08006ca3 	.word	0x08006ca3
 8006b44:	08006af5 	.word	0x08006af5
 8006b48:	08006af5 	.word	0x08006af5
 8006b4c:	08006c79 	.word	0x08006c79
 8006b50:	08006af5 	.word	0x08006af5
 8006b54:	08006af5 	.word	0x08006af5
 8006b58:	08006af5 	.word	0x08006af5
 8006b5c:	08006af5 	.word	0x08006af5
 8006b60:	08006c31 	.word	0x08006c31
 8006b64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b68:	e7db      	b.n	8006b22 <_scanf_float+0x8e>
 8006b6a:	290e      	cmp	r1, #14
 8006b6c:	d8c2      	bhi.n	8006af4 <_scanf_float+0x60>
 8006b6e:	a001      	add	r0, pc, #4	; (adr r0, 8006b74 <_scanf_float+0xe0>)
 8006b70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b74:	08006c23 	.word	0x08006c23
 8006b78:	08006af5 	.word	0x08006af5
 8006b7c:	08006c23 	.word	0x08006c23
 8006b80:	08006cb7 	.word	0x08006cb7
 8006b84:	08006af5 	.word	0x08006af5
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006c0d 	.word	0x08006c0d
 8006b90:	08006c0d 	.word	0x08006c0d
 8006b94:	08006c0d 	.word	0x08006c0d
 8006b98:	08006c0d 	.word	0x08006c0d
 8006b9c:	08006c0d 	.word	0x08006c0d
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	2b6e      	cmp	r3, #110	; 0x6e
 8006bb2:	d809      	bhi.n	8006bc8 <_scanf_float+0x134>
 8006bb4:	2b60      	cmp	r3, #96	; 0x60
 8006bb6:	d8b2      	bhi.n	8006b1e <_scanf_float+0x8a>
 8006bb8:	2b54      	cmp	r3, #84	; 0x54
 8006bba:	d077      	beq.n	8006cac <_scanf_float+0x218>
 8006bbc:	2b59      	cmp	r3, #89	; 0x59
 8006bbe:	d199      	bne.n	8006af4 <_scanf_float+0x60>
 8006bc0:	2d07      	cmp	r5, #7
 8006bc2:	d197      	bne.n	8006af4 <_scanf_float+0x60>
 8006bc4:	2508      	movs	r5, #8
 8006bc6:	e029      	b.n	8006c1c <_scanf_float+0x188>
 8006bc8:	2b74      	cmp	r3, #116	; 0x74
 8006bca:	d06f      	beq.n	8006cac <_scanf_float+0x218>
 8006bcc:	2b79      	cmp	r3, #121	; 0x79
 8006bce:	e7f6      	b.n	8006bbe <_scanf_float+0x12a>
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	05c8      	lsls	r0, r1, #23
 8006bd4:	d51a      	bpl.n	8006c0c <_scanf_float+0x178>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bdc:	6021      	str	r1, [r4, #0]
 8006bde:	f109 0901 	add.w	r9, r9, #1
 8006be2:	b11b      	cbz	r3, 8006bec <_scanf_float+0x158>
 8006be4:	3b01      	subs	r3, #1
 8006be6:	3201      	adds	r2, #1
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	60a2      	str	r2, [r4, #8]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	f340 8084 	ble.w	8006d0c <_scanf_float+0x278>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	e766      	b.n	8006ada <_scanf_float+0x46>
 8006c0c:	eb1a 0f05 	cmn.w	sl, r5
 8006c10:	f47f af70 	bne.w	8006af4 <_scanf_float+0x60>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c20:	e7e4      	b.n	8006bec <_scanf_float+0x158>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	0610      	lsls	r0, r2, #24
 8006c26:	f57f af65 	bpl.w	8006af4 <_scanf_float+0x60>
 8006c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c2e:	e7f4      	b.n	8006c1a <_scanf_float+0x186>
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	d10e      	bne.n	8006c54 <_scanf_float+0x1c0>
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	d10e      	bne.n	8006c5a <_scanf_float+0x1c6>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c46:	d108      	bne.n	8006c5a <_scanf_float+0x1c6>
 8006c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c4c:	6022      	str	r2, [r4, #0]
 8006c4e:	f04f 0a01 	mov.w	sl, #1
 8006c52:	e7e3      	b.n	8006c1c <_scanf_float+0x188>
 8006c54:	f1ba 0f02 	cmp.w	sl, #2
 8006c58:	d055      	beq.n	8006d06 <_scanf_float+0x272>
 8006c5a:	2d01      	cmp	r5, #1
 8006c5c:	d002      	beq.n	8006c64 <_scanf_float+0x1d0>
 8006c5e:	2d04      	cmp	r5, #4
 8006c60:	f47f af48 	bne.w	8006af4 <_scanf_float+0x60>
 8006c64:	3501      	adds	r5, #1
 8006c66:	b2ed      	uxtb	r5, r5
 8006c68:	e7d8      	b.n	8006c1c <_scanf_float+0x188>
 8006c6a:	f1ba 0f01 	cmp.w	sl, #1
 8006c6e:	f47f af41 	bne.w	8006af4 <_scanf_float+0x60>
 8006c72:	f04f 0a02 	mov.w	sl, #2
 8006c76:	e7d1      	b.n	8006c1c <_scanf_float+0x188>
 8006c78:	b97d      	cbnz	r5, 8006c9a <_scanf_float+0x206>
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	f47f af3c 	bne.w	8006afa <_scanf_float+0x66>
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c8c:	f47f af39 	bne.w	8006b02 <_scanf_float+0x6e>
 8006c90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c94:	6022      	str	r2, [r4, #0]
 8006c96:	2501      	movs	r5, #1
 8006c98:	e7c0      	b.n	8006c1c <_scanf_float+0x188>
 8006c9a:	2d03      	cmp	r5, #3
 8006c9c:	d0e2      	beq.n	8006c64 <_scanf_float+0x1d0>
 8006c9e:	2d05      	cmp	r5, #5
 8006ca0:	e7de      	b.n	8006c60 <_scanf_float+0x1cc>
 8006ca2:	2d02      	cmp	r5, #2
 8006ca4:	f47f af26 	bne.w	8006af4 <_scanf_float+0x60>
 8006ca8:	2503      	movs	r5, #3
 8006caa:	e7b7      	b.n	8006c1c <_scanf_float+0x188>
 8006cac:	2d06      	cmp	r5, #6
 8006cae:	f47f af21 	bne.w	8006af4 <_scanf_float+0x60>
 8006cb2:	2507      	movs	r5, #7
 8006cb4:	e7b2      	b.n	8006c1c <_scanf_float+0x188>
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	0591      	lsls	r1, r2, #22
 8006cba:	f57f af1b 	bpl.w	8006af4 <_scanf_float+0x60>
 8006cbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cc8:	e7a8      	b.n	8006c1c <_scanf_float+0x188>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cd4:	d006      	beq.n	8006ce4 <_scanf_float+0x250>
 8006cd6:	0550      	lsls	r0, r2, #21
 8006cd8:	f57f af0c 	bpl.w	8006af4 <_scanf_float+0x60>
 8006cdc:	f1b9 0f00 	cmp.w	r9, #0
 8006ce0:	f43f af0f 	beq.w	8006b02 <_scanf_float+0x6e>
 8006ce4:	0591      	lsls	r1, r2, #22
 8006ce6:	bf58      	it	pl
 8006ce8:	9901      	ldrpl	r1, [sp, #4]
 8006cea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cee:	bf58      	it	pl
 8006cf0:	eba9 0101 	subpl.w	r1, r9, r1
 8006cf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cf8:	bf58      	it	pl
 8006cfa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	f04f 0900 	mov.w	r9, #0
 8006d04:	e78a      	b.n	8006c1c <_scanf_float+0x188>
 8006d06:	f04f 0a03 	mov.w	sl, #3
 8006d0a:	e787      	b.n	8006c1c <_scanf_float+0x188>
 8006d0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d10:	4639      	mov	r1, r7
 8006d12:	4640      	mov	r0, r8
 8006d14:	4798      	blx	r3
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f aedf 	beq.w	8006ada <_scanf_float+0x46>
 8006d1c:	e6ea      	b.n	8006af4 <_scanf_float+0x60>
 8006d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d26:	463a      	mov	r2, r7
 8006d28:	4640      	mov	r0, r8
 8006d2a:	4798      	blx	r3
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	e6ec      	b.n	8006b0e <_scanf_float+0x7a>
 8006d34:	1e6b      	subs	r3, r5, #1
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d825      	bhi.n	8006d86 <_scanf_float+0x2f2>
 8006d3a:	2d02      	cmp	r5, #2
 8006d3c:	d836      	bhi.n	8006dac <_scanf_float+0x318>
 8006d3e:	455e      	cmp	r6, fp
 8006d40:	f67f aee8 	bls.w	8006b14 <_scanf_float+0x80>
 8006d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4798      	blx	r3
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	e7f1      	b.n	8006d3e <_scanf_float+0x2aa>
 8006d5a:	9802      	ldr	r0, [sp, #8]
 8006d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d64:	9002      	str	r0, [sp, #8]
 8006d66:	463a      	mov	r2, r7
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4798      	blx	r3
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d76:	fa5f fa8a 	uxtb.w	sl, sl
 8006d7a:	f1ba 0f02 	cmp.w	sl, #2
 8006d7e:	d1ec      	bne.n	8006d5a <_scanf_float+0x2c6>
 8006d80:	3d03      	subs	r5, #3
 8006d82:	b2ed      	uxtb	r5, r5
 8006d84:	1b76      	subs	r6, r6, r5
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	05da      	lsls	r2, r3, #23
 8006d8a:	d52f      	bpl.n	8006dec <_scanf_float+0x358>
 8006d8c:	055b      	lsls	r3, r3, #21
 8006d8e:	d510      	bpl.n	8006db2 <_scanf_float+0x31e>
 8006d90:	455e      	cmp	r6, fp
 8006d92:	f67f aebf 	bls.w	8006b14 <_scanf_float+0x80>
 8006d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d9e:	463a      	mov	r2, r7
 8006da0:	4640      	mov	r0, r8
 8006da2:	4798      	blx	r3
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	e7f1      	b.n	8006d90 <_scanf_float+0x2fc>
 8006dac:	46aa      	mov	sl, r5
 8006dae:	9602      	str	r6, [sp, #8]
 8006db0:	e7df      	b.n	8006d72 <_scanf_float+0x2de>
 8006db2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	2965      	cmp	r1, #101	; 0x65
 8006dba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	d00c      	beq.n	8006de0 <_scanf_float+0x34c>
 8006dc6:	2945      	cmp	r1, #69	; 0x45
 8006dc8:	d00a      	beq.n	8006de0 <_scanf_float+0x34c>
 8006dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dce:	463a      	mov	r2, r7
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4798      	blx	r3
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	1eb5      	subs	r5, r6, #2
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006de4:	463a      	mov	r2, r7
 8006de6:	4640      	mov	r0, r8
 8006de8:	4798      	blx	r3
 8006dea:	462e      	mov	r6, r5
 8006dec:	6825      	ldr	r5, [r4, #0]
 8006dee:	f015 0510 	ands.w	r5, r5, #16
 8006df2:	d159      	bne.n	8006ea8 <_scanf_float+0x414>
 8006df4:	7035      	strb	r5, [r6, #0]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e00:	d11b      	bne.n	8006e3a <_scanf_float+0x3a6>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	454b      	cmp	r3, r9
 8006e06:	eba3 0209 	sub.w	r2, r3, r9
 8006e0a:	d123      	bne.n	8006e54 <_scanf_float+0x3c0>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4659      	mov	r1, fp
 8006e10:	4640      	mov	r0, r8
 8006e12:	f000 feab 	bl	8007b6c <_strtod_r>
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	f012 0f02 	tst.w	r2, #2
 8006e1e:	ec57 6b10 	vmov	r6, r7, d0
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	d021      	beq.n	8006e6a <_scanf_float+0x3d6>
 8006e26:	9903      	ldr	r1, [sp, #12]
 8006e28:	1d1a      	adds	r2, r3, #4
 8006e2a:	600a      	str	r2, [r1, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	e9c3 6700 	strd	r6, r7, [r3]
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60e3      	str	r3, [r4, #12]
 8006e38:	e66d      	b.n	8006b16 <_scanf_float+0x82>
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0e5      	beq.n	8006e0c <_scanf_float+0x378>
 8006e40:	9905      	ldr	r1, [sp, #20]
 8006e42:	230a      	movs	r3, #10
 8006e44:	462a      	mov	r2, r5
 8006e46:	3101      	adds	r1, #1
 8006e48:	4640      	mov	r0, r8
 8006e4a:	f000 ff17 	bl	8007c7c <_strtol_r>
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	9e05      	ldr	r6, [sp, #20]
 8006e52:	1ac2      	subs	r2, r0, r3
 8006e54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e58:	429e      	cmp	r6, r3
 8006e5a:	bf28      	it	cs
 8006e5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e60:	4912      	ldr	r1, [pc, #72]	; (8006eac <_scanf_float+0x418>)
 8006e62:	4630      	mov	r0, r6
 8006e64:	f000 f82c 	bl	8006ec0 <siprintf>
 8006e68:	e7d0      	b.n	8006e0c <_scanf_float+0x378>
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	f012 0f04 	tst.w	r2, #4
 8006e70:	f103 0204 	add.w	r2, r3, #4
 8006e74:	600a      	str	r2, [r1, #0]
 8006e76:	d1d9      	bne.n	8006e2c <_scanf_float+0x398>
 8006e78:	f8d3 8000 	ldr.w	r8, [r3]
 8006e7c:	ee10 2a10 	vmov	r2, s0
 8006e80:	ee10 0a10 	vmov	r0, s0
 8006e84:	463b      	mov	r3, r7
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fe70 	bl	8000b6c <__aeabi_dcmpun>
 8006e8c:	b128      	cbz	r0, 8006e9a <_scanf_float+0x406>
 8006e8e:	4808      	ldr	r0, [pc, #32]	; (8006eb0 <_scanf_float+0x41c>)
 8006e90:	f000 f810 	bl	8006eb4 <nanf>
 8006e94:	ed88 0a00 	vstr	s0, [r8]
 8006e98:	e7cb      	b.n	8006e32 <_scanf_float+0x39e>
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 fec3 	bl	8000c28 <__aeabi_d2f>
 8006ea2:	f8c8 0000 	str.w	r0, [r8]
 8006ea6:	e7c4      	b.n	8006e32 <_scanf_float+0x39e>
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	e634      	b.n	8006b16 <_scanf_float+0x82>
 8006eac:	0800ab64 	.word	0x0800ab64
 8006eb0:	0800af70 	.word	0x0800af70

08006eb4 <nanf>:
 8006eb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ebc <nanf+0x8>
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	7fc00000 	.word	0x7fc00000

08006ec0 <siprintf>:
 8006ec0:	b40e      	push	{r1, r2, r3}
 8006ec2:	b500      	push	{lr}
 8006ec4:	b09c      	sub	sp, #112	; 0x70
 8006ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ec8:	9002      	str	r0, [sp, #8]
 8006eca:	9006      	str	r0, [sp, #24]
 8006ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ed0:	4809      	ldr	r0, [pc, #36]	; (8006ef8 <siprintf+0x38>)
 8006ed2:	9107      	str	r1, [sp, #28]
 8006ed4:	9104      	str	r1, [sp, #16]
 8006ed6:	4909      	ldr	r1, [pc, #36]	; (8006efc <siprintf+0x3c>)
 8006ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006edc:	9105      	str	r1, [sp, #20]
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	a902      	add	r1, sp, #8
 8006ee4:	f002 fef6 	bl	8009cd4 <_svfiprintf_r>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	b01c      	add	sp, #112	; 0x70
 8006ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef4:	b003      	add	sp, #12
 8006ef6:	4770      	bx	lr
 8006ef8:	2000003c 	.word	0x2000003c
 8006efc:	ffff0208 	.word	0xffff0208

08006f00 <strncpy>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	3901      	subs	r1, #1
 8006f04:	4603      	mov	r3, r0
 8006f06:	b132      	cbz	r2, 8006f16 <strncpy+0x16>
 8006f08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f0c:	f803 4b01 	strb.w	r4, [r3], #1
 8006f10:	3a01      	subs	r2, #1
 8006f12:	2c00      	cmp	r4, #0
 8006f14:	d1f7      	bne.n	8006f06 <strncpy+0x6>
 8006f16:	441a      	add	r2, r3
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d100      	bne.n	8006f20 <strncpy+0x20>
 8006f1e:	bd10      	pop	{r4, pc}
 8006f20:	f803 1b01 	strb.w	r1, [r3], #1
 8006f24:	e7f9      	b.n	8006f1a <strncpy+0x1a>

08006f26 <sulp>:
 8006f26:	b570      	push	{r4, r5, r6, lr}
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	ec45 4b10 	vmov	d0, r4, r5
 8006f30:	4616      	mov	r6, r2
 8006f32:	f002 fc2d 	bl	8009790 <__ulp>
 8006f36:	ec51 0b10 	vmov	r0, r1, d0
 8006f3a:	b17e      	cbz	r6, 8006f5c <sulp+0x36>
 8006f3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dd09      	ble.n	8006f5c <sulp+0x36>
 8006f48:	051b      	lsls	r3, r3, #20
 8006f4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f4e:	2400      	movs	r4, #0
 8006f50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f54:	4622      	mov	r2, r4
 8006f56:	462b      	mov	r3, r5
 8006f58:	f7f9 fb6e 	bl	8000638 <__aeabi_dmul>
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f60 <_strtod_l>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	ed2d 8b02 	vpush	{d8}
 8006f68:	b09d      	sub	sp, #116	; 0x74
 8006f6a:	461f      	mov	r7, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9318      	str	r3, [sp, #96]	; 0x60
 8006f70:	4ba2      	ldr	r3, [pc, #648]	; (80071fc <_strtod_l+0x29c>)
 8006f72:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9305      	str	r3, [sp, #20]
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	4688      	mov	r8, r1
 8006f7e:	f7f9 f947 	bl	8000210 <strlen>
 8006f82:	f04f 0a00 	mov.w	sl, #0
 8006f86:	4605      	mov	r5, r0
 8006f88:	f04f 0b00 	mov.w	fp, #0
 8006f8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	2a2b      	cmp	r2, #43	; 0x2b
 8006f96:	d04e      	beq.n	8007036 <_strtod_l+0xd6>
 8006f98:	d83b      	bhi.n	8007012 <_strtod_l+0xb2>
 8006f9a:	2a0d      	cmp	r2, #13
 8006f9c:	d834      	bhi.n	8007008 <_strtod_l+0xa8>
 8006f9e:	2a08      	cmp	r2, #8
 8006fa0:	d834      	bhi.n	800700c <_strtod_l+0xac>
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	d03e      	beq.n	8007024 <_strtod_l+0xc4>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8006faa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006fac:	7833      	ldrb	r3, [r6, #0]
 8006fae:	2b30      	cmp	r3, #48	; 0x30
 8006fb0:	f040 80b0 	bne.w	8007114 <_strtod_l+0x1b4>
 8006fb4:	7873      	ldrb	r3, [r6, #1]
 8006fb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fba:	2b58      	cmp	r3, #88	; 0x58
 8006fbc:	d168      	bne.n	8007090 <_strtod_l+0x130>
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	9301      	str	r3, [sp, #4]
 8006fc2:	ab18      	add	r3, sp, #96	; 0x60
 8006fc4:	9702      	str	r7, [sp, #8]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4a8d      	ldr	r2, [pc, #564]	; (8007200 <_strtod_l+0x2a0>)
 8006fca:	ab19      	add	r3, sp, #100	; 0x64
 8006fcc:	a917      	add	r1, sp, #92	; 0x5c
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f001 fd38 	bl	8008a44 <__gethex>
 8006fd4:	f010 0707 	ands.w	r7, r0, #7
 8006fd8:	4605      	mov	r5, r0
 8006fda:	d005      	beq.n	8006fe8 <_strtod_l+0x88>
 8006fdc:	2f06      	cmp	r7, #6
 8006fde:	d12c      	bne.n	800703a <_strtod_l+0xda>
 8006fe0:	3601      	adds	r6, #1
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9617      	str	r6, [sp, #92]	; 0x5c
 8006fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f040 8590 	bne.w	8007b10 <_strtod_l+0xbb0>
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff2:	b1eb      	cbz	r3, 8007030 <_strtod_l+0xd0>
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ffa:	ec43 2b10 	vmov	d0, r2, r3
 8006ffe:	b01d      	add	sp, #116	; 0x74
 8007000:	ecbd 8b02 	vpop	{d8}
 8007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	2a20      	cmp	r2, #32
 800700a:	d1cc      	bne.n	8006fa6 <_strtod_l+0x46>
 800700c:	3301      	adds	r3, #1
 800700e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007010:	e7be      	b.n	8006f90 <_strtod_l+0x30>
 8007012:	2a2d      	cmp	r2, #45	; 0x2d
 8007014:	d1c7      	bne.n	8006fa6 <_strtod_l+0x46>
 8007016:	2201      	movs	r2, #1
 8007018:	920a      	str	r2, [sp, #40]	; 0x28
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	9217      	str	r2, [sp, #92]	; 0x5c
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1c2      	bne.n	8006faa <_strtod_l+0x4a>
 8007024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007026:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800702a:	2b00      	cmp	r3, #0
 800702c:	f040 856e 	bne.w	8007b0c <_strtod_l+0xbac>
 8007030:	4652      	mov	r2, sl
 8007032:	465b      	mov	r3, fp
 8007034:	e7e1      	b.n	8006ffa <_strtod_l+0x9a>
 8007036:	2200      	movs	r2, #0
 8007038:	e7ee      	b.n	8007018 <_strtod_l+0xb8>
 800703a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800703c:	b13a      	cbz	r2, 800704e <_strtod_l+0xee>
 800703e:	2135      	movs	r1, #53	; 0x35
 8007040:	a81a      	add	r0, sp, #104	; 0x68
 8007042:	f002 fcb0 	bl	80099a6 <__copybits>
 8007046:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007048:	4620      	mov	r0, r4
 800704a:	f002 f86f 	bl	800912c <_Bfree>
 800704e:	3f01      	subs	r7, #1
 8007050:	2f04      	cmp	r7, #4
 8007052:	d806      	bhi.n	8007062 <_strtod_l+0x102>
 8007054:	e8df f007 	tbb	[pc, r7]
 8007058:	1714030a 	.word	0x1714030a
 800705c:	0a          	.byte	0x0a
 800705d:	00          	.byte	0x00
 800705e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007062:	0728      	lsls	r0, r5, #28
 8007064:	d5c0      	bpl.n	8006fe8 <_strtod_l+0x88>
 8007066:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800706a:	e7bd      	b.n	8006fe8 <_strtod_l+0x88>
 800706c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007070:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007072:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007076:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800707a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800707e:	e7f0      	b.n	8007062 <_strtod_l+0x102>
 8007080:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007204 <_strtod_l+0x2a4>
 8007084:	e7ed      	b.n	8007062 <_strtod_l+0x102>
 8007086:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800708a:	f04f 3aff 	mov.w	sl, #4294967295
 800708e:	e7e8      	b.n	8007062 <_strtod_l+0x102>
 8007090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	9217      	str	r2, [sp, #92]	; 0x5c
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b30      	cmp	r3, #48	; 0x30
 800709a:	d0f9      	beq.n	8007090 <_strtod_l+0x130>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0a3      	beq.n	8006fe8 <_strtod_l+0x88>
 80070a0:	2301      	movs	r3, #1
 80070a2:	f04f 0900 	mov.w	r9, #0
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070aa:	9308      	str	r3, [sp, #32]
 80070ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80070b0:	464f      	mov	r7, r9
 80070b2:	220a      	movs	r2, #10
 80070b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80070b6:	7806      	ldrb	r6, [r0, #0]
 80070b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80070bc:	b2d9      	uxtb	r1, r3
 80070be:	2909      	cmp	r1, #9
 80070c0:	d92a      	bls.n	8007118 <_strtod_l+0x1b8>
 80070c2:	9905      	ldr	r1, [sp, #20]
 80070c4:	462a      	mov	r2, r5
 80070c6:	f002 ff1f 	bl	8009f08 <strncmp>
 80070ca:	b398      	cbz	r0, 8007134 <_strtod_l+0x1d4>
 80070cc:	2000      	movs	r0, #0
 80070ce:	4632      	mov	r2, r6
 80070d0:	463d      	mov	r5, r7
 80070d2:	9005      	str	r0, [sp, #20]
 80070d4:	4603      	mov	r3, r0
 80070d6:	2a65      	cmp	r2, #101	; 0x65
 80070d8:	d001      	beq.n	80070de <_strtod_l+0x17e>
 80070da:	2a45      	cmp	r2, #69	; 0x45
 80070dc:	d118      	bne.n	8007110 <_strtod_l+0x1b0>
 80070de:	b91d      	cbnz	r5, 80070e8 <_strtod_l+0x188>
 80070e0:	9a04      	ldr	r2, [sp, #16]
 80070e2:	4302      	orrs	r2, r0
 80070e4:	d09e      	beq.n	8007024 <_strtod_l+0xc4>
 80070e6:	2500      	movs	r5, #0
 80070e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80070ec:	f108 0201 	add.w	r2, r8, #1
 80070f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80070f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80070f6:	2a2b      	cmp	r2, #43	; 0x2b
 80070f8:	d075      	beq.n	80071e6 <_strtod_l+0x286>
 80070fa:	2a2d      	cmp	r2, #45	; 0x2d
 80070fc:	d07b      	beq.n	80071f6 <_strtod_l+0x296>
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007106:	2909      	cmp	r1, #9
 8007108:	f240 8082 	bls.w	8007210 <_strtod_l+0x2b0>
 800710c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007110:	2600      	movs	r6, #0
 8007112:	e09d      	b.n	8007250 <_strtod_l+0x2f0>
 8007114:	2300      	movs	r3, #0
 8007116:	e7c4      	b.n	80070a2 <_strtod_l+0x142>
 8007118:	2f08      	cmp	r7, #8
 800711a:	bfd8      	it	le
 800711c:	9907      	ldrle	r1, [sp, #28]
 800711e:	f100 0001 	add.w	r0, r0, #1
 8007122:	bfda      	itte	le
 8007124:	fb02 3301 	mlale	r3, r2, r1, r3
 8007128:	9307      	strle	r3, [sp, #28]
 800712a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800712e:	3701      	adds	r7, #1
 8007130:	9017      	str	r0, [sp, #92]	; 0x5c
 8007132:	e7bf      	b.n	80070b4 <_strtod_l+0x154>
 8007134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007136:	195a      	adds	r2, r3, r5
 8007138:	9217      	str	r2, [sp, #92]	; 0x5c
 800713a:	5d5a      	ldrb	r2, [r3, r5]
 800713c:	2f00      	cmp	r7, #0
 800713e:	d037      	beq.n	80071b0 <_strtod_l+0x250>
 8007140:	9005      	str	r0, [sp, #20]
 8007142:	463d      	mov	r5, r7
 8007144:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007148:	2b09      	cmp	r3, #9
 800714a:	d912      	bls.n	8007172 <_strtod_l+0x212>
 800714c:	2301      	movs	r3, #1
 800714e:	e7c2      	b.n	80070d6 <_strtod_l+0x176>
 8007150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	9217      	str	r2, [sp, #92]	; 0x5c
 8007156:	785a      	ldrb	r2, [r3, #1]
 8007158:	3001      	adds	r0, #1
 800715a:	2a30      	cmp	r2, #48	; 0x30
 800715c:	d0f8      	beq.n	8007150 <_strtod_l+0x1f0>
 800715e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007162:	2b08      	cmp	r3, #8
 8007164:	f200 84d9 	bhi.w	8007b1a <_strtod_l+0xbba>
 8007168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800716a:	9005      	str	r0, [sp, #20]
 800716c:	2000      	movs	r0, #0
 800716e:	9308      	str	r3, [sp, #32]
 8007170:	4605      	mov	r5, r0
 8007172:	3a30      	subs	r2, #48	; 0x30
 8007174:	f100 0301 	add.w	r3, r0, #1
 8007178:	d014      	beq.n	80071a4 <_strtod_l+0x244>
 800717a:	9905      	ldr	r1, [sp, #20]
 800717c:	4419      	add	r1, r3
 800717e:	9105      	str	r1, [sp, #20]
 8007180:	462b      	mov	r3, r5
 8007182:	eb00 0e05 	add.w	lr, r0, r5
 8007186:	210a      	movs	r1, #10
 8007188:	4573      	cmp	r3, lr
 800718a:	d113      	bne.n	80071b4 <_strtod_l+0x254>
 800718c:	182b      	adds	r3, r5, r0
 800718e:	2b08      	cmp	r3, #8
 8007190:	f105 0501 	add.w	r5, r5, #1
 8007194:	4405      	add	r5, r0
 8007196:	dc1c      	bgt.n	80071d2 <_strtod_l+0x272>
 8007198:	9907      	ldr	r1, [sp, #28]
 800719a:	230a      	movs	r3, #10
 800719c:	fb03 2301 	mla	r3, r3, r1, r2
 80071a0:	9307      	str	r3, [sp, #28]
 80071a2:	2300      	movs	r3, #0
 80071a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071a6:	1c51      	adds	r1, r2, #1
 80071a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80071aa:	7852      	ldrb	r2, [r2, #1]
 80071ac:	4618      	mov	r0, r3
 80071ae:	e7c9      	b.n	8007144 <_strtod_l+0x1e4>
 80071b0:	4638      	mov	r0, r7
 80071b2:	e7d2      	b.n	800715a <_strtod_l+0x1fa>
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	dc04      	bgt.n	80071c2 <_strtod_l+0x262>
 80071b8:	9e07      	ldr	r6, [sp, #28]
 80071ba:	434e      	muls	r6, r1
 80071bc:	9607      	str	r6, [sp, #28]
 80071be:	3301      	adds	r3, #1
 80071c0:	e7e2      	b.n	8007188 <_strtod_l+0x228>
 80071c2:	f103 0c01 	add.w	ip, r3, #1
 80071c6:	f1bc 0f10 	cmp.w	ip, #16
 80071ca:	bfd8      	it	le
 80071cc:	fb01 f909 	mulle.w	r9, r1, r9
 80071d0:	e7f5      	b.n	80071be <_strtod_l+0x25e>
 80071d2:	2d10      	cmp	r5, #16
 80071d4:	bfdc      	itt	le
 80071d6:	230a      	movle	r3, #10
 80071d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80071dc:	e7e1      	b.n	80071a2 <_strtod_l+0x242>
 80071de:	2300      	movs	r3, #0
 80071e0:	9305      	str	r3, [sp, #20]
 80071e2:	2301      	movs	r3, #1
 80071e4:	e77c      	b.n	80070e0 <_strtod_l+0x180>
 80071e6:	f04f 0c00 	mov.w	ip, #0
 80071ea:	f108 0202 	add.w	r2, r8, #2
 80071ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80071f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80071f4:	e785      	b.n	8007102 <_strtod_l+0x1a2>
 80071f6:	f04f 0c01 	mov.w	ip, #1
 80071fa:	e7f6      	b.n	80071ea <_strtod_l+0x28a>
 80071fc:	0800adb8 	.word	0x0800adb8
 8007200:	0800ab6c 	.word	0x0800ab6c
 8007204:	7ff00000 	.word	0x7ff00000
 8007208:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800720a:	1c51      	adds	r1, r2, #1
 800720c:	9117      	str	r1, [sp, #92]	; 0x5c
 800720e:	7852      	ldrb	r2, [r2, #1]
 8007210:	2a30      	cmp	r2, #48	; 0x30
 8007212:	d0f9      	beq.n	8007208 <_strtod_l+0x2a8>
 8007214:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007218:	2908      	cmp	r1, #8
 800721a:	f63f af79 	bhi.w	8007110 <_strtod_l+0x1b0>
 800721e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007222:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007224:	9206      	str	r2, [sp, #24]
 8007226:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007228:	1c51      	adds	r1, r2, #1
 800722a:	9117      	str	r1, [sp, #92]	; 0x5c
 800722c:	7852      	ldrb	r2, [r2, #1]
 800722e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007232:	2e09      	cmp	r6, #9
 8007234:	d937      	bls.n	80072a6 <_strtod_l+0x346>
 8007236:	9e06      	ldr	r6, [sp, #24]
 8007238:	1b89      	subs	r1, r1, r6
 800723a:	2908      	cmp	r1, #8
 800723c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007240:	dc02      	bgt.n	8007248 <_strtod_l+0x2e8>
 8007242:	4576      	cmp	r6, lr
 8007244:	bfa8      	it	ge
 8007246:	4676      	movge	r6, lr
 8007248:	f1bc 0f00 	cmp.w	ip, #0
 800724c:	d000      	beq.n	8007250 <_strtod_l+0x2f0>
 800724e:	4276      	negs	r6, r6
 8007250:	2d00      	cmp	r5, #0
 8007252:	d14d      	bne.n	80072f0 <_strtod_l+0x390>
 8007254:	9904      	ldr	r1, [sp, #16]
 8007256:	4301      	orrs	r1, r0
 8007258:	f47f aec6 	bne.w	8006fe8 <_strtod_l+0x88>
 800725c:	2b00      	cmp	r3, #0
 800725e:	f47f aee1 	bne.w	8007024 <_strtod_l+0xc4>
 8007262:	2a69      	cmp	r2, #105	; 0x69
 8007264:	d027      	beq.n	80072b6 <_strtod_l+0x356>
 8007266:	dc24      	bgt.n	80072b2 <_strtod_l+0x352>
 8007268:	2a49      	cmp	r2, #73	; 0x49
 800726a:	d024      	beq.n	80072b6 <_strtod_l+0x356>
 800726c:	2a4e      	cmp	r2, #78	; 0x4e
 800726e:	f47f aed9 	bne.w	8007024 <_strtod_l+0xc4>
 8007272:	499f      	ldr	r1, [pc, #636]	; (80074f0 <_strtod_l+0x590>)
 8007274:	a817      	add	r0, sp, #92	; 0x5c
 8007276:	f001 fe3d 	bl	8008ef4 <__match>
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f aed2 	beq.w	8007024 <_strtod_l+0xc4>
 8007280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b28      	cmp	r3, #40	; 0x28
 8007286:	d12d      	bne.n	80072e4 <_strtod_l+0x384>
 8007288:	499a      	ldr	r1, [pc, #616]	; (80074f4 <_strtod_l+0x594>)
 800728a:	aa1a      	add	r2, sp, #104	; 0x68
 800728c:	a817      	add	r0, sp, #92	; 0x5c
 800728e:	f001 fe45 	bl	8008f1c <__hexnan>
 8007292:	2805      	cmp	r0, #5
 8007294:	d126      	bne.n	80072e4 <_strtod_l+0x384>
 8007296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007298:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800729c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80072a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80072a4:	e6a0      	b.n	8006fe8 <_strtod_l+0x88>
 80072a6:	210a      	movs	r1, #10
 80072a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80072ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80072b0:	e7b9      	b.n	8007226 <_strtod_l+0x2c6>
 80072b2:	2a6e      	cmp	r2, #110	; 0x6e
 80072b4:	e7db      	b.n	800726e <_strtod_l+0x30e>
 80072b6:	4990      	ldr	r1, [pc, #576]	; (80074f8 <_strtod_l+0x598>)
 80072b8:	a817      	add	r0, sp, #92	; 0x5c
 80072ba:	f001 fe1b 	bl	8008ef4 <__match>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f aeb0 	beq.w	8007024 <_strtod_l+0xc4>
 80072c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072c6:	498d      	ldr	r1, [pc, #564]	; (80074fc <_strtod_l+0x59c>)
 80072c8:	3b01      	subs	r3, #1
 80072ca:	a817      	add	r0, sp, #92	; 0x5c
 80072cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80072ce:	f001 fe11 	bl	8008ef4 <__match>
 80072d2:	b910      	cbnz	r0, 80072da <_strtod_l+0x37a>
 80072d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072d6:	3301      	adds	r3, #1
 80072d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80072da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800750c <_strtod_l+0x5ac>
 80072de:	f04f 0a00 	mov.w	sl, #0
 80072e2:	e681      	b.n	8006fe8 <_strtod_l+0x88>
 80072e4:	4886      	ldr	r0, [pc, #536]	; (8007500 <_strtod_l+0x5a0>)
 80072e6:	f002 fdf7 	bl	8009ed8 <nan>
 80072ea:	ec5b ab10 	vmov	sl, fp, d0
 80072ee:	e67b      	b.n	8006fe8 <_strtod_l+0x88>
 80072f0:	9b05      	ldr	r3, [sp, #20]
 80072f2:	9807      	ldr	r0, [sp, #28]
 80072f4:	1af3      	subs	r3, r6, r3
 80072f6:	2f00      	cmp	r7, #0
 80072f8:	bf08      	it	eq
 80072fa:	462f      	moveq	r7, r5
 80072fc:	2d10      	cmp	r5, #16
 80072fe:	9306      	str	r3, [sp, #24]
 8007300:	46a8      	mov	r8, r5
 8007302:	bfa8      	it	ge
 8007304:	f04f 0810 	movge.w	r8, #16
 8007308:	f7f9 f91c 	bl	8000544 <__aeabi_ui2d>
 800730c:	2d09      	cmp	r5, #9
 800730e:	4682      	mov	sl, r0
 8007310:	468b      	mov	fp, r1
 8007312:	dd13      	ble.n	800733c <_strtod_l+0x3dc>
 8007314:	4b7b      	ldr	r3, [pc, #492]	; (8007504 <_strtod_l+0x5a4>)
 8007316:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800731a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800731e:	f7f9 f98b 	bl	8000638 <__aeabi_dmul>
 8007322:	4682      	mov	sl, r0
 8007324:	4648      	mov	r0, r9
 8007326:	468b      	mov	fp, r1
 8007328:	f7f9 f90c 	bl	8000544 <__aeabi_ui2d>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4650      	mov	r0, sl
 8007332:	4659      	mov	r1, fp
 8007334:	f7f8 ffca 	bl	80002cc <__adddf3>
 8007338:	4682      	mov	sl, r0
 800733a:	468b      	mov	fp, r1
 800733c:	2d0f      	cmp	r5, #15
 800733e:	dc38      	bgt.n	80073b2 <_strtod_l+0x452>
 8007340:	9b06      	ldr	r3, [sp, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f43f ae50 	beq.w	8006fe8 <_strtod_l+0x88>
 8007348:	dd24      	ble.n	8007394 <_strtod_l+0x434>
 800734a:	2b16      	cmp	r3, #22
 800734c:	dc0b      	bgt.n	8007366 <_strtod_l+0x406>
 800734e:	496d      	ldr	r1, [pc, #436]	; (8007504 <_strtod_l+0x5a4>)
 8007350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007358:	4652      	mov	r2, sl
 800735a:	465b      	mov	r3, fp
 800735c:	f7f9 f96c 	bl	8000638 <__aeabi_dmul>
 8007360:	4682      	mov	sl, r0
 8007362:	468b      	mov	fp, r1
 8007364:	e640      	b.n	8006fe8 <_strtod_l+0x88>
 8007366:	9a06      	ldr	r2, [sp, #24]
 8007368:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800736c:	4293      	cmp	r3, r2
 800736e:	db20      	blt.n	80073b2 <_strtod_l+0x452>
 8007370:	4c64      	ldr	r4, [pc, #400]	; (8007504 <_strtod_l+0x5a4>)
 8007372:	f1c5 050f 	rsb	r5, r5, #15
 8007376:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800737a:	4652      	mov	r2, sl
 800737c:	465b      	mov	r3, fp
 800737e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007382:	f7f9 f959 	bl	8000638 <__aeabi_dmul>
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	1b5d      	subs	r5, r3, r5
 800738a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800738e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007392:	e7e3      	b.n	800735c <_strtod_l+0x3fc>
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	3316      	adds	r3, #22
 8007398:	db0b      	blt.n	80073b2 <_strtod_l+0x452>
 800739a:	9b05      	ldr	r3, [sp, #20]
 800739c:	1b9e      	subs	r6, r3, r6
 800739e:	4b59      	ldr	r3, [pc, #356]	; (8007504 <_strtod_l+0x5a4>)
 80073a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80073a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073a8:	4650      	mov	r0, sl
 80073aa:	4659      	mov	r1, fp
 80073ac:	f7f9 fa6e 	bl	800088c <__aeabi_ddiv>
 80073b0:	e7d6      	b.n	8007360 <_strtod_l+0x400>
 80073b2:	9b06      	ldr	r3, [sp, #24]
 80073b4:	eba5 0808 	sub.w	r8, r5, r8
 80073b8:	4498      	add	r8, r3
 80073ba:	f1b8 0f00 	cmp.w	r8, #0
 80073be:	dd74      	ble.n	80074aa <_strtod_l+0x54a>
 80073c0:	f018 030f 	ands.w	r3, r8, #15
 80073c4:	d00a      	beq.n	80073dc <_strtod_l+0x47c>
 80073c6:	494f      	ldr	r1, [pc, #316]	; (8007504 <_strtod_l+0x5a4>)
 80073c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073cc:	4652      	mov	r2, sl
 80073ce:	465b      	mov	r3, fp
 80073d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d4:	f7f9 f930 	bl	8000638 <__aeabi_dmul>
 80073d8:	4682      	mov	sl, r0
 80073da:	468b      	mov	fp, r1
 80073dc:	f038 080f 	bics.w	r8, r8, #15
 80073e0:	d04f      	beq.n	8007482 <_strtod_l+0x522>
 80073e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80073e6:	dd22      	ble.n	800742e <_strtod_l+0x4ce>
 80073e8:	2500      	movs	r5, #0
 80073ea:	462e      	mov	r6, r5
 80073ec:	9507      	str	r5, [sp, #28]
 80073ee:	9505      	str	r5, [sp, #20]
 80073f0:	2322      	movs	r3, #34	; 0x22
 80073f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800750c <_strtod_l+0x5ac>
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	f04f 0a00 	mov.w	sl, #0
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f43f adf2 	beq.w	8006fe8 <_strtod_l+0x88>
 8007404:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007406:	4620      	mov	r0, r4
 8007408:	f001 fe90 	bl	800912c <_Bfree>
 800740c:	9905      	ldr	r1, [sp, #20]
 800740e:	4620      	mov	r0, r4
 8007410:	f001 fe8c 	bl	800912c <_Bfree>
 8007414:	4631      	mov	r1, r6
 8007416:	4620      	mov	r0, r4
 8007418:	f001 fe88 	bl	800912c <_Bfree>
 800741c:	9907      	ldr	r1, [sp, #28]
 800741e:	4620      	mov	r0, r4
 8007420:	f001 fe84 	bl	800912c <_Bfree>
 8007424:	4629      	mov	r1, r5
 8007426:	4620      	mov	r0, r4
 8007428:	f001 fe80 	bl	800912c <_Bfree>
 800742c:	e5dc      	b.n	8006fe8 <_strtod_l+0x88>
 800742e:	4b36      	ldr	r3, [pc, #216]	; (8007508 <_strtod_l+0x5a8>)
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	2300      	movs	r3, #0
 8007434:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007438:	4650      	mov	r0, sl
 800743a:	4659      	mov	r1, fp
 800743c:	4699      	mov	r9, r3
 800743e:	f1b8 0f01 	cmp.w	r8, #1
 8007442:	dc21      	bgt.n	8007488 <_strtod_l+0x528>
 8007444:	b10b      	cbz	r3, 800744a <_strtod_l+0x4ea>
 8007446:	4682      	mov	sl, r0
 8007448:	468b      	mov	fp, r1
 800744a:	4b2f      	ldr	r3, [pc, #188]	; (8007508 <_strtod_l+0x5a8>)
 800744c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007450:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007454:	4652      	mov	r2, sl
 8007456:	465b      	mov	r3, fp
 8007458:	e9d9 0100 	ldrd	r0, r1, [r9]
 800745c:	f7f9 f8ec 	bl	8000638 <__aeabi_dmul>
 8007460:	4b2a      	ldr	r3, [pc, #168]	; (800750c <_strtod_l+0x5ac>)
 8007462:	460a      	mov	r2, r1
 8007464:	400b      	ands	r3, r1
 8007466:	492a      	ldr	r1, [pc, #168]	; (8007510 <_strtod_l+0x5b0>)
 8007468:	428b      	cmp	r3, r1
 800746a:	4682      	mov	sl, r0
 800746c:	d8bc      	bhi.n	80073e8 <_strtod_l+0x488>
 800746e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007472:	428b      	cmp	r3, r1
 8007474:	bf86      	itte	hi
 8007476:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007514 <_strtod_l+0x5b4>
 800747a:	f04f 3aff 	movhi.w	sl, #4294967295
 800747e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007482:	2300      	movs	r3, #0
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	e084      	b.n	8007592 <_strtod_l+0x632>
 8007488:	f018 0f01 	tst.w	r8, #1
 800748c:	d005      	beq.n	800749a <_strtod_l+0x53a>
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f9 f8d0 	bl	8000638 <__aeabi_dmul>
 8007498:	2301      	movs	r3, #1
 800749a:	9a04      	ldr	r2, [sp, #16]
 800749c:	3208      	adds	r2, #8
 800749e:	f109 0901 	add.w	r9, r9, #1
 80074a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074a6:	9204      	str	r2, [sp, #16]
 80074a8:	e7c9      	b.n	800743e <_strtod_l+0x4de>
 80074aa:	d0ea      	beq.n	8007482 <_strtod_l+0x522>
 80074ac:	f1c8 0800 	rsb	r8, r8, #0
 80074b0:	f018 020f 	ands.w	r2, r8, #15
 80074b4:	d00a      	beq.n	80074cc <_strtod_l+0x56c>
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <_strtod_l+0x5a4>)
 80074b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074bc:	4650      	mov	r0, sl
 80074be:	4659      	mov	r1, fp
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f9 f9e2 	bl	800088c <__aeabi_ddiv>
 80074c8:	4682      	mov	sl, r0
 80074ca:	468b      	mov	fp, r1
 80074cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80074d0:	d0d7      	beq.n	8007482 <_strtod_l+0x522>
 80074d2:	f1b8 0f1f 	cmp.w	r8, #31
 80074d6:	dd1f      	ble.n	8007518 <_strtod_l+0x5b8>
 80074d8:	2500      	movs	r5, #0
 80074da:	462e      	mov	r6, r5
 80074dc:	9507      	str	r5, [sp, #28]
 80074de:	9505      	str	r5, [sp, #20]
 80074e0:	2322      	movs	r3, #34	; 0x22
 80074e2:	f04f 0a00 	mov.w	sl, #0
 80074e6:	f04f 0b00 	mov.w	fp, #0
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	e786      	b.n	80073fc <_strtod_l+0x49c>
 80074ee:	bf00      	nop
 80074f0:	0800ab3d 	.word	0x0800ab3d
 80074f4:	0800ab80 	.word	0x0800ab80
 80074f8:	0800ab35 	.word	0x0800ab35
 80074fc:	0800acc4 	.word	0x0800acc4
 8007500:	0800af70 	.word	0x0800af70
 8007504:	0800ae50 	.word	0x0800ae50
 8007508:	0800ae28 	.word	0x0800ae28
 800750c:	7ff00000 	.word	0x7ff00000
 8007510:	7ca00000 	.word	0x7ca00000
 8007514:	7fefffff 	.word	0x7fefffff
 8007518:	f018 0310 	ands.w	r3, r8, #16
 800751c:	bf18      	it	ne
 800751e:	236a      	movne	r3, #106	; 0x6a
 8007520:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80078d0 <_strtod_l+0x970>
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	4650      	mov	r0, sl
 8007528:	4659      	mov	r1, fp
 800752a:	2300      	movs	r3, #0
 800752c:	f018 0f01 	tst.w	r8, #1
 8007530:	d004      	beq.n	800753c <_strtod_l+0x5dc>
 8007532:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007536:	f7f9 f87f 	bl	8000638 <__aeabi_dmul>
 800753a:	2301      	movs	r3, #1
 800753c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007540:	f109 0908 	add.w	r9, r9, #8
 8007544:	d1f2      	bne.n	800752c <_strtod_l+0x5cc>
 8007546:	b10b      	cbz	r3, 800754c <_strtod_l+0x5ec>
 8007548:	4682      	mov	sl, r0
 800754a:	468b      	mov	fp, r1
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	b1c3      	cbz	r3, 8007582 <_strtod_l+0x622>
 8007550:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007554:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007558:	2b00      	cmp	r3, #0
 800755a:	4659      	mov	r1, fp
 800755c:	dd11      	ble.n	8007582 <_strtod_l+0x622>
 800755e:	2b1f      	cmp	r3, #31
 8007560:	f340 8124 	ble.w	80077ac <_strtod_l+0x84c>
 8007564:	2b34      	cmp	r3, #52	; 0x34
 8007566:	bfde      	ittt	le
 8007568:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800756c:	f04f 33ff 	movle.w	r3, #4294967295
 8007570:	fa03 f202 	lslle.w	r2, r3, r2
 8007574:	f04f 0a00 	mov.w	sl, #0
 8007578:	bfcc      	ite	gt
 800757a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800757e:	ea02 0b01 	andle.w	fp, r2, r1
 8007582:	2200      	movs	r2, #0
 8007584:	2300      	movs	r3, #0
 8007586:	4650      	mov	r0, sl
 8007588:	4659      	mov	r1, fp
 800758a:	f7f9 fabd 	bl	8000b08 <__aeabi_dcmpeq>
 800758e:	2800      	cmp	r0, #0
 8007590:	d1a2      	bne.n	80074d8 <_strtod_l+0x578>
 8007592:	9b07      	ldr	r3, [sp, #28]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	9908      	ldr	r1, [sp, #32]
 8007598:	462b      	mov	r3, r5
 800759a:	463a      	mov	r2, r7
 800759c:	4620      	mov	r0, r4
 800759e:	f001 fe2d 	bl	80091fc <__s2b>
 80075a2:	9007      	str	r0, [sp, #28]
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f43f af1f 	beq.w	80073e8 <_strtod_l+0x488>
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	1b9e      	subs	r6, r3, r6
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bfb4      	ite	lt
 80075b4:	4633      	movlt	r3, r6
 80075b6:	2300      	movge	r3, #0
 80075b8:	930c      	str	r3, [sp, #48]	; 0x30
 80075ba:	9b06      	ldr	r3, [sp, #24]
 80075bc:	2500      	movs	r5, #0
 80075be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075c2:	9312      	str	r3, [sp, #72]	; 0x48
 80075c4:	462e      	mov	r6, r5
 80075c6:	9b07      	ldr	r3, [sp, #28]
 80075c8:	4620      	mov	r0, r4
 80075ca:	6859      	ldr	r1, [r3, #4]
 80075cc:	f001 fd6e 	bl	80090ac <_Balloc>
 80075d0:	9005      	str	r0, [sp, #20]
 80075d2:	2800      	cmp	r0, #0
 80075d4:	f43f af0c 	beq.w	80073f0 <_strtod_l+0x490>
 80075d8:	9b07      	ldr	r3, [sp, #28]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	3202      	adds	r2, #2
 80075de:	f103 010c 	add.w	r1, r3, #12
 80075e2:	0092      	lsls	r2, r2, #2
 80075e4:	300c      	adds	r0, #12
 80075e6:	f001 fd53 	bl	8009090 <memcpy>
 80075ea:	ec4b ab10 	vmov	d0, sl, fp
 80075ee:	aa1a      	add	r2, sp, #104	; 0x68
 80075f0:	a919      	add	r1, sp, #100	; 0x64
 80075f2:	4620      	mov	r0, r4
 80075f4:	f002 f948 	bl	8009888 <__d2b>
 80075f8:	ec4b ab18 	vmov	d8, sl, fp
 80075fc:	9018      	str	r0, [sp, #96]	; 0x60
 80075fe:	2800      	cmp	r0, #0
 8007600:	f43f aef6 	beq.w	80073f0 <_strtod_l+0x490>
 8007604:	2101      	movs	r1, #1
 8007606:	4620      	mov	r0, r4
 8007608:	f001 fe92 	bl	8009330 <__i2b>
 800760c:	4606      	mov	r6, r0
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f aeee 	beq.w	80073f0 <_strtod_l+0x490>
 8007614:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007616:	9904      	ldr	r1, [sp, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfab      	itete	ge
 800761c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800761e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007620:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007622:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007626:	bfac      	ite	ge
 8007628:	eb03 0902 	addge.w	r9, r3, r2
 800762c:	1ad7      	sublt	r7, r2, r3
 800762e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007630:	eba3 0801 	sub.w	r8, r3, r1
 8007634:	4490      	add	r8, r2
 8007636:	4ba1      	ldr	r3, [pc, #644]	; (80078bc <_strtod_l+0x95c>)
 8007638:	f108 38ff 	add.w	r8, r8, #4294967295
 800763c:	4598      	cmp	r8, r3
 800763e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007642:	f280 80c7 	bge.w	80077d4 <_strtod_l+0x874>
 8007646:	eba3 0308 	sub.w	r3, r3, r8
 800764a:	2b1f      	cmp	r3, #31
 800764c:	eba2 0203 	sub.w	r2, r2, r3
 8007650:	f04f 0101 	mov.w	r1, #1
 8007654:	f300 80b1 	bgt.w	80077ba <_strtod_l+0x85a>
 8007658:	fa01 f303 	lsl.w	r3, r1, r3
 800765c:	930d      	str	r3, [sp, #52]	; 0x34
 800765e:	2300      	movs	r3, #0
 8007660:	9308      	str	r3, [sp, #32]
 8007662:	eb09 0802 	add.w	r8, r9, r2
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	45c1      	cmp	r9, r8
 800766a:	4417      	add	r7, r2
 800766c:	441f      	add	r7, r3
 800766e:	464b      	mov	r3, r9
 8007670:	bfa8      	it	ge
 8007672:	4643      	movge	r3, r8
 8007674:	42bb      	cmp	r3, r7
 8007676:	bfa8      	it	ge
 8007678:	463b      	movge	r3, r7
 800767a:	2b00      	cmp	r3, #0
 800767c:	bfc2      	ittt	gt
 800767e:	eba8 0803 	subgt.w	r8, r8, r3
 8007682:	1aff      	subgt	r7, r7, r3
 8007684:	eba9 0903 	subgt.w	r9, r9, r3
 8007688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd17      	ble.n	80076be <_strtod_l+0x75e>
 800768e:	4631      	mov	r1, r6
 8007690:	461a      	mov	r2, r3
 8007692:	4620      	mov	r0, r4
 8007694:	f001 ff0c 	bl	80094b0 <__pow5mult>
 8007698:	4606      	mov	r6, r0
 800769a:	2800      	cmp	r0, #0
 800769c:	f43f aea8 	beq.w	80073f0 <_strtod_l+0x490>
 80076a0:	4601      	mov	r1, r0
 80076a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076a4:	4620      	mov	r0, r4
 80076a6:	f001 fe59 	bl	800935c <__multiply>
 80076aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f43f ae9f 	beq.w	80073f0 <_strtod_l+0x490>
 80076b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076b4:	4620      	mov	r0, r4
 80076b6:	f001 fd39 	bl	800912c <_Bfree>
 80076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076bc:	9318      	str	r3, [sp, #96]	; 0x60
 80076be:	f1b8 0f00 	cmp.w	r8, #0
 80076c2:	f300 808c 	bgt.w	80077de <_strtod_l+0x87e>
 80076c6:	9b06      	ldr	r3, [sp, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dd08      	ble.n	80076de <_strtod_l+0x77e>
 80076cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ce:	9905      	ldr	r1, [sp, #20]
 80076d0:	4620      	mov	r0, r4
 80076d2:	f001 feed 	bl	80094b0 <__pow5mult>
 80076d6:	9005      	str	r0, [sp, #20]
 80076d8:	2800      	cmp	r0, #0
 80076da:	f43f ae89 	beq.w	80073f0 <_strtod_l+0x490>
 80076de:	2f00      	cmp	r7, #0
 80076e0:	dd08      	ble.n	80076f4 <_strtod_l+0x794>
 80076e2:	9905      	ldr	r1, [sp, #20]
 80076e4:	463a      	mov	r2, r7
 80076e6:	4620      	mov	r0, r4
 80076e8:	f001 ff3c 	bl	8009564 <__lshift>
 80076ec:	9005      	str	r0, [sp, #20]
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f ae7e 	beq.w	80073f0 <_strtod_l+0x490>
 80076f4:	f1b9 0f00 	cmp.w	r9, #0
 80076f8:	dd08      	ble.n	800770c <_strtod_l+0x7ac>
 80076fa:	4631      	mov	r1, r6
 80076fc:	464a      	mov	r2, r9
 80076fe:	4620      	mov	r0, r4
 8007700:	f001 ff30 	bl	8009564 <__lshift>
 8007704:	4606      	mov	r6, r0
 8007706:	2800      	cmp	r0, #0
 8007708:	f43f ae72 	beq.w	80073f0 <_strtod_l+0x490>
 800770c:	9a05      	ldr	r2, [sp, #20]
 800770e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007710:	4620      	mov	r0, r4
 8007712:	f001 ffb3 	bl	800967c <__mdiff>
 8007716:	4605      	mov	r5, r0
 8007718:	2800      	cmp	r0, #0
 800771a:	f43f ae69 	beq.w	80073f0 <_strtod_l+0x490>
 800771e:	68c3      	ldr	r3, [r0, #12]
 8007720:	930b      	str	r3, [sp, #44]	; 0x2c
 8007722:	2300      	movs	r3, #0
 8007724:	60c3      	str	r3, [r0, #12]
 8007726:	4631      	mov	r1, r6
 8007728:	f001 ff8c 	bl	8009644 <__mcmp>
 800772c:	2800      	cmp	r0, #0
 800772e:	da60      	bge.n	80077f2 <_strtod_l+0x892>
 8007730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007732:	ea53 030a 	orrs.w	r3, r3, sl
 8007736:	f040 8082 	bne.w	800783e <_strtod_l+0x8de>
 800773a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800773e:	2b00      	cmp	r3, #0
 8007740:	d17d      	bne.n	800783e <_strtod_l+0x8de>
 8007742:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007746:	0d1b      	lsrs	r3, r3, #20
 8007748:	051b      	lsls	r3, r3, #20
 800774a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800774e:	d976      	bls.n	800783e <_strtod_l+0x8de>
 8007750:	696b      	ldr	r3, [r5, #20]
 8007752:	b913      	cbnz	r3, 800775a <_strtod_l+0x7fa>
 8007754:	692b      	ldr	r3, [r5, #16]
 8007756:	2b01      	cmp	r3, #1
 8007758:	dd71      	ble.n	800783e <_strtod_l+0x8de>
 800775a:	4629      	mov	r1, r5
 800775c:	2201      	movs	r2, #1
 800775e:	4620      	mov	r0, r4
 8007760:	f001 ff00 	bl	8009564 <__lshift>
 8007764:	4631      	mov	r1, r6
 8007766:	4605      	mov	r5, r0
 8007768:	f001 ff6c 	bl	8009644 <__mcmp>
 800776c:	2800      	cmp	r0, #0
 800776e:	dd66      	ble.n	800783e <_strtod_l+0x8de>
 8007770:	9904      	ldr	r1, [sp, #16]
 8007772:	4a53      	ldr	r2, [pc, #332]	; (80078c0 <_strtod_l+0x960>)
 8007774:	465b      	mov	r3, fp
 8007776:	2900      	cmp	r1, #0
 8007778:	f000 8081 	beq.w	800787e <_strtod_l+0x91e>
 800777c:	ea02 010b 	and.w	r1, r2, fp
 8007780:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007784:	dc7b      	bgt.n	800787e <_strtod_l+0x91e>
 8007786:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800778a:	f77f aea9 	ble.w	80074e0 <_strtod_l+0x580>
 800778e:	4b4d      	ldr	r3, [pc, #308]	; (80078c4 <_strtod_l+0x964>)
 8007790:	4650      	mov	r0, sl
 8007792:	4659      	mov	r1, fp
 8007794:	2200      	movs	r2, #0
 8007796:	f7f8 ff4f 	bl	8000638 <__aeabi_dmul>
 800779a:	460b      	mov	r3, r1
 800779c:	4303      	orrs	r3, r0
 800779e:	bf08      	it	eq
 80077a0:	2322      	moveq	r3, #34	; 0x22
 80077a2:	4682      	mov	sl, r0
 80077a4:	468b      	mov	fp, r1
 80077a6:	bf08      	it	eq
 80077a8:	6023      	streq	r3, [r4, #0]
 80077aa:	e62b      	b.n	8007404 <_strtod_l+0x4a4>
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	ea03 0a0a 	and.w	sl, r3, sl
 80077b8:	e6e3      	b.n	8007582 <_strtod_l+0x622>
 80077ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80077be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80077c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80077c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80077ca:	fa01 f308 	lsl.w	r3, r1, r8
 80077ce:	9308      	str	r3, [sp, #32]
 80077d0:	910d      	str	r1, [sp, #52]	; 0x34
 80077d2:	e746      	b.n	8007662 <_strtod_l+0x702>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9308      	str	r3, [sp, #32]
 80077d8:	2301      	movs	r3, #1
 80077da:	930d      	str	r3, [sp, #52]	; 0x34
 80077dc:	e741      	b.n	8007662 <_strtod_l+0x702>
 80077de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077e0:	4642      	mov	r2, r8
 80077e2:	4620      	mov	r0, r4
 80077e4:	f001 febe 	bl	8009564 <__lshift>
 80077e8:	9018      	str	r0, [sp, #96]	; 0x60
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f47f af6b 	bne.w	80076c6 <_strtod_l+0x766>
 80077f0:	e5fe      	b.n	80073f0 <_strtod_l+0x490>
 80077f2:	465f      	mov	r7, fp
 80077f4:	d16e      	bne.n	80078d4 <_strtod_l+0x974>
 80077f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077fc:	b342      	cbz	r2, 8007850 <_strtod_l+0x8f0>
 80077fe:	4a32      	ldr	r2, [pc, #200]	; (80078c8 <_strtod_l+0x968>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d128      	bne.n	8007856 <_strtod_l+0x8f6>
 8007804:	9b04      	ldr	r3, [sp, #16]
 8007806:	4651      	mov	r1, sl
 8007808:	b1eb      	cbz	r3, 8007846 <_strtod_l+0x8e6>
 800780a:	4b2d      	ldr	r3, [pc, #180]	; (80078c0 <_strtod_l+0x960>)
 800780c:	403b      	ands	r3, r7
 800780e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	d819      	bhi.n	800784c <_strtod_l+0x8ec>
 8007818:	0d1b      	lsrs	r3, r3, #20
 800781a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	4299      	cmp	r1, r3
 8007824:	d117      	bne.n	8007856 <_strtod_l+0x8f6>
 8007826:	4b29      	ldr	r3, [pc, #164]	; (80078cc <_strtod_l+0x96c>)
 8007828:	429f      	cmp	r7, r3
 800782a:	d102      	bne.n	8007832 <_strtod_l+0x8d2>
 800782c:	3101      	adds	r1, #1
 800782e:	f43f addf 	beq.w	80073f0 <_strtod_l+0x490>
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <_strtod_l+0x960>)
 8007834:	403b      	ands	r3, r7
 8007836:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800783a:	f04f 0a00 	mov.w	sl, #0
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1a4      	bne.n	800778e <_strtod_l+0x82e>
 8007844:	e5de      	b.n	8007404 <_strtod_l+0x4a4>
 8007846:	f04f 33ff 	mov.w	r3, #4294967295
 800784a:	e7ea      	b.n	8007822 <_strtod_l+0x8c2>
 800784c:	4613      	mov	r3, r2
 800784e:	e7e8      	b.n	8007822 <_strtod_l+0x8c2>
 8007850:	ea53 030a 	orrs.w	r3, r3, sl
 8007854:	d08c      	beq.n	8007770 <_strtod_l+0x810>
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	b1db      	cbz	r3, 8007892 <_strtod_l+0x932>
 800785a:	423b      	tst	r3, r7
 800785c:	d0ef      	beq.n	800783e <_strtod_l+0x8de>
 800785e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007860:	9a04      	ldr	r2, [sp, #16]
 8007862:	4650      	mov	r0, sl
 8007864:	4659      	mov	r1, fp
 8007866:	b1c3      	cbz	r3, 800789a <_strtod_l+0x93a>
 8007868:	f7ff fb5d 	bl	8006f26 <sulp>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	ec51 0b18 	vmov	r0, r1, d8
 8007874:	f7f8 fd2a 	bl	80002cc <__adddf3>
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	e7df      	b.n	800783e <_strtod_l+0x8de>
 800787e:	4013      	ands	r3, r2
 8007880:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007884:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007888:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800788c:	f04f 3aff 	mov.w	sl, #4294967295
 8007890:	e7d5      	b.n	800783e <_strtod_l+0x8de>
 8007892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007894:	ea13 0f0a 	tst.w	r3, sl
 8007898:	e7e0      	b.n	800785c <_strtod_l+0x8fc>
 800789a:	f7ff fb44 	bl	8006f26 <sulp>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	ec51 0b18 	vmov	r0, r1, d8
 80078a6:	f7f8 fd0f 	bl	80002c8 <__aeabi_dsub>
 80078aa:	2200      	movs	r2, #0
 80078ac:	2300      	movs	r3, #0
 80078ae:	4682      	mov	sl, r0
 80078b0:	468b      	mov	fp, r1
 80078b2:	f7f9 f929 	bl	8000b08 <__aeabi_dcmpeq>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d0c1      	beq.n	800783e <_strtod_l+0x8de>
 80078ba:	e611      	b.n	80074e0 <_strtod_l+0x580>
 80078bc:	fffffc02 	.word	0xfffffc02
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	39500000 	.word	0x39500000
 80078c8:	000fffff 	.word	0x000fffff
 80078cc:	7fefffff 	.word	0x7fefffff
 80078d0:	0800ab98 	.word	0x0800ab98
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	f002 f832 	bl	8009940 <__ratio>
 80078dc:	ec59 8b10 	vmov	r8, r9, d0
 80078e0:	ee10 0a10 	vmov	r0, s0
 80078e4:	2200      	movs	r2, #0
 80078e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f9 f920 	bl	8000b30 <__aeabi_dcmple>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d07a      	beq.n	80079ea <_strtod_l+0xa8a>
 80078f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d04a      	beq.n	8007990 <_strtod_l+0xa30>
 80078fa:	4b95      	ldr	r3, [pc, #596]	; (8007b50 <_strtod_l+0xbf0>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007902:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007b50 <_strtod_l+0xbf0>
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	4b92      	ldr	r3, [pc, #584]	; (8007b54 <_strtod_l+0xbf4>)
 800790c:	403b      	ands	r3, r7
 800790e:	930d      	str	r3, [sp, #52]	; 0x34
 8007910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007912:	4b91      	ldr	r3, [pc, #580]	; (8007b58 <_strtod_l+0xbf8>)
 8007914:	429a      	cmp	r2, r3
 8007916:	f040 80b0 	bne.w	8007a7a <_strtod_l+0xb1a>
 800791a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800791e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007922:	ec4b ab10 	vmov	d0, sl, fp
 8007926:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800792a:	f001 ff31 	bl	8009790 <__ulp>
 800792e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007932:	ec53 2b10 	vmov	r2, r3, d0
 8007936:	f7f8 fe7f 	bl	8000638 <__aeabi_dmul>
 800793a:	4652      	mov	r2, sl
 800793c:	465b      	mov	r3, fp
 800793e:	f7f8 fcc5 	bl	80002cc <__adddf3>
 8007942:	460b      	mov	r3, r1
 8007944:	4983      	ldr	r1, [pc, #524]	; (8007b54 <_strtod_l+0xbf4>)
 8007946:	4a85      	ldr	r2, [pc, #532]	; (8007b5c <_strtod_l+0xbfc>)
 8007948:	4019      	ands	r1, r3
 800794a:	4291      	cmp	r1, r2
 800794c:	4682      	mov	sl, r0
 800794e:	d960      	bls.n	8007a12 <_strtod_l+0xab2>
 8007950:	ee18 3a90 	vmov	r3, s17
 8007954:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007958:	4293      	cmp	r3, r2
 800795a:	d104      	bne.n	8007966 <_strtod_l+0xa06>
 800795c:	ee18 3a10 	vmov	r3, s16
 8007960:	3301      	adds	r3, #1
 8007962:	f43f ad45 	beq.w	80073f0 <_strtod_l+0x490>
 8007966:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007b68 <_strtod_l+0xc08>
 800796a:	f04f 3aff 	mov.w	sl, #4294967295
 800796e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007970:	4620      	mov	r0, r4
 8007972:	f001 fbdb 	bl	800912c <_Bfree>
 8007976:	9905      	ldr	r1, [sp, #20]
 8007978:	4620      	mov	r0, r4
 800797a:	f001 fbd7 	bl	800912c <_Bfree>
 800797e:	4631      	mov	r1, r6
 8007980:	4620      	mov	r0, r4
 8007982:	f001 fbd3 	bl	800912c <_Bfree>
 8007986:	4629      	mov	r1, r5
 8007988:	4620      	mov	r0, r4
 800798a:	f001 fbcf 	bl	800912c <_Bfree>
 800798e:	e61a      	b.n	80075c6 <_strtod_l+0x666>
 8007990:	f1ba 0f00 	cmp.w	sl, #0
 8007994:	d11b      	bne.n	80079ce <_strtod_l+0xa6e>
 8007996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800799a:	b9f3      	cbnz	r3, 80079da <_strtod_l+0xa7a>
 800799c:	4b6c      	ldr	r3, [pc, #432]	; (8007b50 <_strtod_l+0xbf0>)
 800799e:	2200      	movs	r2, #0
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f9 f8ba 	bl	8000b1c <__aeabi_dcmplt>
 80079a8:	b9d0      	cbnz	r0, 80079e0 <_strtod_l+0xa80>
 80079aa:	4640      	mov	r0, r8
 80079ac:	4649      	mov	r1, r9
 80079ae:	4b6c      	ldr	r3, [pc, #432]	; (8007b60 <_strtod_l+0xc00>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7f8 fe41 	bl	8000638 <__aeabi_dmul>
 80079b6:	4680      	mov	r8, r0
 80079b8:	4689      	mov	r9, r1
 80079ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80079c2:	9315      	str	r3, [sp, #84]	; 0x54
 80079c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079cc:	e79d      	b.n	800790a <_strtod_l+0x9aa>
 80079ce:	f1ba 0f01 	cmp.w	sl, #1
 80079d2:	d102      	bne.n	80079da <_strtod_l+0xa7a>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f43f ad83 	beq.w	80074e0 <_strtod_l+0x580>
 80079da:	4b62      	ldr	r3, [pc, #392]	; (8007b64 <_strtod_l+0xc04>)
 80079dc:	2200      	movs	r2, #0
 80079de:	e78e      	b.n	80078fe <_strtod_l+0x99e>
 80079e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007b60 <_strtod_l+0xc00>
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	e7e7      	b.n	80079ba <_strtod_l+0xa5a>
 80079ea:	4b5d      	ldr	r3, [pc, #372]	; (8007b60 <_strtod_l+0xc00>)
 80079ec:	4640      	mov	r0, r8
 80079ee:	4649      	mov	r1, r9
 80079f0:	2200      	movs	r2, #0
 80079f2:	f7f8 fe21 	bl	8000638 <__aeabi_dmul>
 80079f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f8:	4680      	mov	r8, r0
 80079fa:	4689      	mov	r9, r1
 80079fc:	b933      	cbnz	r3, 8007a0c <_strtod_l+0xaac>
 80079fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a02:	900e      	str	r0, [sp, #56]	; 0x38
 8007a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a0a:	e7dd      	b.n	80079c8 <_strtod_l+0xa68>
 8007a0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007a10:	e7f9      	b.n	8007a06 <_strtod_l+0xaa6>
 8007a12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1a8      	bne.n	800796e <_strtod_l+0xa0e>
 8007a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a22:	0d1b      	lsrs	r3, r3, #20
 8007a24:	051b      	lsls	r3, r3, #20
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d1a1      	bne.n	800796e <_strtod_l+0xa0e>
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f9 f963 	bl	8000cf8 <__aeabi_d2lz>
 8007a32:	f7f8 fdd3 	bl	80005dc <__aeabi_l2d>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f8 fc43 	bl	80002c8 <__aeabi_dsub>
 8007a42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a48:	ea43 030a 	orr.w	r3, r3, sl
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	4680      	mov	r8, r0
 8007a50:	4689      	mov	r9, r1
 8007a52:	d055      	beq.n	8007b00 <_strtod_l+0xba0>
 8007a54:	a336      	add	r3, pc, #216	; (adr r3, 8007b30 <_strtod_l+0xbd0>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f9 f85f 	bl	8000b1c <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f47f acd0 	bne.w	8007404 <_strtod_l+0x4a4>
 8007a64:	a334      	add	r3, pc, #208	; (adr r3, 8007b38 <_strtod_l+0xbd8>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	f7f9 f873 	bl	8000b58 <__aeabi_dcmpgt>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f af7b 	beq.w	800796e <_strtod_l+0xa0e>
 8007a78:	e4c4      	b.n	8007404 <_strtod_l+0x4a4>
 8007a7a:	9b04      	ldr	r3, [sp, #16]
 8007a7c:	b333      	cbz	r3, 8007acc <_strtod_l+0xb6c>
 8007a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a84:	d822      	bhi.n	8007acc <_strtod_l+0xb6c>
 8007a86:	a32e      	add	r3, pc, #184	; (adr r3, 8007b40 <_strtod_l+0xbe0>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f7f9 f84e 	bl	8000b30 <__aeabi_dcmple>
 8007a94:	b1a0      	cbz	r0, 8007ac0 <_strtod_l+0xb60>
 8007a96:	4649      	mov	r1, r9
 8007a98:	4640      	mov	r0, r8
 8007a9a:	f7f9 f8a5 	bl	8000be8 <__aeabi_d2uiz>
 8007a9e:	2801      	cmp	r0, #1
 8007aa0:	bf38      	it	cc
 8007aa2:	2001      	movcc	r0, #1
 8007aa4:	f7f8 fd4e 	bl	8000544 <__aeabi_ui2d>
 8007aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aaa:	4680      	mov	r8, r0
 8007aac:	4689      	mov	r9, r1
 8007aae:	bb23      	cbnz	r3, 8007afa <_strtod_l+0xb9a>
 8007ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ab4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ab8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007abc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ac4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	9309      	str	r3, [sp, #36]	; 0x24
 8007acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ad0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ad4:	eef0 0a68 	vmov.f32	s1, s17
 8007ad8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007adc:	f001 fe58 	bl	8009790 <__ulp>
 8007ae0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ae4:	ec53 2b10 	vmov	r2, r3, d0
 8007ae8:	f7f8 fda6 	bl	8000638 <__aeabi_dmul>
 8007aec:	ec53 2b18 	vmov	r2, r3, d8
 8007af0:	f7f8 fbec 	bl	80002cc <__adddf3>
 8007af4:	4682      	mov	sl, r0
 8007af6:	468b      	mov	fp, r1
 8007af8:	e78d      	b.n	8007a16 <_strtod_l+0xab6>
 8007afa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007afe:	e7db      	b.n	8007ab8 <_strtod_l+0xb58>
 8007b00:	a311      	add	r3, pc, #68	; (adr r3, 8007b48 <_strtod_l+0xbe8>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f9 f809 	bl	8000b1c <__aeabi_dcmplt>
 8007b0a:	e7b2      	b.n	8007a72 <_strtod_l+0xb12>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	f7ff ba6b 	b.w	8006ff0 <_strtod_l+0x90>
 8007b1a:	2a65      	cmp	r2, #101	; 0x65
 8007b1c:	f43f ab5f 	beq.w	80071de <_strtod_l+0x27e>
 8007b20:	2a45      	cmp	r2, #69	; 0x45
 8007b22:	f43f ab5c 	beq.w	80071de <_strtod_l+0x27e>
 8007b26:	2301      	movs	r3, #1
 8007b28:	f7ff bb94 	b.w	8007254 <_strtod_l+0x2f4>
 8007b2c:	f3af 8000 	nop.w
 8007b30:	94a03595 	.word	0x94a03595
 8007b34:	3fdfffff 	.word	0x3fdfffff
 8007b38:	35afe535 	.word	0x35afe535
 8007b3c:	3fe00000 	.word	0x3fe00000
 8007b40:	ffc00000 	.word	0xffc00000
 8007b44:	41dfffff 	.word	0x41dfffff
 8007b48:	94a03595 	.word	0x94a03595
 8007b4c:	3fcfffff 	.word	0x3fcfffff
 8007b50:	3ff00000 	.word	0x3ff00000
 8007b54:	7ff00000 	.word	0x7ff00000
 8007b58:	7fe00000 	.word	0x7fe00000
 8007b5c:	7c9fffff 	.word	0x7c9fffff
 8007b60:	3fe00000 	.word	0x3fe00000
 8007b64:	bff00000 	.word	0xbff00000
 8007b68:	7fefffff 	.word	0x7fefffff

08007b6c <_strtod_r>:
 8007b6c:	4b01      	ldr	r3, [pc, #4]	; (8007b74 <_strtod_r+0x8>)
 8007b6e:	f7ff b9f7 	b.w	8006f60 <_strtod_l>
 8007b72:	bf00      	nop
 8007b74:	200000a4 	.word	0x200000a4

08007b78 <_strtol_l.constprop.0>:
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7e:	d001      	beq.n	8007b84 <_strtol_l.constprop.0+0xc>
 8007b80:	2b24      	cmp	r3, #36	; 0x24
 8007b82:	d906      	bls.n	8007b92 <_strtol_l.constprop.0+0x1a>
 8007b84:	f7fe faea 	bl	800615c <__errno>
 8007b88:	2316      	movs	r3, #22
 8007b8a:	6003      	str	r3, [r0, #0]
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007c78 <_strtol_l.constprop.0+0x100>
 8007b96:	460d      	mov	r5, r1
 8007b98:	462e      	mov	r6, r5
 8007b9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007ba2:	f017 0708 	ands.w	r7, r7, #8
 8007ba6:	d1f7      	bne.n	8007b98 <_strtol_l.constprop.0+0x20>
 8007ba8:	2c2d      	cmp	r4, #45	; 0x2d
 8007baa:	d132      	bne.n	8007c12 <_strtol_l.constprop.0+0x9a>
 8007bac:	782c      	ldrb	r4, [r5, #0]
 8007bae:	2701      	movs	r7, #1
 8007bb0:	1cb5      	adds	r5, r6, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d05b      	beq.n	8007c6e <_strtol_l.constprop.0+0xf6>
 8007bb6:	2b10      	cmp	r3, #16
 8007bb8:	d109      	bne.n	8007bce <_strtol_l.constprop.0+0x56>
 8007bba:	2c30      	cmp	r4, #48	; 0x30
 8007bbc:	d107      	bne.n	8007bce <_strtol_l.constprop.0+0x56>
 8007bbe:	782c      	ldrb	r4, [r5, #0]
 8007bc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007bc4:	2c58      	cmp	r4, #88	; 0x58
 8007bc6:	d14d      	bne.n	8007c64 <_strtol_l.constprop.0+0xec>
 8007bc8:	786c      	ldrb	r4, [r5, #1]
 8007bca:	2310      	movs	r3, #16
 8007bcc:	3502      	adds	r5, #2
 8007bce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007bd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bd6:	f04f 0c00 	mov.w	ip, #0
 8007bda:	fbb8 f9f3 	udiv	r9, r8, r3
 8007bde:	4666      	mov	r6, ip
 8007be0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007be4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007be8:	f1be 0f09 	cmp.w	lr, #9
 8007bec:	d816      	bhi.n	8007c1c <_strtol_l.constprop.0+0xa4>
 8007bee:	4674      	mov	r4, lr
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	dd24      	ble.n	8007c3e <_strtol_l.constprop.0+0xc6>
 8007bf4:	f1bc 0f00 	cmp.w	ip, #0
 8007bf8:	db1e      	blt.n	8007c38 <_strtol_l.constprop.0+0xc0>
 8007bfa:	45b1      	cmp	r9, r6
 8007bfc:	d31c      	bcc.n	8007c38 <_strtol_l.constprop.0+0xc0>
 8007bfe:	d101      	bne.n	8007c04 <_strtol_l.constprop.0+0x8c>
 8007c00:	45a2      	cmp	sl, r4
 8007c02:	db19      	blt.n	8007c38 <_strtol_l.constprop.0+0xc0>
 8007c04:	fb06 4603 	mla	r6, r6, r3, r4
 8007c08:	f04f 0c01 	mov.w	ip, #1
 8007c0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c10:	e7e8      	b.n	8007be4 <_strtol_l.constprop.0+0x6c>
 8007c12:	2c2b      	cmp	r4, #43	; 0x2b
 8007c14:	bf04      	itt	eq
 8007c16:	782c      	ldrbeq	r4, [r5, #0]
 8007c18:	1cb5      	addeq	r5, r6, #2
 8007c1a:	e7ca      	b.n	8007bb2 <_strtol_l.constprop.0+0x3a>
 8007c1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007c20:	f1be 0f19 	cmp.w	lr, #25
 8007c24:	d801      	bhi.n	8007c2a <_strtol_l.constprop.0+0xb2>
 8007c26:	3c37      	subs	r4, #55	; 0x37
 8007c28:	e7e2      	b.n	8007bf0 <_strtol_l.constprop.0+0x78>
 8007c2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007c2e:	f1be 0f19 	cmp.w	lr, #25
 8007c32:	d804      	bhi.n	8007c3e <_strtol_l.constprop.0+0xc6>
 8007c34:	3c57      	subs	r4, #87	; 0x57
 8007c36:	e7db      	b.n	8007bf0 <_strtol_l.constprop.0+0x78>
 8007c38:	f04f 3cff 	mov.w	ip, #4294967295
 8007c3c:	e7e6      	b.n	8007c0c <_strtol_l.constprop.0+0x94>
 8007c3e:	f1bc 0f00 	cmp.w	ip, #0
 8007c42:	da05      	bge.n	8007c50 <_strtol_l.constprop.0+0xd8>
 8007c44:	2322      	movs	r3, #34	; 0x22
 8007c46:	6003      	str	r3, [r0, #0]
 8007c48:	4646      	mov	r6, r8
 8007c4a:	b942      	cbnz	r2, 8007c5e <_strtol_l.constprop.0+0xe6>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	e79e      	b.n	8007b8e <_strtol_l.constprop.0+0x16>
 8007c50:	b107      	cbz	r7, 8007c54 <_strtol_l.constprop.0+0xdc>
 8007c52:	4276      	negs	r6, r6
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	d0f9      	beq.n	8007c4c <_strtol_l.constprop.0+0xd4>
 8007c58:	f1bc 0f00 	cmp.w	ip, #0
 8007c5c:	d000      	beq.n	8007c60 <_strtol_l.constprop.0+0xe8>
 8007c5e:	1e69      	subs	r1, r5, #1
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	e7f3      	b.n	8007c4c <_strtol_l.constprop.0+0xd4>
 8007c64:	2430      	movs	r4, #48	; 0x30
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1b1      	bne.n	8007bce <_strtol_l.constprop.0+0x56>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	e7af      	b.n	8007bce <_strtol_l.constprop.0+0x56>
 8007c6e:	2c30      	cmp	r4, #48	; 0x30
 8007c70:	d0a5      	beq.n	8007bbe <_strtol_l.constprop.0+0x46>
 8007c72:	230a      	movs	r3, #10
 8007c74:	e7ab      	b.n	8007bce <_strtol_l.constprop.0+0x56>
 8007c76:	bf00      	nop
 8007c78:	0800abc1 	.word	0x0800abc1

08007c7c <_strtol_r>:
 8007c7c:	f7ff bf7c 	b.w	8007b78 <_strtol_l.constprop.0>

08007c80 <quorem>:
 8007c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	6903      	ldr	r3, [r0, #16]
 8007c86:	690c      	ldr	r4, [r1, #16]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	f2c0 8081 	blt.w	8007d92 <quorem+0x112>
 8007c90:	3c01      	subs	r4, #1
 8007c92:	f101 0814 	add.w	r8, r1, #20
 8007c96:	f100 0514 	add.w	r5, r0, #20
 8007c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	429a      	cmp	r2, r3
 8007cac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cb8:	d331      	bcc.n	8007d1e <quorem+0x9e>
 8007cba:	f04f 0e00 	mov.w	lr, #0
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	46ac      	mov	ip, r5
 8007cc2:	46f2      	mov	sl, lr
 8007cc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cc8:	b293      	uxth	r3, r2
 8007cca:	fb06 e303 	mla	r3, r6, r3, lr
 8007cce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8007cd8:	f8dc a000 	ldr.w	sl, [ip]
 8007cdc:	0c12      	lsrs	r2, r2, #16
 8007cde:	fa13 f38a 	uxtah	r3, r3, sl
 8007ce2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	9b00      	ldr	r3, [sp, #0]
 8007cea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007cfc:	4581      	cmp	r9, r0
 8007cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d02:	f84c 3b04 	str.w	r3, [ip], #4
 8007d06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d0a:	d2db      	bcs.n	8007cc4 <quorem+0x44>
 8007d0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d10:	b92b      	cbnz	r3, 8007d1e <quorem+0x9e>
 8007d12:	9b01      	ldr	r3, [sp, #4]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	429d      	cmp	r5, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	d32e      	bcc.n	8007d7a <quorem+0xfa>
 8007d1c:	613c      	str	r4, [r7, #16]
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f001 fc90 	bl	8009644 <__mcmp>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	db24      	blt.n	8007d72 <quorem+0xf2>
 8007d28:	3601      	adds	r6, #1
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f04f 0c00 	mov.w	ip, #0
 8007d30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d34:	f8d0 e000 	ldr.w	lr, [r0]
 8007d38:	b293      	uxth	r3, r2
 8007d3a:	ebac 0303 	sub.w	r3, ip, r3
 8007d3e:	0c12      	lsrs	r2, r2, #16
 8007d40:	fa13 f38e 	uxtah	r3, r3, lr
 8007d44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d52:	45c1      	cmp	r9, r8
 8007d54:	f840 3b04 	str.w	r3, [r0], #4
 8007d58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d5c:	d2e8      	bcs.n	8007d30 <quorem+0xb0>
 8007d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d66:	b922      	cbnz	r2, 8007d72 <quorem+0xf2>
 8007d68:	3b04      	subs	r3, #4
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	d30a      	bcc.n	8007d86 <quorem+0x106>
 8007d70:	613c      	str	r4, [r7, #16]
 8007d72:	4630      	mov	r0, r6
 8007d74:	b003      	add	sp, #12
 8007d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d1cc      	bne.n	8007d1c <quorem+0x9c>
 8007d82:	3c01      	subs	r4, #1
 8007d84:	e7c7      	b.n	8007d16 <quorem+0x96>
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d1f0      	bne.n	8007d70 <quorem+0xf0>
 8007d8e:	3c01      	subs	r4, #1
 8007d90:	e7eb      	b.n	8007d6a <quorem+0xea>
 8007d92:	2000      	movs	r0, #0
 8007d94:	e7ee      	b.n	8007d74 <quorem+0xf4>
	...

08007d98 <_dtoa_r>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	ed2d 8b04 	vpush	{d8-d9}
 8007da0:	ec57 6b10 	vmov	r6, r7, d0
 8007da4:	b093      	sub	sp, #76	; 0x4c
 8007da6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007da8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dac:	9106      	str	r1, [sp, #24]
 8007dae:	ee10 aa10 	vmov	sl, s0
 8007db2:	4604      	mov	r4, r0
 8007db4:	9209      	str	r2, [sp, #36]	; 0x24
 8007db6:	930c      	str	r3, [sp, #48]	; 0x30
 8007db8:	46bb      	mov	fp, r7
 8007dba:	b975      	cbnz	r5, 8007dda <_dtoa_r+0x42>
 8007dbc:	2010      	movs	r0, #16
 8007dbe:	f001 f94d 	bl	800905c <malloc>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6260      	str	r0, [r4, #36]	; 0x24
 8007dc6:	b920      	cbnz	r0, 8007dd2 <_dtoa_r+0x3a>
 8007dc8:	4ba7      	ldr	r3, [pc, #668]	; (8008068 <_dtoa_r+0x2d0>)
 8007dca:	21ea      	movs	r1, #234	; 0xea
 8007dcc:	48a7      	ldr	r0, [pc, #668]	; (800806c <_dtoa_r+0x2d4>)
 8007dce:	f002 f8bd 	bl	8009f4c <__assert_func>
 8007dd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dd6:	6005      	str	r5, [r0, #0]
 8007dd8:	60c5      	str	r5, [r0, #12]
 8007dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ddc:	6819      	ldr	r1, [r3, #0]
 8007dde:	b151      	cbz	r1, 8007df6 <_dtoa_r+0x5e>
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	604a      	str	r2, [r1, #4]
 8007de4:	2301      	movs	r3, #1
 8007de6:	4093      	lsls	r3, r2
 8007de8:	608b      	str	r3, [r1, #8]
 8007dea:	4620      	mov	r0, r4
 8007dec:	f001 f99e 	bl	800912c <_Bfree>
 8007df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	1e3b      	subs	r3, r7, #0
 8007df8:	bfaa      	itet	ge
 8007dfa:	2300      	movge	r3, #0
 8007dfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e00:	f8c8 3000 	strge.w	r3, [r8]
 8007e04:	4b9a      	ldr	r3, [pc, #616]	; (8008070 <_dtoa_r+0x2d8>)
 8007e06:	bfbc      	itt	lt
 8007e08:	2201      	movlt	r2, #1
 8007e0a:	f8c8 2000 	strlt.w	r2, [r8]
 8007e0e:	ea33 030b 	bics.w	r3, r3, fp
 8007e12:	d11b      	bne.n	8007e4c <_dtoa_r+0xb4>
 8007e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e16:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e20:	4333      	orrs	r3, r6
 8007e22:	f000 8592 	beq.w	800894a <_dtoa_r+0xbb2>
 8007e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e28:	b963      	cbnz	r3, 8007e44 <_dtoa_r+0xac>
 8007e2a:	4b92      	ldr	r3, [pc, #584]	; (8008074 <_dtoa_r+0x2dc>)
 8007e2c:	e022      	b.n	8007e74 <_dtoa_r+0xdc>
 8007e2e:	4b92      	ldr	r3, [pc, #584]	; (8008078 <_dtoa_r+0x2e0>)
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	3308      	adds	r3, #8
 8007e34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	9801      	ldr	r0, [sp, #4]
 8007e3a:	b013      	add	sp, #76	; 0x4c
 8007e3c:	ecbd 8b04 	vpop	{d8-d9}
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	4b8b      	ldr	r3, [pc, #556]	; (8008074 <_dtoa_r+0x2dc>)
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	3303      	adds	r3, #3
 8007e4a:	e7f3      	b.n	8007e34 <_dtoa_r+0x9c>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4650      	mov	r0, sl
 8007e52:	4659      	mov	r1, fp
 8007e54:	f7f8 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 8007e58:	ec4b ab19 	vmov	d9, sl, fp
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	b158      	cbz	r0, 8007e78 <_dtoa_r+0xe0>
 8007e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e62:	2301      	movs	r3, #1
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 856b 	beq.w	8008944 <_dtoa_r+0xbac>
 8007e6e:	4883      	ldr	r0, [pc, #524]	; (800807c <_dtoa_r+0x2e4>)
 8007e70:	6018      	str	r0, [r3, #0]
 8007e72:	1e43      	subs	r3, r0, #1
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	e7df      	b.n	8007e38 <_dtoa_r+0xa0>
 8007e78:	ec4b ab10 	vmov	d0, sl, fp
 8007e7c:	aa10      	add	r2, sp, #64	; 0x40
 8007e7e:	a911      	add	r1, sp, #68	; 0x44
 8007e80:	4620      	mov	r0, r4
 8007e82:	f001 fd01 	bl	8009888 <__d2b>
 8007e86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e8a:	ee08 0a10 	vmov	s16, r0
 8007e8e:	2d00      	cmp	r5, #0
 8007e90:	f000 8084 	beq.w	8007f9c <_dtoa_r+0x204>
 8007e94:	ee19 3a90 	vmov	r3, s19
 8007e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ea0:	4656      	mov	r6, sl
 8007ea2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007eaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007eae:	4b74      	ldr	r3, [pc, #464]	; (8008080 <_dtoa_r+0x2e8>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	f7f8 fa07 	bl	80002c8 <__aeabi_dsub>
 8007eba:	a365      	add	r3, pc, #404	; (adr r3, 8008050 <_dtoa_r+0x2b8>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 fbba 	bl	8000638 <__aeabi_dmul>
 8007ec4:	a364      	add	r3, pc, #400	; (adr r3, 8008058 <_dtoa_r+0x2c0>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 f9ff 	bl	80002cc <__adddf3>
 8007ece:	4606      	mov	r6, r0
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	460f      	mov	r7, r1
 8007ed4:	f7f8 fb46 	bl	8000564 <__aeabi_i2d>
 8007ed8:	a361      	add	r3, pc, #388	; (adr r3, 8008060 <_dtoa_r+0x2c8>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fbab 	bl	8000638 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 f9ef 	bl	80002cc <__adddf3>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	f7f8 fe51 	bl	8000b98 <__aeabi_d2iz>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	9000      	str	r0, [sp, #0]
 8007efa:	2300      	movs	r3, #0
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8007f04:	b150      	cbz	r0, 8007f1c <_dtoa_r+0x184>
 8007f06:	9800      	ldr	r0, [sp, #0]
 8007f08:	f7f8 fb2c 	bl	8000564 <__aeabi_i2d>
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	f7f8 fdfa 	bl	8000b08 <__aeabi_dcmpeq>
 8007f14:	b910      	cbnz	r0, 8007f1c <_dtoa_r+0x184>
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	9b00      	ldr	r3, [sp, #0]
 8007f1e:	2b16      	cmp	r3, #22
 8007f20:	d85a      	bhi.n	8007fd8 <_dtoa_r+0x240>
 8007f22:	9a00      	ldr	r2, [sp, #0]
 8007f24:	4b57      	ldr	r3, [pc, #348]	; (8008084 <_dtoa_r+0x2ec>)
 8007f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	ec51 0b19 	vmov	r0, r1, d9
 8007f32:	f7f8 fdf3 	bl	8000b1c <__aeabi_dcmplt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d050      	beq.n	8007fdc <_dtoa_r+0x244>
 8007f3a:	9b00      	ldr	r3, [sp, #0]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	2300      	movs	r3, #0
 8007f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f46:	1b5d      	subs	r5, r3, r5
 8007f48:	1e6b      	subs	r3, r5, #1
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	bf45      	ittet	mi
 8007f4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f52:	9304      	strmi	r3, [sp, #16]
 8007f54:	2300      	movpl	r3, #0
 8007f56:	2300      	movmi	r3, #0
 8007f58:	bf4c      	ite	mi
 8007f5a:	9305      	strmi	r3, [sp, #20]
 8007f5c:	9304      	strpl	r3, [sp, #16]
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	db3d      	blt.n	8007fe0 <_dtoa_r+0x248>
 8007f64:	9b05      	ldr	r3, [sp, #20]
 8007f66:	9a00      	ldr	r2, [sp, #0]
 8007f68:	920a      	str	r2, [sp, #40]	; 0x28
 8007f6a:	4413      	add	r3, r2
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9307      	str	r3, [sp, #28]
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	f200 8089 	bhi.w	800808c <_dtoa_r+0x2f4>
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	bfc4      	itt	gt
 8007f7e:	3b04      	subgt	r3, #4
 8007f80:	9306      	strgt	r3, [sp, #24]
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	f1a3 0302 	sub.w	r3, r3, #2
 8007f88:	bfcc      	ite	gt
 8007f8a:	2500      	movgt	r5, #0
 8007f8c:	2501      	movle	r5, #1
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	f200 8087 	bhi.w	80080a2 <_dtoa_r+0x30a>
 8007f94:	e8df f003 	tbb	[pc, r3]
 8007f98:	59383a2d 	.word	0x59383a2d
 8007f9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007fa0:	441d      	add	r5, r3
 8007fa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	bfc1      	itttt	gt
 8007faa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007fb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007fb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007fba:	bfda      	itte	le
 8007fbc:	f1c3 0320 	rsble	r3, r3, #32
 8007fc0:	fa06 f003 	lslle.w	r0, r6, r3
 8007fc4:	4318      	orrgt	r0, r3
 8007fc6:	f7f8 fabd 	bl	8000544 <__aeabi_ui2d>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4606      	mov	r6, r0
 8007fce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007fd2:	3d01      	subs	r5, #1
 8007fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fd6:	e76a      	b.n	8007eae <_dtoa_r+0x116>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e7b2      	b.n	8007f42 <_dtoa_r+0x1aa>
 8007fdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fde:	e7b1      	b.n	8007f44 <_dtoa_r+0x1ac>
 8007fe0:	9b04      	ldr	r3, [sp, #16]
 8007fe2:	9a00      	ldr	r2, [sp, #0]
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	4253      	negs	r3, r2
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	e7bf      	b.n	8007f72 <_dtoa_r+0x1da>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9308      	str	r3, [sp, #32]
 8007ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dc55      	bgt.n	80080a8 <_dtoa_r+0x310>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008002:	461a      	mov	r2, r3
 8008004:	9209      	str	r2, [sp, #36]	; 0x24
 8008006:	e00c      	b.n	8008022 <_dtoa_r+0x28a>
 8008008:	2301      	movs	r3, #1
 800800a:	e7f3      	b.n	8007ff4 <_dtoa_r+0x25c>
 800800c:	2300      	movs	r3, #0
 800800e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008010:	9308      	str	r3, [sp, #32]
 8008012:	9b00      	ldr	r3, [sp, #0]
 8008014:	4413      	add	r3, r2
 8008016:	9302      	str	r3, [sp, #8]
 8008018:	3301      	adds	r3, #1
 800801a:	2b01      	cmp	r3, #1
 800801c:	9303      	str	r3, [sp, #12]
 800801e:	bfb8      	it	lt
 8008020:	2301      	movlt	r3, #1
 8008022:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008024:	2200      	movs	r2, #0
 8008026:	6042      	str	r2, [r0, #4]
 8008028:	2204      	movs	r2, #4
 800802a:	f102 0614 	add.w	r6, r2, #20
 800802e:	429e      	cmp	r6, r3
 8008030:	6841      	ldr	r1, [r0, #4]
 8008032:	d93d      	bls.n	80080b0 <_dtoa_r+0x318>
 8008034:	4620      	mov	r0, r4
 8008036:	f001 f839 	bl	80090ac <_Balloc>
 800803a:	9001      	str	r0, [sp, #4]
 800803c:	2800      	cmp	r0, #0
 800803e:	d13b      	bne.n	80080b8 <_dtoa_r+0x320>
 8008040:	4b11      	ldr	r3, [pc, #68]	; (8008088 <_dtoa_r+0x2f0>)
 8008042:	4602      	mov	r2, r0
 8008044:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008048:	e6c0      	b.n	8007dcc <_dtoa_r+0x34>
 800804a:	2301      	movs	r3, #1
 800804c:	e7df      	b.n	800800e <_dtoa_r+0x276>
 800804e:	bf00      	nop
 8008050:	636f4361 	.word	0x636f4361
 8008054:	3fd287a7 	.word	0x3fd287a7
 8008058:	8b60c8b3 	.word	0x8b60c8b3
 800805c:	3fc68a28 	.word	0x3fc68a28
 8008060:	509f79fb 	.word	0x509f79fb
 8008064:	3fd34413 	.word	0x3fd34413
 8008068:	0800acce 	.word	0x0800acce
 800806c:	0800ace5 	.word	0x0800ace5
 8008070:	7ff00000 	.word	0x7ff00000
 8008074:	0800acca 	.word	0x0800acca
 8008078:	0800acc1 	.word	0x0800acc1
 800807c:	0800ab41 	.word	0x0800ab41
 8008080:	3ff80000 	.word	0x3ff80000
 8008084:	0800ae50 	.word	0x0800ae50
 8008088:	0800ad40 	.word	0x0800ad40
 800808c:	2501      	movs	r5, #1
 800808e:	2300      	movs	r3, #0
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	9508      	str	r5, [sp, #32]
 8008094:	f04f 33ff 	mov.w	r3, #4294967295
 8008098:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800809c:	2200      	movs	r2, #0
 800809e:	2312      	movs	r3, #18
 80080a0:	e7b0      	b.n	8008004 <_dtoa_r+0x26c>
 80080a2:	2301      	movs	r3, #1
 80080a4:	9308      	str	r3, [sp, #32]
 80080a6:	e7f5      	b.n	8008094 <_dtoa_r+0x2fc>
 80080a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080ae:	e7b8      	b.n	8008022 <_dtoa_r+0x28a>
 80080b0:	3101      	adds	r1, #1
 80080b2:	6041      	str	r1, [r0, #4]
 80080b4:	0052      	lsls	r2, r2, #1
 80080b6:	e7b8      	b.n	800802a <_dtoa_r+0x292>
 80080b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ba:	9a01      	ldr	r2, [sp, #4]
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	2b0e      	cmp	r3, #14
 80080c2:	f200 809d 	bhi.w	8008200 <_dtoa_r+0x468>
 80080c6:	2d00      	cmp	r5, #0
 80080c8:	f000 809a 	beq.w	8008200 <_dtoa_r+0x468>
 80080cc:	9b00      	ldr	r3, [sp, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dd32      	ble.n	8008138 <_dtoa_r+0x3a0>
 80080d2:	4ab7      	ldr	r2, [pc, #732]	; (80083b0 <_dtoa_r+0x618>)
 80080d4:	f003 030f 	and.w	r3, r3, #15
 80080d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	05d8      	lsls	r0, r3, #23
 80080e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80080e8:	d516      	bpl.n	8008118 <_dtoa_r+0x380>
 80080ea:	4bb2      	ldr	r3, [pc, #712]	; (80083b4 <_dtoa_r+0x61c>)
 80080ec:	ec51 0b19 	vmov	r0, r1, d9
 80080f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080f4:	f7f8 fbca 	bl	800088c <__aeabi_ddiv>
 80080f8:	f007 070f 	and.w	r7, r7, #15
 80080fc:	4682      	mov	sl, r0
 80080fe:	468b      	mov	fp, r1
 8008100:	2503      	movs	r5, #3
 8008102:	4eac      	ldr	r6, [pc, #688]	; (80083b4 <_dtoa_r+0x61c>)
 8008104:	b957      	cbnz	r7, 800811c <_dtoa_r+0x384>
 8008106:	4642      	mov	r2, r8
 8008108:	464b      	mov	r3, r9
 800810a:	4650      	mov	r0, sl
 800810c:	4659      	mov	r1, fp
 800810e:	f7f8 fbbd 	bl	800088c <__aeabi_ddiv>
 8008112:	4682      	mov	sl, r0
 8008114:	468b      	mov	fp, r1
 8008116:	e028      	b.n	800816a <_dtoa_r+0x3d2>
 8008118:	2502      	movs	r5, #2
 800811a:	e7f2      	b.n	8008102 <_dtoa_r+0x36a>
 800811c:	07f9      	lsls	r1, r7, #31
 800811e:	d508      	bpl.n	8008132 <_dtoa_r+0x39a>
 8008120:	4640      	mov	r0, r8
 8008122:	4649      	mov	r1, r9
 8008124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008128:	f7f8 fa86 	bl	8000638 <__aeabi_dmul>
 800812c:	3501      	adds	r5, #1
 800812e:	4680      	mov	r8, r0
 8008130:	4689      	mov	r9, r1
 8008132:	107f      	asrs	r7, r7, #1
 8008134:	3608      	adds	r6, #8
 8008136:	e7e5      	b.n	8008104 <_dtoa_r+0x36c>
 8008138:	f000 809b 	beq.w	8008272 <_dtoa_r+0x4da>
 800813c:	9b00      	ldr	r3, [sp, #0]
 800813e:	4f9d      	ldr	r7, [pc, #628]	; (80083b4 <_dtoa_r+0x61c>)
 8008140:	425e      	negs	r6, r3
 8008142:	4b9b      	ldr	r3, [pc, #620]	; (80083b0 <_dtoa_r+0x618>)
 8008144:	f006 020f 	and.w	r2, r6, #15
 8008148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	ec51 0b19 	vmov	r0, r1, d9
 8008154:	f7f8 fa70 	bl	8000638 <__aeabi_dmul>
 8008158:	1136      	asrs	r6, r6, #4
 800815a:	4682      	mov	sl, r0
 800815c:	468b      	mov	fp, r1
 800815e:	2300      	movs	r3, #0
 8008160:	2502      	movs	r5, #2
 8008162:	2e00      	cmp	r6, #0
 8008164:	d17a      	bne.n	800825c <_dtoa_r+0x4c4>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1d3      	bne.n	8008112 <_dtoa_r+0x37a>
 800816a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8082 	beq.w	8008276 <_dtoa_r+0x4de>
 8008172:	4b91      	ldr	r3, [pc, #580]	; (80083b8 <_dtoa_r+0x620>)
 8008174:	2200      	movs	r2, #0
 8008176:	4650      	mov	r0, sl
 8008178:	4659      	mov	r1, fp
 800817a:	f7f8 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	d079      	beq.n	8008276 <_dtoa_r+0x4de>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d076      	beq.n	8008276 <_dtoa_r+0x4de>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	dd36      	ble.n	80081fc <_dtoa_r+0x464>
 800818e:	9b00      	ldr	r3, [sp, #0]
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	1e5f      	subs	r7, r3, #1
 8008196:	2200      	movs	r2, #0
 8008198:	4b88      	ldr	r3, [pc, #544]	; (80083bc <_dtoa_r+0x624>)
 800819a:	f7f8 fa4d 	bl	8000638 <__aeabi_dmul>
 800819e:	9e02      	ldr	r6, [sp, #8]
 80081a0:	4682      	mov	sl, r0
 80081a2:	468b      	mov	fp, r1
 80081a4:	3501      	adds	r5, #1
 80081a6:	4628      	mov	r0, r5
 80081a8:	f7f8 f9dc 	bl	8000564 <__aeabi_i2d>
 80081ac:	4652      	mov	r2, sl
 80081ae:	465b      	mov	r3, fp
 80081b0:	f7f8 fa42 	bl	8000638 <__aeabi_dmul>
 80081b4:	4b82      	ldr	r3, [pc, #520]	; (80083c0 <_dtoa_r+0x628>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	f7f8 f888 	bl	80002cc <__adddf3>
 80081bc:	46d0      	mov	r8, sl
 80081be:	46d9      	mov	r9, fp
 80081c0:	4682      	mov	sl, r0
 80081c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	d158      	bne.n	800827c <_dtoa_r+0x4e4>
 80081ca:	4b7e      	ldr	r3, [pc, #504]	; (80083c4 <_dtoa_r+0x62c>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 f879 	bl	80002c8 <__aeabi_dsub>
 80081d6:	4652      	mov	r2, sl
 80081d8:	465b      	mov	r3, fp
 80081da:	4680      	mov	r8, r0
 80081dc:	4689      	mov	r9, r1
 80081de:	f7f8 fcbb 	bl	8000b58 <__aeabi_dcmpgt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f040 8295 	bne.w	8008712 <_dtoa_r+0x97a>
 80081e8:	4652      	mov	r2, sl
 80081ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081ee:	4640      	mov	r0, r8
 80081f0:	4649      	mov	r1, r9
 80081f2:	f7f8 fc93 	bl	8000b1c <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f040 8289 	bne.w	800870e <_dtoa_r+0x976>
 80081fc:	ec5b ab19 	vmov	sl, fp, d9
 8008200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008202:	2b00      	cmp	r3, #0
 8008204:	f2c0 8148 	blt.w	8008498 <_dtoa_r+0x700>
 8008208:	9a00      	ldr	r2, [sp, #0]
 800820a:	2a0e      	cmp	r2, #14
 800820c:	f300 8144 	bgt.w	8008498 <_dtoa_r+0x700>
 8008210:	4b67      	ldr	r3, [pc, #412]	; (80083b0 <_dtoa_r+0x618>)
 8008212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	f280 80d5 	bge.w	80083cc <_dtoa_r+0x634>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f300 80d1 	bgt.w	80083cc <_dtoa_r+0x634>
 800822a:	f040 826f 	bne.w	800870c <_dtoa_r+0x974>
 800822e:	4b65      	ldr	r3, [pc, #404]	; (80083c4 <_dtoa_r+0x62c>)
 8008230:	2200      	movs	r2, #0
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	f7f8 f9ff 	bl	8000638 <__aeabi_dmul>
 800823a:	4652      	mov	r2, sl
 800823c:	465b      	mov	r3, fp
 800823e:	f7f8 fc81 	bl	8000b44 <__aeabi_dcmpge>
 8008242:	9e03      	ldr	r6, [sp, #12]
 8008244:	4637      	mov	r7, r6
 8008246:	2800      	cmp	r0, #0
 8008248:	f040 8245 	bne.w	80086d6 <_dtoa_r+0x93e>
 800824c:	9d01      	ldr	r5, [sp, #4]
 800824e:	2331      	movs	r3, #49	; 0x31
 8008250:	f805 3b01 	strb.w	r3, [r5], #1
 8008254:	9b00      	ldr	r3, [sp, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	e240      	b.n	80086de <_dtoa_r+0x946>
 800825c:	07f2      	lsls	r2, r6, #31
 800825e:	d505      	bpl.n	800826c <_dtoa_r+0x4d4>
 8008260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008264:	f7f8 f9e8 	bl	8000638 <__aeabi_dmul>
 8008268:	3501      	adds	r5, #1
 800826a:	2301      	movs	r3, #1
 800826c:	1076      	asrs	r6, r6, #1
 800826e:	3708      	adds	r7, #8
 8008270:	e777      	b.n	8008162 <_dtoa_r+0x3ca>
 8008272:	2502      	movs	r5, #2
 8008274:	e779      	b.n	800816a <_dtoa_r+0x3d2>
 8008276:	9f00      	ldr	r7, [sp, #0]
 8008278:	9e03      	ldr	r6, [sp, #12]
 800827a:	e794      	b.n	80081a6 <_dtoa_r+0x40e>
 800827c:	9901      	ldr	r1, [sp, #4]
 800827e:	4b4c      	ldr	r3, [pc, #304]	; (80083b0 <_dtoa_r+0x618>)
 8008280:	4431      	add	r1, r6
 8008282:	910d      	str	r1, [sp, #52]	; 0x34
 8008284:	9908      	ldr	r1, [sp, #32]
 8008286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800828a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800828e:	2900      	cmp	r1, #0
 8008290:	d043      	beq.n	800831a <_dtoa_r+0x582>
 8008292:	494d      	ldr	r1, [pc, #308]	; (80083c8 <_dtoa_r+0x630>)
 8008294:	2000      	movs	r0, #0
 8008296:	f7f8 faf9 	bl	800088c <__aeabi_ddiv>
 800829a:	4652      	mov	r2, sl
 800829c:	465b      	mov	r3, fp
 800829e:	f7f8 f813 	bl	80002c8 <__aeabi_dsub>
 80082a2:	9d01      	ldr	r5, [sp, #4]
 80082a4:	4682      	mov	sl, r0
 80082a6:	468b      	mov	fp, r1
 80082a8:	4649      	mov	r1, r9
 80082aa:	4640      	mov	r0, r8
 80082ac:	f7f8 fc74 	bl	8000b98 <__aeabi_d2iz>
 80082b0:	4606      	mov	r6, r0
 80082b2:	f7f8 f957 	bl	8000564 <__aeabi_i2d>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4640      	mov	r0, r8
 80082bc:	4649      	mov	r1, r9
 80082be:	f7f8 f803 	bl	80002c8 <__aeabi_dsub>
 80082c2:	3630      	adds	r6, #48	; 0x30
 80082c4:	f805 6b01 	strb.w	r6, [r5], #1
 80082c8:	4652      	mov	r2, sl
 80082ca:	465b      	mov	r3, fp
 80082cc:	4680      	mov	r8, r0
 80082ce:	4689      	mov	r9, r1
 80082d0:	f7f8 fc24 	bl	8000b1c <__aeabi_dcmplt>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d163      	bne.n	80083a0 <_dtoa_r+0x608>
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	4936      	ldr	r1, [pc, #216]	; (80083b8 <_dtoa_r+0x620>)
 80082de:	2000      	movs	r0, #0
 80082e0:	f7f7 fff2 	bl	80002c8 <__aeabi_dsub>
 80082e4:	4652      	mov	r2, sl
 80082e6:	465b      	mov	r3, fp
 80082e8:	f7f8 fc18 	bl	8000b1c <__aeabi_dcmplt>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f040 80b5 	bne.w	800845c <_dtoa_r+0x6c4>
 80082f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f4:	429d      	cmp	r5, r3
 80082f6:	d081      	beq.n	80081fc <_dtoa_r+0x464>
 80082f8:	4b30      	ldr	r3, [pc, #192]	; (80083bc <_dtoa_r+0x624>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	4650      	mov	r0, sl
 80082fe:	4659      	mov	r1, fp
 8008300:	f7f8 f99a 	bl	8000638 <__aeabi_dmul>
 8008304:	4b2d      	ldr	r3, [pc, #180]	; (80083bc <_dtoa_r+0x624>)
 8008306:	4682      	mov	sl, r0
 8008308:	468b      	mov	fp, r1
 800830a:	4640      	mov	r0, r8
 800830c:	4649      	mov	r1, r9
 800830e:	2200      	movs	r2, #0
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	4680      	mov	r8, r0
 8008316:	4689      	mov	r9, r1
 8008318:	e7c6      	b.n	80082a8 <_dtoa_r+0x510>
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f8 f98b 	bl	8000638 <__aeabi_dmul>
 8008322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008324:	9d01      	ldr	r5, [sp, #4]
 8008326:	930f      	str	r3, [sp, #60]	; 0x3c
 8008328:	4682      	mov	sl, r0
 800832a:	468b      	mov	fp, r1
 800832c:	4649      	mov	r1, r9
 800832e:	4640      	mov	r0, r8
 8008330:	f7f8 fc32 	bl	8000b98 <__aeabi_d2iz>
 8008334:	4606      	mov	r6, r0
 8008336:	f7f8 f915 	bl	8000564 <__aeabi_i2d>
 800833a:	3630      	adds	r6, #48	; 0x30
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7f7 ffc0 	bl	80002c8 <__aeabi_dsub>
 8008348:	f805 6b01 	strb.w	r6, [r5], #1
 800834c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800834e:	429d      	cmp	r5, r3
 8008350:	4680      	mov	r8, r0
 8008352:	4689      	mov	r9, r1
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	d124      	bne.n	80083a4 <_dtoa_r+0x60c>
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <_dtoa_r+0x630>)
 800835c:	4650      	mov	r0, sl
 800835e:	4659      	mov	r1, fp
 8008360:	f7f7 ffb4 	bl	80002cc <__adddf3>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4640      	mov	r0, r8
 800836a:	4649      	mov	r1, r9
 800836c:	f7f8 fbf4 	bl	8000b58 <__aeabi_dcmpgt>
 8008370:	2800      	cmp	r0, #0
 8008372:	d173      	bne.n	800845c <_dtoa_r+0x6c4>
 8008374:	4652      	mov	r2, sl
 8008376:	465b      	mov	r3, fp
 8008378:	4913      	ldr	r1, [pc, #76]	; (80083c8 <_dtoa_r+0x630>)
 800837a:	2000      	movs	r0, #0
 800837c:	f7f7 ffa4 	bl	80002c8 <__aeabi_dsub>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f8 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800838c:	2800      	cmp	r0, #0
 800838e:	f43f af35 	beq.w	80081fc <_dtoa_r+0x464>
 8008392:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008394:	1e6b      	subs	r3, r5, #1
 8008396:	930f      	str	r3, [sp, #60]	; 0x3c
 8008398:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800839c:	2b30      	cmp	r3, #48	; 0x30
 800839e:	d0f8      	beq.n	8008392 <_dtoa_r+0x5fa>
 80083a0:	9700      	str	r7, [sp, #0]
 80083a2:	e049      	b.n	8008438 <_dtoa_r+0x6a0>
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <_dtoa_r+0x624>)
 80083a6:	f7f8 f947 	bl	8000638 <__aeabi_dmul>
 80083aa:	4680      	mov	r8, r0
 80083ac:	4689      	mov	r9, r1
 80083ae:	e7bd      	b.n	800832c <_dtoa_r+0x594>
 80083b0:	0800ae50 	.word	0x0800ae50
 80083b4:	0800ae28 	.word	0x0800ae28
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	40240000 	.word	0x40240000
 80083c0:	401c0000 	.word	0x401c0000
 80083c4:	40140000 	.word	0x40140000
 80083c8:	3fe00000 	.word	0x3fe00000
 80083cc:	9d01      	ldr	r5, [sp, #4]
 80083ce:	4656      	mov	r6, sl
 80083d0:	465f      	mov	r7, fp
 80083d2:	4642      	mov	r2, r8
 80083d4:	464b      	mov	r3, r9
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	f7f8 fa57 	bl	800088c <__aeabi_ddiv>
 80083de:	f7f8 fbdb 	bl	8000b98 <__aeabi_d2iz>
 80083e2:	4682      	mov	sl, r0
 80083e4:	f7f8 f8be 	bl	8000564 <__aeabi_i2d>
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	f7f8 f924 	bl	8000638 <__aeabi_dmul>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4630      	mov	r0, r6
 80083f6:	4639      	mov	r1, r7
 80083f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80083fc:	f7f7 ff64 	bl	80002c8 <__aeabi_dsub>
 8008400:	f805 6b01 	strb.w	r6, [r5], #1
 8008404:	9e01      	ldr	r6, [sp, #4]
 8008406:	9f03      	ldr	r7, [sp, #12]
 8008408:	1bae      	subs	r6, r5, r6
 800840a:	42b7      	cmp	r7, r6
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	d135      	bne.n	800847e <_dtoa_r+0x6e6>
 8008412:	f7f7 ff5b 	bl	80002cc <__adddf3>
 8008416:	4642      	mov	r2, r8
 8008418:	464b      	mov	r3, r9
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	f7f8 fb9b 	bl	8000b58 <__aeabi_dcmpgt>
 8008422:	b9d0      	cbnz	r0, 800845a <_dtoa_r+0x6c2>
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f8 fb6c 	bl	8000b08 <__aeabi_dcmpeq>
 8008430:	b110      	cbz	r0, 8008438 <_dtoa_r+0x6a0>
 8008432:	f01a 0f01 	tst.w	sl, #1
 8008436:	d110      	bne.n	800845a <_dtoa_r+0x6c2>
 8008438:	4620      	mov	r0, r4
 800843a:	ee18 1a10 	vmov	r1, s16
 800843e:	f000 fe75 	bl	800912c <_Bfree>
 8008442:	2300      	movs	r3, #0
 8008444:	9800      	ldr	r0, [sp, #0]
 8008446:	702b      	strb	r3, [r5, #0]
 8008448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800844a:	3001      	adds	r0, #1
 800844c:	6018      	str	r0, [r3, #0]
 800844e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008450:	2b00      	cmp	r3, #0
 8008452:	f43f acf1 	beq.w	8007e38 <_dtoa_r+0xa0>
 8008456:	601d      	str	r5, [r3, #0]
 8008458:	e4ee      	b.n	8007e38 <_dtoa_r+0xa0>
 800845a:	9f00      	ldr	r7, [sp, #0]
 800845c:	462b      	mov	r3, r5
 800845e:	461d      	mov	r5, r3
 8008460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008464:	2a39      	cmp	r2, #57	; 0x39
 8008466:	d106      	bne.n	8008476 <_dtoa_r+0x6de>
 8008468:	9a01      	ldr	r2, [sp, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d1f7      	bne.n	800845e <_dtoa_r+0x6c6>
 800846e:	9901      	ldr	r1, [sp, #4]
 8008470:	2230      	movs	r2, #48	; 0x30
 8008472:	3701      	adds	r7, #1
 8008474:	700a      	strb	r2, [r1, #0]
 8008476:	781a      	ldrb	r2, [r3, #0]
 8008478:	3201      	adds	r2, #1
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e790      	b.n	80083a0 <_dtoa_r+0x608>
 800847e:	4ba6      	ldr	r3, [pc, #664]	; (8008718 <_dtoa_r+0x980>)
 8008480:	2200      	movs	r2, #0
 8008482:	f7f8 f8d9 	bl	8000638 <__aeabi_dmul>
 8008486:	2200      	movs	r2, #0
 8008488:	2300      	movs	r3, #0
 800848a:	4606      	mov	r6, r0
 800848c:	460f      	mov	r7, r1
 800848e:	f7f8 fb3b 	bl	8000b08 <__aeabi_dcmpeq>
 8008492:	2800      	cmp	r0, #0
 8008494:	d09d      	beq.n	80083d2 <_dtoa_r+0x63a>
 8008496:	e7cf      	b.n	8008438 <_dtoa_r+0x6a0>
 8008498:	9a08      	ldr	r2, [sp, #32]
 800849a:	2a00      	cmp	r2, #0
 800849c:	f000 80d7 	beq.w	800864e <_dtoa_r+0x8b6>
 80084a0:	9a06      	ldr	r2, [sp, #24]
 80084a2:	2a01      	cmp	r2, #1
 80084a4:	f300 80ba 	bgt.w	800861c <_dtoa_r+0x884>
 80084a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	f000 80b2 	beq.w	8008614 <_dtoa_r+0x87c>
 80084b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084b4:	9e07      	ldr	r6, [sp, #28]
 80084b6:	9d04      	ldr	r5, [sp, #16]
 80084b8:	9a04      	ldr	r2, [sp, #16]
 80084ba:	441a      	add	r2, r3
 80084bc:	9204      	str	r2, [sp, #16]
 80084be:	9a05      	ldr	r2, [sp, #20]
 80084c0:	2101      	movs	r1, #1
 80084c2:	441a      	add	r2, r3
 80084c4:	4620      	mov	r0, r4
 80084c6:	9205      	str	r2, [sp, #20]
 80084c8:	f000 ff32 	bl	8009330 <__i2b>
 80084cc:	4607      	mov	r7, r0
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	dd0c      	ble.n	80084ec <_dtoa_r+0x754>
 80084d2:	9b05      	ldr	r3, [sp, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dd09      	ble.n	80084ec <_dtoa_r+0x754>
 80084d8:	42ab      	cmp	r3, r5
 80084da:	9a04      	ldr	r2, [sp, #16]
 80084dc:	bfa8      	it	ge
 80084de:	462b      	movge	r3, r5
 80084e0:	1ad2      	subs	r2, r2, r3
 80084e2:	9204      	str	r2, [sp, #16]
 80084e4:	9a05      	ldr	r2, [sp, #20]
 80084e6:	1aed      	subs	r5, r5, r3
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	b31b      	cbz	r3, 8008538 <_dtoa_r+0x7a0>
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80af 	beq.w	8008656 <_dtoa_r+0x8be>
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	dd13      	ble.n	8008524 <_dtoa_r+0x78c>
 80084fc:	4639      	mov	r1, r7
 80084fe:	4632      	mov	r2, r6
 8008500:	4620      	mov	r0, r4
 8008502:	f000 ffd5 	bl	80094b0 <__pow5mult>
 8008506:	ee18 2a10 	vmov	r2, s16
 800850a:	4601      	mov	r1, r0
 800850c:	4607      	mov	r7, r0
 800850e:	4620      	mov	r0, r4
 8008510:	f000 ff24 	bl	800935c <__multiply>
 8008514:	ee18 1a10 	vmov	r1, s16
 8008518:	4680      	mov	r8, r0
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fe06 	bl	800912c <_Bfree>
 8008520:	ee08 8a10 	vmov	s16, r8
 8008524:	9b07      	ldr	r3, [sp, #28]
 8008526:	1b9a      	subs	r2, r3, r6
 8008528:	d006      	beq.n	8008538 <_dtoa_r+0x7a0>
 800852a:	ee18 1a10 	vmov	r1, s16
 800852e:	4620      	mov	r0, r4
 8008530:	f000 ffbe 	bl	80094b0 <__pow5mult>
 8008534:	ee08 0a10 	vmov	s16, r0
 8008538:	2101      	movs	r1, #1
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fef8 	bl	8009330 <__i2b>
 8008540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	4606      	mov	r6, r0
 8008546:	f340 8088 	ble.w	800865a <_dtoa_r+0x8c2>
 800854a:	461a      	mov	r2, r3
 800854c:	4601      	mov	r1, r0
 800854e:	4620      	mov	r0, r4
 8008550:	f000 ffae 	bl	80094b0 <__pow5mult>
 8008554:	9b06      	ldr	r3, [sp, #24]
 8008556:	2b01      	cmp	r3, #1
 8008558:	4606      	mov	r6, r0
 800855a:	f340 8081 	ble.w	8008660 <_dtoa_r+0x8c8>
 800855e:	f04f 0800 	mov.w	r8, #0
 8008562:	6933      	ldr	r3, [r6, #16]
 8008564:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008568:	6918      	ldr	r0, [r3, #16]
 800856a:	f000 fe91 	bl	8009290 <__hi0bits>
 800856e:	f1c0 0020 	rsb	r0, r0, #32
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	4418      	add	r0, r3
 8008576:	f010 001f 	ands.w	r0, r0, #31
 800857a:	f000 8092 	beq.w	80086a2 <_dtoa_r+0x90a>
 800857e:	f1c0 0320 	rsb	r3, r0, #32
 8008582:	2b04      	cmp	r3, #4
 8008584:	f340 808a 	ble.w	800869c <_dtoa_r+0x904>
 8008588:	f1c0 001c 	rsb	r0, r0, #28
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	4403      	add	r3, r0
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	9b05      	ldr	r3, [sp, #20]
 8008594:	4403      	add	r3, r0
 8008596:	4405      	add	r5, r0
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	dd07      	ble.n	80085b0 <_dtoa_r+0x818>
 80085a0:	ee18 1a10 	vmov	r1, s16
 80085a4:	461a      	mov	r2, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 ffdc 	bl	8009564 <__lshift>
 80085ac:	ee08 0a10 	vmov	s16, r0
 80085b0:	9b05      	ldr	r3, [sp, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dd05      	ble.n	80085c2 <_dtoa_r+0x82a>
 80085b6:	4631      	mov	r1, r6
 80085b8:	461a      	mov	r2, r3
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 ffd2 	bl	8009564 <__lshift>
 80085c0:	4606      	mov	r6, r0
 80085c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d06e      	beq.n	80086a6 <_dtoa_r+0x90e>
 80085c8:	ee18 0a10 	vmov	r0, s16
 80085cc:	4631      	mov	r1, r6
 80085ce:	f001 f839 	bl	8009644 <__mcmp>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	da67      	bge.n	80086a6 <_dtoa_r+0x90e>
 80085d6:	9b00      	ldr	r3, [sp, #0]
 80085d8:	3b01      	subs	r3, #1
 80085da:	ee18 1a10 	vmov	r1, s16
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	220a      	movs	r2, #10
 80085e2:	2300      	movs	r3, #0
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fdc3 	bl	8009170 <__multadd>
 80085ea:	9b08      	ldr	r3, [sp, #32]
 80085ec:	ee08 0a10 	vmov	s16, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 81b1 	beq.w	8008958 <_dtoa_r+0xbc0>
 80085f6:	2300      	movs	r3, #0
 80085f8:	4639      	mov	r1, r7
 80085fa:	220a      	movs	r2, #10
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fdb7 	bl	8009170 <__multadd>
 8008602:	9b02      	ldr	r3, [sp, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	4607      	mov	r7, r0
 8008608:	f300 808e 	bgt.w	8008728 <_dtoa_r+0x990>
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	2b02      	cmp	r3, #2
 8008610:	dc51      	bgt.n	80086b6 <_dtoa_r+0x91e>
 8008612:	e089      	b.n	8008728 <_dtoa_r+0x990>
 8008614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800861a:	e74b      	b.n	80084b4 <_dtoa_r+0x71c>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1e5e      	subs	r6, r3, #1
 8008620:	9b07      	ldr	r3, [sp, #28]
 8008622:	42b3      	cmp	r3, r6
 8008624:	bfbf      	itttt	lt
 8008626:	9b07      	ldrlt	r3, [sp, #28]
 8008628:	9607      	strlt	r6, [sp, #28]
 800862a:	1af2      	sublt	r2, r6, r3
 800862c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800862e:	bfb6      	itet	lt
 8008630:	189b      	addlt	r3, r3, r2
 8008632:	1b9e      	subge	r6, r3, r6
 8008634:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	bfb8      	it	lt
 800863a:	2600      	movlt	r6, #0
 800863c:	2b00      	cmp	r3, #0
 800863e:	bfb7      	itett	lt
 8008640:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008644:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008648:	1a9d      	sublt	r5, r3, r2
 800864a:	2300      	movlt	r3, #0
 800864c:	e734      	b.n	80084b8 <_dtoa_r+0x720>
 800864e:	9e07      	ldr	r6, [sp, #28]
 8008650:	9d04      	ldr	r5, [sp, #16]
 8008652:	9f08      	ldr	r7, [sp, #32]
 8008654:	e73b      	b.n	80084ce <_dtoa_r+0x736>
 8008656:	9a07      	ldr	r2, [sp, #28]
 8008658:	e767      	b.n	800852a <_dtoa_r+0x792>
 800865a:	9b06      	ldr	r3, [sp, #24]
 800865c:	2b01      	cmp	r3, #1
 800865e:	dc18      	bgt.n	8008692 <_dtoa_r+0x8fa>
 8008660:	f1ba 0f00 	cmp.w	sl, #0
 8008664:	d115      	bne.n	8008692 <_dtoa_r+0x8fa>
 8008666:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800866a:	b993      	cbnz	r3, 8008692 <_dtoa_r+0x8fa>
 800866c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008670:	0d1b      	lsrs	r3, r3, #20
 8008672:	051b      	lsls	r3, r3, #20
 8008674:	b183      	cbz	r3, 8008698 <_dtoa_r+0x900>
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	3301      	adds	r3, #1
 800867a:	9304      	str	r3, [sp, #16]
 800867c:	9b05      	ldr	r3, [sp, #20]
 800867e:	3301      	adds	r3, #1
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	f04f 0801 	mov.w	r8, #1
 8008686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008688:	2b00      	cmp	r3, #0
 800868a:	f47f af6a 	bne.w	8008562 <_dtoa_r+0x7ca>
 800868e:	2001      	movs	r0, #1
 8008690:	e76f      	b.n	8008572 <_dtoa_r+0x7da>
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	e7f6      	b.n	8008686 <_dtoa_r+0x8ee>
 8008698:	4698      	mov	r8, r3
 800869a:	e7f4      	b.n	8008686 <_dtoa_r+0x8ee>
 800869c:	f43f af7d 	beq.w	800859a <_dtoa_r+0x802>
 80086a0:	4618      	mov	r0, r3
 80086a2:	301c      	adds	r0, #28
 80086a4:	e772      	b.n	800858c <_dtoa_r+0x7f4>
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dc37      	bgt.n	800871c <_dtoa_r+0x984>
 80086ac:	9b06      	ldr	r3, [sp, #24]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	dd34      	ble.n	800871c <_dtoa_r+0x984>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	9b02      	ldr	r3, [sp, #8]
 80086b8:	b96b      	cbnz	r3, 80086d6 <_dtoa_r+0x93e>
 80086ba:	4631      	mov	r1, r6
 80086bc:	2205      	movs	r2, #5
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 fd56 	bl	8009170 <__multadd>
 80086c4:	4601      	mov	r1, r0
 80086c6:	4606      	mov	r6, r0
 80086c8:	ee18 0a10 	vmov	r0, s16
 80086cc:	f000 ffba 	bl	8009644 <__mcmp>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	f73f adbb 	bgt.w	800824c <_dtoa_r+0x4b4>
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	9d01      	ldr	r5, [sp, #4]
 80086da:	43db      	mvns	r3, r3
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	4631      	mov	r1, r6
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fd21 	bl	800912c <_Bfree>
 80086ea:	2f00      	cmp	r7, #0
 80086ec:	f43f aea4 	beq.w	8008438 <_dtoa_r+0x6a0>
 80086f0:	f1b8 0f00 	cmp.w	r8, #0
 80086f4:	d005      	beq.n	8008702 <_dtoa_r+0x96a>
 80086f6:	45b8      	cmp	r8, r7
 80086f8:	d003      	beq.n	8008702 <_dtoa_r+0x96a>
 80086fa:	4641      	mov	r1, r8
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fd15 	bl	800912c <_Bfree>
 8008702:	4639      	mov	r1, r7
 8008704:	4620      	mov	r0, r4
 8008706:	f000 fd11 	bl	800912c <_Bfree>
 800870a:	e695      	b.n	8008438 <_dtoa_r+0x6a0>
 800870c:	2600      	movs	r6, #0
 800870e:	4637      	mov	r7, r6
 8008710:	e7e1      	b.n	80086d6 <_dtoa_r+0x93e>
 8008712:	9700      	str	r7, [sp, #0]
 8008714:	4637      	mov	r7, r6
 8008716:	e599      	b.n	800824c <_dtoa_r+0x4b4>
 8008718:	40240000 	.word	0x40240000
 800871c:	9b08      	ldr	r3, [sp, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80ca 	beq.w	80088b8 <_dtoa_r+0xb20>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	9302      	str	r3, [sp, #8]
 8008728:	2d00      	cmp	r5, #0
 800872a:	dd05      	ble.n	8008738 <_dtoa_r+0x9a0>
 800872c:	4639      	mov	r1, r7
 800872e:	462a      	mov	r2, r5
 8008730:	4620      	mov	r0, r4
 8008732:	f000 ff17 	bl	8009564 <__lshift>
 8008736:	4607      	mov	r7, r0
 8008738:	f1b8 0f00 	cmp.w	r8, #0
 800873c:	d05b      	beq.n	80087f6 <_dtoa_r+0xa5e>
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fcb3 	bl	80090ac <_Balloc>
 8008746:	4605      	mov	r5, r0
 8008748:	b928      	cbnz	r0, 8008756 <_dtoa_r+0x9be>
 800874a:	4b87      	ldr	r3, [pc, #540]	; (8008968 <_dtoa_r+0xbd0>)
 800874c:	4602      	mov	r2, r0
 800874e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008752:	f7ff bb3b 	b.w	8007dcc <_dtoa_r+0x34>
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	3202      	adds	r2, #2
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	f107 010c 	add.w	r1, r7, #12
 8008760:	300c      	adds	r0, #12
 8008762:	f000 fc95 	bl	8009090 <memcpy>
 8008766:	2201      	movs	r2, #1
 8008768:	4629      	mov	r1, r5
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fefa 	bl	8009564 <__lshift>
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	f103 0901 	add.w	r9, r3, #1
 8008776:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800877a:	4413      	add	r3, r2
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	f00a 0301 	and.w	r3, sl, #1
 8008782:	46b8      	mov	r8, r7
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	4607      	mov	r7, r0
 8008788:	4631      	mov	r1, r6
 800878a:	ee18 0a10 	vmov	r0, s16
 800878e:	f7ff fa77 	bl	8007c80 <quorem>
 8008792:	4641      	mov	r1, r8
 8008794:	9002      	str	r0, [sp, #8]
 8008796:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800879a:	ee18 0a10 	vmov	r0, s16
 800879e:	f000 ff51 	bl	8009644 <__mcmp>
 80087a2:	463a      	mov	r2, r7
 80087a4:	9003      	str	r0, [sp, #12]
 80087a6:	4631      	mov	r1, r6
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 ff67 	bl	800967c <__mdiff>
 80087ae:	68c2      	ldr	r2, [r0, #12]
 80087b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80087b4:	4605      	mov	r5, r0
 80087b6:	bb02      	cbnz	r2, 80087fa <_dtoa_r+0xa62>
 80087b8:	4601      	mov	r1, r0
 80087ba:	ee18 0a10 	vmov	r0, s16
 80087be:	f000 ff41 	bl	8009644 <__mcmp>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4629      	mov	r1, r5
 80087c6:	4620      	mov	r0, r4
 80087c8:	9207      	str	r2, [sp, #28]
 80087ca:	f000 fcaf 	bl	800912c <_Bfree>
 80087ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80087d2:	ea43 0102 	orr.w	r1, r3, r2
 80087d6:	9b04      	ldr	r3, [sp, #16]
 80087d8:	430b      	orrs	r3, r1
 80087da:	464d      	mov	r5, r9
 80087dc:	d10f      	bne.n	80087fe <_dtoa_r+0xa66>
 80087de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087e2:	d02a      	beq.n	800883a <_dtoa_r+0xaa2>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	dd02      	ble.n	80087f0 <_dtoa_r+0xa58>
 80087ea:	9b02      	ldr	r3, [sp, #8]
 80087ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80087f0:	f88b a000 	strb.w	sl, [fp]
 80087f4:	e775      	b.n	80086e2 <_dtoa_r+0x94a>
 80087f6:	4638      	mov	r0, r7
 80087f8:	e7ba      	b.n	8008770 <_dtoa_r+0x9d8>
 80087fa:	2201      	movs	r2, #1
 80087fc:	e7e2      	b.n	80087c4 <_dtoa_r+0xa2c>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	db04      	blt.n	800880e <_dtoa_r+0xa76>
 8008804:	9906      	ldr	r1, [sp, #24]
 8008806:	430b      	orrs	r3, r1
 8008808:	9904      	ldr	r1, [sp, #16]
 800880a:	430b      	orrs	r3, r1
 800880c:	d122      	bne.n	8008854 <_dtoa_r+0xabc>
 800880e:	2a00      	cmp	r2, #0
 8008810:	ddee      	ble.n	80087f0 <_dtoa_r+0xa58>
 8008812:	ee18 1a10 	vmov	r1, s16
 8008816:	2201      	movs	r2, #1
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fea3 	bl	8009564 <__lshift>
 800881e:	4631      	mov	r1, r6
 8008820:	ee08 0a10 	vmov	s16, r0
 8008824:	f000 ff0e 	bl	8009644 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	dc03      	bgt.n	8008834 <_dtoa_r+0xa9c>
 800882c:	d1e0      	bne.n	80087f0 <_dtoa_r+0xa58>
 800882e:	f01a 0f01 	tst.w	sl, #1
 8008832:	d0dd      	beq.n	80087f0 <_dtoa_r+0xa58>
 8008834:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008838:	d1d7      	bne.n	80087ea <_dtoa_r+0xa52>
 800883a:	2339      	movs	r3, #57	; 0x39
 800883c:	f88b 3000 	strb.w	r3, [fp]
 8008840:	462b      	mov	r3, r5
 8008842:	461d      	mov	r5, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800884a:	2a39      	cmp	r2, #57	; 0x39
 800884c:	d071      	beq.n	8008932 <_dtoa_r+0xb9a>
 800884e:	3201      	adds	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	e746      	b.n	80086e2 <_dtoa_r+0x94a>
 8008854:	2a00      	cmp	r2, #0
 8008856:	dd07      	ble.n	8008868 <_dtoa_r+0xad0>
 8008858:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800885c:	d0ed      	beq.n	800883a <_dtoa_r+0xaa2>
 800885e:	f10a 0301 	add.w	r3, sl, #1
 8008862:	f88b 3000 	strb.w	r3, [fp]
 8008866:	e73c      	b.n	80086e2 <_dtoa_r+0x94a>
 8008868:	9b05      	ldr	r3, [sp, #20]
 800886a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800886e:	4599      	cmp	r9, r3
 8008870:	d047      	beq.n	8008902 <_dtoa_r+0xb6a>
 8008872:	ee18 1a10 	vmov	r1, s16
 8008876:	2300      	movs	r3, #0
 8008878:	220a      	movs	r2, #10
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fc78 	bl	8009170 <__multadd>
 8008880:	45b8      	cmp	r8, r7
 8008882:	ee08 0a10 	vmov	s16, r0
 8008886:	f04f 0300 	mov.w	r3, #0
 800888a:	f04f 020a 	mov.w	r2, #10
 800888e:	4641      	mov	r1, r8
 8008890:	4620      	mov	r0, r4
 8008892:	d106      	bne.n	80088a2 <_dtoa_r+0xb0a>
 8008894:	f000 fc6c 	bl	8009170 <__multadd>
 8008898:	4680      	mov	r8, r0
 800889a:	4607      	mov	r7, r0
 800889c:	f109 0901 	add.w	r9, r9, #1
 80088a0:	e772      	b.n	8008788 <_dtoa_r+0x9f0>
 80088a2:	f000 fc65 	bl	8009170 <__multadd>
 80088a6:	4639      	mov	r1, r7
 80088a8:	4680      	mov	r8, r0
 80088aa:	2300      	movs	r3, #0
 80088ac:	220a      	movs	r2, #10
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fc5e 	bl	8009170 <__multadd>
 80088b4:	4607      	mov	r7, r0
 80088b6:	e7f1      	b.n	800889c <_dtoa_r+0xb04>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	9302      	str	r3, [sp, #8]
 80088bc:	9d01      	ldr	r5, [sp, #4]
 80088be:	ee18 0a10 	vmov	r0, s16
 80088c2:	4631      	mov	r1, r6
 80088c4:	f7ff f9dc 	bl	8007c80 <quorem>
 80088c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	f805 ab01 	strb.w	sl, [r5], #1
 80088d2:	1aea      	subs	r2, r5, r3
 80088d4:	9b02      	ldr	r3, [sp, #8]
 80088d6:	4293      	cmp	r3, r2
 80088d8:	dd09      	ble.n	80088ee <_dtoa_r+0xb56>
 80088da:	ee18 1a10 	vmov	r1, s16
 80088de:	2300      	movs	r3, #0
 80088e0:	220a      	movs	r2, #10
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fc44 	bl	8009170 <__multadd>
 80088e8:	ee08 0a10 	vmov	s16, r0
 80088ec:	e7e7      	b.n	80088be <_dtoa_r+0xb26>
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfc8      	it	gt
 80088f4:	461d      	movgt	r5, r3
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	bfd8      	it	le
 80088fa:	2501      	movle	r5, #1
 80088fc:	441d      	add	r5, r3
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	ee18 1a10 	vmov	r1, s16
 8008906:	2201      	movs	r2, #1
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fe2b 	bl	8009564 <__lshift>
 800890e:	4631      	mov	r1, r6
 8008910:	ee08 0a10 	vmov	s16, r0
 8008914:	f000 fe96 	bl	8009644 <__mcmp>
 8008918:	2800      	cmp	r0, #0
 800891a:	dc91      	bgt.n	8008840 <_dtoa_r+0xaa8>
 800891c:	d102      	bne.n	8008924 <_dtoa_r+0xb8c>
 800891e:	f01a 0f01 	tst.w	sl, #1
 8008922:	d18d      	bne.n	8008840 <_dtoa_r+0xaa8>
 8008924:	462b      	mov	r3, r5
 8008926:	461d      	mov	r5, r3
 8008928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800892c:	2a30      	cmp	r2, #48	; 0x30
 800892e:	d0fa      	beq.n	8008926 <_dtoa_r+0xb8e>
 8008930:	e6d7      	b.n	80086e2 <_dtoa_r+0x94a>
 8008932:	9a01      	ldr	r2, [sp, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d184      	bne.n	8008842 <_dtoa_r+0xaaa>
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2331      	movs	r3, #49	; 0x31
 8008940:	7013      	strb	r3, [r2, #0]
 8008942:	e6ce      	b.n	80086e2 <_dtoa_r+0x94a>
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <_dtoa_r+0xbd4>)
 8008946:	f7ff ba95 	b.w	8007e74 <_dtoa_r+0xdc>
 800894a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800894c:	2b00      	cmp	r3, #0
 800894e:	f47f aa6e 	bne.w	8007e2e <_dtoa_r+0x96>
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <_dtoa_r+0xbd8>)
 8008954:	f7ff ba8e 	b.w	8007e74 <_dtoa_r+0xdc>
 8008958:	9b02      	ldr	r3, [sp, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dcae      	bgt.n	80088bc <_dtoa_r+0xb24>
 800895e:	9b06      	ldr	r3, [sp, #24]
 8008960:	2b02      	cmp	r3, #2
 8008962:	f73f aea8 	bgt.w	80086b6 <_dtoa_r+0x91e>
 8008966:	e7a9      	b.n	80088bc <_dtoa_r+0xb24>
 8008968:	0800ad40 	.word	0x0800ad40
 800896c:	0800ab40 	.word	0x0800ab40
 8008970:	0800acc1 	.word	0x0800acc1

08008974 <rshift>:
 8008974:	6903      	ldr	r3, [r0, #16]
 8008976:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800897a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800897e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008982:	f100 0414 	add.w	r4, r0, #20
 8008986:	dd45      	ble.n	8008a14 <rshift+0xa0>
 8008988:	f011 011f 	ands.w	r1, r1, #31
 800898c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008990:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008994:	d10c      	bne.n	80089b0 <rshift+0x3c>
 8008996:	f100 0710 	add.w	r7, r0, #16
 800899a:	4629      	mov	r1, r5
 800899c:	42b1      	cmp	r1, r6
 800899e:	d334      	bcc.n	8008a0a <rshift+0x96>
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	1eea      	subs	r2, r5, #3
 80089a6:	4296      	cmp	r6, r2
 80089a8:	bf38      	it	cc
 80089aa:	2300      	movcc	r3, #0
 80089ac:	4423      	add	r3, r4
 80089ae:	e015      	b.n	80089dc <rshift+0x68>
 80089b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089b4:	f1c1 0820 	rsb	r8, r1, #32
 80089b8:	40cf      	lsrs	r7, r1
 80089ba:	f105 0e04 	add.w	lr, r5, #4
 80089be:	46a1      	mov	r9, r4
 80089c0:	4576      	cmp	r6, lr
 80089c2:	46f4      	mov	ip, lr
 80089c4:	d815      	bhi.n	80089f2 <rshift+0x7e>
 80089c6:	1a9a      	subs	r2, r3, r2
 80089c8:	0092      	lsls	r2, r2, #2
 80089ca:	3a04      	subs	r2, #4
 80089cc:	3501      	adds	r5, #1
 80089ce:	42ae      	cmp	r6, r5
 80089d0:	bf38      	it	cc
 80089d2:	2200      	movcc	r2, #0
 80089d4:	18a3      	adds	r3, r4, r2
 80089d6:	50a7      	str	r7, [r4, r2]
 80089d8:	b107      	cbz	r7, 80089dc <rshift+0x68>
 80089da:	3304      	adds	r3, #4
 80089dc:	1b1a      	subs	r2, r3, r4
 80089de:	42a3      	cmp	r3, r4
 80089e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089e4:	bf08      	it	eq
 80089e6:	2300      	moveq	r3, #0
 80089e8:	6102      	str	r2, [r0, #16]
 80089ea:	bf08      	it	eq
 80089ec:	6143      	streq	r3, [r0, #20]
 80089ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089f2:	f8dc c000 	ldr.w	ip, [ip]
 80089f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80089fa:	ea4c 0707 	orr.w	r7, ip, r7
 80089fe:	f849 7b04 	str.w	r7, [r9], #4
 8008a02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a06:	40cf      	lsrs	r7, r1
 8008a08:	e7da      	b.n	80089c0 <rshift+0x4c>
 8008a0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a12:	e7c3      	b.n	800899c <rshift+0x28>
 8008a14:	4623      	mov	r3, r4
 8008a16:	e7e1      	b.n	80089dc <rshift+0x68>

08008a18 <__hexdig_fun>:
 8008a18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	d802      	bhi.n	8008a26 <__hexdig_fun+0xe>
 8008a20:	3820      	subs	r0, #32
 8008a22:	b2c0      	uxtb	r0, r0
 8008a24:	4770      	bx	lr
 8008a26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	d801      	bhi.n	8008a32 <__hexdig_fun+0x1a>
 8008a2e:	3847      	subs	r0, #71	; 0x47
 8008a30:	e7f7      	b.n	8008a22 <__hexdig_fun+0xa>
 8008a32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d801      	bhi.n	8008a3e <__hexdig_fun+0x26>
 8008a3a:	3827      	subs	r0, #39	; 0x27
 8008a3c:	e7f1      	b.n	8008a22 <__hexdig_fun+0xa>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	4770      	bx	lr
	...

08008a44 <__gethex>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	ed2d 8b02 	vpush	{d8}
 8008a4c:	b089      	sub	sp, #36	; 0x24
 8008a4e:	ee08 0a10 	vmov	s16, r0
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	4bb4      	ldr	r3, [pc, #720]	; (8008d28 <__gethex+0x2e4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	468b      	mov	fp, r1
 8008a5e:	4690      	mov	r8, r2
 8008a60:	f7f7 fbd6 	bl	8000210 <strlen>
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	f8db 2000 	ldr.w	r2, [fp]
 8008a6a:	4403      	add	r3, r0
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	1c93      	adds	r3, r2, #2
 8008a76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a7e:	32fe      	adds	r2, #254	; 0xfe
 8008a80:	18d1      	adds	r1, r2, r3
 8008a82:	461f      	mov	r7, r3
 8008a84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a88:	9100      	str	r1, [sp, #0]
 8008a8a:	2830      	cmp	r0, #48	; 0x30
 8008a8c:	d0f8      	beq.n	8008a80 <__gethex+0x3c>
 8008a8e:	f7ff ffc3 	bl	8008a18 <__hexdig_fun>
 8008a92:	4604      	mov	r4, r0
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d13a      	bne.n	8008b0e <__gethex+0xca>
 8008a98:	9901      	ldr	r1, [sp, #4]
 8008a9a:	4652      	mov	r2, sl
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f001 fa33 	bl	8009f08 <strncmp>
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d168      	bne.n	8008b7a <__gethex+0x136>
 8008aa8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008aac:	eb07 060a 	add.w	r6, r7, sl
 8008ab0:	f7ff ffb2 	bl	8008a18 <__hexdig_fun>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d062      	beq.n	8008b7e <__gethex+0x13a>
 8008ab8:	4633      	mov	r3, r6
 8008aba:	7818      	ldrb	r0, [r3, #0]
 8008abc:	2830      	cmp	r0, #48	; 0x30
 8008abe:	461f      	mov	r7, r3
 8008ac0:	f103 0301 	add.w	r3, r3, #1
 8008ac4:	d0f9      	beq.n	8008aba <__gethex+0x76>
 8008ac6:	f7ff ffa7 	bl	8008a18 <__hexdig_fun>
 8008aca:	2301      	movs	r3, #1
 8008acc:	fab0 f480 	clz	r4, r0
 8008ad0:	0964      	lsrs	r4, r4, #5
 8008ad2:	4635      	mov	r5, r6
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	4616      	mov	r6, r2
 8008ada:	3201      	adds	r2, #1
 8008adc:	7830      	ldrb	r0, [r6, #0]
 8008ade:	f7ff ff9b 	bl	8008a18 <__hexdig_fun>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d1f8      	bne.n	8008ad8 <__gethex+0x94>
 8008ae6:	9901      	ldr	r1, [sp, #4]
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4630      	mov	r0, r6
 8008aec:	f001 fa0c 	bl	8009f08 <strncmp>
 8008af0:	b980      	cbnz	r0, 8008b14 <__gethex+0xd0>
 8008af2:	b94d      	cbnz	r5, 8008b08 <__gethex+0xc4>
 8008af4:	eb06 050a 	add.w	r5, r6, sl
 8008af8:	462a      	mov	r2, r5
 8008afa:	4616      	mov	r6, r2
 8008afc:	3201      	adds	r2, #1
 8008afe:	7830      	ldrb	r0, [r6, #0]
 8008b00:	f7ff ff8a 	bl	8008a18 <__hexdig_fun>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1f8      	bne.n	8008afa <__gethex+0xb6>
 8008b08:	1bad      	subs	r5, r5, r6
 8008b0a:	00ad      	lsls	r5, r5, #2
 8008b0c:	e004      	b.n	8008b18 <__gethex+0xd4>
 8008b0e:	2400      	movs	r4, #0
 8008b10:	4625      	mov	r5, r4
 8008b12:	e7e0      	b.n	8008ad6 <__gethex+0x92>
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	d1f7      	bne.n	8008b08 <__gethex+0xc4>
 8008b18:	7833      	ldrb	r3, [r6, #0]
 8008b1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b1e:	2b50      	cmp	r3, #80	; 0x50
 8008b20:	d13b      	bne.n	8008b9a <__gethex+0x156>
 8008b22:	7873      	ldrb	r3, [r6, #1]
 8008b24:	2b2b      	cmp	r3, #43	; 0x2b
 8008b26:	d02c      	beq.n	8008b82 <__gethex+0x13e>
 8008b28:	2b2d      	cmp	r3, #45	; 0x2d
 8008b2a:	d02e      	beq.n	8008b8a <__gethex+0x146>
 8008b2c:	1c71      	adds	r1, r6, #1
 8008b2e:	f04f 0900 	mov.w	r9, #0
 8008b32:	7808      	ldrb	r0, [r1, #0]
 8008b34:	f7ff ff70 	bl	8008a18 <__hexdig_fun>
 8008b38:	1e43      	subs	r3, r0, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b18      	cmp	r3, #24
 8008b3e:	d82c      	bhi.n	8008b9a <__gethex+0x156>
 8008b40:	f1a0 0210 	sub.w	r2, r0, #16
 8008b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b48:	f7ff ff66 	bl	8008a18 <__hexdig_fun>
 8008b4c:	1e43      	subs	r3, r0, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b18      	cmp	r3, #24
 8008b52:	d91d      	bls.n	8008b90 <__gethex+0x14c>
 8008b54:	f1b9 0f00 	cmp.w	r9, #0
 8008b58:	d000      	beq.n	8008b5c <__gethex+0x118>
 8008b5a:	4252      	negs	r2, r2
 8008b5c:	4415      	add	r5, r2
 8008b5e:	f8cb 1000 	str.w	r1, [fp]
 8008b62:	b1e4      	cbz	r4, 8008b9e <__gethex+0x15a>
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bf14      	ite	ne
 8008b6a:	2700      	movne	r7, #0
 8008b6c:	2706      	moveq	r7, #6
 8008b6e:	4638      	mov	r0, r7
 8008b70:	b009      	add	sp, #36	; 0x24
 8008b72:	ecbd 8b02 	vpop	{d8}
 8008b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7a:	463e      	mov	r6, r7
 8008b7c:	4625      	mov	r5, r4
 8008b7e:	2401      	movs	r4, #1
 8008b80:	e7ca      	b.n	8008b18 <__gethex+0xd4>
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	1cb1      	adds	r1, r6, #2
 8008b88:	e7d3      	b.n	8008b32 <__gethex+0xee>
 8008b8a:	f04f 0901 	mov.w	r9, #1
 8008b8e:	e7fa      	b.n	8008b86 <__gethex+0x142>
 8008b90:	230a      	movs	r3, #10
 8008b92:	fb03 0202 	mla	r2, r3, r2, r0
 8008b96:	3a10      	subs	r2, #16
 8008b98:	e7d4      	b.n	8008b44 <__gethex+0x100>
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	e7df      	b.n	8008b5e <__gethex+0x11a>
 8008b9e:	1bf3      	subs	r3, r6, r7
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	2b07      	cmp	r3, #7
 8008ba6:	dc0b      	bgt.n	8008bc0 <__gethex+0x17c>
 8008ba8:	ee18 0a10 	vmov	r0, s16
 8008bac:	f000 fa7e 	bl	80090ac <_Balloc>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	b940      	cbnz	r0, 8008bc6 <__gethex+0x182>
 8008bb4:	4b5d      	ldr	r3, [pc, #372]	; (8008d2c <__gethex+0x2e8>)
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	21de      	movs	r1, #222	; 0xde
 8008bba:	485d      	ldr	r0, [pc, #372]	; (8008d30 <__gethex+0x2ec>)
 8008bbc:	f001 f9c6 	bl	8009f4c <__assert_func>
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	105b      	asrs	r3, r3, #1
 8008bc4:	e7ee      	b.n	8008ba4 <__gethex+0x160>
 8008bc6:	f100 0914 	add.w	r9, r0, #20
 8008bca:	f04f 0b00 	mov.w	fp, #0
 8008bce:	f1ca 0301 	rsb	r3, sl, #1
 8008bd2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008bd6:	f8cd b000 	str.w	fp, [sp]
 8008bda:	9306      	str	r3, [sp, #24]
 8008bdc:	42b7      	cmp	r7, r6
 8008bde:	d340      	bcc.n	8008c62 <__gethex+0x21e>
 8008be0:	9802      	ldr	r0, [sp, #8]
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	f840 3b04 	str.w	r3, [r0], #4
 8008be8:	eba0 0009 	sub.w	r0, r0, r9
 8008bec:	1080      	asrs	r0, r0, #2
 8008bee:	0146      	lsls	r6, r0, #5
 8008bf0:	6120      	str	r0, [r4, #16]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fb4c 	bl	8009290 <__hi0bits>
 8008bf8:	1a30      	subs	r0, r6, r0
 8008bfa:	f8d8 6000 	ldr.w	r6, [r8]
 8008bfe:	42b0      	cmp	r0, r6
 8008c00:	dd63      	ble.n	8008cca <__gethex+0x286>
 8008c02:	1b87      	subs	r7, r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fef0 	bl	80099ec <__any_on>
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	b1a8      	cbz	r0, 8008c3c <__gethex+0x1f8>
 8008c10:	1e7b      	subs	r3, r7, #1
 8008c12:	1159      	asrs	r1, r3, #5
 8008c14:	f003 021f 	and.w	r2, r3, #31
 8008c18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c1c:	f04f 0a01 	mov.w	sl, #1
 8008c20:	fa0a f202 	lsl.w	r2, sl, r2
 8008c24:	420a      	tst	r2, r1
 8008c26:	d009      	beq.n	8008c3c <__gethex+0x1f8>
 8008c28:	4553      	cmp	r3, sl
 8008c2a:	dd05      	ble.n	8008c38 <__gethex+0x1f4>
 8008c2c:	1eb9      	subs	r1, r7, #2
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fedc 	bl	80099ec <__any_on>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d145      	bne.n	8008cc4 <__gethex+0x280>
 8008c38:	f04f 0a02 	mov.w	sl, #2
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff fe98 	bl	8008974 <rshift>
 8008c44:	443d      	add	r5, r7
 8008c46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c4a:	42ab      	cmp	r3, r5
 8008c4c:	da4c      	bge.n	8008ce8 <__gethex+0x2a4>
 8008c4e:	ee18 0a10 	vmov	r0, s16
 8008c52:	4621      	mov	r1, r4
 8008c54:	f000 fa6a 	bl	800912c <_Bfree>
 8008c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	27a3      	movs	r7, #163	; 0xa3
 8008c60:	e785      	b.n	8008b6e <__gethex+0x12a>
 8008c62:	1e73      	subs	r3, r6, #1
 8008c64:	9a05      	ldr	r2, [sp, #20]
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d019      	beq.n	8008ca4 <__gethex+0x260>
 8008c70:	f1bb 0f20 	cmp.w	fp, #32
 8008c74:	d107      	bne.n	8008c86 <__gethex+0x242>
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	9a00      	ldr	r2, [sp, #0]
 8008c7a:	f843 2b04 	str.w	r2, [r3], #4
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	2300      	movs	r3, #0
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	469b      	mov	fp, r3
 8008c86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c8a:	f7ff fec5 	bl	8008a18 <__hexdig_fun>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	f000 000f 	and.w	r0, r0, #15
 8008c94:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c98:	4303      	orrs	r3, r0
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	f10b 0b04 	add.w	fp, fp, #4
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	e00d      	b.n	8008cc0 <__gethex+0x27c>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	9a06      	ldr	r2, [sp, #24]
 8008ca8:	4413      	add	r3, r2
 8008caa:	42bb      	cmp	r3, r7
 8008cac:	d3e0      	bcc.n	8008c70 <__gethex+0x22c>
 8008cae:	4618      	mov	r0, r3
 8008cb0:	9901      	ldr	r1, [sp, #4]
 8008cb2:	9307      	str	r3, [sp, #28]
 8008cb4:	4652      	mov	r2, sl
 8008cb6:	f001 f927 	bl	8009f08 <strncmp>
 8008cba:	9b07      	ldr	r3, [sp, #28]
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d1d7      	bne.n	8008c70 <__gethex+0x22c>
 8008cc0:	461e      	mov	r6, r3
 8008cc2:	e78b      	b.n	8008bdc <__gethex+0x198>
 8008cc4:	f04f 0a03 	mov.w	sl, #3
 8008cc8:	e7b8      	b.n	8008c3c <__gethex+0x1f8>
 8008cca:	da0a      	bge.n	8008ce2 <__gethex+0x29e>
 8008ccc:	1a37      	subs	r7, r6, r0
 8008cce:	4621      	mov	r1, r4
 8008cd0:	ee18 0a10 	vmov	r0, s16
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	f000 fc45 	bl	8009564 <__lshift>
 8008cda:	1bed      	subs	r5, r5, r7
 8008cdc:	4604      	mov	r4, r0
 8008cde:	f100 0914 	add.w	r9, r0, #20
 8008ce2:	f04f 0a00 	mov.w	sl, #0
 8008ce6:	e7ae      	b.n	8008c46 <__gethex+0x202>
 8008ce8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cec:	42a8      	cmp	r0, r5
 8008cee:	dd72      	ble.n	8008dd6 <__gethex+0x392>
 8008cf0:	1b45      	subs	r5, r0, r5
 8008cf2:	42ae      	cmp	r6, r5
 8008cf4:	dc36      	bgt.n	8008d64 <__gethex+0x320>
 8008cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d02a      	beq.n	8008d54 <__gethex+0x310>
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d02c      	beq.n	8008d5c <__gethex+0x318>
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d11c      	bne.n	8008d40 <__gethex+0x2fc>
 8008d06:	42ae      	cmp	r6, r5
 8008d08:	d11a      	bne.n	8008d40 <__gethex+0x2fc>
 8008d0a:	2e01      	cmp	r6, #1
 8008d0c:	d112      	bne.n	8008d34 <__gethex+0x2f0>
 8008d0e:	9a04      	ldr	r2, [sp, #16]
 8008d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	2301      	movs	r3, #1
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	f8c9 3000 	str.w	r3, [r9]
 8008d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d20:	2762      	movs	r7, #98	; 0x62
 8008d22:	601c      	str	r4, [r3, #0]
 8008d24:	e723      	b.n	8008b6e <__gethex+0x12a>
 8008d26:	bf00      	nop
 8008d28:	0800adb8 	.word	0x0800adb8
 8008d2c:	0800ad40 	.word	0x0800ad40
 8008d30:	0800ad51 	.word	0x0800ad51
 8008d34:	1e71      	subs	r1, r6, #1
 8008d36:	4620      	mov	r0, r4
 8008d38:	f000 fe58 	bl	80099ec <__any_on>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d1e6      	bne.n	8008d0e <__gethex+0x2ca>
 8008d40:	ee18 0a10 	vmov	r0, s16
 8008d44:	4621      	mov	r1, r4
 8008d46:	f000 f9f1 	bl	800912c <_Bfree>
 8008d4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	2750      	movs	r7, #80	; 0x50
 8008d52:	e70c      	b.n	8008b6e <__gethex+0x12a>
 8008d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1f2      	bne.n	8008d40 <__gethex+0x2fc>
 8008d5a:	e7d8      	b.n	8008d0e <__gethex+0x2ca>
 8008d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1d5      	bne.n	8008d0e <__gethex+0x2ca>
 8008d62:	e7ed      	b.n	8008d40 <__gethex+0x2fc>
 8008d64:	1e6f      	subs	r7, r5, #1
 8008d66:	f1ba 0f00 	cmp.w	sl, #0
 8008d6a:	d131      	bne.n	8008dd0 <__gethex+0x38c>
 8008d6c:	b127      	cbz	r7, 8008d78 <__gethex+0x334>
 8008d6e:	4639      	mov	r1, r7
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fe3b 	bl	80099ec <__any_on>
 8008d76:	4682      	mov	sl, r0
 8008d78:	117b      	asrs	r3, r7, #5
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d80:	f007 071f 	and.w	r7, r7, #31
 8008d84:	fa01 f707 	lsl.w	r7, r1, r7
 8008d88:	421f      	tst	r7, r3
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	bf18      	it	ne
 8008d90:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d94:	1b76      	subs	r6, r6, r5
 8008d96:	f7ff fded 	bl	8008974 <rshift>
 8008d9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d9e:	2702      	movs	r7, #2
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	d048      	beq.n	8008e38 <__gethex+0x3f4>
 8008da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d015      	beq.n	8008dda <__gethex+0x396>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d017      	beq.n	8008de2 <__gethex+0x39e>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d109      	bne.n	8008dca <__gethex+0x386>
 8008db6:	f01a 0f02 	tst.w	sl, #2
 8008dba:	d006      	beq.n	8008dca <__gethex+0x386>
 8008dbc:	f8d9 0000 	ldr.w	r0, [r9]
 8008dc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008dc4:	f01a 0f01 	tst.w	sl, #1
 8008dc8:	d10e      	bne.n	8008de8 <__gethex+0x3a4>
 8008dca:	f047 0710 	orr.w	r7, r7, #16
 8008dce:	e033      	b.n	8008e38 <__gethex+0x3f4>
 8008dd0:	f04f 0a01 	mov.w	sl, #1
 8008dd4:	e7d0      	b.n	8008d78 <__gethex+0x334>
 8008dd6:	2701      	movs	r7, #1
 8008dd8:	e7e2      	b.n	8008da0 <__gethex+0x35c>
 8008dda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ddc:	f1c3 0301 	rsb	r3, r3, #1
 8008de0:	9315      	str	r3, [sp, #84]	; 0x54
 8008de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <__gethex+0x386>
 8008de8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dec:	f104 0314 	add.w	r3, r4, #20
 8008df0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008df4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008df8:	f04f 0c00 	mov.w	ip, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e06:	d01c      	beq.n	8008e42 <__gethex+0x3fe>
 8008e08:	3201      	adds	r2, #1
 8008e0a:	6002      	str	r2, [r0, #0]
 8008e0c:	2f02      	cmp	r7, #2
 8008e0e:	f104 0314 	add.w	r3, r4, #20
 8008e12:	d13f      	bne.n	8008e94 <__gethex+0x450>
 8008e14:	f8d8 2000 	ldr.w	r2, [r8]
 8008e18:	3a01      	subs	r2, #1
 8008e1a:	42b2      	cmp	r2, r6
 8008e1c:	d10a      	bne.n	8008e34 <__gethex+0x3f0>
 8008e1e:	1171      	asrs	r1, r6, #5
 8008e20:	2201      	movs	r2, #1
 8008e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e26:	f006 061f 	and.w	r6, r6, #31
 8008e2a:	fa02 f606 	lsl.w	r6, r2, r6
 8008e2e:	421e      	tst	r6, r3
 8008e30:	bf18      	it	ne
 8008e32:	4617      	movne	r7, r2
 8008e34:	f047 0720 	orr.w	r7, r7, #32
 8008e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e3a:	601c      	str	r4, [r3, #0]
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	601d      	str	r5, [r3, #0]
 8008e40:	e695      	b.n	8008b6e <__gethex+0x12a>
 8008e42:	4299      	cmp	r1, r3
 8008e44:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e48:	d8d8      	bhi.n	8008dfc <__gethex+0x3b8>
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	459b      	cmp	fp, r3
 8008e4e:	db19      	blt.n	8008e84 <__gethex+0x440>
 8008e50:	6861      	ldr	r1, [r4, #4]
 8008e52:	ee18 0a10 	vmov	r0, s16
 8008e56:	3101      	adds	r1, #1
 8008e58:	f000 f928 	bl	80090ac <_Balloc>
 8008e5c:	4681      	mov	r9, r0
 8008e5e:	b918      	cbnz	r0, 8008e68 <__gethex+0x424>
 8008e60:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <__gethex+0x488>)
 8008e62:	4602      	mov	r2, r0
 8008e64:	2184      	movs	r1, #132	; 0x84
 8008e66:	e6a8      	b.n	8008bba <__gethex+0x176>
 8008e68:	6922      	ldr	r2, [r4, #16]
 8008e6a:	3202      	adds	r2, #2
 8008e6c:	f104 010c 	add.w	r1, r4, #12
 8008e70:	0092      	lsls	r2, r2, #2
 8008e72:	300c      	adds	r0, #12
 8008e74:	f000 f90c 	bl	8009090 <memcpy>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	ee18 0a10 	vmov	r0, s16
 8008e7e:	f000 f955 	bl	800912c <_Bfree>
 8008e82:	464c      	mov	r4, r9
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e8c:	6122      	str	r2, [r4, #16]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	615a      	str	r2, [r3, #20]
 8008e92:	e7bb      	b.n	8008e0c <__gethex+0x3c8>
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	455a      	cmp	r2, fp
 8008e98:	dd0b      	ble.n	8008eb2 <__gethex+0x46e>
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f7ff fd69 	bl	8008974 <rshift>
 8008ea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	f6ff aed0 	blt.w	8008c4e <__gethex+0x20a>
 8008eae:	2701      	movs	r7, #1
 8008eb0:	e7c0      	b.n	8008e34 <__gethex+0x3f0>
 8008eb2:	f016 061f 	ands.w	r6, r6, #31
 8008eb6:	d0fa      	beq.n	8008eae <__gethex+0x46a>
 8008eb8:	4453      	add	r3, sl
 8008eba:	f1c6 0620 	rsb	r6, r6, #32
 8008ebe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ec2:	f000 f9e5 	bl	8009290 <__hi0bits>
 8008ec6:	42b0      	cmp	r0, r6
 8008ec8:	dbe7      	blt.n	8008e9a <__gethex+0x456>
 8008eca:	e7f0      	b.n	8008eae <__gethex+0x46a>
 8008ecc:	0800ad40 	.word	0x0800ad40

08008ed0 <L_shift>:
 8008ed0:	f1c2 0208 	rsb	r2, r2, #8
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	f1c2 0620 	rsb	r6, r2, #32
 8008edc:	6843      	ldr	r3, [r0, #4]
 8008ede:	6804      	ldr	r4, [r0, #0]
 8008ee0:	fa03 f506 	lsl.w	r5, r3, r6
 8008ee4:	432c      	orrs	r4, r5
 8008ee6:	40d3      	lsrs	r3, r2
 8008ee8:	6004      	str	r4, [r0, #0]
 8008eea:	f840 3f04 	str.w	r3, [r0, #4]!
 8008eee:	4288      	cmp	r0, r1
 8008ef0:	d3f4      	bcc.n	8008edc <L_shift+0xc>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}

08008ef4 <__match>:
 8008ef4:	b530      	push	{r4, r5, lr}
 8008ef6:	6803      	ldr	r3, [r0, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efe:	b914      	cbnz	r4, 8008f06 <__match+0x12>
 8008f00:	6003      	str	r3, [r0, #0]
 8008f02:	2001      	movs	r0, #1
 8008f04:	bd30      	pop	{r4, r5, pc}
 8008f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f0e:	2d19      	cmp	r5, #25
 8008f10:	bf98      	it	ls
 8008f12:	3220      	addls	r2, #32
 8008f14:	42a2      	cmp	r2, r4
 8008f16:	d0f0      	beq.n	8008efa <__match+0x6>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e7f3      	b.n	8008f04 <__match+0x10>

08008f1c <__hexnan>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	680b      	ldr	r3, [r1, #0]
 8008f22:	115e      	asrs	r6, r3, #5
 8008f24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f28:	f013 031f 	ands.w	r3, r3, #31
 8008f2c:	b087      	sub	sp, #28
 8008f2e:	bf18      	it	ne
 8008f30:	3604      	addne	r6, #4
 8008f32:	2500      	movs	r5, #0
 8008f34:	1f37      	subs	r7, r6, #4
 8008f36:	4690      	mov	r8, r2
 8008f38:	6802      	ldr	r2, [r0, #0]
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	4682      	mov	sl, r0
 8008f3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f42:	46b9      	mov	r9, r7
 8008f44:	463c      	mov	r4, r7
 8008f46:	9502      	str	r5, [sp, #8]
 8008f48:	46ab      	mov	fp, r5
 8008f4a:	7851      	ldrb	r1, [r2, #1]
 8008f4c:	1c53      	adds	r3, r2, #1
 8008f4e:	9303      	str	r3, [sp, #12]
 8008f50:	b341      	cbz	r1, 8008fa4 <__hexnan+0x88>
 8008f52:	4608      	mov	r0, r1
 8008f54:	9205      	str	r2, [sp, #20]
 8008f56:	9104      	str	r1, [sp, #16]
 8008f58:	f7ff fd5e 	bl	8008a18 <__hexdig_fun>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d14f      	bne.n	8009000 <__hexnan+0xe4>
 8008f60:	9904      	ldr	r1, [sp, #16]
 8008f62:	9a05      	ldr	r2, [sp, #20]
 8008f64:	2920      	cmp	r1, #32
 8008f66:	d818      	bhi.n	8008f9a <__hexnan+0x7e>
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	459b      	cmp	fp, r3
 8008f6c:	dd13      	ble.n	8008f96 <__hexnan+0x7a>
 8008f6e:	454c      	cmp	r4, r9
 8008f70:	d206      	bcs.n	8008f80 <__hexnan+0x64>
 8008f72:	2d07      	cmp	r5, #7
 8008f74:	dc04      	bgt.n	8008f80 <__hexnan+0x64>
 8008f76:	462a      	mov	r2, r5
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f7ff ffa8 	bl	8008ed0 <L_shift>
 8008f80:	4544      	cmp	r4, r8
 8008f82:	d950      	bls.n	8009026 <__hexnan+0x10a>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f1a4 0904 	sub.w	r9, r4, #4
 8008f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f8e:	f8cd b008 	str.w	fp, [sp, #8]
 8008f92:	464c      	mov	r4, r9
 8008f94:	461d      	mov	r5, r3
 8008f96:	9a03      	ldr	r2, [sp, #12]
 8008f98:	e7d7      	b.n	8008f4a <__hexnan+0x2e>
 8008f9a:	2929      	cmp	r1, #41	; 0x29
 8008f9c:	d156      	bne.n	800904c <__hexnan+0x130>
 8008f9e:	3202      	adds	r2, #2
 8008fa0:	f8ca 2000 	str.w	r2, [sl]
 8008fa4:	f1bb 0f00 	cmp.w	fp, #0
 8008fa8:	d050      	beq.n	800904c <__hexnan+0x130>
 8008faa:	454c      	cmp	r4, r9
 8008fac:	d206      	bcs.n	8008fbc <__hexnan+0xa0>
 8008fae:	2d07      	cmp	r5, #7
 8008fb0:	dc04      	bgt.n	8008fbc <__hexnan+0xa0>
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff ff8a 	bl	8008ed0 <L_shift>
 8008fbc:	4544      	cmp	r4, r8
 8008fbe:	d934      	bls.n	800902a <__hexnan+0x10e>
 8008fc0:	f1a8 0204 	sub.w	r2, r8, #4
 8008fc4:	4623      	mov	r3, r4
 8008fc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fca:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fce:	429f      	cmp	r7, r3
 8008fd0:	d2f9      	bcs.n	8008fc6 <__hexnan+0xaa>
 8008fd2:	1b3b      	subs	r3, r7, r4
 8008fd4:	f023 0303 	bic.w	r3, r3, #3
 8008fd8:	3304      	adds	r3, #4
 8008fda:	3401      	adds	r4, #1
 8008fdc:	3e03      	subs	r6, #3
 8008fde:	42b4      	cmp	r4, r6
 8008fe0:	bf88      	it	hi
 8008fe2:	2304      	movhi	r3, #4
 8008fe4:	4443      	add	r3, r8
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f843 2b04 	str.w	r2, [r3], #4
 8008fec:	429f      	cmp	r7, r3
 8008fee:	d2fb      	bcs.n	8008fe8 <__hexnan+0xcc>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	b91b      	cbnz	r3, 8008ffc <__hexnan+0xe0>
 8008ff4:	4547      	cmp	r7, r8
 8008ff6:	d127      	bne.n	8009048 <__hexnan+0x12c>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	2005      	movs	r0, #5
 8008ffe:	e026      	b.n	800904e <__hexnan+0x132>
 8009000:	3501      	adds	r5, #1
 8009002:	2d08      	cmp	r5, #8
 8009004:	f10b 0b01 	add.w	fp, fp, #1
 8009008:	dd06      	ble.n	8009018 <__hexnan+0xfc>
 800900a:	4544      	cmp	r4, r8
 800900c:	d9c3      	bls.n	8008f96 <__hexnan+0x7a>
 800900e:	2300      	movs	r3, #0
 8009010:	f844 3c04 	str.w	r3, [r4, #-4]
 8009014:	2501      	movs	r5, #1
 8009016:	3c04      	subs	r4, #4
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	f000 000f 	and.w	r0, r0, #15
 800901e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009022:	6022      	str	r2, [r4, #0]
 8009024:	e7b7      	b.n	8008f96 <__hexnan+0x7a>
 8009026:	2508      	movs	r5, #8
 8009028:	e7b5      	b.n	8008f96 <__hexnan+0x7a>
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0df      	beq.n	8008ff0 <__hexnan+0xd4>
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	f1c3 0320 	rsb	r3, r3, #32
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009040:	401a      	ands	r2, r3
 8009042:	f846 2c04 	str.w	r2, [r6, #-4]
 8009046:	e7d3      	b.n	8008ff0 <__hexnan+0xd4>
 8009048:	3f04      	subs	r7, #4
 800904a:	e7d1      	b.n	8008ff0 <__hexnan+0xd4>
 800904c:	2004      	movs	r0, #4
 800904e:	b007      	add	sp, #28
 8009050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009054 <_localeconv_r>:
 8009054:	4800      	ldr	r0, [pc, #0]	; (8009058 <_localeconv_r+0x4>)
 8009056:	4770      	bx	lr
 8009058:	20000194 	.word	0x20000194

0800905c <malloc>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <malloc+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f000 bd67 	b.w	8009b34 <_malloc_r>
 8009066:	bf00      	nop
 8009068:	2000003c 	.word	0x2000003c

0800906c <__ascii_mbtowc>:
 800906c:	b082      	sub	sp, #8
 800906e:	b901      	cbnz	r1, 8009072 <__ascii_mbtowc+0x6>
 8009070:	a901      	add	r1, sp, #4
 8009072:	b142      	cbz	r2, 8009086 <__ascii_mbtowc+0x1a>
 8009074:	b14b      	cbz	r3, 800908a <__ascii_mbtowc+0x1e>
 8009076:	7813      	ldrb	r3, [r2, #0]
 8009078:	600b      	str	r3, [r1, #0]
 800907a:	7812      	ldrb	r2, [r2, #0]
 800907c:	1e10      	subs	r0, r2, #0
 800907e:	bf18      	it	ne
 8009080:	2001      	movne	r0, #1
 8009082:	b002      	add	sp, #8
 8009084:	4770      	bx	lr
 8009086:	4610      	mov	r0, r2
 8009088:	e7fb      	b.n	8009082 <__ascii_mbtowc+0x16>
 800908a:	f06f 0001 	mvn.w	r0, #1
 800908e:	e7f8      	b.n	8009082 <__ascii_mbtowc+0x16>

08009090 <memcpy>:
 8009090:	440a      	add	r2, r1
 8009092:	4291      	cmp	r1, r2
 8009094:	f100 33ff 	add.w	r3, r0, #4294967295
 8009098:	d100      	bne.n	800909c <memcpy+0xc>
 800909a:	4770      	bx	lr
 800909c:	b510      	push	{r4, lr}
 800909e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090a6:	4291      	cmp	r1, r2
 80090a8:	d1f9      	bne.n	800909e <memcpy+0xe>
 80090aa:	bd10      	pop	{r4, pc}

080090ac <_Balloc>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090b0:	4604      	mov	r4, r0
 80090b2:	460d      	mov	r5, r1
 80090b4:	b976      	cbnz	r6, 80090d4 <_Balloc+0x28>
 80090b6:	2010      	movs	r0, #16
 80090b8:	f7ff ffd0 	bl	800905c <malloc>
 80090bc:	4602      	mov	r2, r0
 80090be:	6260      	str	r0, [r4, #36]	; 0x24
 80090c0:	b920      	cbnz	r0, 80090cc <_Balloc+0x20>
 80090c2:	4b18      	ldr	r3, [pc, #96]	; (8009124 <_Balloc+0x78>)
 80090c4:	4818      	ldr	r0, [pc, #96]	; (8009128 <_Balloc+0x7c>)
 80090c6:	2166      	movs	r1, #102	; 0x66
 80090c8:	f000 ff40 	bl	8009f4c <__assert_func>
 80090cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d0:	6006      	str	r6, [r0, #0]
 80090d2:	60c6      	str	r6, [r0, #12]
 80090d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090d6:	68f3      	ldr	r3, [r6, #12]
 80090d8:	b183      	cbz	r3, 80090fc <_Balloc+0x50>
 80090da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090e2:	b9b8      	cbnz	r0, 8009114 <_Balloc+0x68>
 80090e4:	2101      	movs	r1, #1
 80090e6:	fa01 f605 	lsl.w	r6, r1, r5
 80090ea:	1d72      	adds	r2, r6, #5
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fc9d 	bl	8009a2e <_calloc_r>
 80090f4:	b160      	cbz	r0, 8009110 <_Balloc+0x64>
 80090f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090fa:	e00e      	b.n	800911a <_Balloc+0x6e>
 80090fc:	2221      	movs	r2, #33	; 0x21
 80090fe:	2104      	movs	r1, #4
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fc94 	bl	8009a2e <_calloc_r>
 8009106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009108:	60f0      	str	r0, [r6, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e4      	bne.n	80090da <_Balloc+0x2e>
 8009110:	2000      	movs	r0, #0
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	6802      	ldr	r2, [r0, #0]
 8009116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800911a:	2300      	movs	r3, #0
 800911c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009120:	e7f7      	b.n	8009112 <_Balloc+0x66>
 8009122:	bf00      	nop
 8009124:	0800acce 	.word	0x0800acce
 8009128:	0800adcc 	.word	0x0800adcc

0800912c <_Bfree>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	b976      	cbnz	r6, 8009154 <_Bfree+0x28>
 8009136:	2010      	movs	r0, #16
 8009138:	f7ff ff90 	bl	800905c <malloc>
 800913c:	4602      	mov	r2, r0
 800913e:	6268      	str	r0, [r5, #36]	; 0x24
 8009140:	b920      	cbnz	r0, 800914c <_Bfree+0x20>
 8009142:	4b09      	ldr	r3, [pc, #36]	; (8009168 <_Bfree+0x3c>)
 8009144:	4809      	ldr	r0, [pc, #36]	; (800916c <_Bfree+0x40>)
 8009146:	218a      	movs	r1, #138	; 0x8a
 8009148:	f000 ff00 	bl	8009f4c <__assert_func>
 800914c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009150:	6006      	str	r6, [r0, #0]
 8009152:	60c6      	str	r6, [r0, #12]
 8009154:	b13c      	cbz	r4, 8009166 <_Bfree+0x3a>
 8009156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009160:	6021      	str	r1, [r4, #0]
 8009162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	0800acce 	.word	0x0800acce
 800916c:	0800adcc 	.word	0x0800adcc

08009170 <__multadd>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	690d      	ldr	r5, [r1, #16]
 8009176:	4607      	mov	r7, r0
 8009178:	460c      	mov	r4, r1
 800917a:	461e      	mov	r6, r3
 800917c:	f101 0c14 	add.w	ip, r1, #20
 8009180:	2000      	movs	r0, #0
 8009182:	f8dc 3000 	ldr.w	r3, [ip]
 8009186:	b299      	uxth	r1, r3
 8009188:	fb02 6101 	mla	r1, r2, r1, r6
 800918c:	0c1e      	lsrs	r6, r3, #16
 800918e:	0c0b      	lsrs	r3, r1, #16
 8009190:	fb02 3306 	mla	r3, r2, r6, r3
 8009194:	b289      	uxth	r1, r1
 8009196:	3001      	adds	r0, #1
 8009198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800919c:	4285      	cmp	r5, r0
 800919e:	f84c 1b04 	str.w	r1, [ip], #4
 80091a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091a6:	dcec      	bgt.n	8009182 <__multadd+0x12>
 80091a8:	b30e      	cbz	r6, 80091ee <__multadd+0x7e>
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc19      	bgt.n	80091e4 <__multadd+0x74>
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	4638      	mov	r0, r7
 80091b4:	3101      	adds	r1, #1
 80091b6:	f7ff ff79 	bl	80090ac <_Balloc>
 80091ba:	4680      	mov	r8, r0
 80091bc:	b928      	cbnz	r0, 80091ca <__multadd+0x5a>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <__multadd+0x84>)
 80091c2:	480d      	ldr	r0, [pc, #52]	; (80091f8 <__multadd+0x88>)
 80091c4:	21b5      	movs	r1, #181	; 0xb5
 80091c6:	f000 fec1 	bl	8009f4c <__assert_func>
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	3202      	adds	r2, #2
 80091ce:	f104 010c 	add.w	r1, r4, #12
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	300c      	adds	r0, #12
 80091d6:	f7ff ff5b 	bl	8009090 <memcpy>
 80091da:	4621      	mov	r1, r4
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff ffa5 	bl	800912c <_Bfree>
 80091e2:	4644      	mov	r4, r8
 80091e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091e8:	3501      	adds	r5, #1
 80091ea:	615e      	str	r6, [r3, #20]
 80091ec:	6125      	str	r5, [r4, #16]
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f4:	0800ad40 	.word	0x0800ad40
 80091f8:	0800adcc 	.word	0x0800adcc

080091fc <__s2b>:
 80091fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	4615      	mov	r5, r2
 8009204:	461f      	mov	r7, r3
 8009206:	2209      	movs	r2, #9
 8009208:	3308      	adds	r3, #8
 800920a:	4606      	mov	r6, r0
 800920c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009210:	2100      	movs	r1, #0
 8009212:	2201      	movs	r2, #1
 8009214:	429a      	cmp	r2, r3
 8009216:	db09      	blt.n	800922c <__s2b+0x30>
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff ff47 	bl	80090ac <_Balloc>
 800921e:	b940      	cbnz	r0, 8009232 <__s2b+0x36>
 8009220:	4602      	mov	r2, r0
 8009222:	4b19      	ldr	r3, [pc, #100]	; (8009288 <__s2b+0x8c>)
 8009224:	4819      	ldr	r0, [pc, #100]	; (800928c <__s2b+0x90>)
 8009226:	21ce      	movs	r1, #206	; 0xce
 8009228:	f000 fe90 	bl	8009f4c <__assert_func>
 800922c:	0052      	lsls	r2, r2, #1
 800922e:	3101      	adds	r1, #1
 8009230:	e7f0      	b.n	8009214 <__s2b+0x18>
 8009232:	9b08      	ldr	r3, [sp, #32]
 8009234:	6143      	str	r3, [r0, #20]
 8009236:	2d09      	cmp	r5, #9
 8009238:	f04f 0301 	mov.w	r3, #1
 800923c:	6103      	str	r3, [r0, #16]
 800923e:	dd16      	ble.n	800926e <__s2b+0x72>
 8009240:	f104 0909 	add.w	r9, r4, #9
 8009244:	46c8      	mov	r8, r9
 8009246:	442c      	add	r4, r5
 8009248:	f818 3b01 	ldrb.w	r3, [r8], #1
 800924c:	4601      	mov	r1, r0
 800924e:	3b30      	subs	r3, #48	; 0x30
 8009250:	220a      	movs	r2, #10
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ff8c 	bl	8009170 <__multadd>
 8009258:	45a0      	cmp	r8, r4
 800925a:	d1f5      	bne.n	8009248 <__s2b+0x4c>
 800925c:	f1a5 0408 	sub.w	r4, r5, #8
 8009260:	444c      	add	r4, r9
 8009262:	1b2d      	subs	r5, r5, r4
 8009264:	1963      	adds	r3, r4, r5
 8009266:	42bb      	cmp	r3, r7
 8009268:	db04      	blt.n	8009274 <__s2b+0x78>
 800926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926e:	340a      	adds	r4, #10
 8009270:	2509      	movs	r5, #9
 8009272:	e7f6      	b.n	8009262 <__s2b+0x66>
 8009274:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009278:	4601      	mov	r1, r0
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	220a      	movs	r2, #10
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff76 	bl	8009170 <__multadd>
 8009284:	e7ee      	b.n	8009264 <__s2b+0x68>
 8009286:	bf00      	nop
 8009288:	0800ad40 	.word	0x0800ad40
 800928c:	0800adcc 	.word	0x0800adcc

08009290 <__hi0bits>:
 8009290:	0c03      	lsrs	r3, r0, #16
 8009292:	041b      	lsls	r3, r3, #16
 8009294:	b9d3      	cbnz	r3, 80092cc <__hi0bits+0x3c>
 8009296:	0400      	lsls	r0, r0, #16
 8009298:	2310      	movs	r3, #16
 800929a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800929e:	bf04      	itt	eq
 80092a0:	0200      	lsleq	r0, r0, #8
 80092a2:	3308      	addeq	r3, #8
 80092a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092a8:	bf04      	itt	eq
 80092aa:	0100      	lsleq	r0, r0, #4
 80092ac:	3304      	addeq	r3, #4
 80092ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092b2:	bf04      	itt	eq
 80092b4:	0080      	lsleq	r0, r0, #2
 80092b6:	3302      	addeq	r3, #2
 80092b8:	2800      	cmp	r0, #0
 80092ba:	db05      	blt.n	80092c8 <__hi0bits+0x38>
 80092bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092c0:	f103 0301 	add.w	r3, r3, #1
 80092c4:	bf08      	it	eq
 80092c6:	2320      	moveq	r3, #32
 80092c8:	4618      	mov	r0, r3
 80092ca:	4770      	bx	lr
 80092cc:	2300      	movs	r3, #0
 80092ce:	e7e4      	b.n	800929a <__hi0bits+0xa>

080092d0 <__lo0bits>:
 80092d0:	6803      	ldr	r3, [r0, #0]
 80092d2:	f013 0207 	ands.w	r2, r3, #7
 80092d6:	4601      	mov	r1, r0
 80092d8:	d00b      	beq.n	80092f2 <__lo0bits+0x22>
 80092da:	07da      	lsls	r2, r3, #31
 80092dc:	d423      	bmi.n	8009326 <__lo0bits+0x56>
 80092de:	0798      	lsls	r0, r3, #30
 80092e0:	bf49      	itett	mi
 80092e2:	085b      	lsrmi	r3, r3, #1
 80092e4:	089b      	lsrpl	r3, r3, #2
 80092e6:	2001      	movmi	r0, #1
 80092e8:	600b      	strmi	r3, [r1, #0]
 80092ea:	bf5c      	itt	pl
 80092ec:	600b      	strpl	r3, [r1, #0]
 80092ee:	2002      	movpl	r0, #2
 80092f0:	4770      	bx	lr
 80092f2:	b298      	uxth	r0, r3
 80092f4:	b9a8      	cbnz	r0, 8009322 <__lo0bits+0x52>
 80092f6:	0c1b      	lsrs	r3, r3, #16
 80092f8:	2010      	movs	r0, #16
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	b90a      	cbnz	r2, 8009302 <__lo0bits+0x32>
 80092fe:	3008      	adds	r0, #8
 8009300:	0a1b      	lsrs	r3, r3, #8
 8009302:	071a      	lsls	r2, r3, #28
 8009304:	bf04      	itt	eq
 8009306:	091b      	lsreq	r3, r3, #4
 8009308:	3004      	addeq	r0, #4
 800930a:	079a      	lsls	r2, r3, #30
 800930c:	bf04      	itt	eq
 800930e:	089b      	lsreq	r3, r3, #2
 8009310:	3002      	addeq	r0, #2
 8009312:	07da      	lsls	r2, r3, #31
 8009314:	d403      	bmi.n	800931e <__lo0bits+0x4e>
 8009316:	085b      	lsrs	r3, r3, #1
 8009318:	f100 0001 	add.w	r0, r0, #1
 800931c:	d005      	beq.n	800932a <__lo0bits+0x5a>
 800931e:	600b      	str	r3, [r1, #0]
 8009320:	4770      	bx	lr
 8009322:	4610      	mov	r0, r2
 8009324:	e7e9      	b.n	80092fa <__lo0bits+0x2a>
 8009326:	2000      	movs	r0, #0
 8009328:	4770      	bx	lr
 800932a:	2020      	movs	r0, #32
 800932c:	4770      	bx	lr
	...

08009330 <__i2b>:
 8009330:	b510      	push	{r4, lr}
 8009332:	460c      	mov	r4, r1
 8009334:	2101      	movs	r1, #1
 8009336:	f7ff feb9 	bl	80090ac <_Balloc>
 800933a:	4602      	mov	r2, r0
 800933c:	b928      	cbnz	r0, 800934a <__i2b+0x1a>
 800933e:	4b05      	ldr	r3, [pc, #20]	; (8009354 <__i2b+0x24>)
 8009340:	4805      	ldr	r0, [pc, #20]	; (8009358 <__i2b+0x28>)
 8009342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009346:	f000 fe01 	bl	8009f4c <__assert_func>
 800934a:	2301      	movs	r3, #1
 800934c:	6144      	str	r4, [r0, #20]
 800934e:	6103      	str	r3, [r0, #16]
 8009350:	bd10      	pop	{r4, pc}
 8009352:	bf00      	nop
 8009354:	0800ad40 	.word	0x0800ad40
 8009358:	0800adcc 	.word	0x0800adcc

0800935c <__multiply>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	4691      	mov	r9, r2
 8009362:	690a      	ldr	r2, [r1, #16]
 8009364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009368:	429a      	cmp	r2, r3
 800936a:	bfb8      	it	lt
 800936c:	460b      	movlt	r3, r1
 800936e:	460c      	mov	r4, r1
 8009370:	bfbc      	itt	lt
 8009372:	464c      	movlt	r4, r9
 8009374:	4699      	movlt	r9, r3
 8009376:	6927      	ldr	r7, [r4, #16]
 8009378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800937c:	68a3      	ldr	r3, [r4, #8]
 800937e:	6861      	ldr	r1, [r4, #4]
 8009380:	eb07 060a 	add.w	r6, r7, sl
 8009384:	42b3      	cmp	r3, r6
 8009386:	b085      	sub	sp, #20
 8009388:	bfb8      	it	lt
 800938a:	3101      	addlt	r1, #1
 800938c:	f7ff fe8e 	bl	80090ac <_Balloc>
 8009390:	b930      	cbnz	r0, 80093a0 <__multiply+0x44>
 8009392:	4602      	mov	r2, r0
 8009394:	4b44      	ldr	r3, [pc, #272]	; (80094a8 <__multiply+0x14c>)
 8009396:	4845      	ldr	r0, [pc, #276]	; (80094ac <__multiply+0x150>)
 8009398:	f240 115d 	movw	r1, #349	; 0x15d
 800939c:	f000 fdd6 	bl	8009f4c <__assert_func>
 80093a0:	f100 0514 	add.w	r5, r0, #20
 80093a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093a8:	462b      	mov	r3, r5
 80093aa:	2200      	movs	r2, #0
 80093ac:	4543      	cmp	r3, r8
 80093ae:	d321      	bcc.n	80093f4 <__multiply+0x98>
 80093b0:	f104 0314 	add.w	r3, r4, #20
 80093b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093b8:	f109 0314 	add.w	r3, r9, #20
 80093bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093c0:	9202      	str	r2, [sp, #8]
 80093c2:	1b3a      	subs	r2, r7, r4
 80093c4:	3a15      	subs	r2, #21
 80093c6:	f022 0203 	bic.w	r2, r2, #3
 80093ca:	3204      	adds	r2, #4
 80093cc:	f104 0115 	add.w	r1, r4, #21
 80093d0:	428f      	cmp	r7, r1
 80093d2:	bf38      	it	cc
 80093d4:	2204      	movcc	r2, #4
 80093d6:	9201      	str	r2, [sp, #4]
 80093d8:	9a02      	ldr	r2, [sp, #8]
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d80c      	bhi.n	80093fa <__multiply+0x9e>
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	dd03      	ble.n	80093ec <__multiply+0x90>
 80093e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d05a      	beq.n	80094a2 <__multiply+0x146>
 80093ec:	6106      	str	r6, [r0, #16]
 80093ee:	b005      	add	sp, #20
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f4:	f843 2b04 	str.w	r2, [r3], #4
 80093f8:	e7d8      	b.n	80093ac <__multiply+0x50>
 80093fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80093fe:	f1ba 0f00 	cmp.w	sl, #0
 8009402:	d024      	beq.n	800944e <__multiply+0xf2>
 8009404:	f104 0e14 	add.w	lr, r4, #20
 8009408:	46a9      	mov	r9, r5
 800940a:	f04f 0c00 	mov.w	ip, #0
 800940e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009412:	f8d9 1000 	ldr.w	r1, [r9]
 8009416:	fa1f fb82 	uxth.w	fp, r2
 800941a:	b289      	uxth	r1, r1
 800941c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009424:	f8d9 2000 	ldr.w	r2, [r9]
 8009428:	4461      	add	r1, ip
 800942a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800942e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009436:	b289      	uxth	r1, r1
 8009438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800943c:	4577      	cmp	r7, lr
 800943e:	f849 1b04 	str.w	r1, [r9], #4
 8009442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009446:	d8e2      	bhi.n	800940e <__multiply+0xb2>
 8009448:	9a01      	ldr	r2, [sp, #4]
 800944a:	f845 c002 	str.w	ip, [r5, r2]
 800944e:	9a03      	ldr	r2, [sp, #12]
 8009450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009454:	3304      	adds	r3, #4
 8009456:	f1b9 0f00 	cmp.w	r9, #0
 800945a:	d020      	beq.n	800949e <__multiply+0x142>
 800945c:	6829      	ldr	r1, [r5, #0]
 800945e:	f104 0c14 	add.w	ip, r4, #20
 8009462:	46ae      	mov	lr, r5
 8009464:	f04f 0a00 	mov.w	sl, #0
 8009468:	f8bc b000 	ldrh.w	fp, [ip]
 800946c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009470:	fb09 220b 	mla	r2, r9, fp, r2
 8009474:	4492      	add	sl, r2
 8009476:	b289      	uxth	r1, r1
 8009478:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800947c:	f84e 1b04 	str.w	r1, [lr], #4
 8009480:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009484:	f8be 1000 	ldrh.w	r1, [lr]
 8009488:	0c12      	lsrs	r2, r2, #16
 800948a:	fb09 1102 	mla	r1, r9, r2, r1
 800948e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009492:	4567      	cmp	r7, ip
 8009494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009498:	d8e6      	bhi.n	8009468 <__multiply+0x10c>
 800949a:	9a01      	ldr	r2, [sp, #4]
 800949c:	50a9      	str	r1, [r5, r2]
 800949e:	3504      	adds	r5, #4
 80094a0:	e79a      	b.n	80093d8 <__multiply+0x7c>
 80094a2:	3e01      	subs	r6, #1
 80094a4:	e79c      	b.n	80093e0 <__multiply+0x84>
 80094a6:	bf00      	nop
 80094a8:	0800ad40 	.word	0x0800ad40
 80094ac:	0800adcc 	.word	0x0800adcc

080094b0 <__pow5mult>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	4615      	mov	r5, r2
 80094b6:	f012 0203 	ands.w	r2, r2, #3
 80094ba:	4606      	mov	r6, r0
 80094bc:	460f      	mov	r7, r1
 80094be:	d007      	beq.n	80094d0 <__pow5mult+0x20>
 80094c0:	4c25      	ldr	r4, [pc, #148]	; (8009558 <__pow5mult+0xa8>)
 80094c2:	3a01      	subs	r2, #1
 80094c4:	2300      	movs	r3, #0
 80094c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ca:	f7ff fe51 	bl	8009170 <__multadd>
 80094ce:	4607      	mov	r7, r0
 80094d0:	10ad      	asrs	r5, r5, #2
 80094d2:	d03d      	beq.n	8009550 <__pow5mult+0xa0>
 80094d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094d6:	b97c      	cbnz	r4, 80094f8 <__pow5mult+0x48>
 80094d8:	2010      	movs	r0, #16
 80094da:	f7ff fdbf 	bl	800905c <malloc>
 80094de:	4602      	mov	r2, r0
 80094e0:	6270      	str	r0, [r6, #36]	; 0x24
 80094e2:	b928      	cbnz	r0, 80094f0 <__pow5mult+0x40>
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <__pow5mult+0xac>)
 80094e6:	481e      	ldr	r0, [pc, #120]	; (8009560 <__pow5mult+0xb0>)
 80094e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094ec:	f000 fd2e 	bl	8009f4c <__assert_func>
 80094f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094f4:	6004      	str	r4, [r0, #0]
 80094f6:	60c4      	str	r4, [r0, #12]
 80094f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009500:	b94c      	cbnz	r4, 8009516 <__pow5mult+0x66>
 8009502:	f240 2171 	movw	r1, #625	; 0x271
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff ff12 	bl	8009330 <__i2b>
 800950c:	2300      	movs	r3, #0
 800950e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009512:	4604      	mov	r4, r0
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	f04f 0900 	mov.w	r9, #0
 800951a:	07eb      	lsls	r3, r5, #31
 800951c:	d50a      	bpl.n	8009534 <__pow5mult+0x84>
 800951e:	4639      	mov	r1, r7
 8009520:	4622      	mov	r2, r4
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ff1a 	bl	800935c <__multiply>
 8009528:	4639      	mov	r1, r7
 800952a:	4680      	mov	r8, r0
 800952c:	4630      	mov	r0, r6
 800952e:	f7ff fdfd 	bl	800912c <_Bfree>
 8009532:	4647      	mov	r7, r8
 8009534:	106d      	asrs	r5, r5, #1
 8009536:	d00b      	beq.n	8009550 <__pow5mult+0xa0>
 8009538:	6820      	ldr	r0, [r4, #0]
 800953a:	b938      	cbnz	r0, 800954c <__pow5mult+0x9c>
 800953c:	4622      	mov	r2, r4
 800953e:	4621      	mov	r1, r4
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff ff0b 	bl	800935c <__multiply>
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	f8c0 9000 	str.w	r9, [r0]
 800954c:	4604      	mov	r4, r0
 800954e:	e7e4      	b.n	800951a <__pow5mult+0x6a>
 8009550:	4638      	mov	r0, r7
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	bf00      	nop
 8009558:	0800af18 	.word	0x0800af18
 800955c:	0800acce 	.word	0x0800acce
 8009560:	0800adcc 	.word	0x0800adcc

08009564 <__lshift>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	460c      	mov	r4, r1
 800956a:	6849      	ldr	r1, [r1, #4]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	4607      	mov	r7, r0
 8009576:	4691      	mov	r9, r2
 8009578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800957c:	f108 0601 	add.w	r6, r8, #1
 8009580:	42b3      	cmp	r3, r6
 8009582:	db0b      	blt.n	800959c <__lshift+0x38>
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff fd91 	bl	80090ac <_Balloc>
 800958a:	4605      	mov	r5, r0
 800958c:	b948      	cbnz	r0, 80095a2 <__lshift+0x3e>
 800958e:	4602      	mov	r2, r0
 8009590:	4b2a      	ldr	r3, [pc, #168]	; (800963c <__lshift+0xd8>)
 8009592:	482b      	ldr	r0, [pc, #172]	; (8009640 <__lshift+0xdc>)
 8009594:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009598:	f000 fcd8 	bl	8009f4c <__assert_func>
 800959c:	3101      	adds	r1, #1
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	e7ee      	b.n	8009580 <__lshift+0x1c>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f100 0114 	add.w	r1, r0, #20
 80095a8:	f100 0210 	add.w	r2, r0, #16
 80095ac:	4618      	mov	r0, r3
 80095ae:	4553      	cmp	r3, sl
 80095b0:	db37      	blt.n	8009622 <__lshift+0xbe>
 80095b2:	6920      	ldr	r0, [r4, #16]
 80095b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095b8:	f104 0314 	add.w	r3, r4, #20
 80095bc:	f019 091f 	ands.w	r9, r9, #31
 80095c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095c8:	d02f      	beq.n	800962a <__lshift+0xc6>
 80095ca:	f1c9 0e20 	rsb	lr, r9, #32
 80095ce:	468a      	mov	sl, r1
 80095d0:	f04f 0c00 	mov.w	ip, #0
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	fa02 f209 	lsl.w	r2, r2, r9
 80095da:	ea42 020c 	orr.w	r2, r2, ip
 80095de:	f84a 2b04 	str.w	r2, [sl], #4
 80095e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e6:	4298      	cmp	r0, r3
 80095e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80095ec:	d8f2      	bhi.n	80095d4 <__lshift+0x70>
 80095ee:	1b03      	subs	r3, r0, r4
 80095f0:	3b15      	subs	r3, #21
 80095f2:	f023 0303 	bic.w	r3, r3, #3
 80095f6:	3304      	adds	r3, #4
 80095f8:	f104 0215 	add.w	r2, r4, #21
 80095fc:	4290      	cmp	r0, r2
 80095fe:	bf38      	it	cc
 8009600:	2304      	movcc	r3, #4
 8009602:	f841 c003 	str.w	ip, [r1, r3]
 8009606:	f1bc 0f00 	cmp.w	ip, #0
 800960a:	d001      	beq.n	8009610 <__lshift+0xac>
 800960c:	f108 0602 	add.w	r6, r8, #2
 8009610:	3e01      	subs	r6, #1
 8009612:	4638      	mov	r0, r7
 8009614:	612e      	str	r6, [r5, #16]
 8009616:	4621      	mov	r1, r4
 8009618:	f7ff fd88 	bl	800912c <_Bfree>
 800961c:	4628      	mov	r0, r5
 800961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009622:	f842 0f04 	str.w	r0, [r2, #4]!
 8009626:	3301      	adds	r3, #1
 8009628:	e7c1      	b.n	80095ae <__lshift+0x4a>
 800962a:	3904      	subs	r1, #4
 800962c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009630:	f841 2f04 	str.w	r2, [r1, #4]!
 8009634:	4298      	cmp	r0, r3
 8009636:	d8f9      	bhi.n	800962c <__lshift+0xc8>
 8009638:	e7ea      	b.n	8009610 <__lshift+0xac>
 800963a:	bf00      	nop
 800963c:	0800ad40 	.word	0x0800ad40
 8009640:	0800adcc 	.word	0x0800adcc

08009644 <__mcmp>:
 8009644:	b530      	push	{r4, r5, lr}
 8009646:	6902      	ldr	r2, [r0, #16]
 8009648:	690c      	ldr	r4, [r1, #16]
 800964a:	1b12      	subs	r2, r2, r4
 800964c:	d10e      	bne.n	800966c <__mcmp+0x28>
 800964e:	f100 0314 	add.w	r3, r0, #20
 8009652:	3114      	adds	r1, #20
 8009654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800965c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009664:	42a5      	cmp	r5, r4
 8009666:	d003      	beq.n	8009670 <__mcmp+0x2c>
 8009668:	d305      	bcc.n	8009676 <__mcmp+0x32>
 800966a:	2201      	movs	r2, #1
 800966c:	4610      	mov	r0, r2
 800966e:	bd30      	pop	{r4, r5, pc}
 8009670:	4283      	cmp	r3, r0
 8009672:	d3f3      	bcc.n	800965c <__mcmp+0x18>
 8009674:	e7fa      	b.n	800966c <__mcmp+0x28>
 8009676:	f04f 32ff 	mov.w	r2, #4294967295
 800967a:	e7f7      	b.n	800966c <__mcmp+0x28>

0800967c <__mdiff>:
 800967c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	4606      	mov	r6, r0
 8009684:	4611      	mov	r1, r2
 8009686:	4620      	mov	r0, r4
 8009688:	4690      	mov	r8, r2
 800968a:	f7ff ffdb 	bl	8009644 <__mcmp>
 800968e:	1e05      	subs	r5, r0, #0
 8009690:	d110      	bne.n	80096b4 <__mdiff+0x38>
 8009692:	4629      	mov	r1, r5
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff fd09 	bl	80090ac <_Balloc>
 800969a:	b930      	cbnz	r0, 80096aa <__mdiff+0x2e>
 800969c:	4b3a      	ldr	r3, [pc, #232]	; (8009788 <__mdiff+0x10c>)
 800969e:	4602      	mov	r2, r0
 80096a0:	f240 2132 	movw	r1, #562	; 0x232
 80096a4:	4839      	ldr	r0, [pc, #228]	; (800978c <__mdiff+0x110>)
 80096a6:	f000 fc51 	bl	8009f4c <__assert_func>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b4:	bfa4      	itt	ge
 80096b6:	4643      	movge	r3, r8
 80096b8:	46a0      	movge	r8, r4
 80096ba:	4630      	mov	r0, r6
 80096bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096c0:	bfa6      	itte	ge
 80096c2:	461c      	movge	r4, r3
 80096c4:	2500      	movge	r5, #0
 80096c6:	2501      	movlt	r5, #1
 80096c8:	f7ff fcf0 	bl	80090ac <_Balloc>
 80096cc:	b920      	cbnz	r0, 80096d8 <__mdiff+0x5c>
 80096ce:	4b2e      	ldr	r3, [pc, #184]	; (8009788 <__mdiff+0x10c>)
 80096d0:	4602      	mov	r2, r0
 80096d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096d6:	e7e5      	b.n	80096a4 <__mdiff+0x28>
 80096d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096dc:	6926      	ldr	r6, [r4, #16]
 80096de:	60c5      	str	r5, [r0, #12]
 80096e0:	f104 0914 	add.w	r9, r4, #20
 80096e4:	f108 0514 	add.w	r5, r8, #20
 80096e8:	f100 0e14 	add.w	lr, r0, #20
 80096ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80096f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096f4:	f108 0210 	add.w	r2, r8, #16
 80096f8:	46f2      	mov	sl, lr
 80096fa:	2100      	movs	r1, #0
 80096fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009704:	fa1f f883 	uxth.w	r8, r3
 8009708:	fa11 f18b 	uxtah	r1, r1, fp
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	eba1 0808 	sub.w	r8, r1, r8
 8009712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800971a:	fa1f f888 	uxth.w	r8, r8
 800971e:	1419      	asrs	r1, r3, #16
 8009720:	454e      	cmp	r6, r9
 8009722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009726:	f84a 3b04 	str.w	r3, [sl], #4
 800972a:	d8e7      	bhi.n	80096fc <__mdiff+0x80>
 800972c:	1b33      	subs	r3, r6, r4
 800972e:	3b15      	subs	r3, #21
 8009730:	f023 0303 	bic.w	r3, r3, #3
 8009734:	3304      	adds	r3, #4
 8009736:	3415      	adds	r4, #21
 8009738:	42a6      	cmp	r6, r4
 800973a:	bf38      	it	cc
 800973c:	2304      	movcc	r3, #4
 800973e:	441d      	add	r5, r3
 8009740:	4473      	add	r3, lr
 8009742:	469e      	mov	lr, r3
 8009744:	462e      	mov	r6, r5
 8009746:	4566      	cmp	r6, ip
 8009748:	d30e      	bcc.n	8009768 <__mdiff+0xec>
 800974a:	f10c 0203 	add.w	r2, ip, #3
 800974e:	1b52      	subs	r2, r2, r5
 8009750:	f022 0203 	bic.w	r2, r2, #3
 8009754:	3d03      	subs	r5, #3
 8009756:	45ac      	cmp	ip, r5
 8009758:	bf38      	it	cc
 800975a:	2200      	movcc	r2, #0
 800975c:	441a      	add	r2, r3
 800975e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009762:	b17b      	cbz	r3, 8009784 <__mdiff+0x108>
 8009764:	6107      	str	r7, [r0, #16]
 8009766:	e7a3      	b.n	80096b0 <__mdiff+0x34>
 8009768:	f856 8b04 	ldr.w	r8, [r6], #4
 800976c:	fa11 f288 	uxtah	r2, r1, r8
 8009770:	1414      	asrs	r4, r2, #16
 8009772:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009776:	b292      	uxth	r2, r2
 8009778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800977c:	f84e 2b04 	str.w	r2, [lr], #4
 8009780:	1421      	asrs	r1, r4, #16
 8009782:	e7e0      	b.n	8009746 <__mdiff+0xca>
 8009784:	3f01      	subs	r7, #1
 8009786:	e7ea      	b.n	800975e <__mdiff+0xe2>
 8009788:	0800ad40 	.word	0x0800ad40
 800978c:	0800adcc 	.word	0x0800adcc

08009790 <__ulp>:
 8009790:	b082      	sub	sp, #8
 8009792:	ed8d 0b00 	vstr	d0, [sp]
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	4912      	ldr	r1, [pc, #72]	; (80097e4 <__ulp+0x54>)
 800979a:	4019      	ands	r1, r3
 800979c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80097a0:	2900      	cmp	r1, #0
 80097a2:	dd05      	ble.n	80097b0 <__ulp+0x20>
 80097a4:	2200      	movs	r2, #0
 80097a6:	460b      	mov	r3, r1
 80097a8:	ec43 2b10 	vmov	d0, r2, r3
 80097ac:	b002      	add	sp, #8
 80097ae:	4770      	bx	lr
 80097b0:	4249      	negs	r1, r1
 80097b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80097b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80097ba:	f04f 0200 	mov.w	r2, #0
 80097be:	f04f 0300 	mov.w	r3, #0
 80097c2:	da04      	bge.n	80097ce <__ulp+0x3e>
 80097c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80097c8:	fa41 f300 	asr.w	r3, r1, r0
 80097cc:	e7ec      	b.n	80097a8 <__ulp+0x18>
 80097ce:	f1a0 0114 	sub.w	r1, r0, #20
 80097d2:	291e      	cmp	r1, #30
 80097d4:	bfda      	itte	le
 80097d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80097da:	fa20 f101 	lsrle.w	r1, r0, r1
 80097de:	2101      	movgt	r1, #1
 80097e0:	460a      	mov	r2, r1
 80097e2:	e7e1      	b.n	80097a8 <__ulp+0x18>
 80097e4:	7ff00000 	.word	0x7ff00000

080097e8 <__b2d>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	6905      	ldr	r5, [r0, #16]
 80097ec:	f100 0714 	add.w	r7, r0, #20
 80097f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80097f4:	1f2e      	subs	r6, r5, #4
 80097f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7ff fd48 	bl	8009290 <__hi0bits>
 8009800:	f1c0 0320 	rsb	r3, r0, #32
 8009804:	280a      	cmp	r0, #10
 8009806:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009884 <__b2d+0x9c>
 800980a:	600b      	str	r3, [r1, #0]
 800980c:	dc14      	bgt.n	8009838 <__b2d+0x50>
 800980e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009812:	fa24 f10e 	lsr.w	r1, r4, lr
 8009816:	42b7      	cmp	r7, r6
 8009818:	ea41 030c 	orr.w	r3, r1, ip
 800981c:	bf34      	ite	cc
 800981e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009822:	2100      	movcs	r1, #0
 8009824:	3015      	adds	r0, #21
 8009826:	fa04 f000 	lsl.w	r0, r4, r0
 800982a:	fa21 f10e 	lsr.w	r1, r1, lr
 800982e:	ea40 0201 	orr.w	r2, r0, r1
 8009832:	ec43 2b10 	vmov	d0, r2, r3
 8009836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009838:	42b7      	cmp	r7, r6
 800983a:	bf3a      	itte	cc
 800983c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009840:	f1a5 0608 	subcc.w	r6, r5, #8
 8009844:	2100      	movcs	r1, #0
 8009846:	380b      	subs	r0, #11
 8009848:	d017      	beq.n	800987a <__b2d+0x92>
 800984a:	f1c0 0c20 	rsb	ip, r0, #32
 800984e:	fa04 f500 	lsl.w	r5, r4, r0
 8009852:	42be      	cmp	r6, r7
 8009854:	fa21 f40c 	lsr.w	r4, r1, ip
 8009858:	ea45 0504 	orr.w	r5, r5, r4
 800985c:	bf8c      	ite	hi
 800985e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009862:	2400      	movls	r4, #0
 8009864:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009868:	fa01 f000 	lsl.w	r0, r1, r0
 800986c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009870:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009874:	ea40 0204 	orr.w	r2, r0, r4
 8009878:	e7db      	b.n	8009832 <__b2d+0x4a>
 800987a:	ea44 030c 	orr.w	r3, r4, ip
 800987e:	460a      	mov	r2, r1
 8009880:	e7d7      	b.n	8009832 <__b2d+0x4a>
 8009882:	bf00      	nop
 8009884:	3ff00000 	.word	0x3ff00000

08009888 <__d2b>:
 8009888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800988c:	4689      	mov	r9, r1
 800988e:	2101      	movs	r1, #1
 8009890:	ec57 6b10 	vmov	r6, r7, d0
 8009894:	4690      	mov	r8, r2
 8009896:	f7ff fc09 	bl	80090ac <_Balloc>
 800989a:	4604      	mov	r4, r0
 800989c:	b930      	cbnz	r0, 80098ac <__d2b+0x24>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b25      	ldr	r3, [pc, #148]	; (8009938 <__d2b+0xb0>)
 80098a2:	4826      	ldr	r0, [pc, #152]	; (800993c <__d2b+0xb4>)
 80098a4:	f240 310a 	movw	r1, #778	; 0x30a
 80098a8:	f000 fb50 	bl	8009f4c <__assert_func>
 80098ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80098b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098b4:	bb35      	cbnz	r5, 8009904 <__d2b+0x7c>
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	d028      	beq.n	800990e <__d2b+0x86>
 80098bc:	4668      	mov	r0, sp
 80098be:	9600      	str	r6, [sp, #0]
 80098c0:	f7ff fd06 	bl	80092d0 <__lo0bits>
 80098c4:	9900      	ldr	r1, [sp, #0]
 80098c6:	b300      	cbz	r0, 800990a <__d2b+0x82>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	f1c0 0320 	rsb	r3, r0, #32
 80098ce:	fa02 f303 	lsl.w	r3, r2, r3
 80098d2:	430b      	orrs	r3, r1
 80098d4:	40c2      	lsrs	r2, r0
 80098d6:	6163      	str	r3, [r4, #20]
 80098d8:	9201      	str	r2, [sp, #4]
 80098da:	9b01      	ldr	r3, [sp, #4]
 80098dc:	61a3      	str	r3, [r4, #24]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bf14      	ite	ne
 80098e2:	2202      	movne	r2, #2
 80098e4:	2201      	moveq	r2, #1
 80098e6:	6122      	str	r2, [r4, #16]
 80098e8:	b1d5      	cbz	r5, 8009920 <__d2b+0x98>
 80098ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098ee:	4405      	add	r5, r0
 80098f0:	f8c9 5000 	str.w	r5, [r9]
 80098f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098f8:	f8c8 0000 	str.w	r0, [r8]
 80098fc:	4620      	mov	r0, r4
 80098fe:	b003      	add	sp, #12
 8009900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009908:	e7d5      	b.n	80098b6 <__d2b+0x2e>
 800990a:	6161      	str	r1, [r4, #20]
 800990c:	e7e5      	b.n	80098da <__d2b+0x52>
 800990e:	a801      	add	r0, sp, #4
 8009910:	f7ff fcde 	bl	80092d0 <__lo0bits>
 8009914:	9b01      	ldr	r3, [sp, #4]
 8009916:	6163      	str	r3, [r4, #20]
 8009918:	2201      	movs	r2, #1
 800991a:	6122      	str	r2, [r4, #16]
 800991c:	3020      	adds	r0, #32
 800991e:	e7e3      	b.n	80098e8 <__d2b+0x60>
 8009920:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009924:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009928:	f8c9 0000 	str.w	r0, [r9]
 800992c:	6918      	ldr	r0, [r3, #16]
 800992e:	f7ff fcaf 	bl	8009290 <__hi0bits>
 8009932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009936:	e7df      	b.n	80098f8 <__d2b+0x70>
 8009938:	0800ad40 	.word	0x0800ad40
 800993c:	0800adcc 	.word	0x0800adcc

08009940 <__ratio>:
 8009940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	4688      	mov	r8, r1
 8009946:	4669      	mov	r1, sp
 8009948:	4681      	mov	r9, r0
 800994a:	f7ff ff4d 	bl	80097e8 <__b2d>
 800994e:	a901      	add	r1, sp, #4
 8009950:	4640      	mov	r0, r8
 8009952:	ec55 4b10 	vmov	r4, r5, d0
 8009956:	f7ff ff47 	bl	80097e8 <__b2d>
 800995a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800995e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009962:	eba3 0c02 	sub.w	ip, r3, r2
 8009966:	e9dd 3200 	ldrd	r3, r2, [sp]
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009970:	ec51 0b10 	vmov	r0, r1, d0
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfd6      	itet	le
 8009978:	460a      	movle	r2, r1
 800997a:	462a      	movgt	r2, r5
 800997c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009980:	468b      	mov	fp, r1
 8009982:	462f      	mov	r7, r5
 8009984:	bfd4      	ite	le
 8009986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800998a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800998e:	4620      	mov	r0, r4
 8009990:	ee10 2a10 	vmov	r2, s0
 8009994:	465b      	mov	r3, fp
 8009996:	4639      	mov	r1, r7
 8009998:	f7f6 ff78 	bl	800088c <__aeabi_ddiv>
 800999c:	ec41 0b10 	vmov	d0, r0, r1
 80099a0:	b003      	add	sp, #12
 80099a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099a6 <__copybits>:
 80099a6:	3901      	subs	r1, #1
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	1149      	asrs	r1, r1, #5
 80099ac:	6914      	ldr	r4, [r2, #16]
 80099ae:	3101      	adds	r1, #1
 80099b0:	f102 0314 	add.w	r3, r2, #20
 80099b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099bc:	1f05      	subs	r5, r0, #4
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d30c      	bcc.n	80099dc <__copybits+0x36>
 80099c2:	1aa3      	subs	r3, r4, r2
 80099c4:	3b11      	subs	r3, #17
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	3211      	adds	r2, #17
 80099cc:	42a2      	cmp	r2, r4
 80099ce:	bf88      	it	hi
 80099d0:	2300      	movhi	r3, #0
 80099d2:	4418      	add	r0, r3
 80099d4:	2300      	movs	r3, #0
 80099d6:	4288      	cmp	r0, r1
 80099d8:	d305      	bcc.n	80099e6 <__copybits+0x40>
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80099e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80099e4:	e7eb      	b.n	80099be <__copybits+0x18>
 80099e6:	f840 3b04 	str.w	r3, [r0], #4
 80099ea:	e7f4      	b.n	80099d6 <__copybits+0x30>

080099ec <__any_on>:
 80099ec:	f100 0214 	add.w	r2, r0, #20
 80099f0:	6900      	ldr	r0, [r0, #16]
 80099f2:	114b      	asrs	r3, r1, #5
 80099f4:	4298      	cmp	r0, r3
 80099f6:	b510      	push	{r4, lr}
 80099f8:	db11      	blt.n	8009a1e <__any_on+0x32>
 80099fa:	dd0a      	ble.n	8009a12 <__any_on+0x26>
 80099fc:	f011 011f 	ands.w	r1, r1, #31
 8009a00:	d007      	beq.n	8009a12 <__any_on+0x26>
 8009a02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a06:	fa24 f001 	lsr.w	r0, r4, r1
 8009a0a:	fa00 f101 	lsl.w	r1, r0, r1
 8009a0e:	428c      	cmp	r4, r1
 8009a10:	d10b      	bne.n	8009a2a <__any_on+0x3e>
 8009a12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d803      	bhi.n	8009a22 <__any_on+0x36>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	4603      	mov	r3, r0
 8009a20:	e7f7      	b.n	8009a12 <__any_on+0x26>
 8009a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d0f5      	beq.n	8009a16 <__any_on+0x2a>
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	e7f6      	b.n	8009a1c <__any_on+0x30>

08009a2e <_calloc_r>:
 8009a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a30:	fba1 2402 	umull	r2, r4, r1, r2
 8009a34:	b94c      	cbnz	r4, 8009a4a <_calloc_r+0x1c>
 8009a36:	4611      	mov	r1, r2
 8009a38:	9201      	str	r2, [sp, #4]
 8009a3a:	f000 f87b 	bl	8009b34 <_malloc_r>
 8009a3e:	9a01      	ldr	r2, [sp, #4]
 8009a40:	4605      	mov	r5, r0
 8009a42:	b930      	cbnz	r0, 8009a52 <_calloc_r+0x24>
 8009a44:	4628      	mov	r0, r5
 8009a46:	b003      	add	sp, #12
 8009a48:	bd30      	pop	{r4, r5, pc}
 8009a4a:	220c      	movs	r2, #12
 8009a4c:	6002      	str	r2, [r0, #0]
 8009a4e:	2500      	movs	r5, #0
 8009a50:	e7f8      	b.n	8009a44 <_calloc_r+0x16>
 8009a52:	4621      	mov	r1, r4
 8009a54:	f7fc fbac 	bl	80061b0 <memset>
 8009a58:	e7f4      	b.n	8009a44 <_calloc_r+0x16>
	...

08009a5c <_free_r>:
 8009a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	d044      	beq.n	8009aec <_free_r+0x90>
 8009a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a66:	9001      	str	r0, [sp, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a6e:	bfb8      	it	lt
 8009a70:	18e4      	addlt	r4, r4, r3
 8009a72:	f000 fab5 	bl	8009fe0 <__malloc_lock>
 8009a76:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <_free_r+0x94>)
 8009a78:	9801      	ldr	r0, [sp, #4]
 8009a7a:	6813      	ldr	r3, [r2, #0]
 8009a7c:	b933      	cbnz	r3, 8009a8c <_free_r+0x30>
 8009a7e:	6063      	str	r3, [r4, #4]
 8009a80:	6014      	str	r4, [r2, #0]
 8009a82:	b003      	add	sp, #12
 8009a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a88:	f000 bab0 	b.w	8009fec <__malloc_unlock>
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	d908      	bls.n	8009aa2 <_free_r+0x46>
 8009a90:	6825      	ldr	r5, [r4, #0]
 8009a92:	1961      	adds	r1, r4, r5
 8009a94:	428b      	cmp	r3, r1
 8009a96:	bf01      	itttt	eq
 8009a98:	6819      	ldreq	r1, [r3, #0]
 8009a9a:	685b      	ldreq	r3, [r3, #4]
 8009a9c:	1949      	addeq	r1, r1, r5
 8009a9e:	6021      	streq	r1, [r4, #0]
 8009aa0:	e7ed      	b.n	8009a7e <_free_r+0x22>
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	b10b      	cbz	r3, 8009aac <_free_r+0x50>
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	d9fa      	bls.n	8009aa2 <_free_r+0x46>
 8009aac:	6811      	ldr	r1, [r2, #0]
 8009aae:	1855      	adds	r5, r2, r1
 8009ab0:	42a5      	cmp	r5, r4
 8009ab2:	d10b      	bne.n	8009acc <_free_r+0x70>
 8009ab4:	6824      	ldr	r4, [r4, #0]
 8009ab6:	4421      	add	r1, r4
 8009ab8:	1854      	adds	r4, r2, r1
 8009aba:	42a3      	cmp	r3, r4
 8009abc:	6011      	str	r1, [r2, #0]
 8009abe:	d1e0      	bne.n	8009a82 <_free_r+0x26>
 8009ac0:	681c      	ldr	r4, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	6053      	str	r3, [r2, #4]
 8009ac6:	4421      	add	r1, r4
 8009ac8:	6011      	str	r1, [r2, #0]
 8009aca:	e7da      	b.n	8009a82 <_free_r+0x26>
 8009acc:	d902      	bls.n	8009ad4 <_free_r+0x78>
 8009ace:	230c      	movs	r3, #12
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	e7d6      	b.n	8009a82 <_free_r+0x26>
 8009ad4:	6825      	ldr	r5, [r4, #0]
 8009ad6:	1961      	adds	r1, r4, r5
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	bf04      	itt	eq
 8009adc:	6819      	ldreq	r1, [r3, #0]
 8009ade:	685b      	ldreq	r3, [r3, #4]
 8009ae0:	6063      	str	r3, [r4, #4]
 8009ae2:	bf04      	itt	eq
 8009ae4:	1949      	addeq	r1, r1, r5
 8009ae6:	6021      	streq	r1, [r4, #0]
 8009ae8:	6054      	str	r4, [r2, #4]
 8009aea:	e7ca      	b.n	8009a82 <_free_r+0x26>
 8009aec:	b003      	add	sp, #12
 8009aee:	bd30      	pop	{r4, r5, pc}
 8009af0:	200003f8 	.word	0x200003f8

08009af4 <sbrk_aligned>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	4e0e      	ldr	r6, [pc, #56]	; (8009b30 <sbrk_aligned+0x3c>)
 8009af8:	460c      	mov	r4, r1
 8009afa:	6831      	ldr	r1, [r6, #0]
 8009afc:	4605      	mov	r5, r0
 8009afe:	b911      	cbnz	r1, 8009b06 <sbrk_aligned+0x12>
 8009b00:	f000 f9f2 	bl	8009ee8 <_sbrk_r>
 8009b04:	6030      	str	r0, [r6, #0]
 8009b06:	4621      	mov	r1, r4
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f000 f9ed 	bl	8009ee8 <_sbrk_r>
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	d00a      	beq.n	8009b28 <sbrk_aligned+0x34>
 8009b12:	1cc4      	adds	r4, r0, #3
 8009b14:	f024 0403 	bic.w	r4, r4, #3
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d007      	beq.n	8009b2c <sbrk_aligned+0x38>
 8009b1c:	1a21      	subs	r1, r4, r0
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f000 f9e2 	bl	8009ee8 <_sbrk_r>
 8009b24:	3001      	adds	r0, #1
 8009b26:	d101      	bne.n	8009b2c <sbrk_aligned+0x38>
 8009b28:	f04f 34ff 	mov.w	r4, #4294967295
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	200003fc 	.word	0x200003fc

08009b34 <_malloc_r>:
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	1ccd      	adds	r5, r1, #3
 8009b3a:	f025 0503 	bic.w	r5, r5, #3
 8009b3e:	3508      	adds	r5, #8
 8009b40:	2d0c      	cmp	r5, #12
 8009b42:	bf38      	it	cc
 8009b44:	250c      	movcc	r5, #12
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	4607      	mov	r7, r0
 8009b4a:	db01      	blt.n	8009b50 <_malloc_r+0x1c>
 8009b4c:	42a9      	cmp	r1, r5
 8009b4e:	d905      	bls.n	8009b5c <_malloc_r+0x28>
 8009b50:	230c      	movs	r3, #12
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	2600      	movs	r6, #0
 8009b56:	4630      	mov	r0, r6
 8009b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b5c:	4e2e      	ldr	r6, [pc, #184]	; (8009c18 <_malloc_r+0xe4>)
 8009b5e:	f000 fa3f 	bl	8009fe0 <__malloc_lock>
 8009b62:	6833      	ldr	r3, [r6, #0]
 8009b64:	461c      	mov	r4, r3
 8009b66:	bb34      	cbnz	r4, 8009bb6 <_malloc_r+0x82>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	f7ff ffc2 	bl	8009af4 <sbrk_aligned>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	4604      	mov	r4, r0
 8009b74:	d14d      	bne.n	8009c12 <_malloc_r+0xde>
 8009b76:	6834      	ldr	r4, [r6, #0]
 8009b78:	4626      	mov	r6, r4
 8009b7a:	2e00      	cmp	r6, #0
 8009b7c:	d140      	bne.n	8009c00 <_malloc_r+0xcc>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	4631      	mov	r1, r6
 8009b82:	4638      	mov	r0, r7
 8009b84:	eb04 0803 	add.w	r8, r4, r3
 8009b88:	f000 f9ae 	bl	8009ee8 <_sbrk_r>
 8009b8c:	4580      	cmp	r8, r0
 8009b8e:	d13a      	bne.n	8009c06 <_malloc_r+0xd2>
 8009b90:	6821      	ldr	r1, [r4, #0]
 8009b92:	3503      	adds	r5, #3
 8009b94:	1a6d      	subs	r5, r5, r1
 8009b96:	f025 0503 	bic.w	r5, r5, #3
 8009b9a:	3508      	adds	r5, #8
 8009b9c:	2d0c      	cmp	r5, #12
 8009b9e:	bf38      	it	cc
 8009ba0:	250c      	movcc	r5, #12
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f7ff ffa5 	bl	8009af4 <sbrk_aligned>
 8009baa:	3001      	adds	r0, #1
 8009bac:	d02b      	beq.n	8009c06 <_malloc_r+0xd2>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	442b      	add	r3, r5
 8009bb2:	6023      	str	r3, [r4, #0]
 8009bb4:	e00e      	b.n	8009bd4 <_malloc_r+0xa0>
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	1b52      	subs	r2, r2, r5
 8009bba:	d41e      	bmi.n	8009bfa <_malloc_r+0xc6>
 8009bbc:	2a0b      	cmp	r2, #11
 8009bbe:	d916      	bls.n	8009bee <_malloc_r+0xba>
 8009bc0:	1961      	adds	r1, r4, r5
 8009bc2:	42a3      	cmp	r3, r4
 8009bc4:	6025      	str	r5, [r4, #0]
 8009bc6:	bf18      	it	ne
 8009bc8:	6059      	strne	r1, [r3, #4]
 8009bca:	6863      	ldr	r3, [r4, #4]
 8009bcc:	bf08      	it	eq
 8009bce:	6031      	streq	r1, [r6, #0]
 8009bd0:	5162      	str	r2, [r4, r5]
 8009bd2:	604b      	str	r3, [r1, #4]
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f104 060b 	add.w	r6, r4, #11
 8009bda:	f000 fa07 	bl	8009fec <__malloc_unlock>
 8009bde:	f026 0607 	bic.w	r6, r6, #7
 8009be2:	1d23      	adds	r3, r4, #4
 8009be4:	1af2      	subs	r2, r6, r3
 8009be6:	d0b6      	beq.n	8009b56 <_malloc_r+0x22>
 8009be8:	1b9b      	subs	r3, r3, r6
 8009bea:	50a3      	str	r3, [r4, r2]
 8009bec:	e7b3      	b.n	8009b56 <_malloc_r+0x22>
 8009bee:	6862      	ldr	r2, [r4, #4]
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	bf0c      	ite	eq
 8009bf4:	6032      	streq	r2, [r6, #0]
 8009bf6:	605a      	strne	r2, [r3, #4]
 8009bf8:	e7ec      	b.n	8009bd4 <_malloc_r+0xa0>
 8009bfa:	4623      	mov	r3, r4
 8009bfc:	6864      	ldr	r4, [r4, #4]
 8009bfe:	e7b2      	b.n	8009b66 <_malloc_r+0x32>
 8009c00:	4634      	mov	r4, r6
 8009c02:	6876      	ldr	r6, [r6, #4]
 8009c04:	e7b9      	b.n	8009b7a <_malloc_r+0x46>
 8009c06:	230c      	movs	r3, #12
 8009c08:	603b      	str	r3, [r7, #0]
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	f000 f9ee 	bl	8009fec <__malloc_unlock>
 8009c10:	e7a1      	b.n	8009b56 <_malloc_r+0x22>
 8009c12:	6025      	str	r5, [r4, #0]
 8009c14:	e7de      	b.n	8009bd4 <_malloc_r+0xa0>
 8009c16:	bf00      	nop
 8009c18:	200003f8 	.word	0x200003f8

08009c1c <__ssputs_r>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	688e      	ldr	r6, [r1, #8]
 8009c22:	429e      	cmp	r6, r3
 8009c24:	4682      	mov	sl, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	4690      	mov	r8, r2
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	d838      	bhi.n	8009ca0 <__ssputs_r+0x84>
 8009c2e:	898a      	ldrh	r2, [r1, #12]
 8009c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c34:	d032      	beq.n	8009c9c <__ssputs_r+0x80>
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	6909      	ldr	r1, [r1, #16]
 8009c3a:	eba5 0901 	sub.w	r9, r5, r1
 8009c3e:	6965      	ldr	r5, [r4, #20]
 8009c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c48:	3301      	adds	r3, #1
 8009c4a:	444b      	add	r3, r9
 8009c4c:	106d      	asrs	r5, r5, #1
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	bf38      	it	cc
 8009c52:	461d      	movcc	r5, r3
 8009c54:	0553      	lsls	r3, r2, #21
 8009c56:	d531      	bpl.n	8009cbc <__ssputs_r+0xa0>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7ff ff6b 	bl	8009b34 <_malloc_r>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	b950      	cbnz	r0, 8009c78 <__ssputs_r+0x5c>
 8009c62:	230c      	movs	r3, #12
 8009c64:	f8ca 3000 	str.w	r3, [sl]
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6e:	81a3      	strh	r3, [r4, #12]
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c78:	6921      	ldr	r1, [r4, #16]
 8009c7a:	464a      	mov	r2, r9
 8009c7c:	f7ff fa08 	bl	8009090 <memcpy>
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	6126      	str	r6, [r4, #16]
 8009c8e:	6165      	str	r5, [r4, #20]
 8009c90:	444e      	add	r6, r9
 8009c92:	eba5 0509 	sub.w	r5, r5, r9
 8009c96:	6026      	str	r6, [r4, #0]
 8009c98:	60a5      	str	r5, [r4, #8]
 8009c9a:	463e      	mov	r6, r7
 8009c9c:	42be      	cmp	r6, r7
 8009c9e:	d900      	bls.n	8009ca2 <__ssputs_r+0x86>
 8009ca0:	463e      	mov	r6, r7
 8009ca2:	6820      	ldr	r0, [r4, #0]
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	f000 f980 	bl	8009fac <memmove>
 8009cac:	68a3      	ldr	r3, [r4, #8]
 8009cae:	1b9b      	subs	r3, r3, r6
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4433      	add	r3, r6
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e7db      	b.n	8009c74 <__ssputs_r+0x58>
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	f000 f99b 	bl	8009ff8 <_realloc_r>
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d1e1      	bne.n	8009c8c <__ssputs_r+0x70>
 8009cc8:	6921      	ldr	r1, [r4, #16]
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f7ff fec6 	bl	8009a5c <_free_r>
 8009cd0:	e7c7      	b.n	8009c62 <__ssputs_r+0x46>
	...

08009cd4 <_svfiprintf_r>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	4698      	mov	r8, r3
 8009cda:	898b      	ldrh	r3, [r1, #12]
 8009cdc:	061b      	lsls	r3, r3, #24
 8009cde:	b09d      	sub	sp, #116	; 0x74
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	d50e      	bpl.n	8009d06 <_svfiprintf_r+0x32>
 8009ce8:	690b      	ldr	r3, [r1, #16]
 8009cea:	b963      	cbnz	r3, 8009d06 <_svfiprintf_r+0x32>
 8009cec:	2140      	movs	r1, #64	; 0x40
 8009cee:	f7ff ff21 	bl	8009b34 <_malloc_r>
 8009cf2:	6028      	str	r0, [r5, #0]
 8009cf4:	6128      	str	r0, [r5, #16]
 8009cf6:	b920      	cbnz	r0, 8009d02 <_svfiprintf_r+0x2e>
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e0d1      	b.n	8009ea6 <_svfiprintf_r+0x1d2>
 8009d02:	2340      	movs	r3, #64	; 0x40
 8009d04:	616b      	str	r3, [r5, #20]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9309      	str	r3, [sp, #36]	; 0x24
 8009d0a:	2320      	movs	r3, #32
 8009d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d14:	2330      	movs	r3, #48	; 0x30
 8009d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ec0 <_svfiprintf_r+0x1ec>
 8009d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d1e:	f04f 0901 	mov.w	r9, #1
 8009d22:	4623      	mov	r3, r4
 8009d24:	469a      	mov	sl, r3
 8009d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d2a:	b10a      	cbz	r2, 8009d30 <_svfiprintf_r+0x5c>
 8009d2c:	2a25      	cmp	r2, #37	; 0x25
 8009d2e:	d1f9      	bne.n	8009d24 <_svfiprintf_r+0x50>
 8009d30:	ebba 0b04 	subs.w	fp, sl, r4
 8009d34:	d00b      	beq.n	8009d4e <_svfiprintf_r+0x7a>
 8009d36:	465b      	mov	r3, fp
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff ff6d 	bl	8009c1c <__ssputs_r>
 8009d42:	3001      	adds	r0, #1
 8009d44:	f000 80aa 	beq.w	8009e9c <_svfiprintf_r+0x1c8>
 8009d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d4a:	445a      	add	r2, fp
 8009d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 80a2 	beq.w	8009e9c <_svfiprintf_r+0x1c8>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d62:	f10a 0a01 	add.w	sl, sl, #1
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	9307      	str	r3, [sp, #28]
 8009d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d70:	4654      	mov	r4, sl
 8009d72:	2205      	movs	r2, #5
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	4851      	ldr	r0, [pc, #324]	; (8009ec0 <_svfiprintf_r+0x1ec>)
 8009d7a:	f7f6 fa51 	bl	8000220 <memchr>
 8009d7e:	9a04      	ldr	r2, [sp, #16]
 8009d80:	b9d8      	cbnz	r0, 8009dba <_svfiprintf_r+0xe6>
 8009d82:	06d0      	lsls	r0, r2, #27
 8009d84:	bf44      	itt	mi
 8009d86:	2320      	movmi	r3, #32
 8009d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8c:	0711      	lsls	r1, r2, #28
 8009d8e:	bf44      	itt	mi
 8009d90:	232b      	movmi	r3, #43	; 0x2b
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d96:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9c:	d015      	beq.n	8009dca <_svfiprintf_r+0xf6>
 8009d9e:	9a07      	ldr	r2, [sp, #28]
 8009da0:	4654      	mov	r4, sl
 8009da2:	2000      	movs	r0, #0
 8009da4:	f04f 0c0a 	mov.w	ip, #10
 8009da8:	4621      	mov	r1, r4
 8009daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dae:	3b30      	subs	r3, #48	; 0x30
 8009db0:	2b09      	cmp	r3, #9
 8009db2:	d94e      	bls.n	8009e52 <_svfiprintf_r+0x17e>
 8009db4:	b1b0      	cbz	r0, 8009de4 <_svfiprintf_r+0x110>
 8009db6:	9207      	str	r2, [sp, #28]
 8009db8:	e014      	b.n	8009de4 <_svfiprintf_r+0x110>
 8009dba:	eba0 0308 	sub.w	r3, r0, r8
 8009dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	46a2      	mov	sl, r4
 8009dc8:	e7d2      	b.n	8009d70 <_svfiprintf_r+0x9c>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	1d19      	adds	r1, r3, #4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bfbb      	ittet	lt
 8009dd6:	425b      	neglt	r3, r3
 8009dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ddc:	9307      	strge	r3, [sp, #28]
 8009dde:	9307      	strlt	r3, [sp, #28]
 8009de0:	bfb8      	it	lt
 8009de2:	9204      	strlt	r2, [sp, #16]
 8009de4:	7823      	ldrb	r3, [r4, #0]
 8009de6:	2b2e      	cmp	r3, #46	; 0x2e
 8009de8:	d10c      	bne.n	8009e04 <_svfiprintf_r+0x130>
 8009dea:	7863      	ldrb	r3, [r4, #1]
 8009dec:	2b2a      	cmp	r3, #42	; 0x2a
 8009dee:	d135      	bne.n	8009e5c <_svfiprintf_r+0x188>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfb8      	it	lt
 8009dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e00:	3402      	adds	r4, #2
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ed0 <_svfiprintf_r+0x1fc>
 8009e08:	7821      	ldrb	r1, [r4, #0]
 8009e0a:	2203      	movs	r2, #3
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	f7f6 fa07 	bl	8000220 <memchr>
 8009e12:	b140      	cbz	r0, 8009e26 <_svfiprintf_r+0x152>
 8009e14:	2340      	movs	r3, #64	; 0x40
 8009e16:	eba0 000a 	sub.w	r0, r0, sl
 8009e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	4303      	orrs	r3, r0
 8009e22:	3401      	adds	r4, #1
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	4826      	ldr	r0, [pc, #152]	; (8009ec4 <_svfiprintf_r+0x1f0>)
 8009e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e30:	2206      	movs	r2, #6
 8009e32:	f7f6 f9f5 	bl	8000220 <memchr>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d038      	beq.n	8009eac <_svfiprintf_r+0x1d8>
 8009e3a:	4b23      	ldr	r3, [pc, #140]	; (8009ec8 <_svfiprintf_r+0x1f4>)
 8009e3c:	bb1b      	cbnz	r3, 8009e86 <_svfiprintf_r+0x1b2>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	3307      	adds	r3, #7
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	3308      	adds	r3, #8
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4c:	4433      	add	r3, r6
 8009e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e50:	e767      	b.n	8009d22 <_svfiprintf_r+0x4e>
 8009e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e56:	460c      	mov	r4, r1
 8009e58:	2001      	movs	r0, #1
 8009e5a:	e7a5      	b.n	8009da8 <_svfiprintf_r+0xd4>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	3401      	adds	r4, #1
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	4619      	mov	r1, r3
 8009e64:	f04f 0c0a 	mov.w	ip, #10
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6e:	3a30      	subs	r2, #48	; 0x30
 8009e70:	2a09      	cmp	r2, #9
 8009e72:	d903      	bls.n	8009e7c <_svfiprintf_r+0x1a8>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0c5      	beq.n	8009e04 <_svfiprintf_r+0x130>
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	e7c3      	b.n	8009e04 <_svfiprintf_r+0x130>
 8009e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e80:	4604      	mov	r4, r0
 8009e82:	2301      	movs	r3, #1
 8009e84:	e7f0      	b.n	8009e68 <_svfiprintf_r+0x194>
 8009e86:	ab03      	add	r3, sp, #12
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <_svfiprintf_r+0x1f8>)
 8009e8e:	a904      	add	r1, sp, #16
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7fc fa35 	bl	8006300 <_printf_float>
 8009e96:	1c42      	adds	r2, r0, #1
 8009e98:	4606      	mov	r6, r0
 8009e9a:	d1d6      	bne.n	8009e4a <_svfiprintf_r+0x176>
 8009e9c:	89ab      	ldrh	r3, [r5, #12]
 8009e9e:	065b      	lsls	r3, r3, #25
 8009ea0:	f53f af2c 	bmi.w	8009cfc <_svfiprintf_r+0x28>
 8009ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ea6:	b01d      	add	sp, #116	; 0x74
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	ab03      	add	r3, sp, #12
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	4b06      	ldr	r3, [pc, #24]	; (8009ecc <_svfiprintf_r+0x1f8>)
 8009eb4:	a904      	add	r1, sp, #16
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f7fc fcc6 	bl	8006848 <_printf_i>
 8009ebc:	e7eb      	b.n	8009e96 <_svfiprintf_r+0x1c2>
 8009ebe:	bf00      	nop
 8009ec0:	0800af24 	.word	0x0800af24
 8009ec4:	0800af2e 	.word	0x0800af2e
 8009ec8:	08006301 	.word	0x08006301
 8009ecc:	08009c1d 	.word	0x08009c1d
 8009ed0:	0800af2a 	.word	0x0800af2a
 8009ed4:	00000000 	.word	0x00000000

08009ed8 <nan>:
 8009ed8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ee0 <nan+0x8>
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	00000000 	.word	0x00000000
 8009ee4:	7ff80000 	.word	0x7ff80000

08009ee8 <_sbrk_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_sbrk_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f8 f93a 	bl	800216c <_sbrk>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_sbrk_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_sbrk_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000400 	.word	0x20000400

08009f08 <strncmp>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	b17a      	cbz	r2, 8009f2c <strncmp+0x24>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	3901      	subs	r1, #1
 8009f10:	1884      	adds	r4, r0, r2
 8009f12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009f1a:	4290      	cmp	r0, r2
 8009f1c:	d101      	bne.n	8009f22 <strncmp+0x1a>
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	d101      	bne.n	8009f26 <strncmp+0x1e>
 8009f22:	1a80      	subs	r0, r0, r2
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d1f3      	bne.n	8009f12 <strncmp+0xa>
 8009f2a:	e7fa      	b.n	8009f22 <strncmp+0x1a>
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	e7f9      	b.n	8009f24 <strncmp+0x1c>

08009f30 <__ascii_wctomb>:
 8009f30:	b149      	cbz	r1, 8009f46 <__ascii_wctomb+0x16>
 8009f32:	2aff      	cmp	r2, #255	; 0xff
 8009f34:	bf85      	ittet	hi
 8009f36:	238a      	movhi	r3, #138	; 0x8a
 8009f38:	6003      	strhi	r3, [r0, #0]
 8009f3a:	700a      	strbls	r2, [r1, #0]
 8009f3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f40:	bf98      	it	ls
 8009f42:	2001      	movls	r0, #1
 8009f44:	4770      	bx	lr
 8009f46:	4608      	mov	r0, r1
 8009f48:	4770      	bx	lr
	...

08009f4c <__assert_func>:
 8009f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4e:	4614      	mov	r4, r2
 8009f50:	461a      	mov	r2, r3
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <__assert_func+0x2c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4605      	mov	r5, r0
 8009f58:	68d8      	ldr	r0, [r3, #12]
 8009f5a:	b14c      	cbz	r4, 8009f70 <__assert_func+0x24>
 8009f5c:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <__assert_func+0x30>)
 8009f5e:	9100      	str	r1, [sp, #0]
 8009f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f64:	4906      	ldr	r1, [pc, #24]	; (8009f80 <__assert_func+0x34>)
 8009f66:	462b      	mov	r3, r5
 8009f68:	f000 f80e 	bl	8009f88 <fiprintf>
 8009f6c:	f000 fa8c 	bl	800a488 <abort>
 8009f70:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <__assert_func+0x38>)
 8009f72:	461c      	mov	r4, r3
 8009f74:	e7f3      	b.n	8009f5e <__assert_func+0x12>
 8009f76:	bf00      	nop
 8009f78:	2000003c 	.word	0x2000003c
 8009f7c:	0800af35 	.word	0x0800af35
 8009f80:	0800af42 	.word	0x0800af42
 8009f84:	0800af70 	.word	0x0800af70

08009f88 <fiprintf>:
 8009f88:	b40e      	push	{r1, r2, r3}
 8009f8a:	b503      	push	{r0, r1, lr}
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	ab03      	add	r3, sp, #12
 8009f90:	4805      	ldr	r0, [pc, #20]	; (8009fa8 <fiprintf+0x20>)
 8009f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f96:	6800      	ldr	r0, [r0, #0]
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	f000 f885 	bl	800a0a8 <_vfiprintf_r>
 8009f9e:	b002      	add	sp, #8
 8009fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa4:	b003      	add	sp, #12
 8009fa6:	4770      	bx	lr
 8009fa8:	2000003c 	.word	0x2000003c

08009fac <memmove>:
 8009fac:	4288      	cmp	r0, r1
 8009fae:	b510      	push	{r4, lr}
 8009fb0:	eb01 0402 	add.w	r4, r1, r2
 8009fb4:	d902      	bls.n	8009fbc <memmove+0x10>
 8009fb6:	4284      	cmp	r4, r0
 8009fb8:	4623      	mov	r3, r4
 8009fba:	d807      	bhi.n	8009fcc <memmove+0x20>
 8009fbc:	1e43      	subs	r3, r0, #1
 8009fbe:	42a1      	cmp	r1, r4
 8009fc0:	d008      	beq.n	8009fd4 <memmove+0x28>
 8009fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fca:	e7f8      	b.n	8009fbe <memmove+0x12>
 8009fcc:	4402      	add	r2, r0
 8009fce:	4601      	mov	r1, r0
 8009fd0:	428a      	cmp	r2, r1
 8009fd2:	d100      	bne.n	8009fd6 <memmove+0x2a>
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fde:	e7f7      	b.n	8009fd0 <memmove+0x24>

08009fe0 <__malloc_lock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__malloc_lock+0x8>)
 8009fe2:	f000 bc11 	b.w	800a808 <__retarget_lock_acquire_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	20000404 	.word	0x20000404

08009fec <__malloc_unlock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	; (8009ff4 <__malloc_unlock+0x8>)
 8009fee:	f000 bc0c 	b.w	800a80a <__retarget_lock_release_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	20000404 	.word	0x20000404

08009ff8 <_realloc_r>:
 8009ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	4614      	mov	r4, r2
 800a000:	460e      	mov	r6, r1
 800a002:	b921      	cbnz	r1, 800a00e <_realloc_r+0x16>
 800a004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a008:	4611      	mov	r1, r2
 800a00a:	f7ff bd93 	b.w	8009b34 <_malloc_r>
 800a00e:	b92a      	cbnz	r2, 800a01c <_realloc_r+0x24>
 800a010:	f7ff fd24 	bl	8009a5c <_free_r>
 800a014:	4625      	mov	r5, r4
 800a016:	4628      	mov	r0, r5
 800a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01c:	f000 fc5c 	bl	800a8d8 <_malloc_usable_size_r>
 800a020:	4284      	cmp	r4, r0
 800a022:	4607      	mov	r7, r0
 800a024:	d802      	bhi.n	800a02c <_realloc_r+0x34>
 800a026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a02a:	d812      	bhi.n	800a052 <_realloc_r+0x5a>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4640      	mov	r0, r8
 800a030:	f7ff fd80 	bl	8009b34 <_malloc_r>
 800a034:	4605      	mov	r5, r0
 800a036:	2800      	cmp	r0, #0
 800a038:	d0ed      	beq.n	800a016 <_realloc_r+0x1e>
 800a03a:	42bc      	cmp	r4, r7
 800a03c:	4622      	mov	r2, r4
 800a03e:	4631      	mov	r1, r6
 800a040:	bf28      	it	cs
 800a042:	463a      	movcs	r2, r7
 800a044:	f7ff f824 	bl	8009090 <memcpy>
 800a048:	4631      	mov	r1, r6
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff fd06 	bl	8009a5c <_free_r>
 800a050:	e7e1      	b.n	800a016 <_realloc_r+0x1e>
 800a052:	4635      	mov	r5, r6
 800a054:	e7df      	b.n	800a016 <_realloc_r+0x1e>

0800a056 <__sfputc_r>:
 800a056:	6893      	ldr	r3, [r2, #8]
 800a058:	3b01      	subs	r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	b410      	push	{r4}
 800a05e:	6093      	str	r3, [r2, #8]
 800a060:	da08      	bge.n	800a074 <__sfputc_r+0x1e>
 800a062:	6994      	ldr	r4, [r2, #24]
 800a064:	42a3      	cmp	r3, r4
 800a066:	db01      	blt.n	800a06c <__sfputc_r+0x16>
 800a068:	290a      	cmp	r1, #10
 800a06a:	d103      	bne.n	800a074 <__sfputc_r+0x1e>
 800a06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a070:	f000 b94a 	b.w	800a308 <__swbuf_r>
 800a074:	6813      	ldr	r3, [r2, #0]
 800a076:	1c58      	adds	r0, r3, #1
 800a078:	6010      	str	r0, [r2, #0]
 800a07a:	7019      	strb	r1, [r3, #0]
 800a07c:	4608      	mov	r0, r1
 800a07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <__sfputs_r>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	4606      	mov	r6, r0
 800a088:	460f      	mov	r7, r1
 800a08a:	4614      	mov	r4, r2
 800a08c:	18d5      	adds	r5, r2, r3
 800a08e:	42ac      	cmp	r4, r5
 800a090:	d101      	bne.n	800a096 <__sfputs_r+0x12>
 800a092:	2000      	movs	r0, #0
 800a094:	e007      	b.n	800a0a6 <__sfputs_r+0x22>
 800a096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09a:	463a      	mov	r2, r7
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff ffda 	bl	800a056 <__sfputc_r>
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	d1f3      	bne.n	800a08e <__sfputs_r+0xa>
 800a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0a8 <_vfiprintf_r>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	460d      	mov	r5, r1
 800a0ae:	b09d      	sub	sp, #116	; 0x74
 800a0b0:	4614      	mov	r4, r2
 800a0b2:	4698      	mov	r8, r3
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	b118      	cbz	r0, 800a0c0 <_vfiprintf_r+0x18>
 800a0b8:	6983      	ldr	r3, [r0, #24]
 800a0ba:	b90b      	cbnz	r3, 800a0c0 <_vfiprintf_r+0x18>
 800a0bc:	f000 fb06 	bl	800a6cc <__sinit>
 800a0c0:	4b89      	ldr	r3, [pc, #548]	; (800a2e8 <_vfiprintf_r+0x240>)
 800a0c2:	429d      	cmp	r5, r3
 800a0c4:	d11b      	bne.n	800a0fe <_vfiprintf_r+0x56>
 800a0c6:	6875      	ldr	r5, [r6, #4]
 800a0c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ca:	07d9      	lsls	r1, r3, #31
 800a0cc:	d405      	bmi.n	800a0da <_vfiprintf_r+0x32>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	059a      	lsls	r2, r3, #22
 800a0d2:	d402      	bmi.n	800a0da <_vfiprintf_r+0x32>
 800a0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d6:	f000 fb97 	bl	800a808 <__retarget_lock_acquire_recursive>
 800a0da:	89ab      	ldrh	r3, [r5, #12]
 800a0dc:	071b      	lsls	r3, r3, #28
 800a0de:	d501      	bpl.n	800a0e4 <_vfiprintf_r+0x3c>
 800a0e0:	692b      	ldr	r3, [r5, #16]
 800a0e2:	b9eb      	cbnz	r3, 800a120 <_vfiprintf_r+0x78>
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f000 f960 	bl	800a3ac <__swsetup_r>
 800a0ec:	b1c0      	cbz	r0, 800a120 <_vfiprintf_r+0x78>
 800a0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f0:	07dc      	lsls	r4, r3, #31
 800a0f2:	d50e      	bpl.n	800a112 <_vfiprintf_r+0x6a>
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	b01d      	add	sp, #116	; 0x74
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	4b7b      	ldr	r3, [pc, #492]	; (800a2ec <_vfiprintf_r+0x244>)
 800a100:	429d      	cmp	r5, r3
 800a102:	d101      	bne.n	800a108 <_vfiprintf_r+0x60>
 800a104:	68b5      	ldr	r5, [r6, #8]
 800a106:	e7df      	b.n	800a0c8 <_vfiprintf_r+0x20>
 800a108:	4b79      	ldr	r3, [pc, #484]	; (800a2f0 <_vfiprintf_r+0x248>)
 800a10a:	429d      	cmp	r5, r3
 800a10c:	bf08      	it	eq
 800a10e:	68f5      	ldreq	r5, [r6, #12]
 800a110:	e7da      	b.n	800a0c8 <_vfiprintf_r+0x20>
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	0598      	lsls	r0, r3, #22
 800a116:	d4ed      	bmi.n	800a0f4 <_vfiprintf_r+0x4c>
 800a118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a11a:	f000 fb76 	bl	800a80a <__retarget_lock_release_recursive>
 800a11e:	e7e9      	b.n	800a0f4 <_vfiprintf_r+0x4c>
 800a120:	2300      	movs	r3, #0
 800a122:	9309      	str	r3, [sp, #36]	; 0x24
 800a124:	2320      	movs	r3, #32
 800a126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a12a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a12e:	2330      	movs	r3, #48	; 0x30
 800a130:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2f4 <_vfiprintf_r+0x24c>
 800a134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a138:	f04f 0901 	mov.w	r9, #1
 800a13c:	4623      	mov	r3, r4
 800a13e:	469a      	mov	sl, r3
 800a140:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a144:	b10a      	cbz	r2, 800a14a <_vfiprintf_r+0xa2>
 800a146:	2a25      	cmp	r2, #37	; 0x25
 800a148:	d1f9      	bne.n	800a13e <_vfiprintf_r+0x96>
 800a14a:	ebba 0b04 	subs.w	fp, sl, r4
 800a14e:	d00b      	beq.n	800a168 <_vfiprintf_r+0xc0>
 800a150:	465b      	mov	r3, fp
 800a152:	4622      	mov	r2, r4
 800a154:	4629      	mov	r1, r5
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ff94 	bl	800a084 <__sfputs_r>
 800a15c:	3001      	adds	r0, #1
 800a15e:	f000 80aa 	beq.w	800a2b6 <_vfiprintf_r+0x20e>
 800a162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a164:	445a      	add	r2, fp
 800a166:	9209      	str	r2, [sp, #36]	; 0x24
 800a168:	f89a 3000 	ldrb.w	r3, [sl]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80a2 	beq.w	800a2b6 <_vfiprintf_r+0x20e>
 800a172:	2300      	movs	r3, #0
 800a174:	f04f 32ff 	mov.w	r2, #4294967295
 800a178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a17c:	f10a 0a01 	add.w	sl, sl, #1
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	9307      	str	r3, [sp, #28]
 800a184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a188:	931a      	str	r3, [sp, #104]	; 0x68
 800a18a:	4654      	mov	r4, sl
 800a18c:	2205      	movs	r2, #5
 800a18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a192:	4858      	ldr	r0, [pc, #352]	; (800a2f4 <_vfiprintf_r+0x24c>)
 800a194:	f7f6 f844 	bl	8000220 <memchr>
 800a198:	9a04      	ldr	r2, [sp, #16]
 800a19a:	b9d8      	cbnz	r0, 800a1d4 <_vfiprintf_r+0x12c>
 800a19c:	06d1      	lsls	r1, r2, #27
 800a19e:	bf44      	itt	mi
 800a1a0:	2320      	movmi	r3, #32
 800a1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a6:	0713      	lsls	r3, r2, #28
 800a1a8:	bf44      	itt	mi
 800a1aa:	232b      	movmi	r3, #43	; 0x2b
 800a1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b6:	d015      	beq.n	800a1e4 <_vfiprintf_r+0x13c>
 800a1b8:	9a07      	ldr	r2, [sp, #28]
 800a1ba:	4654      	mov	r4, sl
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f04f 0c0a 	mov.w	ip, #10
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c8:	3b30      	subs	r3, #48	; 0x30
 800a1ca:	2b09      	cmp	r3, #9
 800a1cc:	d94e      	bls.n	800a26c <_vfiprintf_r+0x1c4>
 800a1ce:	b1b0      	cbz	r0, 800a1fe <_vfiprintf_r+0x156>
 800a1d0:	9207      	str	r2, [sp, #28]
 800a1d2:	e014      	b.n	800a1fe <_vfiprintf_r+0x156>
 800a1d4:	eba0 0308 	sub.w	r3, r0, r8
 800a1d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	46a2      	mov	sl, r4
 800a1e2:	e7d2      	b.n	800a18a <_vfiprintf_r+0xe2>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	1d19      	adds	r1, r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	9103      	str	r1, [sp, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bfbb      	ittet	lt
 800a1f0:	425b      	neglt	r3, r3
 800a1f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f6:	9307      	strge	r3, [sp, #28]
 800a1f8:	9307      	strlt	r3, [sp, #28]
 800a1fa:	bfb8      	it	lt
 800a1fc:	9204      	strlt	r2, [sp, #16]
 800a1fe:	7823      	ldrb	r3, [r4, #0]
 800a200:	2b2e      	cmp	r3, #46	; 0x2e
 800a202:	d10c      	bne.n	800a21e <_vfiprintf_r+0x176>
 800a204:	7863      	ldrb	r3, [r4, #1]
 800a206:	2b2a      	cmp	r3, #42	; 0x2a
 800a208:	d135      	bne.n	800a276 <_vfiprintf_r+0x1ce>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	1d1a      	adds	r2, r3, #4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	9203      	str	r2, [sp, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	bfb8      	it	lt
 800a216:	f04f 33ff 	movlt.w	r3, #4294967295
 800a21a:	3402      	adds	r4, #2
 800a21c:	9305      	str	r3, [sp, #20]
 800a21e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a304 <_vfiprintf_r+0x25c>
 800a222:	7821      	ldrb	r1, [r4, #0]
 800a224:	2203      	movs	r2, #3
 800a226:	4650      	mov	r0, sl
 800a228:	f7f5 fffa 	bl	8000220 <memchr>
 800a22c:	b140      	cbz	r0, 800a240 <_vfiprintf_r+0x198>
 800a22e:	2340      	movs	r3, #64	; 0x40
 800a230:	eba0 000a 	sub.w	r0, r0, sl
 800a234:	fa03 f000 	lsl.w	r0, r3, r0
 800a238:	9b04      	ldr	r3, [sp, #16]
 800a23a:	4303      	orrs	r3, r0
 800a23c:	3401      	adds	r4, #1
 800a23e:	9304      	str	r3, [sp, #16]
 800a240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a244:	482c      	ldr	r0, [pc, #176]	; (800a2f8 <_vfiprintf_r+0x250>)
 800a246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a24a:	2206      	movs	r2, #6
 800a24c:	f7f5 ffe8 	bl	8000220 <memchr>
 800a250:	2800      	cmp	r0, #0
 800a252:	d03f      	beq.n	800a2d4 <_vfiprintf_r+0x22c>
 800a254:	4b29      	ldr	r3, [pc, #164]	; (800a2fc <_vfiprintf_r+0x254>)
 800a256:	bb1b      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x1f8>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	3307      	adds	r3, #7
 800a25c:	f023 0307 	bic.w	r3, r3, #7
 800a260:	3308      	adds	r3, #8
 800a262:	9303      	str	r3, [sp, #12]
 800a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a266:	443b      	add	r3, r7
 800a268:	9309      	str	r3, [sp, #36]	; 0x24
 800a26a:	e767      	b.n	800a13c <_vfiprintf_r+0x94>
 800a26c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a270:	460c      	mov	r4, r1
 800a272:	2001      	movs	r0, #1
 800a274:	e7a5      	b.n	800a1c2 <_vfiprintf_r+0x11a>
 800a276:	2300      	movs	r3, #0
 800a278:	3401      	adds	r4, #1
 800a27a:	9305      	str	r3, [sp, #20]
 800a27c:	4619      	mov	r1, r3
 800a27e:	f04f 0c0a 	mov.w	ip, #10
 800a282:	4620      	mov	r0, r4
 800a284:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a288:	3a30      	subs	r2, #48	; 0x30
 800a28a:	2a09      	cmp	r2, #9
 800a28c:	d903      	bls.n	800a296 <_vfiprintf_r+0x1ee>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0c5      	beq.n	800a21e <_vfiprintf_r+0x176>
 800a292:	9105      	str	r1, [sp, #20]
 800a294:	e7c3      	b.n	800a21e <_vfiprintf_r+0x176>
 800a296:	fb0c 2101 	mla	r1, ip, r1, r2
 800a29a:	4604      	mov	r4, r0
 800a29c:	2301      	movs	r3, #1
 800a29e:	e7f0      	b.n	800a282 <_vfiprintf_r+0x1da>
 800a2a0:	ab03      	add	r3, sp, #12
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	462a      	mov	r2, r5
 800a2a6:	4b16      	ldr	r3, [pc, #88]	; (800a300 <_vfiprintf_r+0x258>)
 800a2a8:	a904      	add	r1, sp, #16
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7fc f828 	bl	8006300 <_printf_float>
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	1c78      	adds	r0, r7, #1
 800a2b4:	d1d6      	bne.n	800a264 <_vfiprintf_r+0x1bc>
 800a2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b8:	07d9      	lsls	r1, r3, #31
 800a2ba:	d405      	bmi.n	800a2c8 <_vfiprintf_r+0x220>
 800a2bc:	89ab      	ldrh	r3, [r5, #12]
 800a2be:	059a      	lsls	r2, r3, #22
 800a2c0:	d402      	bmi.n	800a2c8 <_vfiprintf_r+0x220>
 800a2c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c4:	f000 faa1 	bl	800a80a <__retarget_lock_release_recursive>
 800a2c8:	89ab      	ldrh	r3, [r5, #12]
 800a2ca:	065b      	lsls	r3, r3, #25
 800a2cc:	f53f af12 	bmi.w	800a0f4 <_vfiprintf_r+0x4c>
 800a2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d2:	e711      	b.n	800a0f8 <_vfiprintf_r+0x50>
 800a2d4:	ab03      	add	r3, sp, #12
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4b09      	ldr	r3, [pc, #36]	; (800a300 <_vfiprintf_r+0x258>)
 800a2dc:	a904      	add	r1, sp, #16
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f7fc fab2 	bl	8006848 <_printf_i>
 800a2e4:	e7e4      	b.n	800a2b0 <_vfiprintf_r+0x208>
 800a2e6:	bf00      	nop
 800a2e8:	0800af94 	.word	0x0800af94
 800a2ec:	0800afb4 	.word	0x0800afb4
 800a2f0:	0800af74 	.word	0x0800af74
 800a2f4:	0800af24 	.word	0x0800af24
 800a2f8:	0800af2e 	.word	0x0800af2e
 800a2fc:	08006301 	.word	0x08006301
 800a300:	0800a085 	.word	0x0800a085
 800a304:	0800af2a 	.word	0x0800af2a

0800a308 <__swbuf_r>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	460e      	mov	r6, r1
 800a30c:	4614      	mov	r4, r2
 800a30e:	4605      	mov	r5, r0
 800a310:	b118      	cbz	r0, 800a31a <__swbuf_r+0x12>
 800a312:	6983      	ldr	r3, [r0, #24]
 800a314:	b90b      	cbnz	r3, 800a31a <__swbuf_r+0x12>
 800a316:	f000 f9d9 	bl	800a6cc <__sinit>
 800a31a:	4b21      	ldr	r3, [pc, #132]	; (800a3a0 <__swbuf_r+0x98>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	d12b      	bne.n	800a378 <__swbuf_r+0x70>
 800a320:	686c      	ldr	r4, [r5, #4]
 800a322:	69a3      	ldr	r3, [r4, #24]
 800a324:	60a3      	str	r3, [r4, #8]
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	071a      	lsls	r2, r3, #28
 800a32a:	d52f      	bpl.n	800a38c <__swbuf_r+0x84>
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	b36b      	cbz	r3, 800a38c <__swbuf_r+0x84>
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	6820      	ldr	r0, [r4, #0]
 800a334:	1ac0      	subs	r0, r0, r3
 800a336:	6963      	ldr	r3, [r4, #20]
 800a338:	b2f6      	uxtb	r6, r6
 800a33a:	4283      	cmp	r3, r0
 800a33c:	4637      	mov	r7, r6
 800a33e:	dc04      	bgt.n	800a34a <__swbuf_r+0x42>
 800a340:	4621      	mov	r1, r4
 800a342:	4628      	mov	r0, r5
 800a344:	f000 f92e 	bl	800a5a4 <_fflush_r>
 800a348:	bb30      	cbnz	r0, 800a398 <__swbuf_r+0x90>
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	60a3      	str	r3, [r4, #8]
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	6022      	str	r2, [r4, #0]
 800a356:	701e      	strb	r6, [r3, #0]
 800a358:	6963      	ldr	r3, [r4, #20]
 800a35a:	3001      	adds	r0, #1
 800a35c:	4283      	cmp	r3, r0
 800a35e:	d004      	beq.n	800a36a <__swbuf_r+0x62>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	07db      	lsls	r3, r3, #31
 800a364:	d506      	bpl.n	800a374 <__swbuf_r+0x6c>
 800a366:	2e0a      	cmp	r6, #10
 800a368:	d104      	bne.n	800a374 <__swbuf_r+0x6c>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f000 f919 	bl	800a5a4 <_fflush_r>
 800a372:	b988      	cbnz	r0, 800a398 <__swbuf_r+0x90>
 800a374:	4638      	mov	r0, r7
 800a376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <__swbuf_r+0x9c>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d101      	bne.n	800a382 <__swbuf_r+0x7a>
 800a37e:	68ac      	ldr	r4, [r5, #8]
 800a380:	e7cf      	b.n	800a322 <__swbuf_r+0x1a>
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <__swbuf_r+0xa0>)
 800a384:	429c      	cmp	r4, r3
 800a386:	bf08      	it	eq
 800a388:	68ec      	ldreq	r4, [r5, #12]
 800a38a:	e7ca      	b.n	800a322 <__swbuf_r+0x1a>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f80c 	bl	800a3ac <__swsetup_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d0cb      	beq.n	800a330 <__swbuf_r+0x28>
 800a398:	f04f 37ff 	mov.w	r7, #4294967295
 800a39c:	e7ea      	b.n	800a374 <__swbuf_r+0x6c>
 800a39e:	bf00      	nop
 800a3a0:	0800af94 	.word	0x0800af94
 800a3a4:	0800afb4 	.word	0x0800afb4
 800a3a8:	0800af74 	.word	0x0800af74

0800a3ac <__swsetup_r>:
 800a3ac:	4b32      	ldr	r3, [pc, #200]	; (800a478 <__swsetup_r+0xcc>)
 800a3ae:	b570      	push	{r4, r5, r6, lr}
 800a3b0:	681d      	ldr	r5, [r3, #0]
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	b125      	cbz	r5, 800a3c2 <__swsetup_r+0x16>
 800a3b8:	69ab      	ldr	r3, [r5, #24]
 800a3ba:	b913      	cbnz	r3, 800a3c2 <__swsetup_r+0x16>
 800a3bc:	4628      	mov	r0, r5
 800a3be:	f000 f985 	bl	800a6cc <__sinit>
 800a3c2:	4b2e      	ldr	r3, [pc, #184]	; (800a47c <__swsetup_r+0xd0>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	d10f      	bne.n	800a3e8 <__swsetup_r+0x3c>
 800a3c8:	686c      	ldr	r4, [r5, #4]
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d0:	0719      	lsls	r1, r3, #28
 800a3d2:	d42c      	bmi.n	800a42e <__swsetup_r+0x82>
 800a3d4:	06dd      	lsls	r5, r3, #27
 800a3d6:	d411      	bmi.n	800a3fc <__swsetup_r+0x50>
 800a3d8:	2309      	movs	r3, #9
 800a3da:	6033      	str	r3, [r6, #0]
 800a3dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e6:	e03e      	b.n	800a466 <__swsetup_r+0xba>
 800a3e8:	4b25      	ldr	r3, [pc, #148]	; (800a480 <__swsetup_r+0xd4>)
 800a3ea:	429c      	cmp	r4, r3
 800a3ec:	d101      	bne.n	800a3f2 <__swsetup_r+0x46>
 800a3ee:	68ac      	ldr	r4, [r5, #8]
 800a3f0:	e7eb      	b.n	800a3ca <__swsetup_r+0x1e>
 800a3f2:	4b24      	ldr	r3, [pc, #144]	; (800a484 <__swsetup_r+0xd8>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	bf08      	it	eq
 800a3f8:	68ec      	ldreq	r4, [r5, #12]
 800a3fa:	e7e6      	b.n	800a3ca <__swsetup_r+0x1e>
 800a3fc:	0758      	lsls	r0, r3, #29
 800a3fe:	d512      	bpl.n	800a426 <__swsetup_r+0x7a>
 800a400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a402:	b141      	cbz	r1, 800a416 <__swsetup_r+0x6a>
 800a404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a408:	4299      	cmp	r1, r3
 800a40a:	d002      	beq.n	800a412 <__swsetup_r+0x66>
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff fb25 	bl	8009a5c <_free_r>
 800a412:	2300      	movs	r3, #0
 800a414:	6363      	str	r3, [r4, #52]	; 0x34
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	2300      	movs	r3, #0
 800a420:	6063      	str	r3, [r4, #4]
 800a422:	6923      	ldr	r3, [r4, #16]
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	f043 0308 	orr.w	r3, r3, #8
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	b94b      	cbnz	r3, 800a446 <__swsetup_r+0x9a>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a43c:	d003      	beq.n	800a446 <__swsetup_r+0x9a>
 800a43e:	4621      	mov	r1, r4
 800a440:	4630      	mov	r0, r6
 800a442:	f000 fa09 	bl	800a858 <__smakebuf_r>
 800a446:	89a0      	ldrh	r0, [r4, #12]
 800a448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a44c:	f010 0301 	ands.w	r3, r0, #1
 800a450:	d00a      	beq.n	800a468 <__swsetup_r+0xbc>
 800a452:	2300      	movs	r3, #0
 800a454:	60a3      	str	r3, [r4, #8]
 800a456:	6963      	ldr	r3, [r4, #20]
 800a458:	425b      	negs	r3, r3
 800a45a:	61a3      	str	r3, [r4, #24]
 800a45c:	6923      	ldr	r3, [r4, #16]
 800a45e:	b943      	cbnz	r3, 800a472 <__swsetup_r+0xc6>
 800a460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a464:	d1ba      	bne.n	800a3dc <__swsetup_r+0x30>
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	0781      	lsls	r1, r0, #30
 800a46a:	bf58      	it	pl
 800a46c:	6963      	ldrpl	r3, [r4, #20]
 800a46e:	60a3      	str	r3, [r4, #8]
 800a470:	e7f4      	b.n	800a45c <__swsetup_r+0xb0>
 800a472:	2000      	movs	r0, #0
 800a474:	e7f7      	b.n	800a466 <__swsetup_r+0xba>
 800a476:	bf00      	nop
 800a478:	2000003c 	.word	0x2000003c
 800a47c:	0800af94 	.word	0x0800af94
 800a480:	0800afb4 	.word	0x0800afb4
 800a484:	0800af74 	.word	0x0800af74

0800a488 <abort>:
 800a488:	b508      	push	{r3, lr}
 800a48a:	2006      	movs	r0, #6
 800a48c:	f000 fa54 	bl	800a938 <raise>
 800a490:	2001      	movs	r0, #1
 800a492:	f7f7 fdf3 	bl	800207c <_exit>
	...

0800a498 <__sflush_r>:
 800a498:	898a      	ldrh	r2, [r1, #12]
 800a49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	4605      	mov	r5, r0
 800a4a0:	0710      	lsls	r0, r2, #28
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	d458      	bmi.n	800a558 <__sflush_r+0xc0>
 800a4a6:	684b      	ldr	r3, [r1, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dc05      	bgt.n	800a4b8 <__sflush_r+0x20>
 800a4ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dc02      	bgt.n	800a4b8 <__sflush_r+0x20>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ba:	2e00      	cmp	r6, #0
 800a4bc:	d0f9      	beq.n	800a4b2 <__sflush_r+0x1a>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4c4:	682f      	ldr	r7, [r5, #0]
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	d032      	beq.n	800a530 <__sflush_r+0x98>
 800a4ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	075a      	lsls	r2, r3, #29
 800a4d0:	d505      	bpl.n	800a4de <__sflush_r+0x46>
 800a4d2:	6863      	ldr	r3, [r4, #4]
 800a4d4:	1ac0      	subs	r0, r0, r3
 800a4d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4d8:	b10b      	cbz	r3, 800a4de <__sflush_r+0x46>
 800a4da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4dc:	1ac0      	subs	r0, r0, r3
 800a4de:	2300      	movs	r3, #0
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4e4:	6a21      	ldr	r1, [r4, #32]
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	47b0      	blx	r6
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	d106      	bne.n	800a4fe <__sflush_r+0x66>
 800a4f0:	6829      	ldr	r1, [r5, #0]
 800a4f2:	291d      	cmp	r1, #29
 800a4f4:	d82c      	bhi.n	800a550 <__sflush_r+0xb8>
 800a4f6:	4a2a      	ldr	r2, [pc, #168]	; (800a5a0 <__sflush_r+0x108>)
 800a4f8:	40ca      	lsrs	r2, r1
 800a4fa:	07d6      	lsls	r6, r2, #31
 800a4fc:	d528      	bpl.n	800a550 <__sflush_r+0xb8>
 800a4fe:	2200      	movs	r2, #0
 800a500:	6062      	str	r2, [r4, #4]
 800a502:	04d9      	lsls	r1, r3, #19
 800a504:	6922      	ldr	r2, [r4, #16]
 800a506:	6022      	str	r2, [r4, #0]
 800a508:	d504      	bpl.n	800a514 <__sflush_r+0x7c>
 800a50a:	1c42      	adds	r2, r0, #1
 800a50c:	d101      	bne.n	800a512 <__sflush_r+0x7a>
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	b903      	cbnz	r3, 800a514 <__sflush_r+0x7c>
 800a512:	6560      	str	r0, [r4, #84]	; 0x54
 800a514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a516:	602f      	str	r7, [r5, #0]
 800a518:	2900      	cmp	r1, #0
 800a51a:	d0ca      	beq.n	800a4b2 <__sflush_r+0x1a>
 800a51c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a520:	4299      	cmp	r1, r3
 800a522:	d002      	beq.n	800a52a <__sflush_r+0x92>
 800a524:	4628      	mov	r0, r5
 800a526:	f7ff fa99 	bl	8009a5c <_free_r>
 800a52a:	2000      	movs	r0, #0
 800a52c:	6360      	str	r0, [r4, #52]	; 0x34
 800a52e:	e7c1      	b.n	800a4b4 <__sflush_r+0x1c>
 800a530:	6a21      	ldr	r1, [r4, #32]
 800a532:	2301      	movs	r3, #1
 800a534:	4628      	mov	r0, r5
 800a536:	47b0      	blx	r6
 800a538:	1c41      	adds	r1, r0, #1
 800a53a:	d1c7      	bne.n	800a4cc <__sflush_r+0x34>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d0c4      	beq.n	800a4cc <__sflush_r+0x34>
 800a542:	2b1d      	cmp	r3, #29
 800a544:	d001      	beq.n	800a54a <__sflush_r+0xb2>
 800a546:	2b16      	cmp	r3, #22
 800a548:	d101      	bne.n	800a54e <__sflush_r+0xb6>
 800a54a:	602f      	str	r7, [r5, #0]
 800a54c:	e7b1      	b.n	800a4b2 <__sflush_r+0x1a>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	e7ad      	b.n	800a4b4 <__sflush_r+0x1c>
 800a558:	690f      	ldr	r7, [r1, #16]
 800a55a:	2f00      	cmp	r7, #0
 800a55c:	d0a9      	beq.n	800a4b2 <__sflush_r+0x1a>
 800a55e:	0793      	lsls	r3, r2, #30
 800a560:	680e      	ldr	r6, [r1, #0]
 800a562:	bf08      	it	eq
 800a564:	694b      	ldreq	r3, [r1, #20]
 800a566:	600f      	str	r7, [r1, #0]
 800a568:	bf18      	it	ne
 800a56a:	2300      	movne	r3, #0
 800a56c:	eba6 0807 	sub.w	r8, r6, r7
 800a570:	608b      	str	r3, [r1, #8]
 800a572:	f1b8 0f00 	cmp.w	r8, #0
 800a576:	dd9c      	ble.n	800a4b2 <__sflush_r+0x1a>
 800a578:	6a21      	ldr	r1, [r4, #32]
 800a57a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a57c:	4643      	mov	r3, r8
 800a57e:	463a      	mov	r2, r7
 800a580:	4628      	mov	r0, r5
 800a582:	47b0      	blx	r6
 800a584:	2800      	cmp	r0, #0
 800a586:	dc06      	bgt.n	800a596 <__sflush_r+0xfe>
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58e:	81a3      	strh	r3, [r4, #12]
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	e78e      	b.n	800a4b4 <__sflush_r+0x1c>
 800a596:	4407      	add	r7, r0
 800a598:	eba8 0800 	sub.w	r8, r8, r0
 800a59c:	e7e9      	b.n	800a572 <__sflush_r+0xda>
 800a59e:	bf00      	nop
 800a5a0:	20400001 	.word	0x20400001

0800a5a4 <_fflush_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	690b      	ldr	r3, [r1, #16]
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	b913      	cbnz	r3, 800a5b4 <_fflush_r+0x10>
 800a5ae:	2500      	movs	r5, #0
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	b118      	cbz	r0, 800a5be <_fflush_r+0x1a>
 800a5b6:	6983      	ldr	r3, [r0, #24]
 800a5b8:	b90b      	cbnz	r3, 800a5be <_fflush_r+0x1a>
 800a5ba:	f000 f887 	bl	800a6cc <__sinit>
 800a5be:	4b14      	ldr	r3, [pc, #80]	; (800a610 <_fflush_r+0x6c>)
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	d11b      	bne.n	800a5fc <_fflush_r+0x58>
 800a5c4:	686c      	ldr	r4, [r5, #4]
 800a5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0ef      	beq.n	800a5ae <_fflush_r+0xa>
 800a5ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5d0:	07d0      	lsls	r0, r2, #31
 800a5d2:	d404      	bmi.n	800a5de <_fflush_r+0x3a>
 800a5d4:	0599      	lsls	r1, r3, #22
 800a5d6:	d402      	bmi.n	800a5de <_fflush_r+0x3a>
 800a5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5da:	f000 f915 	bl	800a808 <__retarget_lock_acquire_recursive>
 800a5de:	4628      	mov	r0, r5
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f7ff ff59 	bl	800a498 <__sflush_r>
 800a5e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5e8:	07da      	lsls	r2, r3, #31
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	d4e0      	bmi.n	800a5b0 <_fflush_r+0xc>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	059b      	lsls	r3, r3, #22
 800a5f2:	d4dd      	bmi.n	800a5b0 <_fflush_r+0xc>
 800a5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5f6:	f000 f908 	bl	800a80a <__retarget_lock_release_recursive>
 800a5fa:	e7d9      	b.n	800a5b0 <_fflush_r+0xc>
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <_fflush_r+0x70>)
 800a5fe:	429c      	cmp	r4, r3
 800a600:	d101      	bne.n	800a606 <_fflush_r+0x62>
 800a602:	68ac      	ldr	r4, [r5, #8]
 800a604:	e7df      	b.n	800a5c6 <_fflush_r+0x22>
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <_fflush_r+0x74>)
 800a608:	429c      	cmp	r4, r3
 800a60a:	bf08      	it	eq
 800a60c:	68ec      	ldreq	r4, [r5, #12]
 800a60e:	e7da      	b.n	800a5c6 <_fflush_r+0x22>
 800a610:	0800af94 	.word	0x0800af94
 800a614:	0800afb4 	.word	0x0800afb4
 800a618:	0800af74 	.word	0x0800af74

0800a61c <std>:
 800a61c:	2300      	movs	r3, #0
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	e9c0 3300 	strd	r3, r3, [r0]
 800a626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a62a:	6083      	str	r3, [r0, #8]
 800a62c:	8181      	strh	r1, [r0, #12]
 800a62e:	6643      	str	r3, [r0, #100]	; 0x64
 800a630:	81c2      	strh	r2, [r0, #14]
 800a632:	6183      	str	r3, [r0, #24]
 800a634:	4619      	mov	r1, r3
 800a636:	2208      	movs	r2, #8
 800a638:	305c      	adds	r0, #92	; 0x5c
 800a63a:	f7fb fdb9 	bl	80061b0 <memset>
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <std+0x38>)
 800a640:	6263      	str	r3, [r4, #36]	; 0x24
 800a642:	4b05      	ldr	r3, [pc, #20]	; (800a658 <std+0x3c>)
 800a644:	62a3      	str	r3, [r4, #40]	; 0x28
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <std+0x40>)
 800a648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <std+0x44>)
 800a64c:	6224      	str	r4, [r4, #32]
 800a64e:	6323      	str	r3, [r4, #48]	; 0x30
 800a650:	bd10      	pop	{r4, pc}
 800a652:	bf00      	nop
 800a654:	0800a971 	.word	0x0800a971
 800a658:	0800a993 	.word	0x0800a993
 800a65c:	0800a9cb 	.word	0x0800a9cb
 800a660:	0800a9ef 	.word	0x0800a9ef

0800a664 <_cleanup_r>:
 800a664:	4901      	ldr	r1, [pc, #4]	; (800a66c <_cleanup_r+0x8>)
 800a666:	f000 b8af 	b.w	800a7c8 <_fwalk_reent>
 800a66a:	bf00      	nop
 800a66c:	0800a5a5 	.word	0x0800a5a5

0800a670 <__sfmoreglue>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	2268      	movs	r2, #104	; 0x68
 800a674:	1e4d      	subs	r5, r1, #1
 800a676:	4355      	muls	r5, r2
 800a678:	460e      	mov	r6, r1
 800a67a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a67e:	f7ff fa59 	bl	8009b34 <_malloc_r>
 800a682:	4604      	mov	r4, r0
 800a684:	b140      	cbz	r0, 800a698 <__sfmoreglue+0x28>
 800a686:	2100      	movs	r1, #0
 800a688:	e9c0 1600 	strd	r1, r6, [r0]
 800a68c:	300c      	adds	r0, #12
 800a68e:	60a0      	str	r0, [r4, #8]
 800a690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a694:	f7fb fd8c 	bl	80061b0 <memset>
 800a698:	4620      	mov	r0, r4
 800a69a:	bd70      	pop	{r4, r5, r6, pc}

0800a69c <__sfp_lock_acquire>:
 800a69c:	4801      	ldr	r0, [pc, #4]	; (800a6a4 <__sfp_lock_acquire+0x8>)
 800a69e:	f000 b8b3 	b.w	800a808 <__retarget_lock_acquire_recursive>
 800a6a2:	bf00      	nop
 800a6a4:	20000405 	.word	0x20000405

0800a6a8 <__sfp_lock_release>:
 800a6a8:	4801      	ldr	r0, [pc, #4]	; (800a6b0 <__sfp_lock_release+0x8>)
 800a6aa:	f000 b8ae 	b.w	800a80a <__retarget_lock_release_recursive>
 800a6ae:	bf00      	nop
 800a6b0:	20000405 	.word	0x20000405

0800a6b4 <__sinit_lock_acquire>:
 800a6b4:	4801      	ldr	r0, [pc, #4]	; (800a6bc <__sinit_lock_acquire+0x8>)
 800a6b6:	f000 b8a7 	b.w	800a808 <__retarget_lock_acquire_recursive>
 800a6ba:	bf00      	nop
 800a6bc:	20000406 	.word	0x20000406

0800a6c0 <__sinit_lock_release>:
 800a6c0:	4801      	ldr	r0, [pc, #4]	; (800a6c8 <__sinit_lock_release+0x8>)
 800a6c2:	f000 b8a2 	b.w	800a80a <__retarget_lock_release_recursive>
 800a6c6:	bf00      	nop
 800a6c8:	20000406 	.word	0x20000406

0800a6cc <__sinit>:
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	f7ff fff0 	bl	800a6b4 <__sinit_lock_acquire>
 800a6d4:	69a3      	ldr	r3, [r4, #24]
 800a6d6:	b11b      	cbz	r3, 800a6e0 <__sinit+0x14>
 800a6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6dc:	f7ff bff0 	b.w	800a6c0 <__sinit_lock_release>
 800a6e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a6e6:	4b13      	ldr	r3, [pc, #76]	; (800a734 <__sinit+0x68>)
 800a6e8:	4a13      	ldr	r2, [pc, #76]	; (800a738 <__sinit+0x6c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	bf04      	itt	eq
 800a6f2:	2301      	moveq	r3, #1
 800a6f4:	61a3      	streq	r3, [r4, #24]
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 f820 	bl	800a73c <__sfp>
 800a6fc:	6060      	str	r0, [r4, #4]
 800a6fe:	4620      	mov	r0, r4
 800a700:	f000 f81c 	bl	800a73c <__sfp>
 800a704:	60a0      	str	r0, [r4, #8]
 800a706:	4620      	mov	r0, r4
 800a708:	f000 f818 	bl	800a73c <__sfp>
 800a70c:	2200      	movs	r2, #0
 800a70e:	60e0      	str	r0, [r4, #12]
 800a710:	2104      	movs	r1, #4
 800a712:	6860      	ldr	r0, [r4, #4]
 800a714:	f7ff ff82 	bl	800a61c <std>
 800a718:	68a0      	ldr	r0, [r4, #8]
 800a71a:	2201      	movs	r2, #1
 800a71c:	2109      	movs	r1, #9
 800a71e:	f7ff ff7d 	bl	800a61c <std>
 800a722:	68e0      	ldr	r0, [r4, #12]
 800a724:	2202      	movs	r2, #2
 800a726:	2112      	movs	r1, #18
 800a728:	f7ff ff78 	bl	800a61c <std>
 800a72c:	2301      	movs	r3, #1
 800a72e:	61a3      	str	r3, [r4, #24]
 800a730:	e7d2      	b.n	800a6d8 <__sinit+0xc>
 800a732:	bf00      	nop
 800a734:	0800ab2c 	.word	0x0800ab2c
 800a738:	0800a665 	.word	0x0800a665

0800a73c <__sfp>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	4607      	mov	r7, r0
 800a740:	f7ff ffac 	bl	800a69c <__sfp_lock_acquire>
 800a744:	4b1e      	ldr	r3, [pc, #120]	; (800a7c0 <__sfp+0x84>)
 800a746:	681e      	ldr	r6, [r3, #0]
 800a748:	69b3      	ldr	r3, [r6, #24]
 800a74a:	b913      	cbnz	r3, 800a752 <__sfp+0x16>
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7ff ffbd 	bl	800a6cc <__sinit>
 800a752:	3648      	adds	r6, #72	; 0x48
 800a754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a758:	3b01      	subs	r3, #1
 800a75a:	d503      	bpl.n	800a764 <__sfp+0x28>
 800a75c:	6833      	ldr	r3, [r6, #0]
 800a75e:	b30b      	cbz	r3, 800a7a4 <__sfp+0x68>
 800a760:	6836      	ldr	r6, [r6, #0]
 800a762:	e7f7      	b.n	800a754 <__sfp+0x18>
 800a764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a768:	b9d5      	cbnz	r5, 800a7a0 <__sfp+0x64>
 800a76a:	4b16      	ldr	r3, [pc, #88]	; (800a7c4 <__sfp+0x88>)
 800a76c:	60e3      	str	r3, [r4, #12]
 800a76e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a772:	6665      	str	r5, [r4, #100]	; 0x64
 800a774:	f000 f847 	bl	800a806 <__retarget_lock_init_recursive>
 800a778:	f7ff ff96 	bl	800a6a8 <__sfp_lock_release>
 800a77c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a784:	6025      	str	r5, [r4, #0]
 800a786:	61a5      	str	r5, [r4, #24]
 800a788:	2208      	movs	r2, #8
 800a78a:	4629      	mov	r1, r5
 800a78c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a790:	f7fb fd0e 	bl	80061b0 <memset>
 800a794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a79c:	4620      	mov	r0, r4
 800a79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a0:	3468      	adds	r4, #104	; 0x68
 800a7a2:	e7d9      	b.n	800a758 <__sfp+0x1c>
 800a7a4:	2104      	movs	r1, #4
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f7ff ff62 	bl	800a670 <__sfmoreglue>
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	6030      	str	r0, [r6, #0]
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d1d5      	bne.n	800a760 <__sfp+0x24>
 800a7b4:	f7ff ff78 	bl	800a6a8 <__sfp_lock_release>
 800a7b8:	230c      	movs	r3, #12
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	e7ee      	b.n	800a79c <__sfp+0x60>
 800a7be:	bf00      	nop
 800a7c0:	0800ab2c 	.word	0x0800ab2c
 800a7c4:	ffff0001 	.word	0xffff0001

0800a7c8 <_fwalk_reent>:
 800a7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	4688      	mov	r8, r1
 800a7d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7da:	f1b9 0901 	subs.w	r9, r9, #1
 800a7de:	d505      	bpl.n	800a7ec <_fwalk_reent+0x24>
 800a7e0:	6824      	ldr	r4, [r4, #0]
 800a7e2:	2c00      	cmp	r4, #0
 800a7e4:	d1f7      	bne.n	800a7d6 <_fwalk_reent+0xe>
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ec:	89ab      	ldrh	r3, [r5, #12]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d907      	bls.n	800a802 <_fwalk_reent+0x3a>
 800a7f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	d003      	beq.n	800a802 <_fwalk_reent+0x3a>
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	47c0      	blx	r8
 800a800:	4307      	orrs	r7, r0
 800a802:	3568      	adds	r5, #104	; 0x68
 800a804:	e7e9      	b.n	800a7da <_fwalk_reent+0x12>

0800a806 <__retarget_lock_init_recursive>:
 800a806:	4770      	bx	lr

0800a808 <__retarget_lock_acquire_recursive>:
 800a808:	4770      	bx	lr

0800a80a <__retarget_lock_release_recursive>:
 800a80a:	4770      	bx	lr

0800a80c <__swhatbuf_r>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	460e      	mov	r6, r1
 800a810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a814:	2900      	cmp	r1, #0
 800a816:	b096      	sub	sp, #88	; 0x58
 800a818:	4614      	mov	r4, r2
 800a81a:	461d      	mov	r5, r3
 800a81c:	da08      	bge.n	800a830 <__swhatbuf_r+0x24>
 800a81e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	061a      	lsls	r2, r3, #24
 800a828:	d410      	bmi.n	800a84c <__swhatbuf_r+0x40>
 800a82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a82e:	e00e      	b.n	800a84e <__swhatbuf_r+0x42>
 800a830:	466a      	mov	r2, sp
 800a832:	f000 f903 	bl	800aa3c <_fstat_r>
 800a836:	2800      	cmp	r0, #0
 800a838:	dbf1      	blt.n	800a81e <__swhatbuf_r+0x12>
 800a83a:	9a01      	ldr	r2, [sp, #4]
 800a83c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a844:	425a      	negs	r2, r3
 800a846:	415a      	adcs	r2, r3
 800a848:	602a      	str	r2, [r5, #0]
 800a84a:	e7ee      	b.n	800a82a <__swhatbuf_r+0x1e>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	2000      	movs	r0, #0
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	b016      	add	sp, #88	; 0x58
 800a854:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a858 <__smakebuf_r>:
 800a858:	898b      	ldrh	r3, [r1, #12]
 800a85a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a85c:	079d      	lsls	r5, r3, #30
 800a85e:	4606      	mov	r6, r0
 800a860:	460c      	mov	r4, r1
 800a862:	d507      	bpl.n	800a874 <__smakebuf_r+0x1c>
 800a864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	6123      	str	r3, [r4, #16]
 800a86c:	2301      	movs	r3, #1
 800a86e:	6163      	str	r3, [r4, #20]
 800a870:	b002      	add	sp, #8
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	ab01      	add	r3, sp, #4
 800a876:	466a      	mov	r2, sp
 800a878:	f7ff ffc8 	bl	800a80c <__swhatbuf_r>
 800a87c:	9900      	ldr	r1, [sp, #0]
 800a87e:	4605      	mov	r5, r0
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff f957 	bl	8009b34 <_malloc_r>
 800a886:	b948      	cbnz	r0, 800a89c <__smakebuf_r+0x44>
 800a888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88c:	059a      	lsls	r2, r3, #22
 800a88e:	d4ef      	bmi.n	800a870 <__smakebuf_r+0x18>
 800a890:	f023 0303 	bic.w	r3, r3, #3
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	e7e3      	b.n	800a864 <__smakebuf_r+0xc>
 800a89c:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <__smakebuf_r+0x7c>)
 800a89e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	6020      	str	r0, [r4, #0]
 800a8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a8:	81a3      	strh	r3, [r4, #12]
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	6163      	str	r3, [r4, #20]
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	6120      	str	r0, [r4, #16]
 800a8b2:	b15b      	cbz	r3, 800a8cc <__smakebuf_r+0x74>
 800a8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f000 f8d1 	bl	800aa60 <_isatty_r>
 800a8be:	b128      	cbz	r0, 800a8cc <__smakebuf_r+0x74>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	f043 0301 	orr.w	r3, r3, #1
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	89a0      	ldrh	r0, [r4, #12]
 800a8ce:	4305      	orrs	r5, r0
 800a8d0:	81a5      	strh	r5, [r4, #12]
 800a8d2:	e7cd      	b.n	800a870 <__smakebuf_r+0x18>
 800a8d4:	0800a665 	.word	0x0800a665

0800a8d8 <_malloc_usable_size_r>:
 800a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8dc:	1f18      	subs	r0, r3, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfbc      	itt	lt
 800a8e2:	580b      	ldrlt	r3, [r1, r0]
 800a8e4:	18c0      	addlt	r0, r0, r3
 800a8e6:	4770      	bx	lr

0800a8e8 <_raise_r>:
 800a8e8:	291f      	cmp	r1, #31
 800a8ea:	b538      	push	{r3, r4, r5, lr}
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	d904      	bls.n	800a8fc <_raise_r+0x14>
 800a8f2:	2316      	movs	r3, #22
 800a8f4:	6003      	str	r3, [r0, #0]
 800a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8fe:	b112      	cbz	r2, 800a906 <_raise_r+0x1e>
 800a900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a904:	b94b      	cbnz	r3, 800a91a <_raise_r+0x32>
 800a906:	4620      	mov	r0, r4
 800a908:	f000 f830 	bl	800a96c <_getpid_r>
 800a90c:	462a      	mov	r2, r5
 800a90e:	4601      	mov	r1, r0
 800a910:	4620      	mov	r0, r4
 800a912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a916:	f000 b817 	b.w	800a948 <_kill_r>
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d00a      	beq.n	800a934 <_raise_r+0x4c>
 800a91e:	1c59      	adds	r1, r3, #1
 800a920:	d103      	bne.n	800a92a <_raise_r+0x42>
 800a922:	2316      	movs	r3, #22
 800a924:	6003      	str	r3, [r0, #0]
 800a926:	2001      	movs	r0, #1
 800a928:	e7e7      	b.n	800a8fa <_raise_r+0x12>
 800a92a:	2400      	movs	r4, #0
 800a92c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a930:	4628      	mov	r0, r5
 800a932:	4798      	blx	r3
 800a934:	2000      	movs	r0, #0
 800a936:	e7e0      	b.n	800a8fa <_raise_r+0x12>

0800a938 <raise>:
 800a938:	4b02      	ldr	r3, [pc, #8]	; (800a944 <raise+0xc>)
 800a93a:	4601      	mov	r1, r0
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f7ff bfd3 	b.w	800a8e8 <_raise_r>
 800a942:	bf00      	nop
 800a944:	2000003c 	.word	0x2000003c

0800a948 <_kill_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4d07      	ldr	r5, [pc, #28]	; (800a968 <_kill_r+0x20>)
 800a94c:	2300      	movs	r3, #0
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	f7f7 fb81 	bl	800205c <_kill>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	d102      	bne.n	800a964 <_kill_r+0x1c>
 800a95e:	682b      	ldr	r3, [r5, #0]
 800a960:	b103      	cbz	r3, 800a964 <_kill_r+0x1c>
 800a962:	6023      	str	r3, [r4, #0]
 800a964:	bd38      	pop	{r3, r4, r5, pc}
 800a966:	bf00      	nop
 800a968:	20000400 	.word	0x20000400

0800a96c <_getpid_r>:
 800a96c:	f7f7 bb6e 	b.w	800204c <_getpid>

0800a970 <__sread>:
 800a970:	b510      	push	{r4, lr}
 800a972:	460c      	mov	r4, r1
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	f000 f894 	bl	800aaa4 <_read_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	bfab      	itete	ge
 800a980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a982:	89a3      	ldrhlt	r3, [r4, #12]
 800a984:	181b      	addge	r3, r3, r0
 800a986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a98a:	bfac      	ite	ge
 800a98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a98e:	81a3      	strhlt	r3, [r4, #12]
 800a990:	bd10      	pop	{r4, pc}

0800a992 <__swrite>:
 800a992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	461f      	mov	r7, r3
 800a998:	898b      	ldrh	r3, [r1, #12]
 800a99a:	05db      	lsls	r3, r3, #23
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	4616      	mov	r6, r2
 800a9a2:	d505      	bpl.n	800a9b0 <__swrite+0x1e>
 800a9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f000 f868 	bl	800aa80 <_lseek_r>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c6:	f000 b817 	b.w	800a9f8 <_write_r>

0800a9ca <__sseek>:
 800a9ca:	b510      	push	{r4, lr}
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d2:	f000 f855 	bl	800aa80 <_lseek_r>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	bf15      	itete	ne
 800a9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9e6:	81a3      	strheq	r3, [r4, #12]
 800a9e8:	bf18      	it	ne
 800a9ea:	81a3      	strhne	r3, [r4, #12]
 800a9ec:	bd10      	pop	{r4, pc}

0800a9ee <__sclose>:
 800a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f2:	f000 b813 	b.w	800aa1c <_close_r>
	...

0800a9f8 <_write_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	; (800aa18 <_write_r+0x20>)
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7f7 fb5f 	bl	80020ca <_write>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_write_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_write_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20000400 	.word	0x20000400

0800aa1c <_close_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d06      	ldr	r5, [pc, #24]	; (800aa38 <_close_r+0x1c>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	602b      	str	r3, [r5, #0]
 800aa28:	f7f7 fb6b 	bl	8002102 <_close>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_close_r+0x1a>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_close_r+0x1a>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	20000400 	.word	0x20000400

0800aa3c <_fstat_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_fstat_r+0x20>)
 800aa40:	2300      	movs	r3, #0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	4611      	mov	r1, r2
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	f7f7 fb66 	bl	800211a <_fstat>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d102      	bne.n	800aa58 <_fstat_r+0x1c>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	b103      	cbz	r3, 800aa58 <_fstat_r+0x1c>
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000400 	.word	0x20000400

0800aa60 <_isatty_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	; (800aa7c <_isatty_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f7 fb65 	bl	800213a <_isatty>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_isatty_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_isatty_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20000400 	.word	0x20000400

0800aa80 <_lseek_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d07      	ldr	r5, [pc, #28]	; (800aaa0 <_lseek_r+0x20>)
 800aa84:	4604      	mov	r4, r0
 800aa86:	4608      	mov	r0, r1
 800aa88:	4611      	mov	r1, r2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	602a      	str	r2, [r5, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f7f7 fb5e 	bl	8002150 <_lseek>
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	d102      	bne.n	800aa9e <_lseek_r+0x1e>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	b103      	cbz	r3, 800aa9e <_lseek_r+0x1e>
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	20000400 	.word	0x20000400

0800aaa4 <_read_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	; (800aac4 <_read_r+0x20>)
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	2200      	movs	r2, #0
 800aab0:	602a      	str	r2, [r5, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7f7 faec 	bl	8002090 <_read>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_read_r+0x1e>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_read_r+0x1e>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20000400 	.word	0x20000400

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
