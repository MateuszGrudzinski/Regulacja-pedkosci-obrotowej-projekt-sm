
Zadanie_Zaliczeniowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800cd78  0800cd78  0001cd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2e4  0800d2e4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2ec  0800d2ec  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2ec  0800d2ec  0001d2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000210  0800d504  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800d504  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015179  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030de  00000000  00000000  000353b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00038498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c16  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001658d  00000000  00000000  0006316e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f796a  00000000  00000000  000796fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d48  00000000  00000000  001710b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd5c 	.word	0x0800cd5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800cd5c 	.word	0x0800cd5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <wire_init>:
#include "1wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <wire_init+0x10>)
 800103e:	f003 fd3f 	bl	8004ac0 <HAL_TIM_Base_Start>
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200003a8 	.word	0x200003a8

0800104c <delay_us>:
/// Funkcja pozwalajaca na ustawienie dokladnych opoznien wymaganych przez standard 1-wire.
///
/// Tyle.
static void delay_us(uint32_t us)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <delay_us+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 800105c:	bf00      	nop
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <delay_us+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8f9      	bhi.n	800105e <delay_us+0x12>
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200003a8 	.word	0x200003a8

0800107c <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2110      	movs	r1, #16
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <wire_reset+0x50>)
 8001088:	f002 fbba 	bl	8003800 <HAL_GPIO_WritePin>
  delay_us(480);
 800108c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001090:	f7ff ffdc 	bl	800104c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <wire_reset+0x50>)
 800109a:	f002 fbb1 	bl	8003800 <HAL_GPIO_WritePin>
  delay_us(70);
 800109e:	2046      	movs	r0, #70	; 0x46
 80010a0:	f7ff ffd4 	bl	800104c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010a4:	2110      	movs	r1, #16
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <wire_reset+0x50>)
 80010a8:	f002 fb92 	bl	80037d0 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80010b0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80010b4:	f7ff ffca 	bl	800104c <delay_us>

  if (rc == 0)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <wire_reset+0x46>
    return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <wire_reset+0x48>
  else
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020000 	.word	0x40020000

080010d0 <read_bit>:

static int read_bit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <read_bit+0x44>)
 80010dc:	f002 fb90 	bl	8003800 <HAL_GPIO_WritePin>
  delay_us(6);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f7ff ffb3 	bl	800104c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2110      	movs	r1, #16
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <read_bit+0x44>)
 80010ec:	f002 fb88 	bl	8003800 <HAL_GPIO_WritePin>
  delay_us(9);
 80010f0:	2009      	movs	r0, #9
 80010f2:	f7ff ffab 	bl	800104c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010f6:	2110      	movs	r1, #16
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <read_bit+0x44>)
 80010fa:	f002 fb69 	bl	80037d0 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001102:	2037      	movs	r0, #55	; 0x37
 8001104:	f7ff ffa2 	bl	800104c <delay_us>
  return rc;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000

08001118 <wire_read>:

uint8_t wire_read(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e00e      	b.n	8001146 <wire_read+0x2e>
    value >>= 1;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800112e:	f7ff ffcf 	bl	80010d0 <read_bit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <wire_read+0x28>
      value |= 0x80;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	dded      	ble.n	8001128 <wire_read+0x10>
  }
  return value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <write_bit>:

static void write_bit(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (value) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2110      	movs	r1, #16
 800116a:	4811      	ldr	r0, [pc, #68]	; (80011b0 <write_bit+0x58>)
 800116c:	f002 fb48 	bl	8003800 <HAL_GPIO_WritePin>
    delay_us(6);
 8001170:	2006      	movs	r0, #6
 8001172:	f7ff ff6b 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2110      	movs	r1, #16
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <write_bit+0x58>)
 800117c:	f002 fb40 	bl	8003800 <HAL_GPIO_WritePin>
    delay_us(64);
 8001180:	2040      	movs	r0, #64	; 0x40
 8001182:	f7ff ff63 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8001186:	e00f      	b.n	80011a8 <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <write_bit+0x58>)
 800118e:	f002 fb37 	bl	8003800 <HAL_GPIO_WritePin>
    delay_us(60);
 8001192:	203c      	movs	r0, #60	; 0x3c
 8001194:	f7ff ff5a 	bl	800104c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <write_bit+0x58>)
 800119e:	f002 fb2f 	bl	8003800 <HAL_GPIO_WritePin>
    delay_us(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff ff52 	bl	800104c <delay_us>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40020000 	.word	0x40020000

080011b4 <wire_write>:

void wire_write(uint8_t byte)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e00b      	b.n	80011dc <wire_write+0x28>
    write_bit(byte & 0x01);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffc4 	bl	8001158 <write_bit>
    byte >>= 1;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	ddf0      	ble.n	80011c4 <wire_write+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e016      	b.n	8001230 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	4053      	eors	r3, r2
 8001208:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	085b      	lsrs	r3, r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <byte_crc+0x38>
      crc ^= 0x8c;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001220:	43db      	mvns	r3, r3
 8001222:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b07      	cmp	r3, #7
 8001234:	dde5      	ble.n	8001202 <byte_crc+0x16>
  }
  return crc;
 8001236:	79fb      	ldrb	r3, [r7, #7]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e00d      	b.n	8001274 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffc1 	bl	80011ec <byte_crc>
 800126a:	4603      	mov	r3, r0
 800126c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbed      	blt.n	8001258 <wire_crc+0x14>

    return crc;
 800127c:	7afb      	ldrb	r3, [r7, #11]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  return wire_init();
 800128a:	f7ff fed5 	bl	8001038 <wire_init>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}

08001294 <send_cmd>:
    return HAL_OK;
  else
    return HAL_ERROR;
}
static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 80012a0:	f7ff feec 	bl	800107c <wire_reset>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <send_cmd+0x1a>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e01e      	b.n	80012ec <send_cmd+0x58>

  if (!rom_code) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 80012b4:	20cc      	movs	r0, #204	; 0xcc
 80012b6:	f7ff ff7d 	bl	80011b4 <wire_write>
 80012ba:	e012      	b.n	80012e2 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 80012bc:	2055      	movs	r0, #85	; 0x55
 80012be:	f7ff ff79 	bl	80011b4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e009      	b.n	80012dc <send_cmd+0x48>
      wire_write(rom_code[i]);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff6f 	bl	80011b4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	ddf2      	ble.n	80012c8 <send_cmd+0x34>
  }
  wire_write(cmd);
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff65 	bl	80011b4 <wire_write>
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <ds18b20_start_measure>:
HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 80012fc:	2144      	movs	r1, #68	; 0x44
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffc8 	bl	8001294 <send_cmd>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <ds18b20_read_scratchpad>:
static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 800130e:	b590      	push	{r4, r7, lr}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001318:	21be      	movs	r1, #190	; 0xbe
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffba 	bl	8001294 <send_cmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e01e      	b.n	8001368 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e009      	b.n	8001344 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	18d4      	adds	r4, r2, r3
 8001336:	f7ff feef 	bl	8001118 <wire_read>
 800133a:	4603      	mov	r3, r0
 800133c:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b08      	cmp	r3, #8
 8001348:	ddf2      	ble.n	8001330 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 800134a:	2108      	movs	r1, #8
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f7ff ff79 	bl	8001244 <wire_crc>
 8001352:	4603      	mov	r3, r0
 8001354:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3308      	adds	r3, #8
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	7afa      	ldrb	r2, [r7, #11]
 800135e:	429a      	cmp	r2, r3
 8001360:	d101      	bne.n	8001366 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <ds18b20_get_temp>:
float ds18b20_get_temp(const uint8_t* rom_code)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffc5 	bl	800130e <ds18b20_read_scratchpad>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <ds18b20_get_temp+0x20>
    return 85.0f;
 800138a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013b8 <ds18b20_get_temp+0x48>
 800138e:	e00b      	b.n	80013a8 <ds18b20_get_temp+0x38>
 8001390:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8001392:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8001394:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80013a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 80013a8:	eef0 7a47 	vmov.f32	s15, s14
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	42aa0000 	.word	0x42aa0000

080013bc <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80013ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80013d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80013d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013da:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80013dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013de:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f80e 	bl	8001412 <Lcd_init>

	return lcd;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	461d      	mov	r5, r3
 80013fa:	f107 0410 	add.w	r4, r7, #16
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bdb0      	pop	{r4, r5, r7, pc}

08001412 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7d9b      	ldrb	r3, [r3, #22]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001422:	2133      	movs	r1, #51	; 0x33
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f8b5 	bl	8001594 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800142a:	2132      	movs	r1, #50	; 0x32
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f8b1 	bl	8001594 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001432:	2128      	movs	r1, #40	; 0x28
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f8ad 	bl	8001594 <lcd_write_command>
 800143a:	e003      	b.n	8001444 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800143c:	2138      	movs	r1, #56	; 0x38
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8a8 	bl	8001594 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001444:	2101      	movs	r1, #1
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f8a4 	bl	8001594 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800144c:	210c      	movs	r1, #12
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f8a0 	bl	8001594 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001454:	2106      	movs	r1, #6
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f89c 	bl	8001594 <lcd_write_command>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <Lcd_float>:

/**
 * Write a number on the current position
 */
void Lcd_float(Lcd_HandleTypeDef * lcd, float number)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	ed87 0a00 	vstr	s0, [r7]
	char buffer[11];
	char buffer_out[11];
	sprintf(buffer, "%f", number);
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f7ff f889 	bl	8000588 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f107 0018 	add.w	r0, r7, #24
 800147e:	4915      	ldr	r1, [pc, #84]	; (80014d4 <Lcd_float+0x70>)
 8001480:	f007 fa32 	bl	80088e8 <siprintf>
	int period = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
	for(period = 0; period<sizeof(buffer); period++)
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	e009      	b.n	80014a2 <Lcd_float+0x3e>
	{
		if(buffer[period] == '.')
 800148e:	f107 0218 	add.w	r2, r7, #24
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b2e      	cmp	r3, #46	; 0x2e
 800149a:	d006      	beq.n	80014aa <Lcd_float+0x46>
	for(period = 0; period<sizeof(buffer); period++)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3301      	adds	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	d9f2      	bls.n	800148e <Lcd_float+0x2a>
 80014a8:	e000      	b.n	80014ac <Lcd_float+0x48>
			break;
 80014aa:	bf00      	nop
	}
	strncpy(buffer_out, buffer, period + 4);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3304      	adds	r3, #4
 80014b0:	461a      	mov	r2, r3
 80014b2:	f107 0118 	add.w	r1, r7, #24
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4618      	mov	r0, r3
 80014bc:	f007 faa5 	bl	8008a0a <strncpy>
	Lcd_string(lcd, buffer_out);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f81e 	bl	8001508 <Lcd_string>
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	0800cd78 	.word	0x0800cd78

080014d8 <Lcd_int>:
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <Lcd_int+0x2c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f007 f9fc 	bl	80088e8 <siprintf>
	Lcd_string(lcd, buffer);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f806 	bl	8001508 <Lcd_string>
}
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	0800cd7c 	.word	0x0800cd7c

08001508 <Lcd_string>:
/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e00a      	b.n	800152e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f864 	bl	80015f0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfc      	ldrb	r4, [r7, #15]
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f7fe fe6d 	bl	8000210 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	429c      	cmp	r4, r3
 800153a:	d3ed      	bcc.n	8001518 <Lcd_string+0x10>
	}
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
	...

08001548 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
 8001554:	4613      	mov	r3, r2
 8001556:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <Lcd_cursor+0x30>)
 800155c:	5cd2      	ldrb	r2, [r2, r3]
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	4413      	add	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3b80      	subs	r3, #128	; 0x80
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f812 	bl	8001594 <lcd_write_command>
	#endif
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	0800ce0c 	.word	0x0800ce0c

0800157c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001584:	2101      	movs	r1, #1
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f804 	bl	8001594 <lcd_write_command>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6898      	ldr	r0, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	899b      	ldrh	r3, [r3, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	4619      	mov	r1, r3
 80015ac:	f002 f928 	bl	8003800 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7d9b      	ldrb	r3, [r3, #22]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2204      	movs	r2, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f842 	bl	800164c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2204      	movs	r2, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f839 	bl	800164c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80015da:	e005      	b.n	80015e8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	2208      	movs	r2, #8
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f832 	bl	800164c <lcd_write>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6898      	ldr	r0, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	899b      	ldrh	r3, [r3, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	f002 f8fa 	bl	8003800 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7d9b      	ldrb	r3, [r3, #22]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d111      	bne.n	8001638 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2204      	movs	r2, #4
 800161c:	4619      	mov	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f814 	bl	800164c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2204      	movs	r2, #4
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f80b 	bl	800164c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001636:	e005      	b.n	8001644 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2208      	movs	r2, #8
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f804 	bl	800164c <lcd_write>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	4613      	mov	r3, r2
 800165a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e019      	b.n	8001696 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	8819      	ldrh	r1, [r3, #0]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	fa42 f303 	asr.w	r3, r2, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	f002 f8b8 	bl	8003800 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3e1      	bcc.n	8001662 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6918      	ldr	r0, [r3, #16]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8a9b      	ldrh	r3, [r3, #20]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4619      	mov	r1, r3
 80016aa:	f002 f8a9 	bl	8003800 <HAL_GPIO_WritePin>
	DELAY(1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f001 fa86 	bl	8002bc0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6918      	ldr	r0, [r3, #16]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8a9b      	ldrh	r3, [r3, #20]
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	f002 f89e 	bl	8003800 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_ADC1_Init+0x98>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	; (8001768 <MX_ADC1_Init+0x9c>)
 80016e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_ADC1_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_ADC1_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_ADC1_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_ADC1_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_ADC1_Init+0x98>)
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <MX_ADC1_Init+0xa0>)
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_ADC1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_ADC1_Init+0x98>)
 8001718:	2201      	movs	r2, #1
 800171a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_ADC1_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_ADC1_Init+0x98>)
 8001726:	2201      	movs	r2, #1
 8001728:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <MX_ADC1_Init+0x98>)
 800172c:	f001 fa6c 	bl	8002c08 <HAL_ADC_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 fc7f 	bl	8002038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800173e:	2301      	movs	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_ADC1_Init+0x98>)
 800174c:	f001 faa0 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001756:	f000 fc6f 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000022c 	.word	0x2000022c
 8001768:	40012000 	.word	0x40012000
 800176c:	0f000001 	.word	0x0f000001

08001770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_ADC_MspInit+0x74>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d123      	bne.n	80017da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_ADC_MspInit+0x7c>)
 80017d6:	f001 fe4f 	bl	8003478 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012000 	.word	0x40012000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4baf      	ldr	r3, [pc, #700]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4aae      	ldr	r2, [pc, #696]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4bac      	ldr	r3, [pc, #688]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800181e:	4ba9      	ldr	r3, [pc, #676]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4aa8      	ldr	r2, [pc, #672]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4ba6      	ldr	r3, [pc, #664]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001836:	4ba3      	ldr	r3, [pc, #652]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4aa2      	ldr	r2, [pc, #648]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4ba0      	ldr	r3, [pc, #640]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b9d      	ldr	r3, [pc, #628]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a9c      	ldr	r2, [pc, #624]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b9a      	ldr	r3, [pc, #616]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b97      	ldr	r3, [pc, #604]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a96      	ldr	r2, [pc, #600]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a90      	ldr	r2, [pc, #576]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a8a      	ldr	r2, [pc, #552]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <MX_GPIO_Init+0x2d4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|RS_Pin|EN_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80018b4:	4884      	ldr	r0, [pc, #528]	; (8001ac8 <MX_GPIO_Init+0x2d8>)
 80018b6:	f001 ffa3 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D5_Pin|D6_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2109      	movs	r1, #9
 80018be:	4883      	ldr	r0, [pc, #524]	; (8001acc <MX_GPIO_Init+0x2dc>)
 80018c0:	f001 ff9e 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2108      	movs	r1, #8
 80018c8:	4881      	ldr	r0, [pc, #516]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 80018ca:	f001 ff99 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2110      	movs	r1, #16
 80018d2:	487f      	ldr	r0, [pc, #508]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 80018d4:	f001 ff94 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f244 0181 	movw	r1, #16513	; 0x4081
 80018de:	487d      	ldr	r0, [pc, #500]	; (8001ad4 <MX_GPIO_Init+0x2e4>)
 80018e0:	f001 ff8e 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2140      	movs	r1, #64	; 0x40
 80018e8:	487b      	ldr	r0, [pc, #492]	; (8001ad8 <MX_GPIO_Init+0x2e8>)
 80018ea:	f001 ff89 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4871      	ldr	r0, [pc, #452]	; (8001acc <MX_GPIO_Init+0x2dc>)
 8001906:	f001 fdb7 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin|EN_Pin;
 800190a:	f44f 6385 	mov.w	r3, #1064	; 0x428
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4869      	ldr	r0, [pc, #420]	; (8001ac8 <MX_GPIO_Init+0x2d8>)
 8001924:	f001 fda8 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin;
 8001928:	2309      	movs	r3, #9
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4863      	ldr	r0, [pc, #396]	; (8001acc <MX_GPIO_Init+0x2dc>)
 8001940:	f001 fd9a 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001944:	2332      	movs	r3, #50	; 0x32
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001954:	230b      	movs	r3, #11
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	485b      	ldr	r0, [pc, #364]	; (8001acc <MX_GPIO_Init+0x2dc>)
 8001960:	f001 fd8a 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001964:	2386      	movs	r3, #134	; 0x86
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001974:	230b      	movs	r3, #11
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4854      	ldr	r0, [pc, #336]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 8001980:	f001 fd7a 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D4_Pin;
 8001984:	2308      	movs	r3, #8
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	484d      	ldr	r0, [pc, #308]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 800199c:	f001 fd6c 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 80019a0:	2310      	movs	r3, #16
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019a4:	2311      	movs	r3, #17
 80019a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4846      	ldr	r0, [pc, #280]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 80019b8:	f001 fd5e 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	483f      	ldr	r0, [pc, #252]	; (8001ad4 <MX_GPIO_Init+0x2e4>)
 80019d6:	f001 fd4f 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TACH_Pin;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TACH_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4835      	ldr	r0, [pc, #212]	; (8001ac8 <MX_GPIO_Init+0x2d8>)
 80019f2:	f001 fd41 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a08:	230b      	movs	r3, #11
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4830      	ldr	r0, [pc, #192]	; (8001ad4 <MX_GPIO_Init+0x2e4>)
 8001a14:	f001 fd30 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a18:	2340      	movs	r3, #64	; 0x40
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <MX_GPIO_Init+0x2e8>)
 8001a30:	f001 fd22 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4824      	ldr	r0, [pc, #144]	; (8001ad8 <MX_GPIO_Init+0x2e8>)
 8001a48:	f001 fd16 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a5e:	230a      	movs	r3, #10
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 8001a6a:	f001 fd05 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <MX_GPIO_Init+0x2e0>)
 8001a84:	f001 fcf8 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a9a:	230b      	movs	r3, #11
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_GPIO_Init+0x2e8>)
 8001aa6:	f001 fce7 	bl	8003478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2028      	movs	r0, #40	; 0x28
 8001ab0:	f001 fc19 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ab4:	2028      	movs	r0, #40	; 0x28
 8001ab6:	f001 fc32 	bl	800331e <HAL_NVIC_EnableIRQ>

}
 8001aba:	bf00      	nop
 8001abc:	3730      	adds	r7, #48	; 0x30
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40021400 	.word	0x40021400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40021800 	.word	0x40021800

08001adc <HAL_TIM_IC_CaptureCallback>:

/* Measure Frequency */
float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a30      	ldr	r2, [pc, #192]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d158      	bne.n	8001b9e <HAL_TIM_IC_CaptureCallback+0xc2>
	{

				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7f1b      	ldrb	r3, [r3, #28]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d154      	bne.n	8001b9e <HAL_TIM_IC_CaptureCallback+0xc2>
				{
					if (Is_First_Captured==0) // if the first rising edge is not captured
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_TIM_IC_CaptureCallback+0x36>
					{
						IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001afc:	2100      	movs	r1, #0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f003 ff6e 	bl	80059e0 <HAL_TIM_ReadCapturedValue>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001b08:	6013      	str	r3, [r2, #0]
						Is_First_Captured = 1;  // set the first captured as true
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
						Is_First_Captured = 0; // set it back to false
				}
			}
	}
}
 8001b10:	e045      	b.n	8001b9e <HAL_TIM_IC_CaptureCallback+0xc2>
						IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f003 ff63 	bl	80059e0 <HAL_TIM_ReadCapturedValue>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001b1e:	6013      	str	r3, [r2, #0]
						if (IC_Val2 > IC_Val1)
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d907      	bls.n	8001b3c <HAL_TIM_IC_CaptureCallback+0x60>
							Difference = IC_Val2-IC_Val1;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00d      	b.n	8001b58 <HAL_TIM_IC_CaptureCallback+0x7c>
						else if (IC_Val1 > IC_Val2)
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d907      	bls.n	8001b58 <HAL_TIM_IC_CaptureCallback+0x7c>
							Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001b56:	6013      	str	r3, [r2, #0]
						float refClock = 72000000/(72);
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001b5a:	60fb      	str	r3, [r7, #12]
						frequency = refClock/Difference;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b68:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]
						rpm = frequency*30;
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b88:	ee17 2a90 	vmov	r2, s15
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001b8e:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
						Is_First_Captured = 0; // set it back to false
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002c4 	.word	0x200002c4
 8001bac:	200002b8 	.word	0x200002b8
 8001bb0:	200002ac 	.word	0x200002ac
 8001bb4:	200002b0 	.word	0x200002b0
 8001bb8:	200002b4 	.word	0x200002b4
 8001bbc:	49742400 	.word	0x49742400
 8001bc0:	200002bc 	.word	0x200002bc
 8001bc4:	20000274 	.word	0x20000274

08001bc8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b096      	sub	sp, #88	; 0x58
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a4f      	ldr	r2, [pc, #316]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d15f      	bne.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
	  if(mode == 0)
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02c      	beq.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x78>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(Duty));
 8001be6:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
	  	  Duty = PID_GetOutput(&hpid1, rpm_ref, rpm);
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	ee07 3a10 	vmov	s14, r3
 8001c04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c08:	eef0 0a47 	vmov.f32	s1, s14
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	4845      	ldr	r0, [pc, #276]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c12:	f000 fa16 	bl	8002042 <PID_GetOutput>
 8001c16:	eef0 7a40 	vmov.f32	s15, s0
 8001c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1e:	ee17 2a90 	vmov	r2, s15
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001c24:	601a      	str	r2, [r3, #0]
	  	  e = rpm_ref - rpm;
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
 8001c3e:	e02b      	b.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xd0>
	  }
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(Duty));
 8001c40:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
		  Duty = PID_GetOutput(&hpid1, rpm_ref_t, rpm);
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	ee07 3a10 	vmov	s14, r3
 8001c5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c62:	eef0 0a47 	vmov.f32	s1, s14
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	482f      	ldr	r0, [pc, #188]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c6c:	f000 f9e9 	bl	8002042 <PID_GetOutput>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c78:	ee17 2a90 	vmov	r2, s15
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001c7e:	601a      	str	r2, [r3, #0]
		  e = rpm_ref_t - rpm;
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]
	  }
  }
  if(htim == &htim7)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d133      	bne.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x140>
    {
	  if(mode == 0)
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x114>
	  {
		  uint8_t tx_buffer[64];
		  int resp_len = sprintf((char*)tx_buffer, "{ \"RPM\":%d, \"RPM_REF\":%d, \"Duty\":%d }\r", rpm, rpm_ref, Duty);
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cb4:	6819      	ldr	r1, [r3, #0]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f107 0008 	add.w	r0, r7, #8
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	491d      	ldr	r1, [pc, #116]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cc4:	f006 fe10 	bl	80088e8 <siprintf>
 8001cc8:	64b8      	str	r0, [r7, #72]	; 0x48
		  HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	f107 0108 	add.w	r1, r7, #8
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001cd6:	f004 fcc7 	bl	8006668 <HAL_UART_Transmit>
		  uint8_t tx_buffer[64];
		  int resp_len = sprintf((char*)tx_buffer, "{ \"RPM\":%d, \"RPM_REF_T\":%d, \"Duty\":%d }\r", rpm, rpm_ref_t, Duty);
		  HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
	  }
    }
}
 8001cda:	e015      	b.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x140>
		  int resp_len = sprintf((char*)tx_buffer, "{ \"RPM\":%d, \"RPM_REF_T\":%d, \"Duty\":%d }\r", rpm, rpm_ref_t, Duty);
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f107 0008 	add.w	r0, r7, #8
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4913      	ldr	r1, [pc, #76]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001cf2:	f006 fdf9 	bl	80088e8 <siprintf>
 8001cf6:	64f8      	str	r0, [r7, #76]	; 0x4c
		  HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f107 0108 	add.w	r1, r7, #8
 8001d00:	230a      	movs	r3, #10
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d04:	f004 fcb0 	bl	8006668 <HAL_UART_Transmit>
}
 8001d08:	bf00      	nop
 8001d0a:	3750      	adds	r7, #80	; 0x50
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000035c 	.word	0x2000035c
 8001d14:	20000284 	.word	0x20000284
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000310 	.word	0x20000310
 8001d20:	20000004 	.word	0x20000004
 8001d24:	20000274 	.word	0x20000274
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000280 	.word	0x20000280
 8001d30:	20000278 	.word	0x20000278
 8001d34:	200003f4 	.word	0x200003f4
 8001d38:	0800cd80 	.word	0x0800cd80
 8001d3c:	20000440 	.word	0x20000440
 8001d40:	0800cda8 	.word	0x0800cda8

08001d44 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_UART_RxCpltCallback+0x70>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d123      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x58>
	  if(rx_buffer[0] == 'M' && rx_buffer[1] == 'O' && rx_buffer[2] == 'D' && rx_buffer[3] == 'E')
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_UART_RxCpltCallback+0x74>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b4d      	cmp	r3, #77	; 0x4d
 8001d5a:	d11a      	bne.n	8001d92 <HAL_UART_RxCpltCallback+0x4e>
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_UART_RxCpltCallback+0x74>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b4f      	cmp	r3, #79	; 0x4f
 8001d62:	d116      	bne.n	8001d92 <HAL_UART_RxCpltCallback+0x4e>
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_UART_RxCpltCallback+0x74>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	2b44      	cmp	r3, #68	; 0x44
 8001d6a:	d112      	bne.n	8001d92 <HAL_UART_RxCpltCallback+0x4e>
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_UART_RxCpltCallback+0x74>)
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	2b45      	cmp	r3, #69	; 0x45
 8001d72:	d10e      	bne.n	8001d92 <HAL_UART_RxCpltCallback+0x4e>
	     {
		  if(mode == 0)
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_UART_RxCpltCallback+0x78>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_UART_RxCpltCallback+0x46>
		  	  {
			  	  mode = 1;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_UART_RxCpltCallback+0x78>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
		  if(mode == 0)
 8001d88:	e008      	b.n	8001d9c <HAL_UART_RxCpltCallback+0x58>
		  	  }
		  else
		  	  {
			  	  mode = 0;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_UART_RxCpltCallback+0x78>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		  if(mode == 0)
 8001d90:	e004      	b.n	8001d9c <HAL_UART_RxCpltCallback+0x58>
		  	  }
		  }
	  else
	  {
      sscanf((char*)&rx_buffer[0], "%d", &rpm_ref);
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <HAL_UART_RxCpltCallback+0x7c>)
 8001d94:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <HAL_UART_RxCpltCallback+0x80>)
 8001d96:	4808      	ldr	r0, [pc, #32]	; (8001db8 <HAL_UART_RxCpltCallback+0x74>)
 8001d98:	f006 fdc6 	bl	8008928 <siscanf>
	  }
  HAL_UART_Receive_IT(&huart3, rx_buffer, msg_len);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_UART_RxCpltCallback+0x84>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4905      	ldr	r1, [pc, #20]	; (8001db8 <HAL_UART_RxCpltCallback+0x74>)
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <HAL_UART_RxCpltCallback+0x70>)
 8001da6:	f004 fce2 	bl	800676e <HAL_UART_Receive_IT>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000440 	.word	0x20000440
 8001db8:	20000288 	.word	0x20000288
 8001dbc:	20000284 	.word	0x20000284
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	0800cdd4 	.word	0x0800cdd4
 8001dc8:	200002a8 	.word	0x200002a8

08001dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b091      	sub	sp, #68	; 0x44
 8001dd0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd2:	f000 fe98 	bl	8002b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd6:	f000 f8c7 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dda:	f7ff fd09 	bl	80017f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001dde:	f000 fdd1 	bl	8002984 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001de2:	f000 fc77 	bl	80026d4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001de6:	f000 fba7 	bl	8002538 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001dea:	f000 fc23 	bl	8002634 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001dee:	f7ff fc6d 	bl	80016cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8001df2:	f000 fb31 	bl	8002458 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001df6:	f000 fca3 	bl	8002740 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <main+0x158>)
 8001dfc:	f107 0420 	add.w	r4, r7, #32
 8001e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001e06:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <main+0x15c>)
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e10:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001e14:	4638      	mov	r0, r7
 8001e16:	f107 0218 	add.w	r2, r7, #24
 8001e1a:	f107 0120 	add.w	r1, r7, #32
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9303      	str	r3, [sp, #12]
 8001e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <main+0x160>)
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <main+0x160>)
 8001e32:	f7ff fac3 	bl	80013bc <Lcd_create>


  if (ds18b20_init() != HAL_OK) {
 8001e36:	f7ff fa26 	bl	8001286 <ds18b20_init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <main+0x78>
    Error_Handler();
 8001e40:	f000 f8fa 	bl	8002038 <Error_Handler>
  }
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001e44:	2100      	movs	r1, #0
 8001e46:	483a      	ldr	r0, [pc, #232]	; (8001f30 <main+0x164>)
 8001e48:	f002 ff84 	bl	8004d54 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001e4c:	4839      	ldr	r0, [pc, #228]	; (8001f34 <main+0x168>)
 8001e4e:	f002 fea7 	bl	8004ba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001e52:	4839      	ldr	r0, [pc, #228]	; (8001f38 <main+0x16c>)
 8001e54:	f002 fea4 	bl	8004ba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4838      	ldr	r0, [pc, #224]	; (8001f3c <main+0x170>)
 8001e5c:	f003 f8d6 	bl	800500c <HAL_TIM_IC_Start_IT>
  msg_len = strlen("0000\r");
 8001e60:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <main+0x174>)
 8001e62:	2205      	movs	r2, #5
 8001e64:	801a      	strh	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, rx_buffer, msg_len);
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <main+0x174>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4935      	ldr	r1, [pc, #212]	; (8001f44 <main+0x178>)
 8001e6e:	4836      	ldr	r0, [pc, #216]	; (8001f48 <main+0x17c>)
 8001e70:	f004 fc7d 	bl	800676e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds18b20_start_measure(NULL);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fa3d 	bl	80012f4 <ds18b20_start_measure>
	  HAL_Delay(1000);
 8001e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7e:	f000 fe9f 	bl	8002bc0 <HAL_Delay>
	  temp = ds18b20_get_temp(NULL);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fa74 	bl	8001370 <ds18b20_get_temp>
 8001e88:	eef0 7a40 	vmov.f32	s15, s0
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <main+0x180>)
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
	  rpm_ref_t = 40*temp+900;
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <main+0x180>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001f50 <main+0x184>
 8001e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001f54 <main+0x188>
 8001ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eac:	ee17 2a90 	vmov	r2, s15
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <main+0x18c>)
 8001eb2:	601a      	str	r2, [r3, #0]
	  Lcd_clear(&lcd);
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fb60 	bl	800157c <Lcd_clear>
	  Lcd_cursor(&lcd, 0,1);
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb40 	bl	8001548 <Lcd_cursor>
	  Lcd_string(&lcd, "TEMP: ");
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4924      	ldr	r1, [pc, #144]	; (8001f5c <main+0x190>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fb1b 	bl	8001508 <Lcd_string>
	  Lcd_cursor(&lcd, 0,7);
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fb35 	bl	8001548 <Lcd_cursor>
	  Lcd_float(&lcd, temp);
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <main+0x180>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff faba 	bl	8001464 <Lcd_float>

	  Lcd_cursor(&lcd, 1,1);
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb26 	bl	8001548 <Lcd_cursor>
	  Lcd_string(&lcd, "RPM: ");
 8001efc:	463b      	mov	r3, r7
 8001efe:	4918      	ldr	r1, [pc, #96]	; (8001f60 <main+0x194>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb01 	bl	8001508 <Lcd_string>
	  Lcd_cursor(&lcd, 1,7);
 8001f06:	463b      	mov	r3, r7
 8001f08:	2207      	movs	r2, #7
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1b 	bl	8001548 <Lcd_cursor>
	  Lcd_int(&lcd, rpm);
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <main+0x198>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	463b      	mov	r3, r7
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fadc 	bl	80014d8 <Lcd_int>
	  ds18b20_start_measure(NULL);
 8001f20:	e7a8      	b.n	8001e74 <main+0xa8>
 8001f22:	bf00      	nop
 8001f24:	0800cde8 	.word	0x0800cde8
 8001f28:	0800cdf8 	.word	0x0800cdf8
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	20000310 	.word	0x20000310
 8001f34:	2000035c 	.word	0x2000035c
 8001f38:	200003f4 	.word	0x200003f4
 8001f3c:	200002c4 	.word	0x200002c4
 8001f40:	200002a8 	.word	0x200002a8
 8001f44:	20000288 	.word	0x20000288
 8001f48:	20000440 	.word	0x20000440
 8001f4c:	2000027c 	.word	0x2000027c
 8001f50:	42200000 	.word	0x42200000
 8001f54:	44610000 	.word	0x44610000
 8001f58:	20000278 	.word	0x20000278
 8001f5c:	0800cdd8 	.word	0x0800cdd8
 8001f60:	0800cde0 	.word	0x0800cde0
 8001f64:	20000274 	.word	0x20000274

08001f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b094      	sub	sp, #80	; 0x50
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	2230      	movs	r2, #48	; 0x30
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f005 fe2e 	bl	8007bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f8c:	f001 fc76 	bl	800387c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <SystemClock_Config+0xc8>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <SystemClock_Config+0xc8>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <SystemClock_Config+0xc8>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <SystemClock_Config+0xcc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <SystemClock_Config+0xcc>)
 8001fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <SystemClock_Config+0xcc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fdc:	2348      	movs	r3, #72	; 0x48
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 fc55 	bl	800389c <HAL_RCC_OscConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ff8:	f000 f81e 	bl	8002038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002000:	2302      	movs	r3, #2
 8002002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	f001 fee3 	bl	8003de4 <HAL_RCC_ClockConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002024:	f000 f808 	bl	8002038 <Error_Handler>
  }
}
 8002028:	bf00      	nop
 800202a:	3750      	adds	r7, #80	; 0x50
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <Error_Handler+0x8>

08002042 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}

float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8002042:	b480      	push	{r7}
 8002044:	b089      	sub	sp, #36	; 0x24
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	ed87 0a02 	vstr	s0, [r7, #8]
 800204e:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8002052:	ed97 7a02 	vldr	s14, [r7, #8]
 8002056:	edd7 7a01 	vldr	s15, [r7, #4]
 800205a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205e:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	ed93 7a06 	vldr	s14, [r3, #24]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 6a01 	vldr	s13, [r3, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	edd3 7a04 	vldr	s15, [r3, #16]
 8002074:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002078:	edd7 7a06 	vldr	s15, [r7, #24]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	edd3 7a03 	vldr	s15, [r3, #12]
 8002096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	edd3 7a05 	vldr	s15, [r3, #20]
 80020a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80020a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	edd3 6a03 	vldr	s13, [r3, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80020b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80020ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80020f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a08 	vldr	s15, [r3, #32]
 800210a:	ed97 7a05 	vldr	s14, [r7, #20]
 800210e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002116:	dd03      	ble.n	8002120 <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e00f      	b.n	8002140 <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002126:	ed97 7a05 	vldr	s14, [r7, #20]
 800212a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	d503      	bpl.n	800213c <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e001      	b.n	8002140 <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8002140:	ed97 7a05 	vldr	s14, [r7, #20]
 8002144:	edd7 7a07 	vldr	s15, [r7, #28]
 8002148:	eeb4 7a67 	vcmp.f32	s14, s15
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	d013      	beq.n	800217a <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	ed93 7a06 	vldr	s14, [r3, #24]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edd3 6a01 	vldr	s13, [r3, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	edd3 7a04 	vldr	s15, [r3, #16]
 8002164:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002168:	edd7 7a06 	vldr	s15, [r7, #24]
 800216c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	ee07 3a90 	vmov	s15, r3
}
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_MspInit+0x44>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_MspInit+0x44>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_MspInit+0x44>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_MspInit+0x44>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_MspInit+0x44>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_MspInit+0x44>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002224:	f000 fcac 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM2_IRQHandler+0x10>)
 8002232:	f003 f83b 	bl	80052ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002c4 	.word	0x200002c4

08002240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <TIM3_IRQHandler+0x10>)
 8002246:	f003 f831 	bl	80052ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000310 	.word	0x20000310

08002254 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM4_IRQHandler+0x10>)
 800225a:	f003 f827 	bl	80052ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000035c 	.word	0x2000035c

08002268 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <USART3_IRQHandler+0x10>)
 800226e:	f004 fac3 	bl	80067f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000440 	.word	0x20000440

0800227c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TACH_Pin);
 8002280:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002284:	f001 fad6 	bl	8003834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002288:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800228c:	f001 fad2 	bl	8003834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM7_IRQHandler+0x10>)
 800229a:	f003 f807 	bl	80052ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003f4 	.word	0x200003f4

080022a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
	return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_kill>:

int _kill(int pid, int sig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c2:	f005 fc5f 	bl	8007b84 <__errno>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2216      	movs	r2, #22
 80022ca:	601a      	str	r2, [r3, #0]
	return -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_exit>:

void _exit (int status)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ffe7 	bl	80022b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ea:	e7fe      	b.n	80022ea <_exit+0x12>

080022ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e00a      	b.n	8002314 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022fe:	f3af 8000 	nop.w
 8002302:	4601      	mov	r1, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	b2ca      	uxtb	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	dbf0      	blt.n	80022fe <_read+0x12>
	}

return len;
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e009      	b.n	800234c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60ba      	str	r2, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf1      	blt.n	8002338 <_write+0x12>
	}
	return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_close>:

int _close(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	return -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002386:	605a      	str	r2, [r3, #4]
	return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_isatty>:

int _isatty(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	return 1;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f005 fbc4 	bl	8007b84 <__errno>
 80023fc:	4603      	mov	r3, r0
 80023fe:	220c      	movs	r2, #12
 8002400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20050000 	.word	0x20050000
 8002428:	00000400 	.word	0x00000400
 800242c:	200002c0 	.word	0x200002c0
 8002430:	200004e0 	.word	0x200004e0

08002434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <MX_TIM2_Init+0xdc>)
 8002486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800248a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <MX_TIM2_Init+0xdc>)
 800248e:	2248      	movs	r2, #72	; 0x48
 8002490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <MX_TIM2_Init+0xdc>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <MX_TIM2_Init+0xdc>)
 800249a:	f04f 32ff 	mov.w	r2, #4294967295
 800249e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <MX_TIM2_Init+0xdc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <MX_TIM2_Init+0xdc>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ac:	4821      	ldr	r0, [pc, #132]	; (8002534 <MX_TIM2_Init+0xdc>)
 80024ae:	f002 faaf 	bl	8004a10 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80024b8:	f7ff fdbe 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	4619      	mov	r1, r3
 80024c8:	481a      	ldr	r0, [pc, #104]	; (8002534 <MX_TIM2_Init+0xdc>)
 80024ca:	f003 f9bf 	bl	800584c <HAL_TIM_ConfigClockSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80024d4:	f7ff fdb0 	bl	8002038 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <MX_TIM2_Init+0xdc>)
 80024da:	f002 fd35 	bl	8004f48 <HAL_TIM_IC_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80024e4:	f7ff fda8 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	480f      	ldr	r0, [pc, #60]	; (8002534 <MX_TIM2_Init+0xdc>)
 80024f8:	f003 ffbc 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002502:	f7ff fd99 	bl	8002038 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800250a:	2301      	movs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_TIM2_Init+0xdc>)
 800251e:	f002 ffe4 	bl	80054ea <HAL_TIM_IC_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002528:	f7ff fd86 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800252c:	bf00      	nop
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200002c4 	.word	0x200002c4

08002538 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <MX_TIM3_Init+0xf4>)
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <MX_TIM3_Init+0xf8>)
 800256e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 8002570:	4b2e      	ldr	r3, [pc, #184]	; (800262c <MX_TIM3_Init+0xf4>)
 8002572:	221b      	movs	r2, #27
 8002574:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <MX_TIM3_Init+0xf4>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <MX_TIM3_Init+0xf4>)
 800257e:	2263      	movs	r2, #99	; 0x63
 8002580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <MX_TIM3_Init+0xf4>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <MX_TIM3_Init+0xf4>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258e:	4827      	ldr	r0, [pc, #156]	; (800262c <MX_TIM3_Init+0xf4>)
 8002590:	f002 fa3e 	bl	8004a10 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800259a:	f7ff fd4d 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4820      	ldr	r0, [pc, #128]	; (800262c <MX_TIM3_Init+0xf4>)
 80025ac:	f003 f94e 	bl	800584c <HAL_TIM_ConfigClockSource>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80025b6:	f7ff fd3f 	bl	8002038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025ba:	481c      	ldr	r0, [pc, #112]	; (800262c <MX_TIM3_Init+0xf4>)
 80025bc:	f002 fb68 	bl	8004c90 <HAL_TIM_PWM_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025c6:	f7ff fd37 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	4814      	ldr	r0, [pc, #80]	; (800262c <MX_TIM3_Init+0xf4>)
 80025da:	f003 ff4b 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025e4:	f7ff fd28 	bl	8002038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e8:	2360      	movs	r3, #96	; 0x60
 80025ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 39;
 80025ec:	2327      	movs	r3, #39	; 0x27
 80025ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	480b      	ldr	r0, [pc, #44]	; (800262c <MX_TIM3_Init+0xf4>)
 8002600:	f003 f810 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800260a:	f7ff fd15 	bl	8002038 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <MX_TIM3_Init+0xf4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <MX_TIM3_Init+0xf4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <MX_TIM3_Init+0xf4>)
 8002620:	f000 f978 	bl	8002914 <HAL_TIM_MspPostInit>

}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000310 	.word	0x20000310
 8002630:	40000400 	.word	0x40000400

08002634 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <MX_TIM4_Init+0x98>)
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <MX_TIM4_Init+0x9c>)
 8002656:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8002658:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <MX_TIM4_Init+0x98>)
 800265a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800265e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_TIM4_Init+0x98>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <MX_TIM4_Init+0x98>)
 8002668:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800266c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <MX_TIM4_Init+0x98>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_TIM4_Init+0x98>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800267a:	4814      	ldr	r0, [pc, #80]	; (80026cc <MX_TIM4_Init+0x98>)
 800267c:	f002 f9c8 	bl	8004a10 <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002686:	f7ff fcd7 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <MX_TIM4_Init+0x98>)
 8002698:	f003 f8d8 	bl	800584c <HAL_TIM_ConfigClockSource>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80026a2:	f7ff fcc9 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <MX_TIM4_Init+0x98>)
 80026b4:	f003 fede 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80026be:	f7ff fcbb 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000035c 	.word	0x2000035c
 80026d0:	40000800 	.word	0x40000800

080026d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <MX_TIM6_Init+0x64>)
 80026e6:	4a15      	ldr	r2, [pc, #84]	; (800273c <MX_TIM6_Init+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <MX_TIM6_Init+0x64>)
 80026ec:	2247      	movs	r2, #71	; 0x47
 80026ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <MX_TIM6_Init+0x64>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <MX_TIM6_Init+0x64>)
 80026f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MX_TIM6_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <MX_TIM6_Init+0x64>)
 8002706:	f002 f983 	bl	8004a10 <HAL_TIM_Base_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002710:	f7ff fc92 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_TIM6_Init+0x64>)
 8002722:	f003 fea7 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800272c:	f7ff fc84 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200003a8 	.word	0x200003a8
 800273c:	40001000 	.word	0x40001000

08002740 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_TIM7_Init+0x68>)
 8002752:	4a16      	ldr	r2, [pc, #88]	; (80027ac <MX_TIM7_Init+0x6c>)
 8002754:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_TIM7_Init+0x68>)
 8002758:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800275c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_TIM7_Init+0x68>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_TIM7_Init+0x68>)
 8002766:	f242 720f 	movw	r2, #9999	; 0x270f
 800276a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_TIM7_Init+0x68>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <MX_TIM7_Init+0x68>)
 8002774:	f002 f94c 	bl	8004a10 <HAL_TIM_Base_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800277e:	f7ff fc5b 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <MX_TIM7_Init+0x68>)
 8002790:	f003 fe70 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800279a:	f7ff fc4d 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200003f4 	.word	0x200003f4
 80027ac:	40001400 	.word	0x40001400

080027b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d130      	bne.n	8002834 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d2:	4b4a      	ldr	r3, [pc, #296]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	4b44      	ldr	r3, [pc, #272]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002802:	2320      	movs	r3, #32
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280a:	2301      	movs	r3, #1
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002812:	2301      	movs	r3, #1
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281a:	4619      	mov	r1, r3
 800281c:	4838      	ldr	r0, [pc, #224]	; (8002900 <HAL_TIM_Base_MspInit+0x150>)
 800281e:	f000 fe2b 	bl	8003478 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	201c      	movs	r0, #28
 8002828:	f000 fd5d 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800282c:	201c      	movs	r0, #28
 800282e:	f000 fd76 	bl	800331e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002832:	e05e      	b.n	80028f2 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a32      	ldr	r2, [pc, #200]	; (8002904 <HAL_TIM_Base_MspInit+0x154>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d114      	bne.n	8002868 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	201d      	movs	r0, #29
 800285c:	f000 fd43 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002860:	201d      	movs	r0, #29
 8002862:	f000 fd5c 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 8002866:	e044      	b.n	80028f2 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM4)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <HAL_TIM_Base_MspInit+0x158>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d114      	bne.n	800289c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	201e      	movs	r0, #30
 8002890:	f000 fd29 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002894:	201e      	movs	r0, #30
 8002896:	f000 fd42 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 800289a:	e02a      	b.n	80028f2 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM6)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_TIM_Base_MspInit+0x15c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10c      	bne.n	80028c0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a14      	ldr	r2, [pc, #80]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
}
 80028be:	e018      	b.n	80028f2 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM7)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_TIM_Base_MspInit+0x160>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d113      	bne.n	80028f2 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	2037      	movs	r0, #55	; 0x37
 80028e8:	f000 fcfd 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028ec:	2037      	movs	r0, #55	; 0x37
 80028ee:	f000 fd16 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3738      	adds	r7, #56	; 0x38
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40001000 	.word	0x40001000
 8002910:	40001400 	.word	0x40001400

08002914 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <HAL_TIM_MspPostInit+0x64>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d11b      	bne.n	800296e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_TIM_MspPostInit+0x68>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_TIM_MspPostInit+0x68>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_TIM_MspPostInit+0x68>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800294e:	2340      	movs	r3, #64	; 0x40
 8002950:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800295e:	2302      	movs	r3, #2
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4619      	mov	r1, r3
 8002968:	4805      	ldr	r0, [pc, #20]	; (8002980 <HAL_TIM_MspPostInit+0x6c>)
 800296a:	f000 fd85 	bl	8003478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40000400 	.word	0x40000400
 800297c:	40023800 	.word	0x40023800
 8002980:	40020000 	.word	0x40020000

08002984 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_USART3_UART_Init+0x58>)
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <MX_USART3_UART_Init+0x5c>)
 800298c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <MX_USART3_UART_Init+0x58>)
 8002990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_USART3_UART_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_USART3_UART_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029aa:	220c      	movs	r2, #12
 80029ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_USART3_UART_Init+0x58>)
 80029c8:	f003 fe00 	bl	80065cc <HAL_UART_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80029d2:	f7ff fb31 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000440 	.word	0x20000440
 80029e0:	40004800 	.word	0x40004800

080029e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b0aa      	sub	sp, #168	; 0xa8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	2284      	movs	r2, #132	; 0x84
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f005 f8e7 	bl	8007bd8 <memset>
  if(uartHandle->Instance==USART3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_UART_MspInit+0xc4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d144      	bne.n	8002a9e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 fc04 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a2e:	f7ff fb03 	bl	8002038 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_UART_MspInit+0xc8>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_UART_MspInit+0xc8>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_UART_MspInit+0xc8>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_UART_MspInit+0xc8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_UART_MspInit+0xc8>)
 8002a50:	f043 0308 	orr.w	r3, r3, #8
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_UART_MspInit+0xc8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a86:	4619      	mov	r1, r3
 8002a88:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <HAL_UART_MspInit+0xcc>)
 8002a8a:	f000 fcf5 	bl	8003478 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2027      	movs	r0, #39	; 0x27
 8002a94:	f000 fc27 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a98:	2027      	movs	r0, #39	; 0x27
 8002a9a:	f000 fc40 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	37a8      	adds	r7, #168	; 0xa8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020c00 	.word	0x40020c00

08002ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aba:	490e      	ldr	r1, [pc, #56]	; (8002af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ad0:	4c0b      	ldr	r4, [pc, #44]	; (8002b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ade:	f7ff fca9 	bl	8002434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f005 f855 	bl	8007b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae6:	f7ff f971 	bl	8001dcc <main>
  bx  lr    
 8002aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002af8:	0800d2f4 	.word	0x0800d2f4
  ldr r2, =_sbss
 8002afc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002b00:	200004dc 	.word	0x200004dc

08002b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>

08002b06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	f000 fbe0 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f805 	bl	8002b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b16:	f7ff fb3b 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x54>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_InitTick+0x58>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fbfb 	bl	800333a <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00e      	b.n	8002b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d80a      	bhi.n	8002b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	2200      	movs	r2, #0
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f000 fbc3 	bl	80032e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_InitTick+0x5c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000030 	.word	0x20000030
 8002b78:	20000038 	.word	0x20000038
 8002b7c:	20000034 	.word	0x20000034

08002b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_IncTick+0x24>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_IncTick+0x24>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000038 	.word	0x20000038
 8002ba4:	200004c8 	.word	0x200004c8

08002ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_GetTick+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	200004c8 	.word	0x200004c8

08002bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff ffee 	bl	8002ba8 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d005      	beq.n	8002be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_Delay+0x44>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002be6:	bf00      	nop
 8002be8:	f7ff ffde 	bl	8002ba8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d8f7      	bhi.n	8002be8 <HAL_Delay+0x28>
  {
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000038 	.word	0x20000038

08002c08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e031      	b.n	8002c82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fda2 	bl	8001770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_ADC_Init+0x84>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	f043 0202 	orr.w	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f970 	bl	8002f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
 8002c72:	e001      	b.n	8002c78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	ffffeefd 	.word	0xffffeefd

08002c90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x1c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e136      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x28a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b09      	cmp	r3, #9
 8002cba:	d93a      	bls.n	8002d32 <HAL_ADC_ConfigChannel+0xa2>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc4:	d035      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68d9      	ldr	r1, [r3, #12]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b1e      	subs	r3, #30
 8002cdc:	2207      	movs	r2, #7
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	400a      	ands	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a8d      	ldr	r2, [pc, #564]	; (8002f28 <HAL_ADC_ConfigChannel+0x298>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68d9      	ldr	r1, [r3, #12]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	061a      	lsls	r2, r3, #24
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d0a:	e035      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68d9      	ldr	r1, [r3, #12]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4403      	add	r3, r0
 8002d24:	3b1e      	subs	r3, #30
 8002d26:	409a      	lsls	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d30:	e022      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6919      	ldr	r1, [r3, #16]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	2207      	movs	r2, #7
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	400a      	ands	r2, r1
 8002d54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6919      	ldr	r1, [r3, #16]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4403      	add	r3, r0
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d824      	bhi.n	8002dca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b05      	subs	r3, #5
 8002d92:	221f      	movs	r2, #31
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	400a      	ands	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b05      	subs	r3, #5
 8002dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc8:	e04c      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d824      	bhi.n	8002e1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	3b23      	subs	r3, #35	; 0x23
 8002de4:	221f      	movs	r2, #31
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	400a      	ands	r2, r1
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b23      	subs	r3, #35	; 0x23
 8002e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1a:	e023      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b41      	subs	r3, #65	; 0x41
 8002e2e:	221f      	movs	r2, #31
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43da      	mvns	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b41      	subs	r3, #65	; 0x41
 8002e58:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_ADC_ConfigChannel+0x29c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10a      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1f4>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e76:	d105      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <HAL_ADC_ConfigChannel+0x29c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10f      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x21e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d10b      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ea0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_ADC_ConfigChannel+0x29c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d12b      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x280>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_ADC_ConfigChannel+0x298>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x23a>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b11      	cmp	r3, #17
 8002ec8:	d122      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ed0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ed4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_ADC_ConfigChannel+0x2a0>)
 8002edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_ADC_ConfigChannel+0x298>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_ADC_ConfigChannel+0x2a4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9a      	lsrs	r2, r3, #18
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f02:	e002      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f9      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	10000012 	.word	0x10000012
 8002f2c:	40012000 	.word	0x40012000
 8002f30:	40012300 	.word	0x40012300
 8002f34:	20000030 	.word	0x20000030
 8002f38:	431bde83 	.word	0x431bde83

08002f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f44:	4b78      	ldr	r3, [pc, #480]	; (8003128 <ADC_Init+0x1ec>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a77      	ldr	r2, [pc, #476]	; (8003128 <ADC_Init+0x1ec>)
 8002f4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f50:	4b75      	ldr	r3, [pc, #468]	; (8003128 <ADC_Init+0x1ec>)
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4973      	ldr	r1, [pc, #460]	; (8003128 <ADC_Init+0x1ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6899      	ldr	r1, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <ADC_Init+0x1f0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6899      	ldr	r1, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e00f      	b.n	8003036 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003034:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0202 	bic.w	r2, r2, #2
 8003044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6899      	ldr	r1, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	005a      	lsls	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003072:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	3b01      	subs	r3, #1
 8003090:	035a      	lsls	r2, r3, #13
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	e007      	b.n	80030ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	051a      	lsls	r2, r3, #20
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ee:	025a      	lsls	r2, r3, #9
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	029a      	lsls	r2, r3, #10
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40012300 	.word	0x40012300
 800312c:	0f000001 	.word	0x0f000001

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <__NVIC_SetPriorityGrouping+0x40>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 800315a:	4313      	orrs	r3, r2
 800315c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <__NVIC_SetPriorityGrouping+0x40>)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	60d3      	str	r3, [r2, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	05fa0000 	.word	0x05fa0000

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff29 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff3e 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff8e 	bl	8003224 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff31 	bl	8003194 <__NVIC_EnableIRQ>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffa2 	bl	800328c <SysTick_Config>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fc22 	bl	8002ba8 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d008      	beq.n	8003384 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e052      	b.n	800342a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0216 	bic.w	r2, r2, #22
 8003392:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_DMA_Abort+0x62>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0208 	bic.w	r2, r2, #8
 80033c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d4:	e013      	b.n	80033fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d6:	f7ff fbe7 	bl	8002ba8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d90c      	bls.n	80033fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2203      	movs	r2, #3
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e015      	b.n	800342a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e4      	bne.n	80033d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	223f      	movs	r2, #63	; 0x3f
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d004      	beq.n	8003450 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e00c      	b.n	800346a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2205      	movs	r2, #5
 8003454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e175      	b.n	8003784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003498:	2201      	movs	r2, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f040 8164 	bne.w	800377e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d005      	beq.n	80034ce <HAL_GPIO_Init+0x56>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d130      	bne.n	8003530 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003504:	2201      	movs	r2, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 0201 	and.w	r2, r3, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b03      	cmp	r3, #3
 800353a:	d017      	beq.n	800356c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d123      	bne.n	80035c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	08da      	lsrs	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3208      	adds	r2, #8
 8003580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	220f      	movs	r2, #15
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	08da      	lsrs	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	69b9      	ldr	r1, [r7, #24]
 80035bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0203 	and.w	r2, r3, #3
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80be 	beq.w	800377e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_GPIO_Init+0x324>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_GPIO_Init+0x324>)
 8003608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360c:	6453      	str	r3, [r2, #68]	; 0x44
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_GPIO_Init+0x324>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800361a:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_GPIO_Init+0x328>)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3302      	adds	r3, #2
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	220f      	movs	r2, #15
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d037      	beq.n	80036b6 <HAL_GPIO_Init+0x23e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_GPIO_Init+0x330>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_GPIO_Init+0x23a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a56      	ldr	r2, [pc, #344]	; (80037ac <HAL_GPIO_Init+0x334>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02b      	beq.n	80036ae <HAL_GPIO_Init+0x236>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a55      	ldr	r2, [pc, #340]	; (80037b0 <HAL_GPIO_Init+0x338>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d025      	beq.n	80036aa <HAL_GPIO_Init+0x232>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <HAL_GPIO_Init+0x33c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <HAL_GPIO_Init+0x22e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a53      	ldr	r2, [pc, #332]	; (80037b8 <HAL_GPIO_Init+0x340>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d019      	beq.n	80036a2 <HAL_GPIO_Init+0x22a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_GPIO_Init+0x344>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x226>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_GPIO_Init+0x348>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x222>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a50      	ldr	r2, [pc, #320]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x21e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4f      	ldr	r2, [pc, #316]	; (80037c8 <HAL_GPIO_Init+0x350>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x21a>
 800368e:	2309      	movs	r3, #9
 8003690:	e012      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 8003692:	230a      	movs	r3, #10
 8003694:	e010      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 8003696:	2308      	movs	r3, #8
 8003698:	e00e      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 800369a:	2307      	movs	r3, #7
 800369c:	e00c      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 800369e:	2306      	movs	r3, #6
 80036a0:	e00a      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e008      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036a6:	2304      	movs	r3, #4
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e004      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e002      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036b6:	2300      	movs	r3, #0
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f002 0203 	and.w	r2, r2, #3
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	4093      	lsls	r3, r2
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c8:	4935      	ldr	r1, [pc, #212]	; (80037a0 <HAL_GPIO_Init+0x328>)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	3302      	adds	r3, #2
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_GPIO_Init+0x354>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fa:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_GPIO_Init+0x354>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_GPIO_Init+0x354>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_GPIO_Init+0x354>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3301      	adds	r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	f67f ae86 	bls.w	8003498 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40013800 	.word	0x40013800
 80037a4:	40020000 	.word	0x40020000
 80037a8:	40020400 	.word	0x40020400
 80037ac:	40020800 	.word	0x40020800
 80037b0:	40020c00 	.word	0x40020c00
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40021400 	.word	0x40021400
 80037bc:	40021800 	.word	0x40021800
 80037c0:	40021c00 	.word	0x40021c00
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40022400 	.word	0x40022400
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e001      	b.n	80037f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800381c:	e003      	b.n	8003826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	041a      	lsls	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	619a      	str	r2, [r3, #24]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800384a:	4a05      	ldr	r2, [pc, #20]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f806 	bl	8003864 <HAL_GPIO_EXTI_Callback>
  }
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40007000 	.word	0x40007000

0800389c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e291      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8087 	beq.w	80039ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038c0:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038cc:	4b93      	ldr	r3, [pc, #588]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d112      	bne.n	80038fe <HAL_RCC_OscConfig+0x62>
 80038d8:	4b90      	ldr	r3, [pc, #576]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e4:	d10b      	bne.n	80038fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	4b8d      	ldr	r3, [pc, #564]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d06c      	beq.n	80039cc <HAL_RCC_OscConfig+0x130>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d168      	bne.n	80039cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e26b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x7a>
 8003908:	4b84      	ldr	r3, [pc, #528]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a83      	ldr	r2, [pc, #524]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e02e      	b.n	8003974 <HAL_RCC_OscConfig+0xd8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x9c>
 800391e:	4b7f      	ldr	r3, [pc, #508]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a7e      	ldr	r2, [pc, #504]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b7c      	ldr	r3, [pc, #496]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a7b      	ldr	r2, [pc, #492]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xd8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0xc0>
 8003942:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a72      	ldr	r2, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xd8>
 800395c:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6e      	ldr	r2, [pc, #440]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b6c      	ldr	r3, [pc, #432]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a6b      	ldr	r2, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7ff f914 	bl	8002ba8 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7ff f910 	bl	8002ba8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e21f      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b61      	ldr	r3, [pc, #388]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xe8>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7ff f900 	bl	8002ba8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7ff f8fc 	bl	8002ba8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e20b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b57      	ldr	r3, [pc, #348]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x110>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d069      	beq.n	8003aae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039da:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b4d      	ldr	r3, [pc, #308]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x190>
 80039f2:	4b4a      	ldr	r3, [pc, #296]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x17a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1df      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	493d      	ldr	r1, [pc, #244]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e040      	b.n	8003aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a38      	ldr	r2, [pc, #224]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7ff f8b2 	bl	8002ba8 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7ff f8ae 	bl	8002ba8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1bd      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4929      	ldr	r1, [pc, #164]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
 8003a7a:	e018      	b.n	8003aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7ff f88e 	bl	8002ba8 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a90:	f7ff f88a 	bl	8002ba8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e199      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d038      	beq.n	8003b2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d019      	beq.n	8003af6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7ff f86b 	bl	8002ba8 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7ff f867 	bl	8002ba8 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e176      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x23a>
 8003af4:	e01a      	b.n	8003b2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afa:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <HAL_RCC_OscConfig+0x280>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7ff f851 	bl	8002ba8 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0a:	f7ff f84d 	bl	8002ba8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d903      	bls.n	8003b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e15c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
 8003b1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	4b91      	ldr	r3, [pc, #580]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a4 	beq.w	8003c82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3a:	4b8b      	ldr	r3, [pc, #556]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a87      	ldr	r2, [pc, #540]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
 8003b52:	4b85      	ldr	r3, [pc, #532]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b62:	4b82      	ldr	r3, [pc, #520]	; (8003d6c <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b6e:	4b7f      	ldr	r3, [pc, #508]	; (8003d6c <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7e      	ldr	r2, [pc, #504]	; (8003d6c <HAL_RCC_OscConfig+0x4d0>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7ff f815 	bl	8002ba8 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7ff f811 	bl	8002ba8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b64      	cmp	r3, #100	; 0x64
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e120      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b94:	4b75      	ldr	r3, [pc, #468]	; (8003d6c <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x31a>
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb4:	e02d      	b.n	8003c12 <HAL_RCC_OscConfig+0x376>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x33c>
 8003bbe:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a69      	ldr	r2, [pc, #420]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	4b67      	ldr	r3, [pc, #412]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a66      	ldr	r2, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd6:	e01c      	b.n	8003c12 <HAL_RCC_OscConfig+0x376>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x35e>
 8003be0:	4b61      	ldr	r3, [pc, #388]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a60      	ldr	r2, [pc, #384]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a5d      	ldr	r2, [pc, #372]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	e00b      	b.n	8003c12 <HAL_RCC_OscConfig+0x376>
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	4b58      	ldr	r3, [pc, #352]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d015      	beq.n	8003c46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe ffc5 	bl	8002ba8 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fe ffc1 	bl	8002ba8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0ce      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ee      	beq.n	8003c22 <HAL_RCC_OscConfig+0x386>
 8003c44:	e014      	b.n	8003c70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fe ffaf 	bl	8002ba8 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe ffab 	bl	8002ba8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0b8      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ee      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c76:	4b3c      	ldr	r3, [pc, #240]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a3b      	ldr	r2, [pc, #236]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a4 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d06b      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d149      	bne.n	8003d34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a30      	ldr	r2, [pc, #192]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe ff7c 	bl	8002ba8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe ff78 	bl	8002ba8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e087      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe ff4c 	bl	8002ba8 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe ff48 	bl	8002ba8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e057      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x478>
 8003d32:	e04f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe ff32 	bl	8002ba8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe ff2e 	bl	8002ba8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03d      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x4ac>
 8003d66:	e035      	b.n	8003dd4 <HAL_RCC_OscConfig+0x538>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x544>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d121      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0d0      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d910      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 020f 	bic.w	r2, r3, #15
 8003e12:	4965      	ldr	r1, [pc, #404]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b8      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e5c:	4b53      	ldr	r3, [pc, #332]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a52      	ldr	r2, [pc, #328]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e68:	4b50      	ldr	r3, [pc, #320]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	494d      	ldr	r1, [pc, #308]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d040      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d115      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e073      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e06b      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4936      	ldr	r1, [pc, #216]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fe fe66 	bl	8002ba8 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fe fe62 	bl	8002ba8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e053      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d210      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 020f 	bic.w	r2, r3, #15
 8003f1e:	4922      	ldr	r1, [pc, #136]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e032      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4916      	ldr	r1, [pc, #88]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f76:	f000 f821 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	490a      	ldr	r1, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f88:	5ccb      	ldrb	r3, [r1, r3]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8003f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1d4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fdc2 	bl	8002b20 <HAL_InitTick>

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023c00 	.word	0x40023c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	0800ce10 	.word	0x0800ce10
 8003fb4:	20000030 	.word	0x20000030
 8003fb8:	20000034 	.word	0x20000034

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc0:	b094      	sub	sp, #80	; 0x50
 8003fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc8:	2300      	movs	r3, #0
 8003fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fcc:	2300      	movs	r3, #0
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x40>
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	f200 80e1 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fee:	e0db      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff4:	e0db      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ffa:	e0d8      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004004:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004006:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004012:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	2200      	movs	r2, #0
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
 800401c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
 8004026:	2300      	movs	r3, #0
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
 800402a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4621      	mov	r1, r4
 8004048:	1a51      	subs	r1, r2, r1
 800404a:	6139      	str	r1, [r7, #16]
 800404c:	4629      	mov	r1, r5
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004060:	4659      	mov	r1, fp
 8004062:	018b      	lsls	r3, r1, #6
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406a:	4651      	mov	r1, sl
 800406c:	018a      	lsls	r2, r1, #6
 800406e:	4651      	mov	r1, sl
 8004070:	ebb2 0801 	subs.w	r8, r2, r1
 8004074:	4659      	mov	r1, fp
 8004076:	eb63 0901 	sbc.w	r9, r3, r1
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408e:	4690      	mov	r8, r2
 8004090:	4699      	mov	r9, r3
 8004092:	4623      	mov	r3, r4
 8004094:	eb18 0303 	adds.w	r3, r8, r3
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	462b      	mov	r3, r5
 800409c:	eb49 0303 	adc.w	r3, r9, r3
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ae:	4629      	mov	r1, r5
 80040b0:	024b      	lsls	r3, r1, #9
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b8:	4621      	mov	r1, r4
 80040ba:	024a      	lsls	r2, r1, #9
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040cc:	f7fc fdfc 	bl	8000cc8 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	e058      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b38      	ldr	r3, [pc, #224]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	2200      	movs	r2, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	4611      	mov	r1, r2
 80040e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	0159      	lsls	r1, r3, #5
 8004102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004106:	0150      	lsls	r0, r2, #5
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4641      	mov	r1, r8
 800410e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb63 0b01 	sbc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800412c:	ebb2 040a 	subs.w	r4, r2, sl
 8004130:	eb63 050b 	sbc.w	r5, r3, fp
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	00eb      	lsls	r3, r5, #3
 800413e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004142:	00e2      	lsls	r2, r4, #3
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	4643      	mov	r3, r8
 800414a:	18e3      	adds	r3, r4, r3
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	464b      	mov	r3, r9
 8004150:	eb45 0303 	adc.w	r3, r5, r3
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800416c:	4621      	mov	r1, r4
 800416e:	028a      	lsls	r2, r1, #10
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	61fa      	str	r2, [r7, #28]
 800417c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004180:	f7fc fda2 	bl	8000cc8 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800419c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3750      	adds	r7, #80	; 0x50
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000030 	.word	0x20000030

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	0800ce20 	.word	0x0800ce20

08004208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800420c:	f7ff ffdc 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0b5b      	lsrs	r3, r3, #13
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCC_GetPCLK2Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	0800ce20 	.word	0x0800ce20

08004230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004258:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a68      	ldr	r2, [pc, #416]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	4964      	ldr	r1, [pc, #400]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800428a:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	4959      	ldr	r1, [pc, #356]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	494a      	ldr	r1, [pc, #296]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 808b 	beq.w	800442a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4a39      	ldr	r2, [pc, #228]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	; 0x40
 8004320:	4b37      	ldr	r3, [pc, #220]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fe fc36 	bl	8002ba8 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004340:	f7fe fc32 	bl	8002ba8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e357      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004366:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d035      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d02e      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d114      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe fbfa 	bl	8002ba8 <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fe fbf6 	bl	8002ba8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e319      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ee      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d111      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	4901      	ldr	r1, [pc, #4]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
 80043fe:	e00b      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004400:	40023800 	.word	0x40023800
 8004404:	40007000 	.word	0x40007000
 8004408:	0ffffcff 	.word	0x0ffffcff
 800440c:	4baa      	ldr	r3, [pc, #680]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4aa9      	ldr	r2, [pc, #676]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	4ba7      	ldr	r3, [pc, #668]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	49a4      	ldr	r1, [pc, #656]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	4313      	orrs	r3, r2
 8004428:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004436:	4ba0      	ldr	r3, [pc, #640]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	4a9e      	ldr	r2, [pc, #632]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004446:	4b9c      	ldr	r3, [pc, #624]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4999      	ldr	r1, [pc, #612]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004464:	4b94      	ldr	r3, [pc, #592]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004472:	4991      	ldr	r1, [pc, #580]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004486:	4b8c      	ldr	r3, [pc, #560]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004494:	4988      	ldr	r1, [pc, #544]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044a8:	4b83      	ldr	r3, [pc, #524]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b6:	4980      	ldr	r1, [pc, #512]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4977      	ldr	r1, [pc, #476]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ec:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	496f      	ldr	r1, [pc, #444]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f023 020c 	bic.w	r2, r3, #12
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	4966      	ldr	r1, [pc, #408]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	495e      	ldr	r1, [pc, #376]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004552:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	4955      	ldr	r1, [pc, #340]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	494d      	ldr	r1, [pc, #308]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004596:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	4944      	ldr	r1, [pc, #272]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045b8:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	493c      	ldr	r1, [pc, #240]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	4933      	ldr	r1, [pc, #204]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045fc:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460a:	492b      	ldr	r1, [pc, #172]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462c:	4922      	ldr	r1, [pc, #136]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	4912      	ldr	r1, [pc, #72]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004690:	4909      	ldr	r1, [pc, #36]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d006      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80d9 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a01      	ldr	r2, [pc, #4]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b6:	e001      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80046b8:	40023800 	.word	0x40023800
 80046bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046be:	f7fe fa73 	bl	8002ba8 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fe fa6f 	bl	8002ba8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	; 0x64
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e194      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d8:	4b6c      	ldr	r3, [pc, #432]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f8:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	0e1b      	lsrs	r3, r3, #24
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	019a      	lsls	r2, r3, #6
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	071b      	lsls	r3, r3, #28
 800472c:	4957      	ldr	r1, [pc, #348]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02e      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d129      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004760:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800476e:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004774:	0f1b      	lsrs	r3, r3, #28
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	019a      	lsls	r2, r3, #6
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	493d      	ldr	r1, [pc, #244]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f023 021f 	bic.w	r2, r3, #31
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4937      	ldr	r1, [pc, #220]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047c0:	4b32      	ldr	r3, [pc, #200]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ce:	4b2f      	ldr	r3, [pc, #188]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	0f1b      	lsrs	r3, r3, #28
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	019a      	lsls	r2, r3, #6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	071b      	lsls	r3, r3, #28
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	019a      	lsls	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4919      	ldr	r1, [pc, #100]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800482c:	4b17      	ldr	r3, [pc, #92]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fe f9b6 	bl	8002ba8 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004840:	f7fe f9b2 	bl	8002ba8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0d7      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 80cd 	bne.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fe f999 	bl	8002ba8 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800487a:	f7fe f995 	bl	8002ba8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d903      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0ba      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800488c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004890:	4b5e      	ldr	r3, [pc, #376]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800489c:	d0ed      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d12a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048c6:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d4:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	0f1b      	lsrs	r3, r3, #28
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	4944      	ldr	r1, [pc, #272]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004902:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004908:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	493d      	ldr	r1, [pc, #244]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004930:	d11d      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	0e1b      	lsrs	r3, r3, #24
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	0f1b      	lsrs	r3, r3, #28
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	019a      	lsls	r2, r3, #6
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	071b      	lsls	r3, r3, #28
 8004966:	4929      	ldr	r1, [pc, #164]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d028      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	019a      	lsls	r2, r3, #6
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	4917      	ldr	r1, [pc, #92]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4911      	ldr	r1, [pc, #68]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fe f8e6 	bl	8002ba8 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049e0:	f7fe f8e2 	bl	8002ba8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e007      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fe:	d1ef      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e049      	b.n	8004ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd feba 	bl	80027b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f001 f828 	bl	8005aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e04c      	b.n	8004b72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_TIM_Base_Start+0xc0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d01d      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_TIM_Base_Start+0xc4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <HAL_TIM_Base_Start+0xc8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <HAL_TIM_Base_Start+0xcc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_TIM_Base_Start+0xd0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_TIM_Base_Start+0xd4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIM_Base_Start+0x70>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <HAL_TIM_Base_Start+0xd8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d115      	bne.n	8004b5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <HAL_TIM_Base_Start+0xdc>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d015      	beq.n	8004b6e <HAL_TIM_Base_Start+0xae>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d011      	beq.n	8004b6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	e008      	b.n	8004b6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40001800 	.word	0x40001800
 8004b9c:	00010007 	.word	0x00010007

08004ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d001      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e054      	b.n	8004c62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d022      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d01d      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x80>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d115      	bne.n	8004c4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_TIM_Base_Start_IT+0xec>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d015      	beq.n	8004c5e <HAL_TIM_Base_Start_IT+0xbe>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d011      	beq.n	8004c5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	e008      	b.n	8004c5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e000      	b.n	8004c60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40001800 	.word	0x40001800
 8004c8c:	00010007 	.word	0x00010007

08004c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e049      	b.n	8004d36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f841 	bl	8004d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fee8 	bl	8005aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_TIM_PWM_Start+0x24>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e03c      	b.n	8004df2 <HAL_TIM_PWM_Start+0x9e>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d109      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x3e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e02f      	b.n	8004df2 <HAL_TIM_PWM_Start+0x9e>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start+0x58>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e022      	b.n	8004df2 <HAL_TIM_PWM_Start+0x9e>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b0c      	cmp	r3, #12
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0x72>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e015      	b.n	8004df2 <HAL_TIM_PWM_Start+0x9e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d109      	bne.n	8004de0 <HAL_TIM_PWM_Start+0x8c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_PWM_Start+0x9e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e092      	b.n	8004f20 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0xb6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	e023      	b.n	8004e52 <HAL_TIM_PWM_Start+0xfe>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xc6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e18:	e01b      	b.n	8004e52 <HAL_TIM_PWM_Start+0xfe>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0xd6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e28:	e013      	b.n	8004e52 <HAL_TIM_PWM_Start+0xfe>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xe6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e38:	e00b      	b.n	8004e52 <HAL_TIM_PWM_Start+0xfe>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xf6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e48:	e003      	b.n	8004e52 <HAL_TIM_PWM_Start+0xfe>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fae4 	bl	8006428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a30      	ldr	r2, [pc, #192]	; (8004f28 <HAL_TIM_PWM_Start+0x1d4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x120>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2f      	ldr	r2, [pc, #188]	; (8004f2c <HAL_TIM_PWM_Start+0x1d8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d101      	bne.n	8004e78 <HAL_TIM_PWM_Start+0x124>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_TIM_PWM_Start+0x126>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a25      	ldr	r2, [pc, #148]	; (8004f28 <HAL_TIM_PWM_Start+0x1d4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea0:	d01d      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <HAL_TIM_PWM_Start+0x1dc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <HAL_TIM_PWM_Start+0x1e0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_TIM_PWM_Start+0x1e4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_TIM_PWM_Start+0x1d8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_TIM_PWM_Start+0x1e8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIM_PWM_Start+0x18a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_PWM_Start+0x1ec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d115      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <HAL_TIM_PWM_Start+0x1f0>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b06      	cmp	r3, #6
 8004eee:	d015      	beq.n	8004f1c <HAL_TIM_PWM_Start+0x1c8>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef6:	d011      	beq.n	8004f1c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	e008      	b.n	8004f1c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e000      	b.n	8004f1e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40001800 	.word	0x40001800
 8004f44:	00010007 	.word	0x00010007

08004f48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f841 	bl	8004ff6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fd8c 	bl	8005aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_TIM_IC_Start_IT+0x1e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005026:	b2db      	uxtb	r3, r3
 8005028:	e023      	b.n	8005072 <HAL_TIM_IC_Start_IT+0x66>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d104      	bne.n	800503a <HAL_TIM_IC_Start_IT+0x2e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e01b      	b.n	8005072 <HAL_TIM_IC_Start_IT+0x66>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0x3e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e013      	b.n	8005072 <HAL_TIM_IC_Start_IT+0x66>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b0c      	cmp	r3, #12
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0x4e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e00b      	b.n	8005072 <HAL_TIM_IC_Start_IT+0x66>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b10      	cmp	r3, #16
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0x5e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e003      	b.n	8005072 <HAL_TIM_IC_Start_IT+0x66>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005070:	b2db      	uxtb	r3, r3
 8005072:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <HAL_TIM_IC_Start_IT+0x78>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e013      	b.n	80050ac <HAL_TIM_IC_Start_IT+0xa0>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b04      	cmp	r3, #4
 8005088:	d104      	bne.n	8005094 <HAL_TIM_IC_Start_IT+0x88>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e00b      	b.n	80050ac <HAL_TIM_IC_Start_IT+0xa0>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d104      	bne.n	80050a4 <HAL_TIM_IC_Start_IT+0x98>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e003      	b.n	80050ac <HAL_TIM_IC_Start_IT+0xa0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b4:	7b7b      	ldrb	r3, [r7, #13]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0e2      	b.n	8005284 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_IC_Start_IT+0xc2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	e023      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x10a>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start_IT+0xd2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	e01b      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x10a>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0xe2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	e013      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x10a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0xf2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050fc:	e00b      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x10a>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b10      	cmp	r3, #16
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0x102>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800510c:	e003      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x10a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_TIM_IC_Start_IT+0x11a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005124:	e013      	b.n	800514e <HAL_TIM_IC_Start_IT+0x142>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d104      	bne.n	8005136 <HAL_TIM_IC_Start_IT+0x12a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005134:	e00b      	b.n	800514e <HAL_TIM_IC_Start_IT+0x142>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0x13a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005144:	e003      	b.n	800514e <HAL_TIM_IC_Start_IT+0x142>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d841      	bhi.n	80051d8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_TIM_IC_Start_IT+0x150>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005191 	.word	0x08005191
 8005160:	080051d9 	.word	0x080051d9
 8005164:	080051d9 	.word	0x080051d9
 8005168:	080051d9 	.word	0x080051d9
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051d9 	.word	0x080051d9
 8005174:	080051d9 	.word	0x080051d9
 8005178:	080051d9 	.word	0x080051d9
 800517c:	080051b5 	.word	0x080051b5
 8005180:	080051d9 	.word	0x080051d9
 8005184:	080051d9 	.word	0x080051d9
 8005188:	080051d9 	.word	0x080051d9
 800518c:	080051c7 	.word	0x080051c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0202 	orr.w	r2, r2, #2
 800519e:	60da      	str	r2, [r3, #12]
      break;
 80051a0:	e01d      	b.n	80051de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0204 	orr.w	r2, r2, #4
 80051b0:	60da      	str	r2, [r3, #12]
      break;
 80051b2:	e014      	b.n	80051de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	60da      	str	r2, [r3, #12]
      break;
 80051c4:	e00b      	b.n	80051de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0210 	orr.w	r2, r2, #16
 80051d4:	60da      	str	r2, [r3, #12]
      break;
 80051d6:	e002      	b.n	80051de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      break;
 80051dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d14e      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 f91b 	bl	8006428 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a25      	ldr	r2, [pc, #148]	; (800528c <HAL_TIM_IC_Start_IT+0x280>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d022      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d01d      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_TIM_IC_Start_IT+0x284>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_TIM_IC_Start_IT+0x288>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <HAL_TIM_IC_Start_IT+0x28c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_TIM_IC_Start_IT+0x290>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_TIM_IC_Start_IT+0x294>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIM_IC_Start_IT+0x236>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_TIM_IC_Start_IT+0x298>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d115      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_TIM_IC_Start_IT+0x29c>)
 800524a:	4013      	ands	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b06      	cmp	r3, #6
 8005252:	d015      	beq.n	8005280 <HAL_TIM_IC_Start_IT+0x274>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d011      	beq.n	8005280 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	e008      	b.n	8005280 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e000      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800
 80052a8:	00010007 	.word	0x00010007

080052ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d122      	bne.n	8005308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d11b      	bne.n	8005308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0202 	mvn.w	r2, #2
 80052d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc fbf4 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fbb6 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fbbd 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d122      	bne.n	800535c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b04      	cmp	r3, #4
 8005322:	d11b      	bne.n	800535c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0204 	mvn.w	r2, #4
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fbca 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fb8c 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb93 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b08      	cmp	r3, #8
 8005368:	d122      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b08      	cmp	r3, #8
 8005376:	d11b      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0208 	mvn.w	r2, #8
 8005380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2204      	movs	r2, #4
 8005386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fba0 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fb62 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fb69 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d122      	bne.n	8005404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d11b      	bne.n	8005404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0210 	mvn.w	r2, #16
 80053d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2208      	movs	r2, #8
 80053da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc fb76 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fb38 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb3f 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d10e      	bne.n	8005430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d107      	bne.n	8005430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0201 	mvn.w	r2, #1
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fc fbcc 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d10e      	bne.n	800545c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d107      	bne.n	800545c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 f8a4 	bl	80065a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546a:	d10e      	bne.n	800548a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d107      	bne.n	800548a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 f897 	bl	80065b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d10e      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d107      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 faed 	bl	8005a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d10e      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d107      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f06f 0220 	mvn.w	r2, #32
 80054da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f857 	bl	8006590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b086      	sub	sp, #24
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005504:	2302      	movs	r3, #2
 8005506:	e088      	b.n	800561a <HAL_TIM_IC_ConfigChannel+0x130>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d11b      	bne.n	800554e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f000 fdbb 	bl	80060a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 020c 	bic.w	r2, r2, #12
 8005538:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6999      	ldr	r1, [r3, #24]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	619a      	str	r2, [r3, #24]
 800554c:	e060      	b.n	8005610 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b04      	cmp	r3, #4
 8005552:	d11c      	bne.n	800558e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 fe3f 	bl	80061e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005576:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
 800558c:	e040      	b.n	8005610 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b08      	cmp	r3, #8
 8005592:	d11b      	bne.n	80055cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f000 fe8c 	bl	80062c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69da      	ldr	r2, [r3, #28]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 020c 	bic.w	r2, r2, #12
 80055b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69d9      	ldr	r1, [r3, #28]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	61da      	str	r2, [r3, #28]
 80055ca:	e021      	b.n	8005610 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d11c      	bne.n	800560c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f000 fea9 	bl	8006338 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	021a      	lsls	r2, r3, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	61da      	str	r2, [r3, #28]
 800560a:	e001      	b.n	8005610 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ff      	b.n	8005842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b14      	cmp	r3, #20
 800564e:	f200 80f0 	bhi.w	8005832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	080056ad 	.word	0x080056ad
 800565c:	08005833 	.word	0x08005833
 8005660:	08005833 	.word	0x08005833
 8005664:	08005833 	.word	0x08005833
 8005668:	080056ed 	.word	0x080056ed
 800566c:	08005833 	.word	0x08005833
 8005670:	08005833 	.word	0x08005833
 8005674:	08005833 	.word	0x08005833
 8005678:	0800572f 	.word	0x0800572f
 800567c:	08005833 	.word	0x08005833
 8005680:	08005833 	.word	0x08005833
 8005684:	08005833 	.word	0x08005833
 8005688:	0800576f 	.word	0x0800576f
 800568c:	08005833 	.word	0x08005833
 8005690:	08005833 	.word	0x08005833
 8005694:	08005833 	.word	0x08005833
 8005698:	080057b1 	.word	0x080057b1
 800569c:	08005833 	.word	0x08005833
 80056a0:	08005833 	.word	0x08005833
 80056a4:	08005833 	.word	0x08005833
 80056a8:	080057f1 	.word	0x080057f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fa96 	bl	8005be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e0a5      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fae8 	bl	8005cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
      break;
 800572c:	e084      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fb3f 	bl	8005db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0208 	orr.w	r2, r2, #8
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0204 	bic.w	r2, r2, #4
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
      break;
 800576c:	e064      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb95 	bl	8005ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	021a      	lsls	r2, r3, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e043      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fbcc 	bl	8005f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0208 	orr.w	r2, r2, #8
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ee:	e023      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fbfe 	bl	8005ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005830:	e002      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	75fb      	strb	r3, [r7, #23]
      break;
 8005836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop

0800584c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x1c>
 8005864:	2302      	movs	r3, #2
 8005866:	e0b4      	b.n	80059d2 <HAL_TIM_ConfigClockSource+0x186>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	4b56      	ldr	r3, [pc, #344]	; (80059dc <HAL_TIM_ConfigClockSource+0x190>)
 8005884:	4013      	ands	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a0:	d03e      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0xd4>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a6:	f200 8087 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ae:	f000 8086 	beq.w	80059be <HAL_TIM_ConfigClockSource+0x172>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b6:	d87f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b70      	cmp	r3, #112	; 0x70
 80058ba:	d01a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xa6>
 80058bc:	2b70      	cmp	r3, #112	; 0x70
 80058be:	d87b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b60      	cmp	r3, #96	; 0x60
 80058c2:	d050      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x11a>
 80058c4:	2b60      	cmp	r3, #96	; 0x60
 80058c6:	d877      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b50      	cmp	r3, #80	; 0x50
 80058ca:	d03c      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0xfa>
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d873      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d058      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x13a>
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d86f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d064      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d86b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d060      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d867      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d05a      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	e062      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f000 fd71 	bl	80063e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	609a      	str	r2, [r3, #8]
      break;
 800591e:	e04f      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6899      	ldr	r1, [r3, #8]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f000 fd5a 	bl	80063e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005942:	609a      	str	r2, [r3, #8]
      break;
 8005944:	e03c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fc18 	bl	8006188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2150      	movs	r1, #80	; 0x50
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fd27 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 8005964:	e02c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	461a      	mov	r2, r3
 8005974:	f000 fc74 	bl	8006260 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2160      	movs	r1, #96	; 0x60
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fd17 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 8005984:	e01c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	461a      	mov	r2, r3
 8005994:	f000 fbf8 	bl	8006188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2140      	movs	r1, #64	; 0x40
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd07 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 80059a4:	e00c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 fcfe 	bl	80063b2 <TIM_ITRx_SetConfig>
      break;
 80059b6:	e003      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e000      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	fffeff88 	.word	0xfffeff88

080059e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d831      	bhi.n	8005a58 <HAL_TIM_ReadCapturedValue+0x78>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	08005a59 	.word	0x08005a59
 8005a08:	08005a59 	.word	0x08005a59
 8005a0c:	08005a3b 	.word	0x08005a3b
 8005a10:	08005a59 	.word	0x08005a59
 8005a14:	08005a59 	.word	0x08005a59
 8005a18:	08005a59 	.word	0x08005a59
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a59 	.word	0x08005a59
 8005a24:	08005a59 	.word	0x08005a59
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005a4f 	.word	0x08005a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	60fb      	str	r3, [r7, #12]

      break;
 8005a38:	e00f      	b.n	8005a5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	60fb      	str	r3, [r7, #12]

      break;
 8005a42:	e00a      	b.n	8005a5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	60fb      	str	r3, [r7, #12]

      break;
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	60fb      	str	r3, [r7, #12]

      break;
 8005a56:	e000      	b.n	8005a5a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a58:	bf00      	nop
  }

  return tmpreg;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a40      	ldr	r2, [pc, #256]	; (8005bb8 <TIM_Base_SetConfig+0x114>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3d      	ldr	r2, [pc, #244]	; (8005bbc <TIM_Base_SetConfig+0x118>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3c      	ldr	r2, [pc, #240]	; (8005bc0 <TIM_Base_SetConfig+0x11c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a3b      	ldr	r2, [pc, #236]	; (8005bc4 <TIM_Base_SetConfig+0x120>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a3a      	ldr	r2, [pc, #232]	; (8005bc8 <TIM_Base_SetConfig+0x124>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d108      	bne.n	8005af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2f      	ldr	r2, [pc, #188]	; (8005bb8 <TIM_Base_SetConfig+0x114>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02b      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d027      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <TIM_Base_SetConfig+0x118>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d023      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <TIM_Base_SetConfig+0x11c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01f      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <TIM_Base_SetConfig+0x120>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01b      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <TIM_Base_SetConfig+0x124>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d017      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <TIM_Base_SetConfig+0x128>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a27      	ldr	r2, [pc, #156]	; (8005bd0 <TIM_Base_SetConfig+0x12c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <TIM_Base_SetConfig+0x130>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a25      	ldr	r2, [pc, #148]	; (8005bd8 <TIM_Base_SetConfig+0x134>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a24      	ldr	r2, [pc, #144]	; (8005bdc <TIM_Base_SetConfig+0x138>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <TIM_Base_SetConfig+0x13c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <TIM_Base_SetConfig+0x114>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0xf8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <TIM_Base_SetConfig+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d103      	bne.n	8005ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	615a      	str	r2, [r3, #20]
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800
 8005bd8:	40001800 	.word	0x40001800
 8005bdc:	40001c00 	.word	0x40001c00
 8005be0:	40002000 	.word	0x40002000

08005be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <TIM_OC1_SetConfig+0xd8>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0302 	bic.w	r3, r3, #2
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <TIM_OC1_SetConfig+0xdc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC1_SetConfig+0x64>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <TIM_OC1_SetConfig+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10c      	bne.n	8005c62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0308 	bic.w	r3, r3, #8
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 0304 	bic.w	r3, r3, #4
 8005c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <TIM_OC1_SetConfig+0xdc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_OC1_SetConfig+0x8e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <TIM_OC1_SetConfig+0xe0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d111      	bne.n	8005c96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	621a      	str	r2, [r3, #32]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	fffeff8f 	.word	0xfffeff8f
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40010400 	.word	0x40010400

08005cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <TIM_OC2_SetConfig+0xe4>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a23      	ldr	r2, [pc, #140]	; (8005db0 <TIM_OC2_SetConfig+0xe8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_OC2_SetConfig+0x68>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a22      	ldr	r2, [pc, #136]	; (8005db4 <TIM_OC2_SetConfig+0xec>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10d      	bne.n	8005d4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <TIM_OC2_SetConfig+0xe8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_OC2_SetConfig+0x94>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <TIM_OC2_SetConfig+0xec>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d113      	bne.n	8005d84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	feff8fff 	.word	0xfeff8fff
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40010400 	.word	0x40010400

08005db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <TIM_OC3_SetConfig+0xe0>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <TIM_OC3_SetConfig+0xe4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_OC3_SetConfig+0x66>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a21      	ldr	r2, [pc, #132]	; (8005ea0 <TIM_OC3_SetConfig+0xe8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10d      	bne.n	8005e3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <TIM_OC3_SetConfig+0xe4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC3_SetConfig+0x92>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <TIM_OC3_SetConfig+0xe8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d113      	bne.n	8005e72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	621a      	str	r2, [r3, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	fffeff8f 	.word	0xfffeff8f
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40010400 	.word	0x40010400

08005ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <TIM_OC4_SetConfig+0xa4>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	031b      	lsls	r3, r3, #12
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <TIM_OC4_SetConfig+0xa8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC4_SetConfig+0x68>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a12      	ldr	r2, [pc, #72]	; (8005f50 <TIM_OC4_SetConfig+0xac>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d109      	bne.n	8005f20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	feff8fff 	.word	0xfeff8fff
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400

08005f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <TIM_OC5_SetConfig+0x98>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <TIM_OC5_SetConfig+0x9c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x5e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a11      	ldr	r2, [pc, #68]	; (8005ff4 <TIM_OC5_SetConfig+0xa0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d109      	bne.n	8005fc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	621a      	str	r2, [r3, #32]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	fffeff8f 	.word	0xfffeff8f
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40010400 	.word	0x40010400

08005ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <TIM_OC6_SetConfig+0x9c>)
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800603a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	051b      	lsls	r3, r3, #20
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a13      	ldr	r2, [pc, #76]	; (8006098 <TIM_OC6_SetConfig+0xa0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC6_SetConfig+0x60>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a12      	ldr	r2, [pc, #72]	; (800609c <TIM_OC6_SetConfig+0xa4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d109      	bne.n	800606c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	feff8fff 	.word	0xfeff8fff
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0201 	bic.w	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a28      	ldr	r2, [pc, #160]	; (800616c <TIM_TI1_SetConfig+0xcc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01b      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d017      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <TIM_TI1_SetConfig+0xd0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <TIM_TI1_SetConfig+0xd4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00f      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a23      	ldr	r2, [pc, #140]	; (8006178 <TIM_TI1_SetConfig+0xd8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00b      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <TIM_TI1_SetConfig+0xdc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d007      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a21      	ldr	r2, [pc, #132]	; (8006180 <TIM_TI1_SetConfig+0xe0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_TI1_SetConfig+0x66>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a20      	ldr	r2, [pc, #128]	; (8006184 <TIM_TI1_SetConfig+0xe4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <TIM_TI1_SetConfig+0x6a>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <TIM_TI1_SetConfig+0x6c>
 800610a:	2300      	movs	r3, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e003      	b.n	800612a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	b2db      	uxtb	r3, r3
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f023 030a 	bic.w	r3, r3, #10
 8006144:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 030a 	and.w	r3, r3, #10
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40010000 	.word	0x40010000
 8006170:	40000400 	.word	0x40000400
 8006174:	40000800 	.word	0x40000800
 8006178:	40000c00 	.word	0x40000c00
 800617c:	40010400 	.word	0x40010400
 8006180:	40014000 	.word	0x40014000
 8006184:	40001800 	.word	0x40001800

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f023 0210 	bic.w	r2, r3, #16
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006212:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	031b      	lsls	r3, r3, #12
 800622a:	b29b      	uxth	r3, r3
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006238:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f023 0210 	bic.w	r2, r3, #16
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800628a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	031b      	lsls	r3, r3, #12
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800629c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	b2db      	uxtb	r3, r3
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006310:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	621a      	str	r2, [r3, #32]
}
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006364:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006376:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	031b      	lsls	r3, r3, #12
 800637c:	b29b      	uxth	r3, r3
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800638a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	031b      	lsls	r3, r3, #12
 8006390:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f043 0307 	orr.w	r3, r3, #7
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	431a      	orrs	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	2201      	movs	r2, #1
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1a      	ldr	r2, [r3, #32]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	43db      	mvns	r3, r3
 800644a:	401a      	ands	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	fa01 f303 	lsl.w	r3, r1, r3
 8006460:	431a      	orrs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e06d      	b.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a30      	ldr	r2, [pc, #192]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d108      	bne.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a20      	ldr	r2, [pc, #128]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d022      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d01d      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d018      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00e      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d009      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a15      	ldr	r2, [pc, #84]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d10c      	bne.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	4313      	orrs	r3, r2
 800654c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40010000 	.word	0x40010000
 8006578:	40010400 	.word	0x40010400
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40014000 	.word	0x40014000
 800658c:	40001800 	.word	0x40001800

08006590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e040      	b.n	8006660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fc f9f8 	bl	80029e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	; 0x24
 80065f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0201 	bic.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fbe6 	bl	8006ddc <UART_SetConfig>
 8006610:	4603      	mov	r3, r0
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e022      	b.n	8006660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fe3e 	bl	80072a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fec5 	bl	80073e8 <UART_CheckIdleState>
 800665e:	4603      	mov	r3, r0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667c:	2b20      	cmp	r3, #32
 800667e:	d171      	bne.n	8006764 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_UART_Transmit+0x24>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e06a      	b.n	8006766 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2221      	movs	r2, #33	; 0x21
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669e:	f7fc fa83 	bl	8002ba8 <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066bc:	d108      	bne.n	80066d0 <HAL_UART_Transmit+0x68>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	e003      	b.n	80066d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d8:	e02c      	b.n	8006734 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 feb6 	bl	8007456 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e038      	b.n	8006766 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3302      	adds	r3, #2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e007      	b.n	8006722 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1cc      	bne.n	80066da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fe83 	bl	8007456 <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e005      	b.n	8006766 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e000      	b.n	8006766 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b08a      	sub	sp, #40	; 0x28
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	4613      	mov	r3, r2
 800677a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006782:	2b20      	cmp	r3, #32
 8006784:	d132      	bne.n	80067ec <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_UART_Receive_IT+0x24>
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e02b      	b.n	80067ee <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d018      	beq.n	80067dc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69f9      	ldr	r1, [r7, #28]
 80067ce:	6a3a      	ldr	r2, [r7, #32]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	461a      	mov	r2, r3
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fefe 	bl	80075e4 <UART_Start_Receive_IT>
 80067e8:	4603      	mov	r3, r0
 80067ea:	e000      	b.n	80067ee <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3728      	adds	r7, #40	; 0x28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b0ba      	sub	sp, #232	; 0xe8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800681e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006822:	f640 030f 	movw	r3, #2063	; 0x80f
 8006826:	4013      	ands	r3, r2
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800682c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d115      	bne.n	8006860 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00f      	beq.n	8006860 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8297 	beq.w	8006d84 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      }
      return;
 800685e:	e291      	b.n	8006d84 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8117 	beq.w	8006a98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006876:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800687a:	4b85      	ldr	r3, [pc, #532]	; (8006a90 <HAL_UART_IRQHandler+0x298>)
 800687c:	4013      	ands	r3, r2
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 810a 	beq.w	8006a98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d011      	beq.n	80068b4 <HAL_UART_IRQHandler+0xbc>
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2201      	movs	r2, #1
 80068a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068aa:	f043 0201 	orr.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d011      	beq.n	80068e4 <HAL_UART_IRQHandler+0xec>
 80068c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2202      	movs	r2, #2
 80068d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068da:	f043 0204 	orr.w	r2, r3, #4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d011      	beq.n	8006914 <HAL_UART_IRQHandler+0x11c>
 80068f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2204      	movs	r2, #4
 8006902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800690a:	f043 0202 	orr.w	r2, r3, #2
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d017      	beq.n	8006950 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d105      	bne.n	8006938 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006930:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2208      	movs	r2, #8
 800693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006946:	f043 0208 	orr.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006958:	2b00      	cmp	r3, #0
 800695a:	d012      	beq.n	8006982 <HAL_UART_IRQHandler+0x18a>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006978:	f043 0220 	orr.w	r2, r3, #32
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 81fd 	beq.w	8006d88 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800699a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d005      	beq.n	80069da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d04f      	beq.n	8006a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fec8 	bl	8007770 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	d141      	bne.n	8006a72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1d9      	bne.n	80069ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d013      	beq.n	8006a6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <HAL_UART_IRQHandler+0x29c>)
 8006a48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fc fcef 	bl	8003432 <HAL_DMA_Abort_IT>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d017      	beq.n	8006a8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	e00f      	b.n	8006a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9a0 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	e00b      	b.n	8006a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f99c 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	e007      	b.n	8006a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f998 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006a88:	e17e      	b.n	8006d88 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8a:	bf00      	nop
    return;
 8006a8c:	e17c      	b.n	8006d88 <HAL_UART_IRQHandler+0x590>
 8006a8e:	bf00      	nop
 8006a90:	04000120 	.word	0x04000120
 8006a94:	08007839 	.word	0x08007839

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	f040 814c 	bne.w	8006d3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8145 	beq.w	8006d3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 813e 	beq.w	8006d3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	f040 80b6 	bne.w	8006c42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8150 	beq.w	8006d8c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006af6:	429a      	cmp	r2, r3
 8006af8:	f080 8148 	bcs.w	8006d8c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b10:	f000 8086 	beq.w	8006c20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1da      	bne.n	8006b14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e1      	bne.n	8006b5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e3      	bne.n	8006b9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf0:	f023 0310 	bic.w	r3, r3, #16
 8006bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e4      	bne.n	8006be0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fc fb99 	bl	8003352 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8c2 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c40:	e0a4      	b.n	8006d8c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8096 	beq.w	8006d90 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8091 	beq.w	8006d90 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c90:	647b      	str	r3, [r7, #68]	; 0x44
 8006c92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e4      	bne.n	8006c6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cc8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e3      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0310 	bic.w	r3, r3, #16
 8006d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	69b9      	ldr	r1, [r7, #24]
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e4      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f846 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d38:	e02a      	b.n	8006d90 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01c      	beq.n	8006d94 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
    }
    return;
 8006d62:	e017      	b.n	8006d94 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d012      	beq.n	8006d96 <HAL_UART_IRQHandler+0x59e>
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fd71 	bl	8007864 <UART_EndTransmit_IT>
    return;
 8006d82:	e008      	b.n	8006d96 <HAL_UART_IRQHandler+0x59e>
      return;
 8006d84:	bf00      	nop
 8006d86:	e006      	b.n	8006d96 <HAL_UART_IRQHandler+0x59e>
    return;
 8006d88:	bf00      	nop
 8006d8a:	e004      	b.n	8006d96 <HAL_UART_IRQHandler+0x59e>
      return;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_UART_IRQHandler+0x59e>
      return;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_UART_IRQHandler+0x59e>
    return;
 8006d94:	bf00      	nop
  }

}
 8006d96:	37e8      	adds	r7, #232	; 0xe8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4ba6      	ldr	r3, [pc, #664]	; (80070a0 <UART_SetConfig+0x2c4>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a94      	ldr	r2, [pc, #592]	; (80070a4 <UART_SetConfig+0x2c8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d120      	bne.n	8006e9a <UART_SetConfig+0xbe>
 8006e58:	4b93      	ldr	r3, [pc, #588]	; (80070a8 <UART_SetConfig+0x2cc>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d816      	bhi.n	8006e94 <UART_SetConfig+0xb8>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x90>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e89 	.word	0x08006e89
 8006e74:	08006e83 	.word	0x08006e83
 8006e78:	08006e8f 	.word	0x08006e8f
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e150      	b.n	8007124 <UART_SetConfig+0x348>
 8006e82:	2302      	movs	r3, #2
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e14d      	b.n	8007124 <UART_SetConfig+0x348>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e14a      	b.n	8007124 <UART_SetConfig+0x348>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e147      	b.n	8007124 <UART_SetConfig+0x348>
 8006e94:	2310      	movs	r3, #16
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e144      	b.n	8007124 <UART_SetConfig+0x348>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a83      	ldr	r2, [pc, #524]	; (80070ac <UART_SetConfig+0x2d0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d132      	bne.n	8006f0a <UART_SetConfig+0x12e>
 8006ea4:	4b80      	ldr	r3, [pc, #512]	; (80070a8 <UART_SetConfig+0x2cc>)
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b0c      	cmp	r3, #12
 8006eb0:	d828      	bhi.n	8006f04 <UART_SetConfig+0x128>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0xdc>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f05 	.word	0x08006f05
 8006ec0:	08006f05 	.word	0x08006f05
 8006ec4:	08006f05 	.word	0x08006f05
 8006ec8:	08006ef9 	.word	0x08006ef9
 8006ecc:	08006f05 	.word	0x08006f05
 8006ed0:	08006f05 	.word	0x08006f05
 8006ed4:	08006f05 	.word	0x08006f05
 8006ed8:	08006ef3 	.word	0x08006ef3
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f05 	.word	0x08006f05
 8006ee8:	08006eff 	.word	0x08006eff
 8006eec:	2300      	movs	r3, #0
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e118      	b.n	8007124 <UART_SetConfig+0x348>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e115      	b.n	8007124 <UART_SetConfig+0x348>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e112      	b.n	8007124 <UART_SetConfig+0x348>
 8006efe:	2308      	movs	r3, #8
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e10f      	b.n	8007124 <UART_SetConfig+0x348>
 8006f04:	2310      	movs	r3, #16
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e10c      	b.n	8007124 <UART_SetConfig+0x348>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a68      	ldr	r2, [pc, #416]	; (80070b0 <UART_SetConfig+0x2d4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d120      	bne.n	8006f56 <UART_SetConfig+0x17a>
 8006f14:	4b64      	ldr	r3, [pc, #400]	; (80070a8 <UART_SetConfig+0x2cc>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f1e:	2b30      	cmp	r3, #48	; 0x30
 8006f20:	d013      	beq.n	8006f4a <UART_SetConfig+0x16e>
 8006f22:	2b30      	cmp	r3, #48	; 0x30
 8006f24:	d814      	bhi.n	8006f50 <UART_SetConfig+0x174>
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d009      	beq.n	8006f3e <UART_SetConfig+0x162>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d810      	bhi.n	8006f50 <UART_SetConfig+0x174>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <UART_SetConfig+0x15c>
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d006      	beq.n	8006f44 <UART_SetConfig+0x168>
 8006f36:	e00b      	b.n	8006f50 <UART_SetConfig+0x174>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	77fb      	strb	r3, [r7, #31]
 8006f3c:	e0f2      	b.n	8007124 <UART_SetConfig+0x348>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	77fb      	strb	r3, [r7, #31]
 8006f42:	e0ef      	b.n	8007124 <UART_SetConfig+0x348>
 8006f44:	2304      	movs	r3, #4
 8006f46:	77fb      	strb	r3, [r7, #31]
 8006f48:	e0ec      	b.n	8007124 <UART_SetConfig+0x348>
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e0e9      	b.n	8007124 <UART_SetConfig+0x348>
 8006f50:	2310      	movs	r3, #16
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e0e6      	b.n	8007124 <UART_SetConfig+0x348>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a56      	ldr	r2, [pc, #344]	; (80070b4 <UART_SetConfig+0x2d8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d120      	bne.n	8006fa2 <UART_SetConfig+0x1c6>
 8006f60:	4b51      	ldr	r3, [pc, #324]	; (80070a8 <UART_SetConfig+0x2cc>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f6c:	d013      	beq.n	8006f96 <UART_SetConfig+0x1ba>
 8006f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f70:	d814      	bhi.n	8006f9c <UART_SetConfig+0x1c0>
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d009      	beq.n	8006f8a <UART_SetConfig+0x1ae>
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d810      	bhi.n	8006f9c <UART_SetConfig+0x1c0>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <UART_SetConfig+0x1a8>
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d006      	beq.n	8006f90 <UART_SetConfig+0x1b4>
 8006f82:	e00b      	b.n	8006f9c <UART_SetConfig+0x1c0>
 8006f84:	2300      	movs	r3, #0
 8006f86:	77fb      	strb	r3, [r7, #31]
 8006f88:	e0cc      	b.n	8007124 <UART_SetConfig+0x348>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	77fb      	strb	r3, [r7, #31]
 8006f8e:	e0c9      	b.n	8007124 <UART_SetConfig+0x348>
 8006f90:	2304      	movs	r3, #4
 8006f92:	77fb      	strb	r3, [r7, #31]
 8006f94:	e0c6      	b.n	8007124 <UART_SetConfig+0x348>
 8006f96:	2308      	movs	r3, #8
 8006f98:	77fb      	strb	r3, [r7, #31]
 8006f9a:	e0c3      	b.n	8007124 <UART_SetConfig+0x348>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e0c0      	b.n	8007124 <UART_SetConfig+0x348>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a44      	ldr	r2, [pc, #272]	; (80070b8 <UART_SetConfig+0x2dc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d125      	bne.n	8006ff8 <UART_SetConfig+0x21c>
 8006fac:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <UART_SetConfig+0x2cc>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fba:	d017      	beq.n	8006fec <UART_SetConfig+0x210>
 8006fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc0:	d817      	bhi.n	8006ff2 <UART_SetConfig+0x216>
 8006fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc6:	d00b      	beq.n	8006fe0 <UART_SetConfig+0x204>
 8006fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fcc:	d811      	bhi.n	8006ff2 <UART_SetConfig+0x216>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <UART_SetConfig+0x1fe>
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d006      	beq.n	8006fe6 <UART_SetConfig+0x20a>
 8006fd8:	e00b      	b.n	8006ff2 <UART_SetConfig+0x216>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e0a1      	b.n	8007124 <UART_SetConfig+0x348>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e09e      	b.n	8007124 <UART_SetConfig+0x348>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	77fb      	strb	r3, [r7, #31]
 8006fea:	e09b      	b.n	8007124 <UART_SetConfig+0x348>
 8006fec:	2308      	movs	r3, #8
 8006fee:	77fb      	strb	r3, [r7, #31]
 8006ff0:	e098      	b.n	8007124 <UART_SetConfig+0x348>
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	77fb      	strb	r3, [r7, #31]
 8006ff6:	e095      	b.n	8007124 <UART_SetConfig+0x348>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2f      	ldr	r2, [pc, #188]	; (80070bc <UART_SetConfig+0x2e0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d125      	bne.n	800704e <UART_SetConfig+0x272>
 8007002:	4b29      	ldr	r3, [pc, #164]	; (80070a8 <UART_SetConfig+0x2cc>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800700c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007010:	d017      	beq.n	8007042 <UART_SetConfig+0x266>
 8007012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007016:	d817      	bhi.n	8007048 <UART_SetConfig+0x26c>
 8007018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800701c:	d00b      	beq.n	8007036 <UART_SetConfig+0x25a>
 800701e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007022:	d811      	bhi.n	8007048 <UART_SetConfig+0x26c>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <UART_SetConfig+0x254>
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702c:	d006      	beq.n	800703c <UART_SetConfig+0x260>
 800702e:	e00b      	b.n	8007048 <UART_SetConfig+0x26c>
 8007030:	2301      	movs	r3, #1
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e076      	b.n	8007124 <UART_SetConfig+0x348>
 8007036:	2302      	movs	r3, #2
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e073      	b.n	8007124 <UART_SetConfig+0x348>
 800703c:	2304      	movs	r3, #4
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e070      	b.n	8007124 <UART_SetConfig+0x348>
 8007042:	2308      	movs	r3, #8
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e06d      	b.n	8007124 <UART_SetConfig+0x348>
 8007048:	2310      	movs	r3, #16
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e06a      	b.n	8007124 <UART_SetConfig+0x348>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1b      	ldr	r2, [pc, #108]	; (80070c0 <UART_SetConfig+0x2e4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d138      	bne.n	80070ca <UART_SetConfig+0x2ee>
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <UART_SetConfig+0x2cc>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007066:	d017      	beq.n	8007098 <UART_SetConfig+0x2bc>
 8007068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800706c:	d82a      	bhi.n	80070c4 <UART_SetConfig+0x2e8>
 800706e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007072:	d00b      	beq.n	800708c <UART_SetConfig+0x2b0>
 8007074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007078:	d824      	bhi.n	80070c4 <UART_SetConfig+0x2e8>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <UART_SetConfig+0x2aa>
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007082:	d006      	beq.n	8007092 <UART_SetConfig+0x2b6>
 8007084:	e01e      	b.n	80070c4 <UART_SetConfig+0x2e8>
 8007086:	2300      	movs	r3, #0
 8007088:	77fb      	strb	r3, [r7, #31]
 800708a:	e04b      	b.n	8007124 <UART_SetConfig+0x348>
 800708c:	2302      	movs	r3, #2
 800708e:	77fb      	strb	r3, [r7, #31]
 8007090:	e048      	b.n	8007124 <UART_SetConfig+0x348>
 8007092:	2304      	movs	r3, #4
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e045      	b.n	8007124 <UART_SetConfig+0x348>
 8007098:	2308      	movs	r3, #8
 800709a:	77fb      	strb	r3, [r7, #31]
 800709c:	e042      	b.n	8007124 <UART_SetConfig+0x348>
 800709e:	bf00      	nop
 80070a0:	efff69f3 	.word	0xefff69f3
 80070a4:	40011000 	.word	0x40011000
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40004400 	.word	0x40004400
 80070b0:	40004800 	.word	0x40004800
 80070b4:	40004c00 	.word	0x40004c00
 80070b8:	40005000 	.word	0x40005000
 80070bc:	40011400 	.word	0x40011400
 80070c0:	40007800 	.word	0x40007800
 80070c4:	2310      	movs	r3, #16
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e02c      	b.n	8007124 <UART_SetConfig+0x348>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a72      	ldr	r2, [pc, #456]	; (8007298 <UART_SetConfig+0x4bc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d125      	bne.n	8007120 <UART_SetConfig+0x344>
 80070d4:	4b71      	ldr	r3, [pc, #452]	; (800729c <UART_SetConfig+0x4c0>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070e2:	d017      	beq.n	8007114 <UART_SetConfig+0x338>
 80070e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070e8:	d817      	bhi.n	800711a <UART_SetConfig+0x33e>
 80070ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ee:	d00b      	beq.n	8007108 <UART_SetConfig+0x32c>
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f4:	d811      	bhi.n	800711a <UART_SetConfig+0x33e>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <UART_SetConfig+0x326>
 80070fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fe:	d006      	beq.n	800710e <UART_SetConfig+0x332>
 8007100:	e00b      	b.n	800711a <UART_SetConfig+0x33e>
 8007102:	2300      	movs	r3, #0
 8007104:	77fb      	strb	r3, [r7, #31]
 8007106:	e00d      	b.n	8007124 <UART_SetConfig+0x348>
 8007108:	2302      	movs	r3, #2
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e00a      	b.n	8007124 <UART_SetConfig+0x348>
 800710e:	2304      	movs	r3, #4
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e007      	b.n	8007124 <UART_SetConfig+0x348>
 8007114:	2308      	movs	r3, #8
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e004      	b.n	8007124 <UART_SetConfig+0x348>
 800711a:	2310      	movs	r3, #16
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e001      	b.n	8007124 <UART_SetConfig+0x348>
 8007120:	2310      	movs	r3, #16
 8007122:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d15b      	bne.n	80071e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d828      	bhi.n	8007186 <UART_SetConfig+0x3aa>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x360>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007161 	.word	0x08007161
 8007140:	08007169 	.word	0x08007169
 8007144:	08007171 	.word	0x08007171
 8007148:	08007187 	.word	0x08007187
 800714c:	08007177 	.word	0x08007177
 8007150:	08007187 	.word	0x08007187
 8007154:	08007187 	.word	0x08007187
 8007158:	08007187 	.word	0x08007187
 800715c:	0800717f 	.word	0x0800717f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007160:	f7fd f83e 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8007164:	61b8      	str	r0, [r7, #24]
        break;
 8007166:	e013      	b.n	8007190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007168:	f7fd f84e 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 800716c:	61b8      	str	r0, [r7, #24]
        break;
 800716e:	e00f      	b.n	8007190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007170:	4b4b      	ldr	r3, [pc, #300]	; (80072a0 <UART_SetConfig+0x4c4>)
 8007172:	61bb      	str	r3, [r7, #24]
        break;
 8007174:	e00c      	b.n	8007190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007176:	f7fc ff21 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 800717a:	61b8      	str	r0, [r7, #24]
        break;
 800717c:	e008      	b.n	8007190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007182:	61bb      	str	r3, [r7, #24]
        break;
 8007184:	e004      	b.n	8007190 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	77bb      	strb	r3, [r7, #30]
        break;
 800718e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d074      	beq.n	8007280 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	005a      	lsls	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b0f      	cmp	r3, #15
 80071b0:	d916      	bls.n	80071e0 <UART_SetConfig+0x404>
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b8:	d212      	bcs.n	80071e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	f023 030f 	bic.w	r3, r3, #15
 80071c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	89fa      	ldrh	r2, [r7, #14]
 80071dc:	60da      	str	r2, [r3, #12]
 80071de:	e04f      	b.n	8007280 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	77bb      	strb	r3, [r7, #30]
 80071e4:	e04c      	b.n	8007280 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d828      	bhi.n	800723e <UART_SetConfig+0x462>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x418>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	0800723f 	.word	0x0800723f
 8007204:	0800722f 	.word	0x0800722f
 8007208:	0800723f 	.word	0x0800723f
 800720c:	0800723f 	.word	0x0800723f
 8007210:	0800723f 	.word	0x0800723f
 8007214:	08007237 	.word	0x08007237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007218:	f7fc ffe2 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 800721c:	61b8      	str	r0, [r7, #24]
        break;
 800721e:	e013      	b.n	8007248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007220:	f7fc fff2 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 8007224:	61b8      	str	r0, [r7, #24]
        break;
 8007226:	e00f      	b.n	8007248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <UART_SetConfig+0x4c4>)
 800722a:	61bb      	str	r3, [r7, #24]
        break;
 800722c:	e00c      	b.n	8007248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722e:	f7fc fec5 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8007232:	61b8      	str	r0, [r7, #24]
        break;
 8007234:	e008      	b.n	8007248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	61bb      	str	r3, [r7, #24]
        break;
 800723c:	e004      	b.n	8007248 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	77bb      	strb	r3, [r7, #30]
        break;
 8007246:	bf00      	nop
    }

    if (pclk != 0U)
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d018      	beq.n	8007280 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	085a      	lsrs	r2, r3, #1
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	441a      	add	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b0f      	cmp	r3, #15
 8007266:	d909      	bls.n	800727c <UART_SetConfig+0x4a0>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726e:	d205      	bcs.n	800727c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	b29a      	uxth	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60da      	str	r2, [r3, #12]
 800727a:	e001      	b.n	8007280 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800728c:	7fbb      	ldrb	r3, [r7, #30]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	40007c00 	.word	0x40007c00
 800729c:	40023800 	.word	0x40023800
 80072a0:	00f42400 	.word	0x00f42400

080072a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01a      	beq.n	80073ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a2:	d10a      	bne.n	80073ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	605a      	str	r2, [r3, #4]
  }
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073f8:	f7fb fbd6 	bl	8002ba8 <HAL_GetTick>
 80073fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b08      	cmp	r3, #8
 800740a:	d10e      	bne.n	800742a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800740c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f81b 	bl	8007456 <UART_WaitOnFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e011      	b.n	800744e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b09c      	sub	sp, #112	; 0x70
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	4613      	mov	r3, r2
 8007464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007466:	e0a7      	b.n	80075b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	f000 80a3 	beq.w	80075b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007472:	f7fb fb99 	bl	8002ba8 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <UART_WaitOnFlagUntilTimeout+0x32>
 8007482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007484:	2b00      	cmp	r3, #0
 8007486:	d13f      	bne.n	8007508 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800749c:	667b      	str	r3, [r7, #100]	; 0x64
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e6      	bne.n	8007488 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	663b      	str	r3, [r7, #96]	; 0x60
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074da:	64ba      	str	r2, [r7, #72]	; 0x48
 80074dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e068      	b.n	80075da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d050      	beq.n	80075b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007524:	d148      	bne.n	80075b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800752e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
 8007550:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	613b      	str	r3, [r7, #16]
   return(result);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	66bb      	str	r3, [r7, #104]	; 0x68
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007582:	623a      	str	r2, [r7, #32]
 8007584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	69f9      	ldr	r1, [r7, #28]
 8007588:	6a3a      	ldr	r2, [r7, #32]
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e5      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e010      	b.n	80075da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69da      	ldr	r2, [r3, #28]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4013      	ands	r3, r2
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	bf0c      	ite	eq
 80075c8:	2301      	moveq	r3, #1
 80075ca:	2300      	movne	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	f43f af48 	beq.w	8007468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3770      	adds	r7, #112	; 0x70
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b097      	sub	sp, #92	; 0x5c
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007616:	d10e      	bne.n	8007636 <UART_Start_Receive_IT+0x52>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <UART_Start_Receive_IT+0x48>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800762a:	e02d      	b.n	8007688 <UART_Start_Receive_IT+0xa4>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007634:	e028      	b.n	8007688 <UART_Start_Receive_IT+0xa4>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10d      	bne.n	800765a <UART_Start_Receive_IT+0x76>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <UART_Start_Receive_IT+0x6c>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	22ff      	movs	r2, #255	; 0xff
 800764a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800764e:	e01b      	b.n	8007688 <UART_Start_Receive_IT+0xa4>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	227f      	movs	r2, #127	; 0x7f
 8007654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007658:	e016      	b.n	8007688 <UART_Start_Receive_IT+0xa4>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007662:	d10d      	bne.n	8007680 <UART_Start_Receive_IT+0x9c>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d104      	bne.n	8007676 <UART_Start_Receive_IT+0x92>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	227f      	movs	r2, #127	; 0x7f
 8007670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007674:	e008      	b.n	8007688 <UART_Start_Receive_IT+0xa4>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	223f      	movs	r2, #63	; 0x3f
 800767a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800767e:	e003      	b.n	8007688 <UART_Start_Receive_IT+0xa4>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2222      	movs	r2, #34	; 0x22
 8007694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3308      	adds	r3, #8
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	657b      	str	r3, [r7, #84]	; 0x54
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e5      	bne.n	8007698 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d4:	d107      	bne.n	80076e6 <UART_Start_Receive_IT+0x102>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a21      	ldr	r2, [pc, #132]	; (8007768 <UART_Start_Receive_IT+0x184>)
 80076e2:	669a      	str	r2, [r3, #104]	; 0x68
 80076e4:	e002      	b.n	80076ec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <UART_Start_Receive_IT+0x188>)
 80076ea:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d019      	beq.n	8007728 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007712:	637b      	str	r3, [r7, #52]	; 0x34
 8007714:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_Start_Receive_IT+0x110>
 8007726:	e018      	b.n	800775a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	613b      	str	r3, [r7, #16]
   return(result);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f043 0320 	orr.w	r3, r3, #32
 800773c:	653b      	str	r3, [r7, #80]	; 0x50
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007746:	623b      	str	r3, [r7, #32]
 8007748:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	69f9      	ldr	r1, [r7, #28]
 800774c:	6a3a      	ldr	r2, [r7, #32]
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	61bb      	str	r3, [r7, #24]
   return(result);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e6      	bne.n	8007728 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	375c      	adds	r7, #92	; 0x5c
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	08007a1f 	.word	0x08007a1f
 800776c:	080078b9 	.word	0x080078b9

08007770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b095      	sub	sp, #84	; 0x54
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
 8007798:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800779c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d118      	bne.n	8007818 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f023 0310 	bic.w	r3, r3, #16
 80077fa:	647b      	str	r3, [r7, #68]	; 0x44
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6979      	ldr	r1, [r7, #20]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	613b      	str	r3, [r7, #16]
   return(result);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e6      	bne.n	80077e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800782c:	bf00      	nop
 800782e:	3754      	adds	r7, #84	; 0x54
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff faaa 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	60bb      	str	r3, [r7, #8]
   return(result);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6979      	ldr	r1, [r7, #20]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	613b      	str	r3, [r7, #16]
   return(result);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fa76 	bl	8006d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b0:	bf00      	nop
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b096      	sub	sp, #88	; 0x58
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d0:	2b22      	cmp	r3, #34	; 0x22
 80078d2:	f040 8098 	bne.w	8007a06 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80078e4:	b2d9      	uxtb	r1, r3
 80078e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f0:	400a      	ands	r2, r1
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d17b      	bne.n	8007a16 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007932:	653b      	str	r3, [r7, #80]	; 0x50
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800793c:	647b      	str	r3, [r7, #68]	; 0x44
 800793e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800794a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	623b      	str	r3, [r7, #32]
   return(result);
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	f023 0301 	bic.w	r3, r3, #1
 8007966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3308      	adds	r3, #8
 800796e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007970:	633a      	str	r2, [r7, #48]	; 0x30
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e5      	bne.n	8007950 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	2b01      	cmp	r3, #1
 800799e:	d12e      	bne.n	80079fe <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0310 	bic.w	r3, r3, #16
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	617b      	str	r3, [r7, #20]
   return(result);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	d103      	bne.n	80079ee <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2210      	movs	r2, #16
 80079ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff f9e4 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079fc:	e00b      	b.n	8007a16 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fa f9a0 	bl	8001d44 <HAL_UART_RxCpltCallback>
}
 8007a04:	e007      	b.n	8007a16 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0208 	orr.w	r2, r2, #8
 8007a14:	619a      	str	r2, [r3, #24]
}
 8007a16:	bf00      	nop
 8007a18:	3758      	adds	r7, #88	; 0x58
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b096      	sub	sp, #88	; 0x58
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a36:	2b22      	cmp	r3, #34	; 0x22
 8007a38:	f040 8098 	bne.w	8007b6c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a4c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a54:	4013      	ands	r3, r2
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a60:	1c9a      	adds	r2, r3, #2
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d17b      	bne.n	8007b7c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8007aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e6      	bne.n	8007a84 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f023 0301 	bic.w	r3, r3, #1
 8007acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d12e      	bne.n	8007b64 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	647b      	str	r3, [r7, #68]	; 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	613b      	str	r3, [r7, #16]
   return(result);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d103      	bne.n	8007b54 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2210      	movs	r2, #16
 8007b52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff f931 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b62:	e00b      	b.n	8007b7c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7fa f8ed 	bl	8001d44 <HAL_UART_RxCpltCallback>
}
 8007b6a:	e007      	b.n	8007b7c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0208 	orr.w	r2, r2, #8
 8007b7a:	619a      	str	r2, [r3, #24]
}
 8007b7c:	bf00      	nop
 8007b7e:	3758      	adds	r7, #88	; 0x58
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <__errno>:
 8007b84:	4b01      	ldr	r3, [pc, #4]	; (8007b8c <__errno+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	2000003c 	.word	0x2000003c

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4d0d      	ldr	r5, [pc, #52]	; (8007bc8 <__libc_init_array+0x38>)
 8007b94:	4c0d      	ldr	r4, [pc, #52]	; (8007bcc <__libc_init_array+0x3c>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	4d0b      	ldr	r5, [pc, #44]	; (8007bd0 <__libc_init_array+0x40>)
 8007ba2:	4c0c      	ldr	r4, [pc, #48]	; (8007bd4 <__libc_init_array+0x44>)
 8007ba4:	f005 f8da 	bl	800cd5c <_init>
 8007ba8:	1b64      	subs	r4, r4, r5
 8007baa:	10a4      	asrs	r4, r4, #2
 8007bac:	2600      	movs	r6, #0
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	0800d2ec 	.word	0x0800d2ec
 8007bcc:	0800d2ec 	.word	0x0800d2ec
 8007bd0:	0800d2ec 	.word	0x0800d2ec
 8007bd4:	0800d2f0 	.word	0x0800d2f0

08007bd8 <memset>:
 8007bd8:	4402      	add	r2, r0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d100      	bne.n	8007be2 <memset+0xa>
 8007be0:	4770      	bx	lr
 8007be2:	f803 1b01 	strb.w	r1, [r3], #1
 8007be6:	e7f9      	b.n	8007bdc <memset+0x4>

08007be8 <__cvt>:
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	ec55 4b10 	vmov	r4, r5, d0
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	460e      	mov	r6, r1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	bfbb      	ittet	lt
 8007bfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bfe:	461d      	movlt	r5, r3
 8007c00:	2300      	movge	r3, #0
 8007c02:	232d      	movlt	r3, #45	; 0x2d
 8007c04:	700b      	strb	r3, [r1, #0]
 8007c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c0c:	4691      	mov	r9, r2
 8007c0e:	f023 0820 	bic.w	r8, r3, #32
 8007c12:	bfbc      	itt	lt
 8007c14:	4622      	movlt	r2, r4
 8007c16:	4614      	movlt	r4, r2
 8007c18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c1c:	d005      	beq.n	8007c2a <__cvt+0x42>
 8007c1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c22:	d100      	bne.n	8007c26 <__cvt+0x3e>
 8007c24:	3601      	adds	r6, #1
 8007c26:	2102      	movs	r1, #2
 8007c28:	e000      	b.n	8007c2c <__cvt+0x44>
 8007c2a:	2103      	movs	r1, #3
 8007c2c:	ab03      	add	r3, sp, #12
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	ab02      	add	r3, sp, #8
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	ec45 4b10 	vmov	d0, r4, r5
 8007c38:	4653      	mov	r3, sl
 8007c3a:	4632      	mov	r2, r6
 8007c3c:	f001 fe54 	bl	80098e8 <_dtoa_r>
 8007c40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c44:	4607      	mov	r7, r0
 8007c46:	d102      	bne.n	8007c4e <__cvt+0x66>
 8007c48:	f019 0f01 	tst.w	r9, #1
 8007c4c:	d022      	beq.n	8007c94 <__cvt+0xac>
 8007c4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c52:	eb07 0906 	add.w	r9, r7, r6
 8007c56:	d110      	bne.n	8007c7a <__cvt+0x92>
 8007c58:	783b      	ldrb	r3, [r7, #0]
 8007c5a:	2b30      	cmp	r3, #48	; 0x30
 8007c5c:	d10a      	bne.n	8007c74 <__cvt+0x8c>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	4620      	mov	r0, r4
 8007c64:	4629      	mov	r1, r5
 8007c66:	f7f8 ff4f 	bl	8000b08 <__aeabi_dcmpeq>
 8007c6a:	b918      	cbnz	r0, 8007c74 <__cvt+0x8c>
 8007c6c:	f1c6 0601 	rsb	r6, r6, #1
 8007c70:	f8ca 6000 	str.w	r6, [sl]
 8007c74:	f8da 3000 	ldr.w	r3, [sl]
 8007c78:	4499      	add	r9, r3
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4629      	mov	r1, r5
 8007c82:	f7f8 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8007c86:	b108      	cbz	r0, 8007c8c <__cvt+0xa4>
 8007c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c8c:	2230      	movs	r2, #48	; 0x30
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	454b      	cmp	r3, r9
 8007c92:	d307      	bcc.n	8007ca4 <__cvt+0xbc>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c98:	1bdb      	subs	r3, r3, r7
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	b004      	add	sp, #16
 8007ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca4:	1c59      	adds	r1, r3, #1
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e7f0      	b.n	8007c8e <__cvt+0xa6>

08007cac <__exponent>:
 8007cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	bfb8      	it	lt
 8007cb4:	4249      	neglt	r1, r1
 8007cb6:	f803 2b02 	strb.w	r2, [r3], #2
 8007cba:	bfb4      	ite	lt
 8007cbc:	222d      	movlt	r2, #45	; 0x2d
 8007cbe:	222b      	movge	r2, #43	; 0x2b
 8007cc0:	2909      	cmp	r1, #9
 8007cc2:	7042      	strb	r2, [r0, #1]
 8007cc4:	dd2a      	ble.n	8007d1c <__exponent+0x70>
 8007cc6:	f10d 0407 	add.w	r4, sp, #7
 8007cca:	46a4      	mov	ip, r4
 8007ccc:	270a      	movs	r7, #10
 8007cce:	46a6      	mov	lr, r4
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cd6:	fb07 1516 	mls	r5, r7, r6, r1
 8007cda:	3530      	adds	r5, #48	; 0x30
 8007cdc:	2a63      	cmp	r2, #99	; 0x63
 8007cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	dcf1      	bgt.n	8007cce <__exponent+0x22>
 8007cea:	3130      	adds	r1, #48	; 0x30
 8007cec:	f1ae 0502 	sub.w	r5, lr, #2
 8007cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cf4:	1c44      	adds	r4, r0, #1
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	4561      	cmp	r1, ip
 8007cfa:	d30a      	bcc.n	8007d12 <__exponent+0x66>
 8007cfc:	f10d 0209 	add.w	r2, sp, #9
 8007d00:	eba2 020e 	sub.w	r2, r2, lr
 8007d04:	4565      	cmp	r5, ip
 8007d06:	bf88      	it	hi
 8007d08:	2200      	movhi	r2, #0
 8007d0a:	4413      	add	r3, r2
 8007d0c:	1a18      	subs	r0, r3, r0
 8007d0e:	b003      	add	sp, #12
 8007d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d1a:	e7ed      	b.n	8007cf8 <__exponent+0x4c>
 8007d1c:	2330      	movs	r3, #48	; 0x30
 8007d1e:	3130      	adds	r1, #48	; 0x30
 8007d20:	7083      	strb	r3, [r0, #2]
 8007d22:	70c1      	strb	r1, [r0, #3]
 8007d24:	1d03      	adds	r3, r0, #4
 8007d26:	e7f1      	b.n	8007d0c <__exponent+0x60>

08007d28 <_printf_float>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	ed2d 8b02 	vpush	{d8}
 8007d30:	b08d      	sub	sp, #52	; 0x34
 8007d32:	460c      	mov	r4, r1
 8007d34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d38:	4616      	mov	r6, r2
 8007d3a:	461f      	mov	r7, r3
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	f002 ff31 	bl	800aba4 <_localeconv_r>
 8007d42:	f8d0 a000 	ldr.w	sl, [r0]
 8007d46:	4650      	mov	r0, sl
 8007d48:	f7f8 fa62 	bl	8000210 <strlen>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	9305      	str	r3, [sp, #20]
 8007d54:	f8d8 3000 	ldr.w	r3, [r8]
 8007d58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d5c:	3307      	adds	r3, #7
 8007d5e:	f023 0307 	bic.w	r3, r3, #7
 8007d62:	f103 0208 	add.w	r2, r3, #8
 8007d66:	f8c8 2000 	str.w	r2, [r8]
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d80:	ee08 0a10 	vmov	s16, r0
 8007d84:	4b9f      	ldr	r3, [pc, #636]	; (8008004 <_printf_float+0x2dc>)
 8007d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8e:	f7f8 feed 	bl	8000b6c <__aeabi_dcmpun>
 8007d92:	bb88      	cbnz	r0, 8007df8 <_printf_float+0xd0>
 8007d94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d98:	4b9a      	ldr	r3, [pc, #616]	; (8008004 <_printf_float+0x2dc>)
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	f7f8 fec7 	bl	8000b30 <__aeabi_dcmple>
 8007da2:	bb48      	cbnz	r0, 8007df8 <_printf_float+0xd0>
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 feb6 	bl	8000b1c <__aeabi_dcmplt>
 8007db0:	b110      	cbz	r0, 8007db8 <_printf_float+0x90>
 8007db2:	232d      	movs	r3, #45	; 0x2d
 8007db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db8:	4b93      	ldr	r3, [pc, #588]	; (8008008 <_printf_float+0x2e0>)
 8007dba:	4894      	ldr	r0, [pc, #592]	; (800800c <_printf_float+0x2e4>)
 8007dbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dc0:	bf94      	ite	ls
 8007dc2:	4698      	movls	r8, r3
 8007dc4:	4680      	movhi	r8, r0
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	f023 0204 	bic.w	r2, r3, #4
 8007dd0:	6022      	str	r2, [r4, #0]
 8007dd2:	f04f 0900 	mov.w	r9, #0
 8007dd6:	9700      	str	r7, [sp, #0]
 8007dd8:	4633      	mov	r3, r6
 8007dda:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ddc:	4621      	mov	r1, r4
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 f9d8 	bl	8008194 <_printf_common>
 8007de4:	3001      	adds	r0, #1
 8007de6:	f040 8090 	bne.w	8007f0a <_printf_float+0x1e2>
 8007dea:	f04f 30ff 	mov.w	r0, #4294967295
 8007dee:	b00d      	add	sp, #52	; 0x34
 8007df0:	ecbd 8b02 	vpop	{d8}
 8007df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	4642      	mov	r2, r8
 8007dfa:	464b      	mov	r3, r9
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 feb4 	bl	8000b6c <__aeabi_dcmpun>
 8007e04:	b140      	cbz	r0, 8007e18 <_printf_float+0xf0>
 8007e06:	464b      	mov	r3, r9
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bfbc      	itt	lt
 8007e0c:	232d      	movlt	r3, #45	; 0x2d
 8007e0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e12:	487f      	ldr	r0, [pc, #508]	; (8008010 <_printf_float+0x2e8>)
 8007e14:	4b7f      	ldr	r3, [pc, #508]	; (8008014 <_printf_float+0x2ec>)
 8007e16:	e7d1      	b.n	8007dbc <_printf_float+0x94>
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e1e:	9206      	str	r2, [sp, #24]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	d13f      	bne.n	8007ea4 <_printf_float+0x17c>
 8007e24:	2306      	movs	r3, #6
 8007e26:	6063      	str	r3, [r4, #4]
 8007e28:	9b05      	ldr	r3, [sp, #20]
 8007e2a:	6861      	ldr	r1, [r4, #4]
 8007e2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e30:	2300      	movs	r3, #0
 8007e32:	9303      	str	r3, [sp, #12]
 8007e34:	ab0a      	add	r3, sp, #40	; 0x28
 8007e36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e3a:	ab09      	add	r3, sp, #36	; 0x24
 8007e3c:	ec49 8b10 	vmov	d0, r8, r9
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	6022      	str	r2, [r4, #0]
 8007e44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f7ff fecd 	bl	8007be8 <__cvt>
 8007e4e:	9b06      	ldr	r3, [sp, #24]
 8007e50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e52:	2b47      	cmp	r3, #71	; 0x47
 8007e54:	4680      	mov	r8, r0
 8007e56:	d108      	bne.n	8007e6a <_printf_float+0x142>
 8007e58:	1cc8      	adds	r0, r1, #3
 8007e5a:	db02      	blt.n	8007e62 <_printf_float+0x13a>
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	dd41      	ble.n	8007ee6 <_printf_float+0x1be>
 8007e62:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e66:	fa5f fb8b 	uxtb.w	fp, fp
 8007e6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e6e:	d820      	bhi.n	8007eb2 <_printf_float+0x18a>
 8007e70:	3901      	subs	r1, #1
 8007e72:	465a      	mov	r2, fp
 8007e74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e78:	9109      	str	r1, [sp, #36]	; 0x24
 8007e7a:	f7ff ff17 	bl	8007cac <__exponent>
 8007e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e80:	1813      	adds	r3, r2, r0
 8007e82:	2a01      	cmp	r2, #1
 8007e84:	4681      	mov	r9, r0
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	dc02      	bgt.n	8007e90 <_printf_float+0x168>
 8007e8a:	6822      	ldr	r2, [r4, #0]
 8007e8c:	07d2      	lsls	r2, r2, #31
 8007e8e:	d501      	bpl.n	8007e94 <_printf_float+0x16c>
 8007e90:	3301      	adds	r3, #1
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d09c      	beq.n	8007dd6 <_printf_float+0xae>
 8007e9c:	232d      	movs	r3, #45	; 0x2d
 8007e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea2:	e798      	b.n	8007dd6 <_printf_float+0xae>
 8007ea4:	9a06      	ldr	r2, [sp, #24]
 8007ea6:	2a47      	cmp	r2, #71	; 0x47
 8007ea8:	d1be      	bne.n	8007e28 <_printf_float+0x100>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1bc      	bne.n	8007e28 <_printf_float+0x100>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7b9      	b.n	8007e26 <_printf_float+0xfe>
 8007eb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eb6:	d118      	bne.n	8007eea <_printf_float+0x1c2>
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	6863      	ldr	r3, [r4, #4]
 8007ebc:	dd0b      	ble.n	8007ed6 <_printf_float+0x1ae>
 8007ebe:	6121      	str	r1, [r4, #16]
 8007ec0:	b913      	cbnz	r3, 8007ec8 <_printf_float+0x1a0>
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	07d0      	lsls	r0, r2, #31
 8007ec6:	d502      	bpl.n	8007ece <_printf_float+0x1a6>
 8007ec8:	3301      	adds	r3, #1
 8007eca:	440b      	add	r3, r1
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ed0:	f04f 0900 	mov.w	r9, #0
 8007ed4:	e7de      	b.n	8007e94 <_printf_float+0x16c>
 8007ed6:	b913      	cbnz	r3, 8007ede <_printf_float+0x1b6>
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	07d2      	lsls	r2, r2, #31
 8007edc:	d501      	bpl.n	8007ee2 <_printf_float+0x1ba>
 8007ede:	3302      	adds	r3, #2
 8007ee0:	e7f4      	b.n	8007ecc <_printf_float+0x1a4>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e7f2      	b.n	8007ecc <_printf_float+0x1a4>
 8007ee6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eec:	4299      	cmp	r1, r3
 8007eee:	db05      	blt.n	8007efc <_printf_float+0x1d4>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	6121      	str	r1, [r4, #16]
 8007ef4:	07d8      	lsls	r0, r3, #31
 8007ef6:	d5ea      	bpl.n	8007ece <_printf_float+0x1a6>
 8007ef8:	1c4b      	adds	r3, r1, #1
 8007efa:	e7e7      	b.n	8007ecc <_printf_float+0x1a4>
 8007efc:	2900      	cmp	r1, #0
 8007efe:	bfd4      	ite	le
 8007f00:	f1c1 0202 	rsble	r2, r1, #2
 8007f04:	2201      	movgt	r2, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	e7e0      	b.n	8007ecc <_printf_float+0x1a4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	055a      	lsls	r2, r3, #21
 8007f0e:	d407      	bmi.n	8007f20 <_printf_float+0x1f8>
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	4642      	mov	r2, r8
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d12c      	bne.n	8007f78 <_printf_float+0x250>
 8007f1e:	e764      	b.n	8007dea <_printf_float+0xc2>
 8007f20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f24:	f240 80e0 	bls.w	80080e8 <_printf_float+0x3c0>
 8007f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f7f8 fdea 	bl	8000b08 <__aeabi_dcmpeq>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d034      	beq.n	8007fa2 <_printf_float+0x27a>
 8007f38:	4a37      	ldr	r2, [pc, #220]	; (8008018 <_printf_float+0x2f0>)
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	f43f af51 	beq.w	8007dea <_printf_float+0xc2>
 8007f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	db02      	blt.n	8007f56 <_printf_float+0x22e>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	07d8      	lsls	r0, r3, #31
 8007f54:	d510      	bpl.n	8007f78 <_printf_float+0x250>
 8007f56:	ee18 3a10 	vmov	r3, s16
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	f43f af41 	beq.w	8007dea <_printf_float+0xc2>
 8007f68:	f04f 0800 	mov.w	r8, #0
 8007f6c:	f104 091a 	add.w	r9, r4, #26
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	3b01      	subs	r3, #1
 8007f74:	4543      	cmp	r3, r8
 8007f76:	dc09      	bgt.n	8007f8c <_printf_float+0x264>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	079b      	lsls	r3, r3, #30
 8007f7c:	f100 8105 	bmi.w	800818a <_printf_float+0x462>
 8007f80:	68e0      	ldr	r0, [r4, #12]
 8007f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f84:	4298      	cmp	r0, r3
 8007f86:	bfb8      	it	lt
 8007f88:	4618      	movlt	r0, r3
 8007f8a:	e730      	b.n	8007dee <_printf_float+0xc6>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	464a      	mov	r2, r9
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f af27 	beq.w	8007dea <_printf_float+0xc2>
 8007f9c:	f108 0801 	add.w	r8, r8, #1
 8007fa0:	e7e6      	b.n	8007f70 <_printf_float+0x248>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dc39      	bgt.n	800801c <_printf_float+0x2f4>
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	; (8008018 <_printf_float+0x2f0>)
 8007faa:	2301      	movs	r3, #1
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af19 	beq.w	8007dea <_printf_float+0xc2>
 8007fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d102      	bne.n	8007fc6 <_printf_float+0x29e>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07d9      	lsls	r1, r3, #31
 8007fc4:	d5d8      	bpl.n	8007f78 <_printf_float+0x250>
 8007fc6:	ee18 3a10 	vmov	r3, s16
 8007fca:	4652      	mov	r2, sl
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b8      	blx	r7
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	f43f af09 	beq.w	8007dea <_printf_float+0xc2>
 8007fd8:	f04f 0900 	mov.w	r9, #0
 8007fdc:	f104 0a1a 	add.w	sl, r4, #26
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	425b      	negs	r3, r3
 8007fe4:	454b      	cmp	r3, r9
 8007fe6:	dc01      	bgt.n	8007fec <_printf_float+0x2c4>
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	e792      	b.n	8007f12 <_printf_float+0x1ea>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4652      	mov	r2, sl
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f aef7 	beq.w	8007dea <_printf_float+0xc2>
 8007ffc:	f109 0901 	add.w	r9, r9, #1
 8008000:	e7ee      	b.n	8007fe0 <_printf_float+0x2b8>
 8008002:	bf00      	nop
 8008004:	7fefffff 	.word	0x7fefffff
 8008008:	0800ce2c 	.word	0x0800ce2c
 800800c:	0800ce30 	.word	0x0800ce30
 8008010:	0800ce38 	.word	0x0800ce38
 8008014:	0800ce34 	.word	0x0800ce34
 8008018:	0800d231 	.word	0x0800d231
 800801c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800801e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008020:	429a      	cmp	r2, r3
 8008022:	bfa8      	it	ge
 8008024:	461a      	movge	r2, r3
 8008026:	2a00      	cmp	r2, #0
 8008028:	4691      	mov	r9, r2
 800802a:	dc37      	bgt.n	800809c <_printf_float+0x374>
 800802c:	f04f 0b00 	mov.w	fp, #0
 8008030:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008034:	f104 021a 	add.w	r2, r4, #26
 8008038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	eba3 0309 	sub.w	r3, r3, r9
 8008040:	455b      	cmp	r3, fp
 8008042:	dc33      	bgt.n	80080ac <_printf_float+0x384>
 8008044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008048:	429a      	cmp	r2, r3
 800804a:	db3b      	blt.n	80080c4 <_printf_float+0x39c>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	07da      	lsls	r2, r3, #31
 8008050:	d438      	bmi.n	80080c4 <_printf_float+0x39c>
 8008052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008054:	9a05      	ldr	r2, [sp, #20]
 8008056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008058:	1a9a      	subs	r2, r3, r2
 800805a:	eba3 0901 	sub.w	r9, r3, r1
 800805e:	4591      	cmp	r9, r2
 8008060:	bfa8      	it	ge
 8008062:	4691      	movge	r9, r2
 8008064:	f1b9 0f00 	cmp.w	r9, #0
 8008068:	dc35      	bgt.n	80080d6 <_printf_float+0x3ae>
 800806a:	f04f 0800 	mov.w	r8, #0
 800806e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008072:	f104 0a1a 	add.w	sl, r4, #26
 8008076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	eba3 0309 	sub.w	r3, r3, r9
 8008080:	4543      	cmp	r3, r8
 8008082:	f77f af79 	ble.w	8007f78 <_printf_float+0x250>
 8008086:	2301      	movs	r3, #1
 8008088:	4652      	mov	r2, sl
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f aeaa 	beq.w	8007dea <_printf_float+0xc2>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	e7ec      	b.n	8008076 <_printf_float+0x34e>
 800809c:	4613      	mov	r3, r2
 800809e:	4631      	mov	r1, r6
 80080a0:	4642      	mov	r2, r8
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	d1c0      	bne.n	800802c <_printf_float+0x304>
 80080aa:	e69e      	b.n	8007dea <_printf_float+0xc2>
 80080ac:	2301      	movs	r3, #1
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	9205      	str	r2, [sp, #20]
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f ae97 	beq.w	8007dea <_printf_float+0xc2>
 80080bc:	9a05      	ldr	r2, [sp, #20]
 80080be:	f10b 0b01 	add.w	fp, fp, #1
 80080c2:	e7b9      	b.n	8008038 <_printf_float+0x310>
 80080c4:	ee18 3a10 	vmov	r3, s16
 80080c8:	4652      	mov	r2, sl
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1be      	bne.n	8008052 <_printf_float+0x32a>
 80080d4:	e689      	b.n	8007dea <_printf_float+0xc2>
 80080d6:	9a05      	ldr	r2, [sp, #20]
 80080d8:	464b      	mov	r3, r9
 80080da:	4442      	add	r2, r8
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	d1c1      	bne.n	800806a <_printf_float+0x342>
 80080e6:	e680      	b.n	8007dea <_printf_float+0xc2>
 80080e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ea:	2a01      	cmp	r2, #1
 80080ec:	dc01      	bgt.n	80080f2 <_printf_float+0x3ca>
 80080ee:	07db      	lsls	r3, r3, #31
 80080f0:	d538      	bpl.n	8008164 <_printf_float+0x43c>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4642      	mov	r2, r8
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f ae74 	beq.w	8007dea <_printf_float+0xc2>
 8008102:	ee18 3a10 	vmov	r3, s16
 8008106:	4652      	mov	r2, sl
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f ae6b 	beq.w	8007dea <_printf_float+0xc2>
 8008114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008118:	2200      	movs	r2, #0
 800811a:	2300      	movs	r3, #0
 800811c:	f7f8 fcf4 	bl	8000b08 <__aeabi_dcmpeq>
 8008120:	b9d8      	cbnz	r0, 800815a <_printf_float+0x432>
 8008122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008124:	f108 0201 	add.w	r2, r8, #1
 8008128:	3b01      	subs	r3, #1
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	d10e      	bne.n	8008152 <_printf_float+0x42a>
 8008134:	e659      	b.n	8007dea <_printf_float+0xc2>
 8008136:	2301      	movs	r3, #1
 8008138:	4652      	mov	r2, sl
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	f43f ae52 	beq.w	8007dea <_printf_float+0xc2>
 8008146:	f108 0801 	add.w	r8, r8, #1
 800814a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814c:	3b01      	subs	r3, #1
 800814e:	4543      	cmp	r3, r8
 8008150:	dcf1      	bgt.n	8008136 <_printf_float+0x40e>
 8008152:	464b      	mov	r3, r9
 8008154:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008158:	e6dc      	b.n	8007f14 <_printf_float+0x1ec>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	f104 0a1a 	add.w	sl, r4, #26
 8008162:	e7f2      	b.n	800814a <_printf_float+0x422>
 8008164:	2301      	movs	r3, #1
 8008166:	4642      	mov	r2, r8
 8008168:	e7df      	b.n	800812a <_printf_float+0x402>
 800816a:	2301      	movs	r3, #1
 800816c:	464a      	mov	r2, r9
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f ae38 	beq.w	8007dea <_printf_float+0xc2>
 800817a:	f108 0801 	add.w	r8, r8, #1
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008182:	1a5b      	subs	r3, r3, r1
 8008184:	4543      	cmp	r3, r8
 8008186:	dcf0      	bgt.n	800816a <_printf_float+0x442>
 8008188:	e6fa      	b.n	8007f80 <_printf_float+0x258>
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	f104 0919 	add.w	r9, r4, #25
 8008192:	e7f4      	b.n	800817e <_printf_float+0x456>

08008194 <_printf_common>:
 8008194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	4616      	mov	r6, r2
 800819a:	4699      	mov	r9, r3
 800819c:	688a      	ldr	r2, [r1, #8]
 800819e:	690b      	ldr	r3, [r1, #16]
 80081a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bfb8      	it	lt
 80081a8:	4613      	movlt	r3, r2
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b0:	4607      	mov	r7, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b10a      	cbz	r2, 80081ba <_printf_common+0x26>
 80081b6:	3301      	adds	r3, #1
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	0699      	lsls	r1, r3, #26
 80081be:	bf42      	ittt	mi
 80081c0:	6833      	ldrmi	r3, [r6, #0]
 80081c2:	3302      	addmi	r3, #2
 80081c4:	6033      	strmi	r3, [r6, #0]
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	f015 0506 	ands.w	r5, r5, #6
 80081cc:	d106      	bne.n	80081dc <_printf_common+0x48>
 80081ce:	f104 0a19 	add.w	sl, r4, #25
 80081d2:	68e3      	ldr	r3, [r4, #12]
 80081d4:	6832      	ldr	r2, [r6, #0]
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	42ab      	cmp	r3, r5
 80081da:	dc26      	bgt.n	800822a <_printf_common+0x96>
 80081dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081e0:	1e13      	subs	r3, r2, #0
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	bf18      	it	ne
 80081e6:	2301      	movne	r3, #1
 80081e8:	0692      	lsls	r2, r2, #26
 80081ea:	d42b      	bmi.n	8008244 <_printf_common+0xb0>
 80081ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f0:	4649      	mov	r1, r9
 80081f2:	4638      	mov	r0, r7
 80081f4:	47c0      	blx	r8
 80081f6:	3001      	adds	r0, #1
 80081f8:	d01e      	beq.n	8008238 <_printf_common+0xa4>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	68e5      	ldr	r5, [r4, #12]
 80081fe:	6832      	ldr	r2, [r6, #0]
 8008200:	f003 0306 	and.w	r3, r3, #6
 8008204:	2b04      	cmp	r3, #4
 8008206:	bf08      	it	eq
 8008208:	1aad      	subeq	r5, r5, r2
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	bf0c      	ite	eq
 8008210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008214:	2500      	movne	r5, #0
 8008216:	4293      	cmp	r3, r2
 8008218:	bfc4      	itt	gt
 800821a:	1a9b      	subgt	r3, r3, r2
 800821c:	18ed      	addgt	r5, r5, r3
 800821e:	2600      	movs	r6, #0
 8008220:	341a      	adds	r4, #26
 8008222:	42b5      	cmp	r5, r6
 8008224:	d11a      	bne.n	800825c <_printf_common+0xc8>
 8008226:	2000      	movs	r0, #0
 8008228:	e008      	b.n	800823c <_printf_common+0xa8>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4649      	mov	r1, r9
 8008230:	4638      	mov	r0, r7
 8008232:	47c0      	blx	r8
 8008234:	3001      	adds	r0, #1
 8008236:	d103      	bne.n	8008240 <_printf_common+0xac>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008240:	3501      	adds	r5, #1
 8008242:	e7c6      	b.n	80081d2 <_printf_common+0x3e>
 8008244:	18e1      	adds	r1, r4, r3
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	2030      	movs	r0, #48	; 0x30
 800824a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800824e:	4422      	add	r2, r4
 8008250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008258:	3302      	adds	r3, #2
 800825a:	e7c7      	b.n	80081ec <_printf_common+0x58>
 800825c:	2301      	movs	r3, #1
 800825e:	4622      	mov	r2, r4
 8008260:	4649      	mov	r1, r9
 8008262:	4638      	mov	r0, r7
 8008264:	47c0      	blx	r8
 8008266:	3001      	adds	r0, #1
 8008268:	d0e6      	beq.n	8008238 <_printf_common+0xa4>
 800826a:	3601      	adds	r6, #1
 800826c:	e7d9      	b.n	8008222 <_printf_common+0x8e>
	...

08008270 <_printf_i>:
 8008270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	7e0f      	ldrb	r7, [r1, #24]
 8008276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008278:	2f78      	cmp	r7, #120	; 0x78
 800827a:	4691      	mov	r9, r2
 800827c:	4680      	mov	r8, r0
 800827e:	460c      	mov	r4, r1
 8008280:	469a      	mov	sl, r3
 8008282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008286:	d807      	bhi.n	8008298 <_printf_i+0x28>
 8008288:	2f62      	cmp	r7, #98	; 0x62
 800828a:	d80a      	bhi.n	80082a2 <_printf_i+0x32>
 800828c:	2f00      	cmp	r7, #0
 800828e:	f000 80d8 	beq.w	8008442 <_printf_i+0x1d2>
 8008292:	2f58      	cmp	r7, #88	; 0x58
 8008294:	f000 80a3 	beq.w	80083de <_printf_i+0x16e>
 8008298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800829c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082a0:	e03a      	b.n	8008318 <_printf_i+0xa8>
 80082a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082a6:	2b15      	cmp	r3, #21
 80082a8:	d8f6      	bhi.n	8008298 <_printf_i+0x28>
 80082aa:	a101      	add	r1, pc, #4	; (adr r1, 80082b0 <_printf_i+0x40>)
 80082ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b0:	08008309 	.word	0x08008309
 80082b4:	0800831d 	.word	0x0800831d
 80082b8:	08008299 	.word	0x08008299
 80082bc:	08008299 	.word	0x08008299
 80082c0:	08008299 	.word	0x08008299
 80082c4:	08008299 	.word	0x08008299
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008299 	.word	0x08008299
 80082d0:	08008299 	.word	0x08008299
 80082d4:	08008299 	.word	0x08008299
 80082d8:	08008299 	.word	0x08008299
 80082dc:	08008429 	.word	0x08008429
 80082e0:	0800834d 	.word	0x0800834d
 80082e4:	0800840b 	.word	0x0800840b
 80082e8:	08008299 	.word	0x08008299
 80082ec:	08008299 	.word	0x08008299
 80082f0:	0800844b 	.word	0x0800844b
 80082f4:	08008299 	.word	0x08008299
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	08008299 	.word	0x08008299
 8008300:	08008299 	.word	0x08008299
 8008304:	08008413 	.word	0x08008413
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	602a      	str	r2, [r5, #0]
 8008310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008318:	2301      	movs	r3, #1
 800831a:	e0a3      	b.n	8008464 <_printf_i+0x1f4>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	6829      	ldr	r1, [r5, #0]
 8008320:	0606      	lsls	r6, r0, #24
 8008322:	f101 0304 	add.w	r3, r1, #4
 8008326:	d50a      	bpl.n	800833e <_printf_i+0xce>
 8008328:	680e      	ldr	r6, [r1, #0]
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	2e00      	cmp	r6, #0
 800832e:	da03      	bge.n	8008338 <_printf_i+0xc8>
 8008330:	232d      	movs	r3, #45	; 0x2d
 8008332:	4276      	negs	r6, r6
 8008334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008338:	485e      	ldr	r0, [pc, #376]	; (80084b4 <_printf_i+0x244>)
 800833a:	230a      	movs	r3, #10
 800833c:	e019      	b.n	8008372 <_printf_i+0x102>
 800833e:	680e      	ldr	r6, [r1, #0]
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008346:	bf18      	it	ne
 8008348:	b236      	sxthne	r6, r6
 800834a:	e7ef      	b.n	800832c <_printf_i+0xbc>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	1d19      	adds	r1, r3, #4
 8008352:	6029      	str	r1, [r5, #0]
 8008354:	0601      	lsls	r1, r0, #24
 8008356:	d501      	bpl.n	800835c <_printf_i+0xec>
 8008358:	681e      	ldr	r6, [r3, #0]
 800835a:	e002      	b.n	8008362 <_printf_i+0xf2>
 800835c:	0646      	lsls	r6, r0, #25
 800835e:	d5fb      	bpl.n	8008358 <_printf_i+0xe8>
 8008360:	881e      	ldrh	r6, [r3, #0]
 8008362:	4854      	ldr	r0, [pc, #336]	; (80084b4 <_printf_i+0x244>)
 8008364:	2f6f      	cmp	r7, #111	; 0x6f
 8008366:	bf0c      	ite	eq
 8008368:	2308      	moveq	r3, #8
 800836a:	230a      	movne	r3, #10
 800836c:	2100      	movs	r1, #0
 800836e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008372:	6865      	ldr	r5, [r4, #4]
 8008374:	60a5      	str	r5, [r4, #8]
 8008376:	2d00      	cmp	r5, #0
 8008378:	bfa2      	ittt	ge
 800837a:	6821      	ldrge	r1, [r4, #0]
 800837c:	f021 0104 	bicge.w	r1, r1, #4
 8008380:	6021      	strge	r1, [r4, #0]
 8008382:	b90e      	cbnz	r6, 8008388 <_printf_i+0x118>
 8008384:	2d00      	cmp	r5, #0
 8008386:	d04d      	beq.n	8008424 <_printf_i+0x1b4>
 8008388:	4615      	mov	r5, r2
 800838a:	fbb6 f1f3 	udiv	r1, r6, r3
 800838e:	fb03 6711 	mls	r7, r3, r1, r6
 8008392:	5dc7      	ldrb	r7, [r0, r7]
 8008394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008398:	4637      	mov	r7, r6
 800839a:	42bb      	cmp	r3, r7
 800839c:	460e      	mov	r6, r1
 800839e:	d9f4      	bls.n	800838a <_printf_i+0x11a>
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d10b      	bne.n	80083bc <_printf_i+0x14c>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	07de      	lsls	r6, r3, #31
 80083a8:	d508      	bpl.n	80083bc <_printf_i+0x14c>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	4299      	cmp	r1, r3
 80083b0:	bfde      	ittt	le
 80083b2:	2330      	movle	r3, #48	; 0x30
 80083b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083bc:	1b52      	subs	r2, r2, r5
 80083be:	6122      	str	r2, [r4, #16]
 80083c0:	f8cd a000 	str.w	sl, [sp]
 80083c4:	464b      	mov	r3, r9
 80083c6:	aa03      	add	r2, sp, #12
 80083c8:	4621      	mov	r1, r4
 80083ca:	4640      	mov	r0, r8
 80083cc:	f7ff fee2 	bl	8008194 <_printf_common>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d14c      	bne.n	800846e <_printf_i+0x1fe>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	b004      	add	sp, #16
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	4835      	ldr	r0, [pc, #212]	; (80084b4 <_printf_i+0x244>)
 80083e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083e4:	6829      	ldr	r1, [r5, #0]
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083ec:	6029      	str	r1, [r5, #0]
 80083ee:	061d      	lsls	r5, r3, #24
 80083f0:	d514      	bpl.n	800841c <_printf_i+0x1ac>
 80083f2:	07df      	lsls	r7, r3, #31
 80083f4:	bf44      	itt	mi
 80083f6:	f043 0320 	orrmi.w	r3, r3, #32
 80083fa:	6023      	strmi	r3, [r4, #0]
 80083fc:	b91e      	cbnz	r6, 8008406 <_printf_i+0x196>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	f023 0320 	bic.w	r3, r3, #32
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	2310      	movs	r3, #16
 8008408:	e7b0      	b.n	800836c <_printf_i+0xfc>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f043 0320 	orr.w	r3, r3, #32
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2378      	movs	r3, #120	; 0x78
 8008414:	4828      	ldr	r0, [pc, #160]	; (80084b8 <_printf_i+0x248>)
 8008416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800841a:	e7e3      	b.n	80083e4 <_printf_i+0x174>
 800841c:	0659      	lsls	r1, r3, #25
 800841e:	bf48      	it	mi
 8008420:	b2b6      	uxthmi	r6, r6
 8008422:	e7e6      	b.n	80083f2 <_printf_i+0x182>
 8008424:	4615      	mov	r5, r2
 8008426:	e7bb      	b.n	80083a0 <_printf_i+0x130>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	6826      	ldr	r6, [r4, #0]
 800842c:	6961      	ldr	r1, [r4, #20]
 800842e:	1d18      	adds	r0, r3, #4
 8008430:	6028      	str	r0, [r5, #0]
 8008432:	0635      	lsls	r5, r6, #24
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	d501      	bpl.n	800843c <_printf_i+0x1cc>
 8008438:	6019      	str	r1, [r3, #0]
 800843a:	e002      	b.n	8008442 <_printf_i+0x1d2>
 800843c:	0670      	lsls	r0, r6, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0x1c8>
 8008440:	8019      	strh	r1, [r3, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	4615      	mov	r5, r2
 8008448:	e7ba      	b.n	80083c0 <_printf_i+0x150>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	1d1a      	adds	r2, r3, #4
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	681d      	ldr	r5, [r3, #0]
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	2100      	movs	r1, #0
 8008456:	4628      	mov	r0, r5
 8008458:	f7f7 fee2 	bl	8000220 <memchr>
 800845c:	b108      	cbz	r0, 8008462 <_printf_i+0x1f2>
 800845e:	1b40      	subs	r0, r0, r5
 8008460:	6060      	str	r0, [r4, #4]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	2300      	movs	r3, #0
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800846c:	e7a8      	b.n	80083c0 <_printf_i+0x150>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	462a      	mov	r2, r5
 8008472:	4649      	mov	r1, r9
 8008474:	4640      	mov	r0, r8
 8008476:	47d0      	blx	sl
 8008478:	3001      	adds	r0, #1
 800847a:	d0ab      	beq.n	80083d4 <_printf_i+0x164>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	d413      	bmi.n	80084aa <_printf_i+0x23a>
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	4298      	cmp	r0, r3
 8008488:	bfb8      	it	lt
 800848a:	4618      	movlt	r0, r3
 800848c:	e7a4      	b.n	80083d8 <_printf_i+0x168>
 800848e:	2301      	movs	r3, #1
 8008490:	4632      	mov	r2, r6
 8008492:	4649      	mov	r1, r9
 8008494:	4640      	mov	r0, r8
 8008496:	47d0      	blx	sl
 8008498:	3001      	adds	r0, #1
 800849a:	d09b      	beq.n	80083d4 <_printf_i+0x164>
 800849c:	3501      	adds	r5, #1
 800849e:	68e3      	ldr	r3, [r4, #12]
 80084a0:	9903      	ldr	r1, [sp, #12]
 80084a2:	1a5b      	subs	r3, r3, r1
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dcf2      	bgt.n	800848e <_printf_i+0x21e>
 80084a8:	e7eb      	b.n	8008482 <_printf_i+0x212>
 80084aa:	2500      	movs	r5, #0
 80084ac:	f104 0619 	add.w	r6, r4, #25
 80084b0:	e7f5      	b.n	800849e <_printf_i+0x22e>
 80084b2:	bf00      	nop
 80084b4:	0800ce3c 	.word	0x0800ce3c
 80084b8:	0800ce4d 	.word	0x0800ce4d

080084bc <_scanf_float>:
 80084bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	b087      	sub	sp, #28
 80084c2:	4617      	mov	r7, r2
 80084c4:	9303      	str	r3, [sp, #12]
 80084c6:	688b      	ldr	r3, [r1, #8]
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084ce:	bf83      	ittte	hi
 80084d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084d4:	195b      	addhi	r3, r3, r5
 80084d6:	9302      	strhi	r3, [sp, #8]
 80084d8:	2300      	movls	r3, #0
 80084da:	bf86      	itte	hi
 80084dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084e0:	608b      	strhi	r3, [r1, #8]
 80084e2:	9302      	strls	r3, [sp, #8]
 80084e4:	680b      	ldr	r3, [r1, #0]
 80084e6:	468b      	mov	fp, r1
 80084e8:	2500      	movs	r5, #0
 80084ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80084f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084f6:	4680      	mov	r8, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	465e      	mov	r6, fp
 80084fc:	46aa      	mov	sl, r5
 80084fe:	46a9      	mov	r9, r5
 8008500:	9501      	str	r5, [sp, #4]
 8008502:	68a2      	ldr	r2, [r4, #8]
 8008504:	b152      	cbz	r2, 800851c <_scanf_float+0x60>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b4e      	cmp	r3, #78	; 0x4e
 800850c:	d864      	bhi.n	80085d8 <_scanf_float+0x11c>
 800850e:	2b40      	cmp	r3, #64	; 0x40
 8008510:	d83c      	bhi.n	800858c <_scanf_float+0xd0>
 8008512:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008516:	b2c8      	uxtb	r0, r1
 8008518:	280e      	cmp	r0, #14
 800851a:	d93a      	bls.n	8008592 <_scanf_float+0xd6>
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	d003      	beq.n	800852a <_scanf_float+0x6e>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800852e:	f1ba 0f01 	cmp.w	sl, #1
 8008532:	f200 8113 	bhi.w	800875c <_scanf_float+0x2a0>
 8008536:	455e      	cmp	r6, fp
 8008538:	f200 8105 	bhi.w	8008746 <_scanf_float+0x28a>
 800853c:	2501      	movs	r5, #1
 800853e:	4628      	mov	r0, r5
 8008540:	b007      	add	sp, #28
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800854a:	2a0d      	cmp	r2, #13
 800854c:	d8e6      	bhi.n	800851c <_scanf_float+0x60>
 800854e:	a101      	add	r1, pc, #4	; (adr r1, 8008554 <_scanf_float+0x98>)
 8008550:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008554:	08008693 	.word	0x08008693
 8008558:	0800851d 	.word	0x0800851d
 800855c:	0800851d 	.word	0x0800851d
 8008560:	0800851d 	.word	0x0800851d
 8008564:	080086f3 	.word	0x080086f3
 8008568:	080086cb 	.word	0x080086cb
 800856c:	0800851d 	.word	0x0800851d
 8008570:	0800851d 	.word	0x0800851d
 8008574:	080086a1 	.word	0x080086a1
 8008578:	0800851d 	.word	0x0800851d
 800857c:	0800851d 	.word	0x0800851d
 8008580:	0800851d 	.word	0x0800851d
 8008584:	0800851d 	.word	0x0800851d
 8008588:	08008659 	.word	0x08008659
 800858c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008590:	e7db      	b.n	800854a <_scanf_float+0x8e>
 8008592:	290e      	cmp	r1, #14
 8008594:	d8c2      	bhi.n	800851c <_scanf_float+0x60>
 8008596:	a001      	add	r0, pc, #4	; (adr r0, 800859c <_scanf_float+0xe0>)
 8008598:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800859c:	0800864b 	.word	0x0800864b
 80085a0:	0800851d 	.word	0x0800851d
 80085a4:	0800864b 	.word	0x0800864b
 80085a8:	080086df 	.word	0x080086df
 80085ac:	0800851d 	.word	0x0800851d
 80085b0:	080085f9 	.word	0x080085f9
 80085b4:	08008635 	.word	0x08008635
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008635 	.word	0x08008635
 80085c0:	08008635 	.word	0x08008635
 80085c4:	08008635 	.word	0x08008635
 80085c8:	08008635 	.word	0x08008635
 80085cc:	08008635 	.word	0x08008635
 80085d0:	08008635 	.word	0x08008635
 80085d4:	08008635 	.word	0x08008635
 80085d8:	2b6e      	cmp	r3, #110	; 0x6e
 80085da:	d809      	bhi.n	80085f0 <_scanf_float+0x134>
 80085dc:	2b60      	cmp	r3, #96	; 0x60
 80085de:	d8b2      	bhi.n	8008546 <_scanf_float+0x8a>
 80085e0:	2b54      	cmp	r3, #84	; 0x54
 80085e2:	d077      	beq.n	80086d4 <_scanf_float+0x218>
 80085e4:	2b59      	cmp	r3, #89	; 0x59
 80085e6:	d199      	bne.n	800851c <_scanf_float+0x60>
 80085e8:	2d07      	cmp	r5, #7
 80085ea:	d197      	bne.n	800851c <_scanf_float+0x60>
 80085ec:	2508      	movs	r5, #8
 80085ee:	e029      	b.n	8008644 <_scanf_float+0x188>
 80085f0:	2b74      	cmp	r3, #116	; 0x74
 80085f2:	d06f      	beq.n	80086d4 <_scanf_float+0x218>
 80085f4:	2b79      	cmp	r3, #121	; 0x79
 80085f6:	e7f6      	b.n	80085e6 <_scanf_float+0x12a>
 80085f8:	6821      	ldr	r1, [r4, #0]
 80085fa:	05c8      	lsls	r0, r1, #23
 80085fc:	d51a      	bpl.n	8008634 <_scanf_float+0x178>
 80085fe:	9b02      	ldr	r3, [sp, #8]
 8008600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008604:	6021      	str	r1, [r4, #0]
 8008606:	f109 0901 	add.w	r9, r9, #1
 800860a:	b11b      	cbz	r3, 8008614 <_scanf_float+0x158>
 800860c:	3b01      	subs	r3, #1
 800860e:	3201      	adds	r2, #1
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	60a2      	str	r2, [r4, #8]
 8008614:	68a3      	ldr	r3, [r4, #8]
 8008616:	3b01      	subs	r3, #1
 8008618:	60a3      	str	r3, [r4, #8]
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	3301      	adds	r3, #1
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3b01      	subs	r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	607b      	str	r3, [r7, #4]
 8008628:	f340 8084 	ble.w	8008734 <_scanf_float+0x278>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	3301      	adds	r3, #1
 8008630:	603b      	str	r3, [r7, #0]
 8008632:	e766      	b.n	8008502 <_scanf_float+0x46>
 8008634:	eb1a 0f05 	cmn.w	sl, r5
 8008638:	f47f af70 	bne.w	800851c <_scanf_float+0x60>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	f806 3b01 	strb.w	r3, [r6], #1
 8008648:	e7e4      	b.n	8008614 <_scanf_float+0x158>
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	0610      	lsls	r0, r2, #24
 800864e:	f57f af65 	bpl.w	800851c <_scanf_float+0x60>
 8008652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008656:	e7f4      	b.n	8008642 <_scanf_float+0x186>
 8008658:	f1ba 0f00 	cmp.w	sl, #0
 800865c:	d10e      	bne.n	800867c <_scanf_float+0x1c0>
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	d10e      	bne.n	8008682 <_scanf_float+0x1c6>
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800866a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800866e:	d108      	bne.n	8008682 <_scanf_float+0x1c6>
 8008670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	f04f 0a01 	mov.w	sl, #1
 800867a:	e7e3      	b.n	8008644 <_scanf_float+0x188>
 800867c:	f1ba 0f02 	cmp.w	sl, #2
 8008680:	d055      	beq.n	800872e <_scanf_float+0x272>
 8008682:	2d01      	cmp	r5, #1
 8008684:	d002      	beq.n	800868c <_scanf_float+0x1d0>
 8008686:	2d04      	cmp	r5, #4
 8008688:	f47f af48 	bne.w	800851c <_scanf_float+0x60>
 800868c:	3501      	adds	r5, #1
 800868e:	b2ed      	uxtb	r5, r5
 8008690:	e7d8      	b.n	8008644 <_scanf_float+0x188>
 8008692:	f1ba 0f01 	cmp.w	sl, #1
 8008696:	f47f af41 	bne.w	800851c <_scanf_float+0x60>
 800869a:	f04f 0a02 	mov.w	sl, #2
 800869e:	e7d1      	b.n	8008644 <_scanf_float+0x188>
 80086a0:	b97d      	cbnz	r5, 80086c2 <_scanf_float+0x206>
 80086a2:	f1b9 0f00 	cmp.w	r9, #0
 80086a6:	f47f af3c 	bne.w	8008522 <_scanf_float+0x66>
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086b4:	f47f af39 	bne.w	800852a <_scanf_float+0x6e>
 80086b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	2501      	movs	r5, #1
 80086c0:	e7c0      	b.n	8008644 <_scanf_float+0x188>
 80086c2:	2d03      	cmp	r5, #3
 80086c4:	d0e2      	beq.n	800868c <_scanf_float+0x1d0>
 80086c6:	2d05      	cmp	r5, #5
 80086c8:	e7de      	b.n	8008688 <_scanf_float+0x1cc>
 80086ca:	2d02      	cmp	r5, #2
 80086cc:	f47f af26 	bne.w	800851c <_scanf_float+0x60>
 80086d0:	2503      	movs	r5, #3
 80086d2:	e7b7      	b.n	8008644 <_scanf_float+0x188>
 80086d4:	2d06      	cmp	r5, #6
 80086d6:	f47f af21 	bne.w	800851c <_scanf_float+0x60>
 80086da:	2507      	movs	r5, #7
 80086dc:	e7b2      	b.n	8008644 <_scanf_float+0x188>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	0591      	lsls	r1, r2, #22
 80086e2:	f57f af1b 	bpl.w	800851c <_scanf_float+0x60>
 80086e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086ea:	6022      	str	r2, [r4, #0]
 80086ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80086f0:	e7a8      	b.n	8008644 <_scanf_float+0x188>
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086fc:	d006      	beq.n	800870c <_scanf_float+0x250>
 80086fe:	0550      	lsls	r0, r2, #21
 8008700:	f57f af0c 	bpl.w	800851c <_scanf_float+0x60>
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	f43f af0f 	beq.w	800852a <_scanf_float+0x6e>
 800870c:	0591      	lsls	r1, r2, #22
 800870e:	bf58      	it	pl
 8008710:	9901      	ldrpl	r1, [sp, #4]
 8008712:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008716:	bf58      	it	pl
 8008718:	eba9 0101 	subpl.w	r1, r9, r1
 800871c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008720:	bf58      	it	pl
 8008722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008726:	6022      	str	r2, [r4, #0]
 8008728:	f04f 0900 	mov.w	r9, #0
 800872c:	e78a      	b.n	8008644 <_scanf_float+0x188>
 800872e:	f04f 0a03 	mov.w	sl, #3
 8008732:	e787      	b.n	8008644 <_scanf_float+0x188>
 8008734:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008738:	4639      	mov	r1, r7
 800873a:	4640      	mov	r0, r8
 800873c:	4798      	blx	r3
 800873e:	2800      	cmp	r0, #0
 8008740:	f43f aedf 	beq.w	8008502 <_scanf_float+0x46>
 8008744:	e6ea      	b.n	800851c <_scanf_float+0x60>
 8008746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800874a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800874e:	463a      	mov	r2, r7
 8008750:	4640      	mov	r0, r8
 8008752:	4798      	blx	r3
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	3b01      	subs	r3, #1
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	e6ec      	b.n	8008536 <_scanf_float+0x7a>
 800875c:	1e6b      	subs	r3, r5, #1
 800875e:	2b06      	cmp	r3, #6
 8008760:	d825      	bhi.n	80087ae <_scanf_float+0x2f2>
 8008762:	2d02      	cmp	r5, #2
 8008764:	d836      	bhi.n	80087d4 <_scanf_float+0x318>
 8008766:	455e      	cmp	r6, fp
 8008768:	f67f aee8 	bls.w	800853c <_scanf_float+0x80>
 800876c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008770:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008774:	463a      	mov	r2, r7
 8008776:	4640      	mov	r0, r8
 8008778:	4798      	blx	r3
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	3b01      	subs	r3, #1
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	e7f1      	b.n	8008766 <_scanf_float+0x2aa>
 8008782:	9802      	ldr	r0, [sp, #8]
 8008784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008788:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800878c:	9002      	str	r0, [sp, #8]
 800878e:	463a      	mov	r2, r7
 8008790:	4640      	mov	r0, r8
 8008792:	4798      	blx	r3
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	3b01      	subs	r3, #1
 8008798:	6123      	str	r3, [r4, #16]
 800879a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800879e:	fa5f fa8a 	uxtb.w	sl, sl
 80087a2:	f1ba 0f02 	cmp.w	sl, #2
 80087a6:	d1ec      	bne.n	8008782 <_scanf_float+0x2c6>
 80087a8:	3d03      	subs	r5, #3
 80087aa:	b2ed      	uxtb	r5, r5
 80087ac:	1b76      	subs	r6, r6, r5
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	05da      	lsls	r2, r3, #23
 80087b2:	d52f      	bpl.n	8008814 <_scanf_float+0x358>
 80087b4:	055b      	lsls	r3, r3, #21
 80087b6:	d510      	bpl.n	80087da <_scanf_float+0x31e>
 80087b8:	455e      	cmp	r6, fp
 80087ba:	f67f aebf 	bls.w	800853c <_scanf_float+0x80>
 80087be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087c6:	463a      	mov	r2, r7
 80087c8:	4640      	mov	r0, r8
 80087ca:	4798      	blx	r3
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	e7f1      	b.n	80087b8 <_scanf_float+0x2fc>
 80087d4:	46aa      	mov	sl, r5
 80087d6:	9602      	str	r6, [sp, #8]
 80087d8:	e7df      	b.n	800879a <_scanf_float+0x2de>
 80087da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	2965      	cmp	r1, #101	; 0x65
 80087e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80087e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	d00c      	beq.n	8008808 <_scanf_float+0x34c>
 80087ee:	2945      	cmp	r1, #69	; 0x45
 80087f0:	d00a      	beq.n	8008808 <_scanf_float+0x34c>
 80087f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087f6:	463a      	mov	r2, r7
 80087f8:	4640      	mov	r0, r8
 80087fa:	4798      	blx	r3
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008802:	3b01      	subs	r3, #1
 8008804:	1eb5      	subs	r5, r6, #2
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800880c:	463a      	mov	r2, r7
 800880e:	4640      	mov	r0, r8
 8008810:	4798      	blx	r3
 8008812:	462e      	mov	r6, r5
 8008814:	6825      	ldr	r5, [r4, #0]
 8008816:	f015 0510 	ands.w	r5, r5, #16
 800881a:	d159      	bne.n	80088d0 <_scanf_float+0x414>
 800881c:	7035      	strb	r5, [r6, #0]
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008828:	d11b      	bne.n	8008862 <_scanf_float+0x3a6>
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	454b      	cmp	r3, r9
 800882e:	eba3 0209 	sub.w	r2, r3, r9
 8008832:	d123      	bne.n	800887c <_scanf_float+0x3c0>
 8008834:	2200      	movs	r2, #0
 8008836:	4659      	mov	r1, fp
 8008838:	4640      	mov	r0, r8
 800883a:	f000 ff1b 	bl	8009674 <_strtod_r>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	f012 0f02 	tst.w	r2, #2
 8008846:	ec57 6b10 	vmov	r6, r7, d0
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	d021      	beq.n	8008892 <_scanf_float+0x3d6>
 800884e:	9903      	ldr	r1, [sp, #12]
 8008850:	1d1a      	adds	r2, r3, #4
 8008852:	600a      	str	r2, [r1, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	e9c3 6700 	strd	r6, r7, [r3]
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60e3      	str	r3, [r4, #12]
 8008860:	e66d      	b.n	800853e <_scanf_float+0x82>
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0e5      	beq.n	8008834 <_scanf_float+0x378>
 8008868:	9905      	ldr	r1, [sp, #20]
 800886a:	230a      	movs	r3, #10
 800886c:	462a      	mov	r2, r5
 800886e:	3101      	adds	r1, #1
 8008870:	4640      	mov	r0, r8
 8008872:	f000 ff87 	bl	8009784 <_strtol_r>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	9e05      	ldr	r6, [sp, #20]
 800887a:	1ac2      	subs	r2, r0, r3
 800887c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008880:	429e      	cmp	r6, r3
 8008882:	bf28      	it	cs
 8008884:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008888:	4912      	ldr	r1, [pc, #72]	; (80088d4 <_scanf_float+0x418>)
 800888a:	4630      	mov	r0, r6
 800888c:	f000 f82c 	bl	80088e8 <siprintf>
 8008890:	e7d0      	b.n	8008834 <_scanf_float+0x378>
 8008892:	9903      	ldr	r1, [sp, #12]
 8008894:	f012 0f04 	tst.w	r2, #4
 8008898:	f103 0204 	add.w	r2, r3, #4
 800889c:	600a      	str	r2, [r1, #0]
 800889e:	d1d9      	bne.n	8008854 <_scanf_float+0x398>
 80088a0:	f8d3 8000 	ldr.w	r8, [r3]
 80088a4:	ee10 2a10 	vmov	r2, s0
 80088a8:	ee10 0a10 	vmov	r0, s0
 80088ac:	463b      	mov	r3, r7
 80088ae:	4639      	mov	r1, r7
 80088b0:	f7f8 f95c 	bl	8000b6c <__aeabi_dcmpun>
 80088b4:	b128      	cbz	r0, 80088c2 <_scanf_float+0x406>
 80088b6:	4808      	ldr	r0, [pc, #32]	; (80088d8 <_scanf_float+0x41c>)
 80088b8:	f000 f810 	bl	80088dc <nanf>
 80088bc:	ed88 0a00 	vstr	s0, [r8]
 80088c0:	e7cb      	b.n	800885a <_scanf_float+0x39e>
 80088c2:	4630      	mov	r0, r6
 80088c4:	4639      	mov	r1, r7
 80088c6:	f7f8 f9af 	bl	8000c28 <__aeabi_d2f>
 80088ca:	f8c8 0000 	str.w	r0, [r8]
 80088ce:	e7c4      	b.n	800885a <_scanf_float+0x39e>
 80088d0:	2500      	movs	r5, #0
 80088d2:	e634      	b.n	800853e <_scanf_float+0x82>
 80088d4:	0800ce5e 	.word	0x0800ce5e
 80088d8:	0800d283 	.word	0x0800d283

080088dc <nanf>:
 80088dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088e4 <nanf+0x8>
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	7fc00000 	.word	0x7fc00000

080088e8 <siprintf>:
 80088e8:	b40e      	push	{r1, r2, r3}
 80088ea:	b500      	push	{lr}
 80088ec:	b09c      	sub	sp, #112	; 0x70
 80088ee:	ab1d      	add	r3, sp, #116	; 0x74
 80088f0:	9002      	str	r0, [sp, #8]
 80088f2:	9006      	str	r0, [sp, #24]
 80088f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f8:	4809      	ldr	r0, [pc, #36]	; (8008920 <siprintf+0x38>)
 80088fa:	9107      	str	r1, [sp, #28]
 80088fc:	9104      	str	r1, [sp, #16]
 80088fe:	4909      	ldr	r1, [pc, #36]	; (8008924 <siprintf+0x3c>)
 8008900:	f853 2b04 	ldr.w	r2, [r3], #4
 8008904:	9105      	str	r1, [sp, #20]
 8008906:	6800      	ldr	r0, [r0, #0]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	a902      	add	r1, sp, #8
 800890c:	f002 ff9c 	bl	800b848 <_svfiprintf_r>
 8008910:	9b02      	ldr	r3, [sp, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	b01c      	add	sp, #112	; 0x70
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b003      	add	sp, #12
 800891e:	4770      	bx	lr
 8008920:	2000003c 	.word	0x2000003c
 8008924:	ffff0208 	.word	0xffff0208

08008928 <siscanf>:
 8008928:	b40e      	push	{r1, r2, r3}
 800892a:	b510      	push	{r4, lr}
 800892c:	b09f      	sub	sp, #124	; 0x7c
 800892e:	ac21      	add	r4, sp, #132	; 0x84
 8008930:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008934:	f854 2b04 	ldr.w	r2, [r4], #4
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800893e:	9004      	str	r0, [sp, #16]
 8008940:	9008      	str	r0, [sp, #32]
 8008942:	f7f7 fc65 	bl	8000210 <strlen>
 8008946:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <siscanf+0x50>)
 8008948:	9005      	str	r0, [sp, #20]
 800894a:	9009      	str	r0, [sp, #36]	; 0x24
 800894c:	930d      	str	r3, [sp, #52]	; 0x34
 800894e:	480b      	ldr	r0, [pc, #44]	; (800897c <siscanf+0x54>)
 8008950:	9a01      	ldr	r2, [sp, #4]
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9403      	str	r4, [sp, #12]
 8008956:	2300      	movs	r3, #0
 8008958:	9311      	str	r3, [sp, #68]	; 0x44
 800895a:	9316      	str	r3, [sp, #88]	; 0x58
 800895c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008960:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008964:	a904      	add	r1, sp, #16
 8008966:	4623      	mov	r3, r4
 8008968:	f003 f8c8 	bl	800bafc <__ssvfiscanf_r>
 800896c:	b01f      	add	sp, #124	; 0x7c
 800896e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008972:	b003      	add	sp, #12
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	080089a3 	.word	0x080089a3
 800897c:	2000003c 	.word	0x2000003c

08008980 <__sread>:
 8008980:	b510      	push	{r4, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008988:	f003 fb82 	bl	800c090 <_read_r>
 800898c:	2800      	cmp	r0, #0
 800898e:	bfab      	itete	ge
 8008990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008992:	89a3      	ldrhlt	r3, [r4, #12]
 8008994:	181b      	addge	r3, r3, r0
 8008996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800899a:	bfac      	ite	ge
 800899c:	6563      	strge	r3, [r4, #84]	; 0x54
 800899e:	81a3      	strhlt	r3, [r4, #12]
 80089a0:	bd10      	pop	{r4, pc}

080089a2 <__seofread>:
 80089a2:	2000      	movs	r0, #0
 80089a4:	4770      	bx	lr

080089a6 <__swrite>:
 80089a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	461f      	mov	r7, r3
 80089ac:	898b      	ldrh	r3, [r1, #12]
 80089ae:	05db      	lsls	r3, r3, #23
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	4616      	mov	r6, r2
 80089b6:	d505      	bpl.n	80089c4 <__swrite+0x1e>
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2302      	movs	r3, #2
 80089be:	2200      	movs	r2, #0
 80089c0:	f002 f8f4 	bl	800abac <_lseek_r>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	4628      	mov	r0, r5
 80089d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	f000 bed5 	b.w	8009788 <_write_r>

080089de <__sseek>:
 80089de:	b510      	push	{r4, lr}
 80089e0:	460c      	mov	r4, r1
 80089e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e6:	f002 f8e1 	bl	800abac <_lseek_r>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	bf15      	itete	ne
 80089f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089fa:	81a3      	strheq	r3, [r4, #12]
 80089fc:	bf18      	it	ne
 80089fe:	81a3      	strhne	r3, [r4, #12]
 8008a00:	bd10      	pop	{r4, pc}

08008a02 <__sclose>:
 8008a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a06:	f000 bed1 	b.w	80097ac <_close_r>

08008a0a <strncpy>:
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	3901      	subs	r1, #1
 8008a0e:	4603      	mov	r3, r0
 8008a10:	b132      	cbz	r2, 8008a20 <strncpy+0x16>
 8008a12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a16:	f803 4b01 	strb.w	r4, [r3], #1
 8008a1a:	3a01      	subs	r2, #1
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	d1f7      	bne.n	8008a10 <strncpy+0x6>
 8008a20:	441a      	add	r2, r3
 8008a22:	2100      	movs	r1, #0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d100      	bne.n	8008a2a <strncpy+0x20>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2e:	e7f9      	b.n	8008a24 <strncpy+0x1a>

08008a30 <sulp>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	4604      	mov	r4, r0
 8008a34:	460d      	mov	r5, r1
 8008a36:	ec45 4b10 	vmov	d0, r4, r5
 8008a3a:	4616      	mov	r6, r2
 8008a3c:	f002 fc62 	bl	800b304 <__ulp>
 8008a40:	ec51 0b10 	vmov	r0, r1, d0
 8008a44:	b17e      	cbz	r6, 8008a66 <sulp+0x36>
 8008a46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd09      	ble.n	8008a66 <sulp+0x36>
 8008a52:	051b      	lsls	r3, r3, #20
 8008a54:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a58:	2400      	movs	r4, #0
 8008a5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a5e:	4622      	mov	r2, r4
 8008a60:	462b      	mov	r3, r5
 8008a62:	f7f7 fde9 	bl	8000638 <__aeabi_dmul>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}

08008a68 <_strtod_l>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	ed2d 8b02 	vpush	{d8}
 8008a70:	b09d      	sub	sp, #116	; 0x74
 8008a72:	461f      	mov	r7, r3
 8008a74:	2300      	movs	r3, #0
 8008a76:	9318      	str	r3, [sp, #96]	; 0x60
 8008a78:	4ba2      	ldr	r3, [pc, #648]	; (8008d04 <_strtod_l+0x29c>)
 8008a7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	4604      	mov	r4, r0
 8008a82:	4618      	mov	r0, r3
 8008a84:	4688      	mov	r8, r1
 8008a86:	f7f7 fbc3 	bl	8000210 <strlen>
 8008a8a:	f04f 0a00 	mov.w	sl, #0
 8008a8e:	4605      	mov	r5, r0
 8008a90:	f04f 0b00 	mov.w	fp, #0
 8008a94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a9e:	d04e      	beq.n	8008b3e <_strtod_l+0xd6>
 8008aa0:	d83b      	bhi.n	8008b1a <_strtod_l+0xb2>
 8008aa2:	2a0d      	cmp	r2, #13
 8008aa4:	d834      	bhi.n	8008b10 <_strtod_l+0xa8>
 8008aa6:	2a08      	cmp	r2, #8
 8008aa8:	d834      	bhi.n	8008b14 <_strtod_l+0xac>
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d03e      	beq.n	8008b2c <_strtod_l+0xc4>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008ab4:	7833      	ldrb	r3, [r6, #0]
 8008ab6:	2b30      	cmp	r3, #48	; 0x30
 8008ab8:	f040 80b0 	bne.w	8008c1c <_strtod_l+0x1b4>
 8008abc:	7873      	ldrb	r3, [r6, #1]
 8008abe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ac2:	2b58      	cmp	r3, #88	; 0x58
 8008ac4:	d168      	bne.n	8008b98 <_strtod_l+0x130>
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	ab18      	add	r3, sp, #96	; 0x60
 8008acc:	9702      	str	r7, [sp, #8]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	4a8d      	ldr	r2, [pc, #564]	; (8008d08 <_strtod_l+0x2a0>)
 8008ad2:	ab19      	add	r3, sp, #100	; 0x64
 8008ad4:	a917      	add	r1, sp, #92	; 0x5c
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f001 fd5c 	bl	800a594 <__gethex>
 8008adc:	f010 0707 	ands.w	r7, r0, #7
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	d005      	beq.n	8008af0 <_strtod_l+0x88>
 8008ae4:	2f06      	cmp	r7, #6
 8008ae6:	d12c      	bne.n	8008b42 <_strtod_l+0xda>
 8008ae8:	3601      	adds	r6, #1
 8008aea:	2300      	movs	r3, #0
 8008aec:	9617      	str	r6, [sp, #92]	; 0x5c
 8008aee:	930a      	str	r3, [sp, #40]	; 0x28
 8008af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 8590 	bne.w	8009618 <_strtod_l+0xbb0>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afa:	b1eb      	cbz	r3, 8008b38 <_strtod_l+0xd0>
 8008afc:	4652      	mov	r2, sl
 8008afe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b02:	ec43 2b10 	vmov	d0, r2, r3
 8008b06:	b01d      	add	sp, #116	; 0x74
 8008b08:	ecbd 8b02 	vpop	{d8}
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b10:	2a20      	cmp	r2, #32
 8008b12:	d1cc      	bne.n	8008aae <_strtod_l+0x46>
 8008b14:	3301      	adds	r3, #1
 8008b16:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b18:	e7be      	b.n	8008a98 <_strtod_l+0x30>
 8008b1a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b1c:	d1c7      	bne.n	8008aae <_strtod_l+0x46>
 8008b1e:	2201      	movs	r2, #1
 8008b20:	920a      	str	r2, [sp, #40]	; 0x28
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1c2      	bne.n	8008ab2 <_strtod_l+0x4a>
 8008b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f040 856e 	bne.w	8009614 <_strtod_l+0xbac>
 8008b38:	4652      	mov	r2, sl
 8008b3a:	465b      	mov	r3, fp
 8008b3c:	e7e1      	b.n	8008b02 <_strtod_l+0x9a>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	e7ee      	b.n	8008b20 <_strtod_l+0xb8>
 8008b42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b44:	b13a      	cbz	r2, 8008b56 <_strtod_l+0xee>
 8008b46:	2135      	movs	r1, #53	; 0x35
 8008b48:	a81a      	add	r0, sp, #104	; 0x68
 8008b4a:	f002 fce6 	bl	800b51a <__copybits>
 8008b4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b50:	4620      	mov	r0, r4
 8008b52:	f002 f8a5 	bl	800aca0 <_Bfree>
 8008b56:	3f01      	subs	r7, #1
 8008b58:	2f04      	cmp	r7, #4
 8008b5a:	d806      	bhi.n	8008b6a <_strtod_l+0x102>
 8008b5c:	e8df f007 	tbb	[pc, r7]
 8008b60:	1714030a 	.word	0x1714030a
 8008b64:	0a          	.byte	0x0a
 8008b65:	00          	.byte	0x00
 8008b66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008b6a:	0728      	lsls	r0, r5, #28
 8008b6c:	d5c0      	bpl.n	8008af0 <_strtod_l+0x88>
 8008b6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b72:	e7bd      	b.n	8008af0 <_strtod_l+0x88>
 8008b74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b86:	e7f0      	b.n	8008b6a <_strtod_l+0x102>
 8008b88:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d0c <_strtod_l+0x2a4>
 8008b8c:	e7ed      	b.n	8008b6a <_strtod_l+0x102>
 8008b8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b92:	f04f 3aff 	mov.w	sl, #4294967295
 8008b96:	e7e8      	b.n	8008b6a <_strtod_l+0x102>
 8008b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	2b30      	cmp	r3, #48	; 0x30
 8008ba2:	d0f9      	beq.n	8008b98 <_strtod_l+0x130>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0a3      	beq.n	8008af0 <_strtod_l+0x88>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f04f 0900 	mov.w	r9, #0
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bb8:	464f      	mov	r7, r9
 8008bba:	220a      	movs	r2, #10
 8008bbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008bbe:	7806      	ldrb	r6, [r0, #0]
 8008bc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008bc4:	b2d9      	uxtb	r1, r3
 8008bc6:	2909      	cmp	r1, #9
 8008bc8:	d92a      	bls.n	8008c20 <_strtod_l+0x1b8>
 8008bca:	9905      	ldr	r1, [sp, #20]
 8008bcc:	462a      	mov	r2, r5
 8008bce:	f003 fac3 	bl	800c158 <strncmp>
 8008bd2:	b398      	cbz	r0, 8008c3c <_strtod_l+0x1d4>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4632      	mov	r2, r6
 8008bd8:	463d      	mov	r5, r7
 8008bda:	9005      	str	r0, [sp, #20]
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2a65      	cmp	r2, #101	; 0x65
 8008be0:	d001      	beq.n	8008be6 <_strtod_l+0x17e>
 8008be2:	2a45      	cmp	r2, #69	; 0x45
 8008be4:	d118      	bne.n	8008c18 <_strtod_l+0x1b0>
 8008be6:	b91d      	cbnz	r5, 8008bf0 <_strtod_l+0x188>
 8008be8:	9a04      	ldr	r2, [sp, #16]
 8008bea:	4302      	orrs	r2, r0
 8008bec:	d09e      	beq.n	8008b2c <_strtod_l+0xc4>
 8008bee:	2500      	movs	r5, #0
 8008bf0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008bf4:	f108 0201 	add.w	r2, r8, #1
 8008bf8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008bfe:	2a2b      	cmp	r2, #43	; 0x2b
 8008c00:	d075      	beq.n	8008cee <_strtod_l+0x286>
 8008c02:	2a2d      	cmp	r2, #45	; 0x2d
 8008c04:	d07b      	beq.n	8008cfe <_strtod_l+0x296>
 8008c06:	f04f 0c00 	mov.w	ip, #0
 8008c0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c0e:	2909      	cmp	r1, #9
 8008c10:	f240 8082 	bls.w	8008d18 <_strtod_l+0x2b0>
 8008c14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c18:	2600      	movs	r6, #0
 8008c1a:	e09d      	b.n	8008d58 <_strtod_l+0x2f0>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e7c4      	b.n	8008baa <_strtod_l+0x142>
 8008c20:	2f08      	cmp	r7, #8
 8008c22:	bfd8      	it	le
 8008c24:	9907      	ldrle	r1, [sp, #28]
 8008c26:	f100 0001 	add.w	r0, r0, #1
 8008c2a:	bfda      	itte	le
 8008c2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c30:	9307      	strle	r3, [sp, #28]
 8008c32:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c36:	3701      	adds	r7, #1
 8008c38:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c3a:	e7bf      	b.n	8008bbc <_strtod_l+0x154>
 8008c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c3e:	195a      	adds	r2, r3, r5
 8008c40:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c42:	5d5a      	ldrb	r2, [r3, r5]
 8008c44:	2f00      	cmp	r7, #0
 8008c46:	d037      	beq.n	8008cb8 <_strtod_l+0x250>
 8008c48:	9005      	str	r0, [sp, #20]
 8008c4a:	463d      	mov	r5, r7
 8008c4c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	d912      	bls.n	8008c7a <_strtod_l+0x212>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e7c2      	b.n	8008bde <_strtod_l+0x176>
 8008c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c5e:	785a      	ldrb	r2, [r3, #1]
 8008c60:	3001      	adds	r0, #1
 8008c62:	2a30      	cmp	r2, #48	; 0x30
 8008c64:	d0f8      	beq.n	8008c58 <_strtod_l+0x1f0>
 8008c66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c6a:	2b08      	cmp	r3, #8
 8008c6c:	f200 84d9 	bhi.w	8009622 <_strtod_l+0xbba>
 8008c70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c72:	9005      	str	r0, [sp, #20]
 8008c74:	2000      	movs	r0, #0
 8008c76:	9308      	str	r3, [sp, #32]
 8008c78:	4605      	mov	r5, r0
 8008c7a:	3a30      	subs	r2, #48	; 0x30
 8008c7c:	f100 0301 	add.w	r3, r0, #1
 8008c80:	d014      	beq.n	8008cac <_strtod_l+0x244>
 8008c82:	9905      	ldr	r1, [sp, #20]
 8008c84:	4419      	add	r1, r3
 8008c86:	9105      	str	r1, [sp, #20]
 8008c88:	462b      	mov	r3, r5
 8008c8a:	eb00 0e05 	add.w	lr, r0, r5
 8008c8e:	210a      	movs	r1, #10
 8008c90:	4573      	cmp	r3, lr
 8008c92:	d113      	bne.n	8008cbc <_strtod_l+0x254>
 8008c94:	182b      	adds	r3, r5, r0
 8008c96:	2b08      	cmp	r3, #8
 8008c98:	f105 0501 	add.w	r5, r5, #1
 8008c9c:	4405      	add	r5, r0
 8008c9e:	dc1c      	bgt.n	8008cda <_strtod_l+0x272>
 8008ca0:	9907      	ldr	r1, [sp, #28]
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	fb03 2301 	mla	r3, r3, r1, r2
 8008ca8:	9307      	str	r3, [sp, #28]
 8008caa:	2300      	movs	r3, #0
 8008cac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cae:	1c51      	adds	r1, r2, #1
 8008cb0:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cb2:	7852      	ldrb	r2, [r2, #1]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	e7c9      	b.n	8008c4c <_strtod_l+0x1e4>
 8008cb8:	4638      	mov	r0, r7
 8008cba:	e7d2      	b.n	8008c62 <_strtod_l+0x1fa>
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	dc04      	bgt.n	8008cca <_strtod_l+0x262>
 8008cc0:	9e07      	ldr	r6, [sp, #28]
 8008cc2:	434e      	muls	r6, r1
 8008cc4:	9607      	str	r6, [sp, #28]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	e7e2      	b.n	8008c90 <_strtod_l+0x228>
 8008cca:	f103 0c01 	add.w	ip, r3, #1
 8008cce:	f1bc 0f10 	cmp.w	ip, #16
 8008cd2:	bfd8      	it	le
 8008cd4:	fb01 f909 	mulle.w	r9, r1, r9
 8008cd8:	e7f5      	b.n	8008cc6 <_strtod_l+0x25e>
 8008cda:	2d10      	cmp	r5, #16
 8008cdc:	bfdc      	itt	le
 8008cde:	230a      	movle	r3, #10
 8008ce0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008ce4:	e7e1      	b.n	8008caa <_strtod_l+0x242>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9305      	str	r3, [sp, #20]
 8008cea:	2301      	movs	r3, #1
 8008cec:	e77c      	b.n	8008be8 <_strtod_l+0x180>
 8008cee:	f04f 0c00 	mov.w	ip, #0
 8008cf2:	f108 0202 	add.w	r2, r8, #2
 8008cf6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cf8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008cfc:	e785      	b.n	8008c0a <_strtod_l+0x1a2>
 8008cfe:	f04f 0c01 	mov.w	ip, #1
 8008d02:	e7f6      	b.n	8008cf2 <_strtod_l+0x28a>
 8008d04:	0800d0b0 	.word	0x0800d0b0
 8008d08:	0800ce64 	.word	0x0800ce64
 8008d0c:	7ff00000 	.word	0x7ff00000
 8008d10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d12:	1c51      	adds	r1, r2, #1
 8008d14:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d16:	7852      	ldrb	r2, [r2, #1]
 8008d18:	2a30      	cmp	r2, #48	; 0x30
 8008d1a:	d0f9      	beq.n	8008d10 <_strtod_l+0x2a8>
 8008d1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d20:	2908      	cmp	r1, #8
 8008d22:	f63f af79 	bhi.w	8008c18 <_strtod_l+0x1b0>
 8008d26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d2c:	9206      	str	r2, [sp, #24]
 8008d2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d30:	1c51      	adds	r1, r2, #1
 8008d32:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d34:	7852      	ldrb	r2, [r2, #1]
 8008d36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d3a:	2e09      	cmp	r6, #9
 8008d3c:	d937      	bls.n	8008dae <_strtod_l+0x346>
 8008d3e:	9e06      	ldr	r6, [sp, #24]
 8008d40:	1b89      	subs	r1, r1, r6
 8008d42:	2908      	cmp	r1, #8
 8008d44:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d48:	dc02      	bgt.n	8008d50 <_strtod_l+0x2e8>
 8008d4a:	4576      	cmp	r6, lr
 8008d4c:	bfa8      	it	ge
 8008d4e:	4676      	movge	r6, lr
 8008d50:	f1bc 0f00 	cmp.w	ip, #0
 8008d54:	d000      	beq.n	8008d58 <_strtod_l+0x2f0>
 8008d56:	4276      	negs	r6, r6
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	d14d      	bne.n	8008df8 <_strtod_l+0x390>
 8008d5c:	9904      	ldr	r1, [sp, #16]
 8008d5e:	4301      	orrs	r1, r0
 8008d60:	f47f aec6 	bne.w	8008af0 <_strtod_l+0x88>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f47f aee1 	bne.w	8008b2c <_strtod_l+0xc4>
 8008d6a:	2a69      	cmp	r2, #105	; 0x69
 8008d6c:	d027      	beq.n	8008dbe <_strtod_l+0x356>
 8008d6e:	dc24      	bgt.n	8008dba <_strtod_l+0x352>
 8008d70:	2a49      	cmp	r2, #73	; 0x49
 8008d72:	d024      	beq.n	8008dbe <_strtod_l+0x356>
 8008d74:	2a4e      	cmp	r2, #78	; 0x4e
 8008d76:	f47f aed9 	bne.w	8008b2c <_strtod_l+0xc4>
 8008d7a:	499f      	ldr	r1, [pc, #636]	; (8008ff8 <_strtod_l+0x590>)
 8008d7c:	a817      	add	r0, sp, #92	; 0x5c
 8008d7e:	f001 fe61 	bl	800aa44 <__match>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	f43f aed2 	beq.w	8008b2c <_strtod_l+0xc4>
 8008d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b28      	cmp	r3, #40	; 0x28
 8008d8e:	d12d      	bne.n	8008dec <_strtod_l+0x384>
 8008d90:	499a      	ldr	r1, [pc, #616]	; (8008ffc <_strtod_l+0x594>)
 8008d92:	aa1a      	add	r2, sp, #104	; 0x68
 8008d94:	a817      	add	r0, sp, #92	; 0x5c
 8008d96:	f001 fe69 	bl	800aa6c <__hexnan>
 8008d9a:	2805      	cmp	r0, #5
 8008d9c:	d126      	bne.n	8008dec <_strtod_l+0x384>
 8008d9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008da0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008da4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008da8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dac:	e6a0      	b.n	8008af0 <_strtod_l+0x88>
 8008dae:	210a      	movs	r1, #10
 8008db0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008db4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008db8:	e7b9      	b.n	8008d2e <_strtod_l+0x2c6>
 8008dba:	2a6e      	cmp	r2, #110	; 0x6e
 8008dbc:	e7db      	b.n	8008d76 <_strtod_l+0x30e>
 8008dbe:	4990      	ldr	r1, [pc, #576]	; (8009000 <_strtod_l+0x598>)
 8008dc0:	a817      	add	r0, sp, #92	; 0x5c
 8008dc2:	f001 fe3f 	bl	800aa44 <__match>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f aeb0 	beq.w	8008b2c <_strtod_l+0xc4>
 8008dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dce:	498d      	ldr	r1, [pc, #564]	; (8009004 <_strtod_l+0x59c>)
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	a817      	add	r0, sp, #92	; 0x5c
 8008dd4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dd6:	f001 fe35 	bl	800aa44 <__match>
 8008dda:	b910      	cbnz	r0, 8008de2 <_strtod_l+0x37a>
 8008ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dde:	3301      	adds	r3, #1
 8008de0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008de2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009014 <_strtod_l+0x5ac>
 8008de6:	f04f 0a00 	mov.w	sl, #0
 8008dea:	e681      	b.n	8008af0 <_strtod_l+0x88>
 8008dec:	4886      	ldr	r0, [pc, #536]	; (8009008 <_strtod_l+0x5a0>)
 8008dee:	f003 f963 	bl	800c0b8 <nan>
 8008df2:	ec5b ab10 	vmov	sl, fp, d0
 8008df6:	e67b      	b.n	8008af0 <_strtod_l+0x88>
 8008df8:	9b05      	ldr	r3, [sp, #20]
 8008dfa:	9807      	ldr	r0, [sp, #28]
 8008dfc:	1af3      	subs	r3, r6, r3
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	bf08      	it	eq
 8008e02:	462f      	moveq	r7, r5
 8008e04:	2d10      	cmp	r5, #16
 8008e06:	9306      	str	r3, [sp, #24]
 8008e08:	46a8      	mov	r8, r5
 8008e0a:	bfa8      	it	ge
 8008e0c:	f04f 0810 	movge.w	r8, #16
 8008e10:	f7f7 fb98 	bl	8000544 <__aeabi_ui2d>
 8008e14:	2d09      	cmp	r5, #9
 8008e16:	4682      	mov	sl, r0
 8008e18:	468b      	mov	fp, r1
 8008e1a:	dd13      	ble.n	8008e44 <_strtod_l+0x3dc>
 8008e1c:	4b7b      	ldr	r3, [pc, #492]	; (800900c <_strtod_l+0x5a4>)
 8008e1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e26:	f7f7 fc07 	bl	8000638 <__aeabi_dmul>
 8008e2a:	4682      	mov	sl, r0
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	468b      	mov	fp, r1
 8008e30:	f7f7 fb88 	bl	8000544 <__aeabi_ui2d>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4650      	mov	r0, sl
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	f7f7 fa46 	bl	80002cc <__adddf3>
 8008e40:	4682      	mov	sl, r0
 8008e42:	468b      	mov	fp, r1
 8008e44:	2d0f      	cmp	r5, #15
 8008e46:	dc38      	bgt.n	8008eba <_strtod_l+0x452>
 8008e48:	9b06      	ldr	r3, [sp, #24]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f43f ae50 	beq.w	8008af0 <_strtod_l+0x88>
 8008e50:	dd24      	ble.n	8008e9c <_strtod_l+0x434>
 8008e52:	2b16      	cmp	r3, #22
 8008e54:	dc0b      	bgt.n	8008e6e <_strtod_l+0x406>
 8008e56:	496d      	ldr	r1, [pc, #436]	; (800900c <_strtod_l+0x5a4>)
 8008e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e60:	4652      	mov	r2, sl
 8008e62:	465b      	mov	r3, fp
 8008e64:	f7f7 fbe8 	bl	8000638 <__aeabi_dmul>
 8008e68:	4682      	mov	sl, r0
 8008e6a:	468b      	mov	fp, r1
 8008e6c:	e640      	b.n	8008af0 <_strtod_l+0x88>
 8008e6e:	9a06      	ldr	r2, [sp, #24]
 8008e70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e74:	4293      	cmp	r3, r2
 8008e76:	db20      	blt.n	8008eba <_strtod_l+0x452>
 8008e78:	4c64      	ldr	r4, [pc, #400]	; (800900c <_strtod_l+0x5a4>)
 8008e7a:	f1c5 050f 	rsb	r5, r5, #15
 8008e7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e82:	4652      	mov	r2, sl
 8008e84:	465b      	mov	r3, fp
 8008e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8a:	f7f7 fbd5 	bl	8000638 <__aeabi_dmul>
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	1b5d      	subs	r5, r3, r5
 8008e92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e9a:	e7e3      	b.n	8008e64 <_strtod_l+0x3fc>
 8008e9c:	9b06      	ldr	r3, [sp, #24]
 8008e9e:	3316      	adds	r3, #22
 8008ea0:	db0b      	blt.n	8008eba <_strtod_l+0x452>
 8008ea2:	9b05      	ldr	r3, [sp, #20]
 8008ea4:	1b9e      	subs	r6, r3, r6
 8008ea6:	4b59      	ldr	r3, [pc, #356]	; (800900c <_strtod_l+0x5a4>)
 8008ea8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008eac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 fcea 	bl	800088c <__aeabi_ddiv>
 8008eb8:	e7d6      	b.n	8008e68 <_strtod_l+0x400>
 8008eba:	9b06      	ldr	r3, [sp, #24]
 8008ebc:	eba5 0808 	sub.w	r8, r5, r8
 8008ec0:	4498      	add	r8, r3
 8008ec2:	f1b8 0f00 	cmp.w	r8, #0
 8008ec6:	dd74      	ble.n	8008fb2 <_strtod_l+0x54a>
 8008ec8:	f018 030f 	ands.w	r3, r8, #15
 8008ecc:	d00a      	beq.n	8008ee4 <_strtod_l+0x47c>
 8008ece:	494f      	ldr	r1, [pc, #316]	; (800900c <_strtod_l+0x5a4>)
 8008ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008edc:	f7f7 fbac 	bl	8000638 <__aeabi_dmul>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	f038 080f 	bics.w	r8, r8, #15
 8008ee8:	d04f      	beq.n	8008f8a <_strtod_l+0x522>
 8008eea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008eee:	dd22      	ble.n	8008f36 <_strtod_l+0x4ce>
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	462e      	mov	r6, r5
 8008ef4:	9507      	str	r5, [sp, #28]
 8008ef6:	9505      	str	r5, [sp, #20]
 8008ef8:	2322      	movs	r3, #34	; 0x22
 8008efa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009014 <_strtod_l+0x5ac>
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	f04f 0a00 	mov.w	sl, #0
 8008f04:	9b07      	ldr	r3, [sp, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f43f adf2 	beq.w	8008af0 <_strtod_l+0x88>
 8008f0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f001 fec6 	bl	800aca0 <_Bfree>
 8008f14:	9905      	ldr	r1, [sp, #20]
 8008f16:	4620      	mov	r0, r4
 8008f18:	f001 fec2 	bl	800aca0 <_Bfree>
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f001 febe 	bl	800aca0 <_Bfree>
 8008f24:	9907      	ldr	r1, [sp, #28]
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 feba 	bl	800aca0 <_Bfree>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f001 feb6 	bl	800aca0 <_Bfree>
 8008f34:	e5dc      	b.n	8008af0 <_strtod_l+0x88>
 8008f36:	4b36      	ldr	r3, [pc, #216]	; (8009010 <_strtod_l+0x5a8>)
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f40:	4650      	mov	r0, sl
 8008f42:	4659      	mov	r1, fp
 8008f44:	4699      	mov	r9, r3
 8008f46:	f1b8 0f01 	cmp.w	r8, #1
 8008f4a:	dc21      	bgt.n	8008f90 <_strtod_l+0x528>
 8008f4c:	b10b      	cbz	r3, 8008f52 <_strtod_l+0x4ea>
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	4b2f      	ldr	r3, [pc, #188]	; (8009010 <_strtod_l+0x5a8>)
 8008f54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f64:	f7f7 fb68 	bl	8000638 <__aeabi_dmul>
 8008f68:	4b2a      	ldr	r3, [pc, #168]	; (8009014 <_strtod_l+0x5ac>)
 8008f6a:	460a      	mov	r2, r1
 8008f6c:	400b      	ands	r3, r1
 8008f6e:	492a      	ldr	r1, [pc, #168]	; (8009018 <_strtod_l+0x5b0>)
 8008f70:	428b      	cmp	r3, r1
 8008f72:	4682      	mov	sl, r0
 8008f74:	d8bc      	bhi.n	8008ef0 <_strtod_l+0x488>
 8008f76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f7a:	428b      	cmp	r3, r1
 8008f7c:	bf86      	itte	hi
 8008f7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800901c <_strtod_l+0x5b4>
 8008f82:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	e084      	b.n	800909a <_strtod_l+0x632>
 8008f90:	f018 0f01 	tst.w	r8, #1
 8008f94:	d005      	beq.n	8008fa2 <_strtod_l+0x53a>
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f7f7 fb4c 	bl	8000638 <__aeabi_dmul>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	9a04      	ldr	r2, [sp, #16]
 8008fa4:	3208      	adds	r2, #8
 8008fa6:	f109 0901 	add.w	r9, r9, #1
 8008faa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fae:	9204      	str	r2, [sp, #16]
 8008fb0:	e7c9      	b.n	8008f46 <_strtod_l+0x4de>
 8008fb2:	d0ea      	beq.n	8008f8a <_strtod_l+0x522>
 8008fb4:	f1c8 0800 	rsb	r8, r8, #0
 8008fb8:	f018 020f 	ands.w	r2, r8, #15
 8008fbc:	d00a      	beq.n	8008fd4 <_strtod_l+0x56c>
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <_strtod_l+0x5a4>)
 8008fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	4659      	mov	r1, fp
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 fc5e 	bl	800088c <__aeabi_ddiv>
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fd8:	d0d7      	beq.n	8008f8a <_strtod_l+0x522>
 8008fda:	f1b8 0f1f 	cmp.w	r8, #31
 8008fde:	dd1f      	ble.n	8009020 <_strtod_l+0x5b8>
 8008fe0:	2500      	movs	r5, #0
 8008fe2:	462e      	mov	r6, r5
 8008fe4:	9507      	str	r5, [sp, #28]
 8008fe6:	9505      	str	r5, [sp, #20]
 8008fe8:	2322      	movs	r3, #34	; 0x22
 8008fea:	f04f 0a00 	mov.w	sl, #0
 8008fee:	f04f 0b00 	mov.w	fp, #0
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	e786      	b.n	8008f04 <_strtod_l+0x49c>
 8008ff6:	bf00      	nop
 8008ff8:	0800ce39 	.word	0x0800ce39
 8008ffc:	0800ce78 	.word	0x0800ce78
 8009000:	0800ce31 	.word	0x0800ce31
 8009004:	0800cfbc 	.word	0x0800cfbc
 8009008:	0800d283 	.word	0x0800d283
 800900c:	0800d148 	.word	0x0800d148
 8009010:	0800d120 	.word	0x0800d120
 8009014:	7ff00000 	.word	0x7ff00000
 8009018:	7ca00000 	.word	0x7ca00000
 800901c:	7fefffff 	.word	0x7fefffff
 8009020:	f018 0310 	ands.w	r3, r8, #16
 8009024:	bf18      	it	ne
 8009026:	236a      	movne	r3, #106	; 0x6a
 8009028:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80093d8 <_strtod_l+0x970>
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	4650      	mov	r0, sl
 8009030:	4659      	mov	r1, fp
 8009032:	2300      	movs	r3, #0
 8009034:	f018 0f01 	tst.w	r8, #1
 8009038:	d004      	beq.n	8009044 <_strtod_l+0x5dc>
 800903a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800903e:	f7f7 fafb 	bl	8000638 <__aeabi_dmul>
 8009042:	2301      	movs	r3, #1
 8009044:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009048:	f109 0908 	add.w	r9, r9, #8
 800904c:	d1f2      	bne.n	8009034 <_strtod_l+0x5cc>
 800904e:	b10b      	cbz	r3, 8009054 <_strtod_l+0x5ec>
 8009050:	4682      	mov	sl, r0
 8009052:	468b      	mov	fp, r1
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	b1c3      	cbz	r3, 800908a <_strtod_l+0x622>
 8009058:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800905c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009060:	2b00      	cmp	r3, #0
 8009062:	4659      	mov	r1, fp
 8009064:	dd11      	ble.n	800908a <_strtod_l+0x622>
 8009066:	2b1f      	cmp	r3, #31
 8009068:	f340 8124 	ble.w	80092b4 <_strtod_l+0x84c>
 800906c:	2b34      	cmp	r3, #52	; 0x34
 800906e:	bfde      	ittt	le
 8009070:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009074:	f04f 33ff 	movle.w	r3, #4294967295
 8009078:	fa03 f202 	lslle.w	r2, r3, r2
 800907c:	f04f 0a00 	mov.w	sl, #0
 8009080:	bfcc      	ite	gt
 8009082:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009086:	ea02 0b01 	andle.w	fp, r2, r1
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	4650      	mov	r0, sl
 8009090:	4659      	mov	r1, fp
 8009092:	f7f7 fd39 	bl	8000b08 <__aeabi_dcmpeq>
 8009096:	2800      	cmp	r0, #0
 8009098:	d1a2      	bne.n	8008fe0 <_strtod_l+0x578>
 800909a:	9b07      	ldr	r3, [sp, #28]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	9908      	ldr	r1, [sp, #32]
 80090a0:	462b      	mov	r3, r5
 80090a2:	463a      	mov	r2, r7
 80090a4:	4620      	mov	r0, r4
 80090a6:	f001 fe63 	bl	800ad70 <__s2b>
 80090aa:	9007      	str	r0, [sp, #28]
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f43f af1f 	beq.w	8008ef0 <_strtod_l+0x488>
 80090b2:	9b05      	ldr	r3, [sp, #20]
 80090b4:	1b9e      	subs	r6, r3, r6
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bfb4      	ite	lt
 80090bc:	4633      	movlt	r3, r6
 80090be:	2300      	movge	r3, #0
 80090c0:	930c      	str	r3, [sp, #48]	; 0x30
 80090c2:	9b06      	ldr	r3, [sp, #24]
 80090c4:	2500      	movs	r5, #0
 80090c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090ca:	9312      	str	r3, [sp, #72]	; 0x48
 80090cc:	462e      	mov	r6, r5
 80090ce:	9b07      	ldr	r3, [sp, #28]
 80090d0:	4620      	mov	r0, r4
 80090d2:	6859      	ldr	r1, [r3, #4]
 80090d4:	f001 fda4 	bl	800ac20 <_Balloc>
 80090d8:	9005      	str	r0, [sp, #20]
 80090da:	2800      	cmp	r0, #0
 80090dc:	f43f af0c 	beq.w	8008ef8 <_strtod_l+0x490>
 80090e0:	9b07      	ldr	r3, [sp, #28]
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	3202      	adds	r2, #2
 80090e6:	f103 010c 	add.w	r1, r3, #12
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	300c      	adds	r0, #12
 80090ee:	f001 fd89 	bl	800ac04 <memcpy>
 80090f2:	ec4b ab10 	vmov	d0, sl, fp
 80090f6:	aa1a      	add	r2, sp, #104	; 0x68
 80090f8:	a919      	add	r1, sp, #100	; 0x64
 80090fa:	4620      	mov	r0, r4
 80090fc:	f002 f97e 	bl	800b3fc <__d2b>
 8009100:	ec4b ab18 	vmov	d8, sl, fp
 8009104:	9018      	str	r0, [sp, #96]	; 0x60
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f aef6 	beq.w	8008ef8 <_strtod_l+0x490>
 800910c:	2101      	movs	r1, #1
 800910e:	4620      	mov	r0, r4
 8009110:	f001 fec8 	bl	800aea4 <__i2b>
 8009114:	4606      	mov	r6, r0
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f aeee 	beq.w	8008ef8 <_strtod_l+0x490>
 800911c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800911e:	9904      	ldr	r1, [sp, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfab      	itete	ge
 8009124:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009126:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800912a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800912e:	bfac      	ite	ge
 8009130:	eb03 0902 	addge.w	r9, r3, r2
 8009134:	1ad7      	sublt	r7, r2, r3
 8009136:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009138:	eba3 0801 	sub.w	r8, r3, r1
 800913c:	4490      	add	r8, r2
 800913e:	4ba1      	ldr	r3, [pc, #644]	; (80093c4 <_strtod_l+0x95c>)
 8009140:	f108 38ff 	add.w	r8, r8, #4294967295
 8009144:	4598      	cmp	r8, r3
 8009146:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800914a:	f280 80c7 	bge.w	80092dc <_strtod_l+0x874>
 800914e:	eba3 0308 	sub.w	r3, r3, r8
 8009152:	2b1f      	cmp	r3, #31
 8009154:	eba2 0203 	sub.w	r2, r2, r3
 8009158:	f04f 0101 	mov.w	r1, #1
 800915c:	f300 80b1 	bgt.w	80092c2 <_strtod_l+0x85a>
 8009160:	fa01 f303 	lsl.w	r3, r1, r3
 8009164:	930d      	str	r3, [sp, #52]	; 0x34
 8009166:	2300      	movs	r3, #0
 8009168:	9308      	str	r3, [sp, #32]
 800916a:	eb09 0802 	add.w	r8, r9, r2
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	45c1      	cmp	r9, r8
 8009172:	4417      	add	r7, r2
 8009174:	441f      	add	r7, r3
 8009176:	464b      	mov	r3, r9
 8009178:	bfa8      	it	ge
 800917a:	4643      	movge	r3, r8
 800917c:	42bb      	cmp	r3, r7
 800917e:	bfa8      	it	ge
 8009180:	463b      	movge	r3, r7
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfc2      	ittt	gt
 8009186:	eba8 0803 	subgt.w	r8, r8, r3
 800918a:	1aff      	subgt	r7, r7, r3
 800918c:	eba9 0903 	subgt.w	r9, r9, r3
 8009190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009192:	2b00      	cmp	r3, #0
 8009194:	dd17      	ble.n	80091c6 <_strtod_l+0x75e>
 8009196:	4631      	mov	r1, r6
 8009198:	461a      	mov	r2, r3
 800919a:	4620      	mov	r0, r4
 800919c:	f001 ff42 	bl	800b024 <__pow5mult>
 80091a0:	4606      	mov	r6, r0
 80091a2:	2800      	cmp	r0, #0
 80091a4:	f43f aea8 	beq.w	8008ef8 <_strtod_l+0x490>
 80091a8:	4601      	mov	r1, r0
 80091aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091ac:	4620      	mov	r0, r4
 80091ae:	f001 fe8f 	bl	800aed0 <__multiply>
 80091b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f43f ae9f 	beq.w	8008ef8 <_strtod_l+0x490>
 80091ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091bc:	4620      	mov	r0, r4
 80091be:	f001 fd6f 	bl	800aca0 <_Bfree>
 80091c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c4:	9318      	str	r3, [sp, #96]	; 0x60
 80091c6:	f1b8 0f00 	cmp.w	r8, #0
 80091ca:	f300 808c 	bgt.w	80092e6 <_strtod_l+0x87e>
 80091ce:	9b06      	ldr	r3, [sp, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dd08      	ble.n	80091e6 <_strtod_l+0x77e>
 80091d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091d6:	9905      	ldr	r1, [sp, #20]
 80091d8:	4620      	mov	r0, r4
 80091da:	f001 ff23 	bl	800b024 <__pow5mult>
 80091de:	9005      	str	r0, [sp, #20]
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f43f ae89 	beq.w	8008ef8 <_strtod_l+0x490>
 80091e6:	2f00      	cmp	r7, #0
 80091e8:	dd08      	ble.n	80091fc <_strtod_l+0x794>
 80091ea:	9905      	ldr	r1, [sp, #20]
 80091ec:	463a      	mov	r2, r7
 80091ee:	4620      	mov	r0, r4
 80091f0:	f001 ff72 	bl	800b0d8 <__lshift>
 80091f4:	9005      	str	r0, [sp, #20]
 80091f6:	2800      	cmp	r0, #0
 80091f8:	f43f ae7e 	beq.w	8008ef8 <_strtod_l+0x490>
 80091fc:	f1b9 0f00 	cmp.w	r9, #0
 8009200:	dd08      	ble.n	8009214 <_strtod_l+0x7ac>
 8009202:	4631      	mov	r1, r6
 8009204:	464a      	mov	r2, r9
 8009206:	4620      	mov	r0, r4
 8009208:	f001 ff66 	bl	800b0d8 <__lshift>
 800920c:	4606      	mov	r6, r0
 800920e:	2800      	cmp	r0, #0
 8009210:	f43f ae72 	beq.w	8008ef8 <_strtod_l+0x490>
 8009214:	9a05      	ldr	r2, [sp, #20]
 8009216:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009218:	4620      	mov	r0, r4
 800921a:	f001 ffe9 	bl	800b1f0 <__mdiff>
 800921e:	4605      	mov	r5, r0
 8009220:	2800      	cmp	r0, #0
 8009222:	f43f ae69 	beq.w	8008ef8 <_strtod_l+0x490>
 8009226:	68c3      	ldr	r3, [r0, #12]
 8009228:	930b      	str	r3, [sp, #44]	; 0x2c
 800922a:	2300      	movs	r3, #0
 800922c:	60c3      	str	r3, [r0, #12]
 800922e:	4631      	mov	r1, r6
 8009230:	f001 ffc2 	bl	800b1b8 <__mcmp>
 8009234:	2800      	cmp	r0, #0
 8009236:	da60      	bge.n	80092fa <_strtod_l+0x892>
 8009238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923a:	ea53 030a 	orrs.w	r3, r3, sl
 800923e:	f040 8082 	bne.w	8009346 <_strtod_l+0x8de>
 8009242:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009246:	2b00      	cmp	r3, #0
 8009248:	d17d      	bne.n	8009346 <_strtod_l+0x8de>
 800924a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800924e:	0d1b      	lsrs	r3, r3, #20
 8009250:	051b      	lsls	r3, r3, #20
 8009252:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009256:	d976      	bls.n	8009346 <_strtod_l+0x8de>
 8009258:	696b      	ldr	r3, [r5, #20]
 800925a:	b913      	cbnz	r3, 8009262 <_strtod_l+0x7fa>
 800925c:	692b      	ldr	r3, [r5, #16]
 800925e:	2b01      	cmp	r3, #1
 8009260:	dd71      	ble.n	8009346 <_strtod_l+0x8de>
 8009262:	4629      	mov	r1, r5
 8009264:	2201      	movs	r2, #1
 8009266:	4620      	mov	r0, r4
 8009268:	f001 ff36 	bl	800b0d8 <__lshift>
 800926c:	4631      	mov	r1, r6
 800926e:	4605      	mov	r5, r0
 8009270:	f001 ffa2 	bl	800b1b8 <__mcmp>
 8009274:	2800      	cmp	r0, #0
 8009276:	dd66      	ble.n	8009346 <_strtod_l+0x8de>
 8009278:	9904      	ldr	r1, [sp, #16]
 800927a:	4a53      	ldr	r2, [pc, #332]	; (80093c8 <_strtod_l+0x960>)
 800927c:	465b      	mov	r3, fp
 800927e:	2900      	cmp	r1, #0
 8009280:	f000 8081 	beq.w	8009386 <_strtod_l+0x91e>
 8009284:	ea02 010b 	and.w	r1, r2, fp
 8009288:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800928c:	dc7b      	bgt.n	8009386 <_strtod_l+0x91e>
 800928e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009292:	f77f aea9 	ble.w	8008fe8 <_strtod_l+0x580>
 8009296:	4b4d      	ldr	r3, [pc, #308]	; (80093cc <_strtod_l+0x964>)
 8009298:	4650      	mov	r0, sl
 800929a:	4659      	mov	r1, fp
 800929c:	2200      	movs	r2, #0
 800929e:	f7f7 f9cb 	bl	8000638 <__aeabi_dmul>
 80092a2:	460b      	mov	r3, r1
 80092a4:	4303      	orrs	r3, r0
 80092a6:	bf08      	it	eq
 80092a8:	2322      	moveq	r3, #34	; 0x22
 80092aa:	4682      	mov	sl, r0
 80092ac:	468b      	mov	fp, r1
 80092ae:	bf08      	it	eq
 80092b0:	6023      	streq	r3, [r4, #0]
 80092b2:	e62b      	b.n	8008f0c <_strtod_l+0x4a4>
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	fa02 f303 	lsl.w	r3, r2, r3
 80092bc:	ea03 0a0a 	and.w	sl, r3, sl
 80092c0:	e6e3      	b.n	800908a <_strtod_l+0x622>
 80092c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80092ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80092ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80092d2:	fa01 f308 	lsl.w	r3, r1, r8
 80092d6:	9308      	str	r3, [sp, #32]
 80092d8:	910d      	str	r1, [sp, #52]	; 0x34
 80092da:	e746      	b.n	800916a <_strtod_l+0x702>
 80092dc:	2300      	movs	r3, #0
 80092de:	9308      	str	r3, [sp, #32]
 80092e0:	2301      	movs	r3, #1
 80092e2:	930d      	str	r3, [sp, #52]	; 0x34
 80092e4:	e741      	b.n	800916a <_strtod_l+0x702>
 80092e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092e8:	4642      	mov	r2, r8
 80092ea:	4620      	mov	r0, r4
 80092ec:	f001 fef4 	bl	800b0d8 <__lshift>
 80092f0:	9018      	str	r0, [sp, #96]	; 0x60
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f47f af6b 	bne.w	80091ce <_strtod_l+0x766>
 80092f8:	e5fe      	b.n	8008ef8 <_strtod_l+0x490>
 80092fa:	465f      	mov	r7, fp
 80092fc:	d16e      	bne.n	80093dc <_strtod_l+0x974>
 80092fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009304:	b342      	cbz	r2, 8009358 <_strtod_l+0x8f0>
 8009306:	4a32      	ldr	r2, [pc, #200]	; (80093d0 <_strtod_l+0x968>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d128      	bne.n	800935e <_strtod_l+0x8f6>
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	4651      	mov	r1, sl
 8009310:	b1eb      	cbz	r3, 800934e <_strtod_l+0x8e6>
 8009312:	4b2d      	ldr	r3, [pc, #180]	; (80093c8 <_strtod_l+0x960>)
 8009314:	403b      	ands	r3, r7
 8009316:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	d819      	bhi.n	8009354 <_strtod_l+0x8ec>
 8009320:	0d1b      	lsrs	r3, r3, #20
 8009322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009326:	fa02 f303 	lsl.w	r3, r2, r3
 800932a:	4299      	cmp	r1, r3
 800932c:	d117      	bne.n	800935e <_strtod_l+0x8f6>
 800932e:	4b29      	ldr	r3, [pc, #164]	; (80093d4 <_strtod_l+0x96c>)
 8009330:	429f      	cmp	r7, r3
 8009332:	d102      	bne.n	800933a <_strtod_l+0x8d2>
 8009334:	3101      	adds	r1, #1
 8009336:	f43f addf 	beq.w	8008ef8 <_strtod_l+0x490>
 800933a:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <_strtod_l+0x960>)
 800933c:	403b      	ands	r3, r7
 800933e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009342:	f04f 0a00 	mov.w	sl, #0
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1a4      	bne.n	8009296 <_strtod_l+0x82e>
 800934c:	e5de      	b.n	8008f0c <_strtod_l+0x4a4>
 800934e:	f04f 33ff 	mov.w	r3, #4294967295
 8009352:	e7ea      	b.n	800932a <_strtod_l+0x8c2>
 8009354:	4613      	mov	r3, r2
 8009356:	e7e8      	b.n	800932a <_strtod_l+0x8c2>
 8009358:	ea53 030a 	orrs.w	r3, r3, sl
 800935c:	d08c      	beq.n	8009278 <_strtod_l+0x810>
 800935e:	9b08      	ldr	r3, [sp, #32]
 8009360:	b1db      	cbz	r3, 800939a <_strtod_l+0x932>
 8009362:	423b      	tst	r3, r7
 8009364:	d0ef      	beq.n	8009346 <_strtod_l+0x8de>
 8009366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009368:	9a04      	ldr	r2, [sp, #16]
 800936a:	4650      	mov	r0, sl
 800936c:	4659      	mov	r1, fp
 800936e:	b1c3      	cbz	r3, 80093a2 <_strtod_l+0x93a>
 8009370:	f7ff fb5e 	bl	8008a30 <sulp>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	ec51 0b18 	vmov	r0, r1, d8
 800937c:	f7f6 ffa6 	bl	80002cc <__adddf3>
 8009380:	4682      	mov	sl, r0
 8009382:	468b      	mov	fp, r1
 8009384:	e7df      	b.n	8009346 <_strtod_l+0x8de>
 8009386:	4013      	ands	r3, r2
 8009388:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800938c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009390:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009394:	f04f 3aff 	mov.w	sl, #4294967295
 8009398:	e7d5      	b.n	8009346 <_strtod_l+0x8de>
 800939a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800939c:	ea13 0f0a 	tst.w	r3, sl
 80093a0:	e7e0      	b.n	8009364 <_strtod_l+0x8fc>
 80093a2:	f7ff fb45 	bl	8008a30 <sulp>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	ec51 0b18 	vmov	r0, r1, d8
 80093ae:	f7f6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80093b2:	2200      	movs	r2, #0
 80093b4:	2300      	movs	r3, #0
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	f7f7 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d0c1      	beq.n	8009346 <_strtod_l+0x8de>
 80093c2:	e611      	b.n	8008fe8 <_strtod_l+0x580>
 80093c4:	fffffc02 	.word	0xfffffc02
 80093c8:	7ff00000 	.word	0x7ff00000
 80093cc:	39500000 	.word	0x39500000
 80093d0:	000fffff 	.word	0x000fffff
 80093d4:	7fefffff 	.word	0x7fefffff
 80093d8:	0800ce90 	.word	0x0800ce90
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	f002 f868 	bl	800b4b4 <__ratio>
 80093e4:	ec59 8b10 	vmov	r8, r9, d0
 80093e8:	ee10 0a10 	vmov	r0, s0
 80093ec:	2200      	movs	r2, #0
 80093ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 fb9c 	bl	8000b30 <__aeabi_dcmple>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d07a      	beq.n	80094f2 <_strtod_l+0xa8a>
 80093fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d04a      	beq.n	8009498 <_strtod_l+0xa30>
 8009402:	4b95      	ldr	r3, [pc, #596]	; (8009658 <_strtod_l+0xbf0>)
 8009404:	2200      	movs	r2, #0
 8009406:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800940a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009658 <_strtod_l+0xbf0>
 800940e:	f04f 0800 	mov.w	r8, #0
 8009412:	4b92      	ldr	r3, [pc, #584]	; (800965c <_strtod_l+0xbf4>)
 8009414:	403b      	ands	r3, r7
 8009416:	930d      	str	r3, [sp, #52]	; 0x34
 8009418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800941a:	4b91      	ldr	r3, [pc, #580]	; (8009660 <_strtod_l+0xbf8>)
 800941c:	429a      	cmp	r2, r3
 800941e:	f040 80b0 	bne.w	8009582 <_strtod_l+0xb1a>
 8009422:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009426:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800942a:	ec4b ab10 	vmov	d0, sl, fp
 800942e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009432:	f001 ff67 	bl	800b304 <__ulp>
 8009436:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800943a:	ec53 2b10 	vmov	r2, r3, d0
 800943e:	f7f7 f8fb 	bl	8000638 <__aeabi_dmul>
 8009442:	4652      	mov	r2, sl
 8009444:	465b      	mov	r3, fp
 8009446:	f7f6 ff41 	bl	80002cc <__adddf3>
 800944a:	460b      	mov	r3, r1
 800944c:	4983      	ldr	r1, [pc, #524]	; (800965c <_strtod_l+0xbf4>)
 800944e:	4a85      	ldr	r2, [pc, #532]	; (8009664 <_strtod_l+0xbfc>)
 8009450:	4019      	ands	r1, r3
 8009452:	4291      	cmp	r1, r2
 8009454:	4682      	mov	sl, r0
 8009456:	d960      	bls.n	800951a <_strtod_l+0xab2>
 8009458:	ee18 3a90 	vmov	r3, s17
 800945c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009460:	4293      	cmp	r3, r2
 8009462:	d104      	bne.n	800946e <_strtod_l+0xa06>
 8009464:	ee18 3a10 	vmov	r3, s16
 8009468:	3301      	adds	r3, #1
 800946a:	f43f ad45 	beq.w	8008ef8 <_strtod_l+0x490>
 800946e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009670 <_strtod_l+0xc08>
 8009472:	f04f 3aff 	mov.w	sl, #4294967295
 8009476:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009478:	4620      	mov	r0, r4
 800947a:	f001 fc11 	bl	800aca0 <_Bfree>
 800947e:	9905      	ldr	r1, [sp, #20]
 8009480:	4620      	mov	r0, r4
 8009482:	f001 fc0d 	bl	800aca0 <_Bfree>
 8009486:	4631      	mov	r1, r6
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fc09 	bl	800aca0 <_Bfree>
 800948e:	4629      	mov	r1, r5
 8009490:	4620      	mov	r0, r4
 8009492:	f001 fc05 	bl	800aca0 <_Bfree>
 8009496:	e61a      	b.n	80090ce <_strtod_l+0x666>
 8009498:	f1ba 0f00 	cmp.w	sl, #0
 800949c:	d11b      	bne.n	80094d6 <_strtod_l+0xa6e>
 800949e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094a2:	b9f3      	cbnz	r3, 80094e2 <_strtod_l+0xa7a>
 80094a4:	4b6c      	ldr	r3, [pc, #432]	; (8009658 <_strtod_l+0xbf0>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80094b0:	b9d0      	cbnz	r0, 80094e8 <_strtod_l+0xa80>
 80094b2:	4640      	mov	r0, r8
 80094b4:	4649      	mov	r1, r9
 80094b6:	4b6c      	ldr	r3, [pc, #432]	; (8009668 <_strtod_l+0xc00>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8bd 	bl	8000638 <__aeabi_dmul>
 80094be:	4680      	mov	r8, r0
 80094c0:	4689      	mov	r9, r1
 80094c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80094ca:	9315      	str	r3, [sp, #84]	; 0x54
 80094cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094d4:	e79d      	b.n	8009412 <_strtod_l+0x9aa>
 80094d6:	f1ba 0f01 	cmp.w	sl, #1
 80094da:	d102      	bne.n	80094e2 <_strtod_l+0xa7a>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	f43f ad83 	beq.w	8008fe8 <_strtod_l+0x580>
 80094e2:	4b62      	ldr	r3, [pc, #392]	; (800966c <_strtod_l+0xc04>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	e78e      	b.n	8009406 <_strtod_l+0x99e>
 80094e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009668 <_strtod_l+0xc00>
 80094ec:	f04f 0800 	mov.w	r8, #0
 80094f0:	e7e7      	b.n	80094c2 <_strtod_l+0xa5a>
 80094f2:	4b5d      	ldr	r3, [pc, #372]	; (8009668 <_strtod_l+0xc00>)
 80094f4:	4640      	mov	r0, r8
 80094f6:	4649      	mov	r1, r9
 80094f8:	2200      	movs	r2, #0
 80094fa:	f7f7 f89d 	bl	8000638 <__aeabi_dmul>
 80094fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009500:	4680      	mov	r8, r0
 8009502:	4689      	mov	r9, r1
 8009504:	b933      	cbnz	r3, 8009514 <_strtod_l+0xaac>
 8009506:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800950a:	900e      	str	r0, [sp, #56]	; 0x38
 800950c:	930f      	str	r3, [sp, #60]	; 0x3c
 800950e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009512:	e7dd      	b.n	80094d0 <_strtod_l+0xa68>
 8009514:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009518:	e7f9      	b.n	800950e <_strtod_l+0xaa6>
 800951a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1a8      	bne.n	8009476 <_strtod_l+0xa0e>
 8009524:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800952a:	0d1b      	lsrs	r3, r3, #20
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	429a      	cmp	r2, r3
 8009530:	d1a1      	bne.n	8009476 <_strtod_l+0xa0e>
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f7 fbdf 	bl	8000cf8 <__aeabi_d2lz>
 800953a:	f7f7 f84f 	bl	80005dc <__aeabi_l2d>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	f7f6 febf 	bl	80002c8 <__aeabi_dsub>
 800954a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800954c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009550:	ea43 030a 	orr.w	r3, r3, sl
 8009554:	4313      	orrs	r3, r2
 8009556:	4680      	mov	r8, r0
 8009558:	4689      	mov	r9, r1
 800955a:	d055      	beq.n	8009608 <_strtod_l+0xba0>
 800955c:	a336      	add	r3, pc, #216	; (adr r3, 8009638 <_strtod_l+0xbd0>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f7f7 fadb 	bl	8000b1c <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	f47f acd0 	bne.w	8008f0c <_strtod_l+0x4a4>
 800956c:	a334      	add	r3, pc, #208	; (adr r3, 8009640 <_strtod_l+0xbd8>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f7 faef 	bl	8000b58 <__aeabi_dcmpgt>
 800957a:	2800      	cmp	r0, #0
 800957c:	f43f af7b 	beq.w	8009476 <_strtod_l+0xa0e>
 8009580:	e4c4      	b.n	8008f0c <_strtod_l+0x4a4>
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	b333      	cbz	r3, 80095d4 <_strtod_l+0xb6c>
 8009586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009588:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800958c:	d822      	bhi.n	80095d4 <_strtod_l+0xb6c>
 800958e:	a32e      	add	r3, pc, #184	; (adr r3, 8009648 <_strtod_l+0xbe0>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	4640      	mov	r0, r8
 8009596:	4649      	mov	r1, r9
 8009598:	f7f7 faca 	bl	8000b30 <__aeabi_dcmple>
 800959c:	b1a0      	cbz	r0, 80095c8 <_strtod_l+0xb60>
 800959e:	4649      	mov	r1, r9
 80095a0:	4640      	mov	r0, r8
 80095a2:	f7f7 fb21 	bl	8000be8 <__aeabi_d2uiz>
 80095a6:	2801      	cmp	r0, #1
 80095a8:	bf38      	it	cc
 80095aa:	2001      	movcc	r0, #1
 80095ac:	f7f6 ffca 	bl	8000544 <__aeabi_ui2d>
 80095b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	bb23      	cbnz	r3, 8009602 <_strtod_l+0xb9a>
 80095b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095bc:	9010      	str	r0, [sp, #64]	; 0x40
 80095be:	9311      	str	r3, [sp, #68]	; 0x44
 80095c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095d0:	1a9b      	subs	r3, r3, r2
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095d8:	eeb0 0a48 	vmov.f32	s0, s16
 80095dc:	eef0 0a68 	vmov.f32	s1, s17
 80095e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095e4:	f001 fe8e 	bl	800b304 <__ulp>
 80095e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095ec:	ec53 2b10 	vmov	r2, r3, d0
 80095f0:	f7f7 f822 	bl	8000638 <__aeabi_dmul>
 80095f4:	ec53 2b18 	vmov	r2, r3, d8
 80095f8:	f7f6 fe68 	bl	80002cc <__adddf3>
 80095fc:	4682      	mov	sl, r0
 80095fe:	468b      	mov	fp, r1
 8009600:	e78d      	b.n	800951e <_strtod_l+0xab6>
 8009602:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009606:	e7db      	b.n	80095c0 <_strtod_l+0xb58>
 8009608:	a311      	add	r3, pc, #68	; (adr r3, 8009650 <_strtod_l+0xbe8>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f7f7 fa85 	bl	8000b1c <__aeabi_dcmplt>
 8009612:	e7b2      	b.n	800957a <_strtod_l+0xb12>
 8009614:	2300      	movs	r3, #0
 8009616:	930a      	str	r3, [sp, #40]	; 0x28
 8009618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800961a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	f7ff ba6b 	b.w	8008af8 <_strtod_l+0x90>
 8009622:	2a65      	cmp	r2, #101	; 0x65
 8009624:	f43f ab5f 	beq.w	8008ce6 <_strtod_l+0x27e>
 8009628:	2a45      	cmp	r2, #69	; 0x45
 800962a:	f43f ab5c 	beq.w	8008ce6 <_strtod_l+0x27e>
 800962e:	2301      	movs	r3, #1
 8009630:	f7ff bb94 	b.w	8008d5c <_strtod_l+0x2f4>
 8009634:	f3af 8000 	nop.w
 8009638:	94a03595 	.word	0x94a03595
 800963c:	3fdfffff 	.word	0x3fdfffff
 8009640:	35afe535 	.word	0x35afe535
 8009644:	3fe00000 	.word	0x3fe00000
 8009648:	ffc00000 	.word	0xffc00000
 800964c:	41dfffff 	.word	0x41dfffff
 8009650:	94a03595 	.word	0x94a03595
 8009654:	3fcfffff 	.word	0x3fcfffff
 8009658:	3ff00000 	.word	0x3ff00000
 800965c:	7ff00000 	.word	0x7ff00000
 8009660:	7fe00000 	.word	0x7fe00000
 8009664:	7c9fffff 	.word	0x7c9fffff
 8009668:	3fe00000 	.word	0x3fe00000
 800966c:	bff00000 	.word	0xbff00000
 8009670:	7fefffff 	.word	0x7fefffff

08009674 <_strtod_r>:
 8009674:	4b01      	ldr	r3, [pc, #4]	; (800967c <_strtod_r+0x8>)
 8009676:	f7ff b9f7 	b.w	8008a68 <_strtod_l>
 800967a:	bf00      	nop
 800967c:	200000a4 	.word	0x200000a4

08009680 <_strtol_l.constprop.0>:
 8009680:	2b01      	cmp	r3, #1
 8009682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009686:	d001      	beq.n	800968c <_strtol_l.constprop.0+0xc>
 8009688:	2b24      	cmp	r3, #36	; 0x24
 800968a:	d906      	bls.n	800969a <_strtol_l.constprop.0+0x1a>
 800968c:	f7fe fa7a 	bl	8007b84 <__errno>
 8009690:	2316      	movs	r3, #22
 8009692:	6003      	str	r3, [r0, #0]
 8009694:	2000      	movs	r0, #0
 8009696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009780 <_strtol_l.constprop.0+0x100>
 800969e:	460d      	mov	r5, r1
 80096a0:	462e      	mov	r6, r5
 80096a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80096aa:	f017 0708 	ands.w	r7, r7, #8
 80096ae:	d1f7      	bne.n	80096a0 <_strtol_l.constprop.0+0x20>
 80096b0:	2c2d      	cmp	r4, #45	; 0x2d
 80096b2:	d132      	bne.n	800971a <_strtol_l.constprop.0+0x9a>
 80096b4:	782c      	ldrb	r4, [r5, #0]
 80096b6:	2701      	movs	r7, #1
 80096b8:	1cb5      	adds	r5, r6, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d05b      	beq.n	8009776 <_strtol_l.constprop.0+0xf6>
 80096be:	2b10      	cmp	r3, #16
 80096c0:	d109      	bne.n	80096d6 <_strtol_l.constprop.0+0x56>
 80096c2:	2c30      	cmp	r4, #48	; 0x30
 80096c4:	d107      	bne.n	80096d6 <_strtol_l.constprop.0+0x56>
 80096c6:	782c      	ldrb	r4, [r5, #0]
 80096c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096cc:	2c58      	cmp	r4, #88	; 0x58
 80096ce:	d14d      	bne.n	800976c <_strtol_l.constprop.0+0xec>
 80096d0:	786c      	ldrb	r4, [r5, #1]
 80096d2:	2310      	movs	r3, #16
 80096d4:	3502      	adds	r5, #2
 80096d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096da:	f108 38ff 	add.w	r8, r8, #4294967295
 80096de:	f04f 0c00 	mov.w	ip, #0
 80096e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80096e6:	4666      	mov	r6, ip
 80096e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80096ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80096f0:	f1be 0f09 	cmp.w	lr, #9
 80096f4:	d816      	bhi.n	8009724 <_strtol_l.constprop.0+0xa4>
 80096f6:	4674      	mov	r4, lr
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	dd24      	ble.n	8009746 <_strtol_l.constprop.0+0xc6>
 80096fc:	f1bc 0f00 	cmp.w	ip, #0
 8009700:	db1e      	blt.n	8009740 <_strtol_l.constprop.0+0xc0>
 8009702:	45b1      	cmp	r9, r6
 8009704:	d31c      	bcc.n	8009740 <_strtol_l.constprop.0+0xc0>
 8009706:	d101      	bne.n	800970c <_strtol_l.constprop.0+0x8c>
 8009708:	45a2      	cmp	sl, r4
 800970a:	db19      	blt.n	8009740 <_strtol_l.constprop.0+0xc0>
 800970c:	fb06 4603 	mla	r6, r6, r3, r4
 8009710:	f04f 0c01 	mov.w	ip, #1
 8009714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009718:	e7e8      	b.n	80096ec <_strtol_l.constprop.0+0x6c>
 800971a:	2c2b      	cmp	r4, #43	; 0x2b
 800971c:	bf04      	itt	eq
 800971e:	782c      	ldrbeq	r4, [r5, #0]
 8009720:	1cb5      	addeq	r5, r6, #2
 8009722:	e7ca      	b.n	80096ba <_strtol_l.constprop.0+0x3a>
 8009724:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009728:	f1be 0f19 	cmp.w	lr, #25
 800972c:	d801      	bhi.n	8009732 <_strtol_l.constprop.0+0xb2>
 800972e:	3c37      	subs	r4, #55	; 0x37
 8009730:	e7e2      	b.n	80096f8 <_strtol_l.constprop.0+0x78>
 8009732:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009736:	f1be 0f19 	cmp.w	lr, #25
 800973a:	d804      	bhi.n	8009746 <_strtol_l.constprop.0+0xc6>
 800973c:	3c57      	subs	r4, #87	; 0x57
 800973e:	e7db      	b.n	80096f8 <_strtol_l.constprop.0+0x78>
 8009740:	f04f 3cff 	mov.w	ip, #4294967295
 8009744:	e7e6      	b.n	8009714 <_strtol_l.constprop.0+0x94>
 8009746:	f1bc 0f00 	cmp.w	ip, #0
 800974a:	da05      	bge.n	8009758 <_strtol_l.constprop.0+0xd8>
 800974c:	2322      	movs	r3, #34	; 0x22
 800974e:	6003      	str	r3, [r0, #0]
 8009750:	4646      	mov	r6, r8
 8009752:	b942      	cbnz	r2, 8009766 <_strtol_l.constprop.0+0xe6>
 8009754:	4630      	mov	r0, r6
 8009756:	e79e      	b.n	8009696 <_strtol_l.constprop.0+0x16>
 8009758:	b107      	cbz	r7, 800975c <_strtol_l.constprop.0+0xdc>
 800975a:	4276      	negs	r6, r6
 800975c:	2a00      	cmp	r2, #0
 800975e:	d0f9      	beq.n	8009754 <_strtol_l.constprop.0+0xd4>
 8009760:	f1bc 0f00 	cmp.w	ip, #0
 8009764:	d000      	beq.n	8009768 <_strtol_l.constprop.0+0xe8>
 8009766:	1e69      	subs	r1, r5, #1
 8009768:	6011      	str	r1, [r2, #0]
 800976a:	e7f3      	b.n	8009754 <_strtol_l.constprop.0+0xd4>
 800976c:	2430      	movs	r4, #48	; 0x30
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1b1      	bne.n	80096d6 <_strtol_l.constprop.0+0x56>
 8009772:	2308      	movs	r3, #8
 8009774:	e7af      	b.n	80096d6 <_strtol_l.constprop.0+0x56>
 8009776:	2c30      	cmp	r4, #48	; 0x30
 8009778:	d0a5      	beq.n	80096c6 <_strtol_l.constprop.0+0x46>
 800977a:	230a      	movs	r3, #10
 800977c:	e7ab      	b.n	80096d6 <_strtol_l.constprop.0+0x56>
 800977e:	bf00      	nop
 8009780:	0800ceb9 	.word	0x0800ceb9

08009784 <_strtol_r>:
 8009784:	f7ff bf7c 	b.w	8009680 <_strtol_l.constprop.0>

08009788 <_write_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	; (80097a8 <_write_r+0x20>)
 800978c:	4604      	mov	r4, r0
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	2200      	movs	r2, #0
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f7f8 fdc5 	bl	8002326 <_write>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_write_r+0x1e>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_write_r+0x1e>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	200004d4 	.word	0x200004d4

080097ac <_close_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	; (80097c8 <_close_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f8 fdd1 	bl	800235e <_close>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_close_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_close_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	200004d4 	.word	0x200004d4

080097cc <quorem>:
 80097cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	6903      	ldr	r3, [r0, #16]
 80097d2:	690c      	ldr	r4, [r1, #16]
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	4607      	mov	r7, r0
 80097d8:	f2c0 8081 	blt.w	80098de <quorem+0x112>
 80097dc:	3c01      	subs	r4, #1
 80097de:	f101 0814 	add.w	r8, r1, #20
 80097e2:	f100 0514 	add.w	r5, r0, #20
 80097e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097f4:	3301      	adds	r3, #1
 80097f6:	429a      	cmp	r2, r3
 80097f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009800:	fbb2 f6f3 	udiv	r6, r2, r3
 8009804:	d331      	bcc.n	800986a <quorem+0x9e>
 8009806:	f04f 0e00 	mov.w	lr, #0
 800980a:	4640      	mov	r0, r8
 800980c:	46ac      	mov	ip, r5
 800980e:	46f2      	mov	sl, lr
 8009810:	f850 2b04 	ldr.w	r2, [r0], #4
 8009814:	b293      	uxth	r3, r2
 8009816:	fb06 e303 	mla	r3, r6, r3, lr
 800981a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800981e:	b29b      	uxth	r3, r3
 8009820:	ebaa 0303 	sub.w	r3, sl, r3
 8009824:	f8dc a000 	ldr.w	sl, [ip]
 8009828:	0c12      	lsrs	r2, r2, #16
 800982a:	fa13 f38a 	uxtah	r3, r3, sl
 800982e:	fb06 e202 	mla	r2, r6, r2, lr
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	9b00      	ldr	r3, [sp, #0]
 8009836:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800983a:	b292      	uxth	r2, r2
 800983c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009844:	f8bd 3000 	ldrh.w	r3, [sp]
 8009848:	4581      	cmp	r9, r0
 800984a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800984e:	f84c 3b04 	str.w	r3, [ip], #4
 8009852:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009856:	d2db      	bcs.n	8009810 <quorem+0x44>
 8009858:	f855 300b 	ldr.w	r3, [r5, fp]
 800985c:	b92b      	cbnz	r3, 800986a <quorem+0x9e>
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	3b04      	subs	r3, #4
 8009862:	429d      	cmp	r5, r3
 8009864:	461a      	mov	r2, r3
 8009866:	d32e      	bcc.n	80098c6 <quorem+0xfa>
 8009868:	613c      	str	r4, [r7, #16]
 800986a:	4638      	mov	r0, r7
 800986c:	f001 fca4 	bl	800b1b8 <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	db24      	blt.n	80098be <quorem+0xf2>
 8009874:	3601      	adds	r6, #1
 8009876:	4628      	mov	r0, r5
 8009878:	f04f 0c00 	mov.w	ip, #0
 800987c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009880:	f8d0 e000 	ldr.w	lr, [r0]
 8009884:	b293      	uxth	r3, r2
 8009886:	ebac 0303 	sub.w	r3, ip, r3
 800988a:	0c12      	lsrs	r2, r2, #16
 800988c:	fa13 f38e 	uxtah	r3, r3, lr
 8009890:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009894:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009898:	b29b      	uxth	r3, r3
 800989a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800989e:	45c1      	cmp	r9, r8
 80098a0:	f840 3b04 	str.w	r3, [r0], #4
 80098a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098a8:	d2e8      	bcs.n	800987c <quorem+0xb0>
 80098aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098b2:	b922      	cbnz	r2, 80098be <quorem+0xf2>
 80098b4:	3b04      	subs	r3, #4
 80098b6:	429d      	cmp	r5, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	d30a      	bcc.n	80098d2 <quorem+0x106>
 80098bc:	613c      	str	r4, [r7, #16]
 80098be:	4630      	mov	r0, r6
 80098c0:	b003      	add	sp, #12
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	3b04      	subs	r3, #4
 80098ca:	2a00      	cmp	r2, #0
 80098cc:	d1cc      	bne.n	8009868 <quorem+0x9c>
 80098ce:	3c01      	subs	r4, #1
 80098d0:	e7c7      	b.n	8009862 <quorem+0x96>
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	3b04      	subs	r3, #4
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d1f0      	bne.n	80098bc <quorem+0xf0>
 80098da:	3c01      	subs	r4, #1
 80098dc:	e7eb      	b.n	80098b6 <quorem+0xea>
 80098de:	2000      	movs	r0, #0
 80098e0:	e7ee      	b.n	80098c0 <quorem+0xf4>
 80098e2:	0000      	movs	r0, r0
 80098e4:	0000      	movs	r0, r0
	...

080098e8 <_dtoa_r>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	ed2d 8b04 	vpush	{d8-d9}
 80098f0:	ec57 6b10 	vmov	r6, r7, d0
 80098f4:	b093      	sub	sp, #76	; 0x4c
 80098f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098fc:	9106      	str	r1, [sp, #24]
 80098fe:	ee10 aa10 	vmov	sl, s0
 8009902:	4604      	mov	r4, r0
 8009904:	9209      	str	r2, [sp, #36]	; 0x24
 8009906:	930c      	str	r3, [sp, #48]	; 0x30
 8009908:	46bb      	mov	fp, r7
 800990a:	b975      	cbnz	r5, 800992a <_dtoa_r+0x42>
 800990c:	2010      	movs	r0, #16
 800990e:	f001 f95f 	bl	800abd0 <malloc>
 8009912:	4602      	mov	r2, r0
 8009914:	6260      	str	r0, [r4, #36]	; 0x24
 8009916:	b920      	cbnz	r0, 8009922 <_dtoa_r+0x3a>
 8009918:	4ba7      	ldr	r3, [pc, #668]	; (8009bb8 <_dtoa_r+0x2d0>)
 800991a:	21ea      	movs	r1, #234	; 0xea
 800991c:	48a7      	ldr	r0, [pc, #668]	; (8009bbc <_dtoa_r+0x2d4>)
 800991e:	f002 fceb 	bl	800c2f8 <__assert_func>
 8009922:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009926:	6005      	str	r5, [r0, #0]
 8009928:	60c5      	str	r5, [r0, #12]
 800992a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800992c:	6819      	ldr	r1, [r3, #0]
 800992e:	b151      	cbz	r1, 8009946 <_dtoa_r+0x5e>
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	604a      	str	r2, [r1, #4]
 8009934:	2301      	movs	r3, #1
 8009936:	4093      	lsls	r3, r2
 8009938:	608b      	str	r3, [r1, #8]
 800993a:	4620      	mov	r0, r4
 800993c:	f001 f9b0 	bl	800aca0 <_Bfree>
 8009940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	1e3b      	subs	r3, r7, #0
 8009948:	bfaa      	itet	ge
 800994a:	2300      	movge	r3, #0
 800994c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009950:	f8c8 3000 	strge.w	r3, [r8]
 8009954:	4b9a      	ldr	r3, [pc, #616]	; (8009bc0 <_dtoa_r+0x2d8>)
 8009956:	bfbc      	itt	lt
 8009958:	2201      	movlt	r2, #1
 800995a:	f8c8 2000 	strlt.w	r2, [r8]
 800995e:	ea33 030b 	bics.w	r3, r3, fp
 8009962:	d11b      	bne.n	800999c <_dtoa_r+0xb4>
 8009964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009966:	f242 730f 	movw	r3, #9999	; 0x270f
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009970:	4333      	orrs	r3, r6
 8009972:	f000 8592 	beq.w	800a49a <_dtoa_r+0xbb2>
 8009976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009978:	b963      	cbnz	r3, 8009994 <_dtoa_r+0xac>
 800997a:	4b92      	ldr	r3, [pc, #584]	; (8009bc4 <_dtoa_r+0x2dc>)
 800997c:	e022      	b.n	80099c4 <_dtoa_r+0xdc>
 800997e:	4b92      	ldr	r3, [pc, #584]	; (8009bc8 <_dtoa_r+0x2e0>)
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	3308      	adds	r3, #8
 8009984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	9801      	ldr	r0, [sp, #4]
 800998a:	b013      	add	sp, #76	; 0x4c
 800998c:	ecbd 8b04 	vpop	{d8-d9}
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	4b8b      	ldr	r3, [pc, #556]	; (8009bc4 <_dtoa_r+0x2dc>)
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	3303      	adds	r3, #3
 800999a:	e7f3      	b.n	8009984 <_dtoa_r+0x9c>
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	4650      	mov	r0, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	f7f7 f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80099a8:	ec4b ab19 	vmov	d9, sl, fp
 80099ac:	4680      	mov	r8, r0
 80099ae:	b158      	cbz	r0, 80099c8 <_dtoa_r+0xe0>
 80099b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099b2:	2301      	movs	r3, #1
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 856b 	beq.w	800a494 <_dtoa_r+0xbac>
 80099be:	4883      	ldr	r0, [pc, #524]	; (8009bcc <_dtoa_r+0x2e4>)
 80099c0:	6018      	str	r0, [r3, #0]
 80099c2:	1e43      	subs	r3, r0, #1
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	e7df      	b.n	8009988 <_dtoa_r+0xa0>
 80099c8:	ec4b ab10 	vmov	d0, sl, fp
 80099cc:	aa10      	add	r2, sp, #64	; 0x40
 80099ce:	a911      	add	r1, sp, #68	; 0x44
 80099d0:	4620      	mov	r0, r4
 80099d2:	f001 fd13 	bl	800b3fc <__d2b>
 80099d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80099da:	ee08 0a10 	vmov	s16, r0
 80099de:	2d00      	cmp	r5, #0
 80099e0:	f000 8084 	beq.w	8009aec <_dtoa_r+0x204>
 80099e4:	ee19 3a90 	vmov	r3, s19
 80099e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80099f0:	4656      	mov	r6, sl
 80099f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80099f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80099fe:	4b74      	ldr	r3, [pc, #464]	; (8009bd0 <_dtoa_r+0x2e8>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	4630      	mov	r0, r6
 8009a04:	4639      	mov	r1, r7
 8009a06:	f7f6 fc5f 	bl	80002c8 <__aeabi_dsub>
 8009a0a:	a365      	add	r3, pc, #404	; (adr r3, 8009ba0 <_dtoa_r+0x2b8>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fe12 	bl	8000638 <__aeabi_dmul>
 8009a14:	a364      	add	r3, pc, #400	; (adr r3, 8009ba8 <_dtoa_r+0x2c0>)
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f7f6 fc57 	bl	80002cc <__adddf3>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	4628      	mov	r0, r5
 8009a22:	460f      	mov	r7, r1
 8009a24:	f7f6 fd9e 	bl	8000564 <__aeabi_i2d>
 8009a28:	a361      	add	r3, pc, #388	; (adr r3, 8009bb0 <_dtoa_r+0x2c8>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fe03 	bl	8000638 <__aeabi_dmul>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f6 fc47 	bl	80002cc <__adddf3>
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460f      	mov	r7, r1
 8009a42:	f7f7 f8a9 	bl	8000b98 <__aeabi_d2iz>
 8009a46:	2200      	movs	r2, #0
 8009a48:	9000      	str	r0, [sp, #0]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f7 f864 	bl	8000b1c <__aeabi_dcmplt>
 8009a54:	b150      	cbz	r0, 8009a6c <_dtoa_r+0x184>
 8009a56:	9800      	ldr	r0, [sp, #0]
 8009a58:	f7f6 fd84 	bl	8000564 <__aeabi_i2d>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f7 f852 	bl	8000b08 <__aeabi_dcmpeq>
 8009a64:	b910      	cbnz	r0, 8009a6c <_dtoa_r+0x184>
 8009a66:	9b00      	ldr	r3, [sp, #0]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	2b16      	cmp	r3, #22
 8009a70:	d85a      	bhi.n	8009b28 <_dtoa_r+0x240>
 8009a72:	9a00      	ldr	r2, [sp, #0]
 8009a74:	4b57      	ldr	r3, [pc, #348]	; (8009bd4 <_dtoa_r+0x2ec>)
 8009a76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	ec51 0b19 	vmov	r0, r1, d9
 8009a82:	f7f7 f84b 	bl	8000b1c <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d050      	beq.n	8009b2c <_dtoa_r+0x244>
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a96:	1b5d      	subs	r5, r3, r5
 8009a98:	1e6b      	subs	r3, r5, #1
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	bf45      	ittet	mi
 8009a9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009aa2:	9304      	strmi	r3, [sp, #16]
 8009aa4:	2300      	movpl	r3, #0
 8009aa6:	2300      	movmi	r3, #0
 8009aa8:	bf4c      	ite	mi
 8009aaa:	9305      	strmi	r3, [sp, #20]
 8009aac:	9304      	strpl	r3, [sp, #16]
 8009aae:	9b00      	ldr	r3, [sp, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	db3d      	blt.n	8009b30 <_dtoa_r+0x248>
 8009ab4:	9b05      	ldr	r3, [sp, #20]
 8009ab6:	9a00      	ldr	r2, [sp, #0]
 8009ab8:	920a      	str	r2, [sp, #40]	; 0x28
 8009aba:	4413      	add	r3, r2
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	9b06      	ldr	r3, [sp, #24]
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	f200 8089 	bhi.w	8009bdc <_dtoa_r+0x2f4>
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	bfc4      	itt	gt
 8009ace:	3b04      	subgt	r3, #4
 8009ad0:	9306      	strgt	r3, [sp, #24]
 8009ad2:	9b06      	ldr	r3, [sp, #24]
 8009ad4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ad8:	bfcc      	ite	gt
 8009ada:	2500      	movgt	r5, #0
 8009adc:	2501      	movle	r5, #1
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	f200 8087 	bhi.w	8009bf2 <_dtoa_r+0x30a>
 8009ae4:	e8df f003 	tbb	[pc, r3]
 8009ae8:	59383a2d 	.word	0x59383a2d
 8009aec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009af0:	441d      	add	r5, r3
 8009af2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	bfc1      	itttt	gt
 8009afa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009afe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b02:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b0a:	bfda      	itte	le
 8009b0c:	f1c3 0320 	rsble	r3, r3, #32
 8009b10:	fa06 f003 	lslle.w	r0, r6, r3
 8009b14:	4318      	orrgt	r0, r3
 8009b16:	f7f6 fd15 	bl	8000544 <__aeabi_ui2d>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b22:	3d01      	subs	r5, #1
 8009b24:	930e      	str	r3, [sp, #56]	; 0x38
 8009b26:	e76a      	b.n	80099fe <_dtoa_r+0x116>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e7b2      	b.n	8009a92 <_dtoa_r+0x1aa>
 8009b2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b2e:	e7b1      	b.n	8009a94 <_dtoa_r+0x1ac>
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	9a00      	ldr	r2, [sp, #0]
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	9304      	str	r3, [sp, #16]
 8009b38:	4253      	negs	r3, r2
 8009b3a:	9307      	str	r3, [sp, #28]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b40:	e7bf      	b.n	8009ac2 <_dtoa_r+0x1da>
 8009b42:	2300      	movs	r3, #0
 8009b44:	9308      	str	r3, [sp, #32]
 8009b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dc55      	bgt.n	8009bf8 <_dtoa_r+0x310>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b52:	461a      	mov	r2, r3
 8009b54:	9209      	str	r2, [sp, #36]	; 0x24
 8009b56:	e00c      	b.n	8009b72 <_dtoa_r+0x28a>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e7f3      	b.n	8009b44 <_dtoa_r+0x25c>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b60:	9308      	str	r3, [sp, #32]
 8009b62:	9b00      	ldr	r3, [sp, #0]
 8009b64:	4413      	add	r3, r2
 8009b66:	9302      	str	r3, [sp, #8]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	9303      	str	r3, [sp, #12]
 8009b6e:	bfb8      	it	lt
 8009b70:	2301      	movlt	r3, #1
 8009b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b74:	2200      	movs	r2, #0
 8009b76:	6042      	str	r2, [r0, #4]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	f102 0614 	add.w	r6, r2, #20
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	6841      	ldr	r1, [r0, #4]
 8009b82:	d93d      	bls.n	8009c00 <_dtoa_r+0x318>
 8009b84:	4620      	mov	r0, r4
 8009b86:	f001 f84b 	bl	800ac20 <_Balloc>
 8009b8a:	9001      	str	r0, [sp, #4]
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d13b      	bne.n	8009c08 <_dtoa_r+0x320>
 8009b90:	4b11      	ldr	r3, [pc, #68]	; (8009bd8 <_dtoa_r+0x2f0>)
 8009b92:	4602      	mov	r2, r0
 8009b94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b98:	e6c0      	b.n	800991c <_dtoa_r+0x34>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e7df      	b.n	8009b5e <_dtoa_r+0x276>
 8009b9e:	bf00      	nop
 8009ba0:	636f4361 	.word	0x636f4361
 8009ba4:	3fd287a7 	.word	0x3fd287a7
 8009ba8:	8b60c8b3 	.word	0x8b60c8b3
 8009bac:	3fc68a28 	.word	0x3fc68a28
 8009bb0:	509f79fb 	.word	0x509f79fb
 8009bb4:	3fd34413 	.word	0x3fd34413
 8009bb8:	0800cfc6 	.word	0x0800cfc6
 8009bbc:	0800cfdd 	.word	0x0800cfdd
 8009bc0:	7ff00000 	.word	0x7ff00000
 8009bc4:	0800cfc2 	.word	0x0800cfc2
 8009bc8:	0800cfb9 	.word	0x0800cfb9
 8009bcc:	0800d232 	.word	0x0800d232
 8009bd0:	3ff80000 	.word	0x3ff80000
 8009bd4:	0800d148 	.word	0x0800d148
 8009bd8:	0800d038 	.word	0x0800d038
 8009bdc:	2501      	movs	r5, #1
 8009bde:	2300      	movs	r3, #0
 8009be0:	9306      	str	r3, [sp, #24]
 8009be2:	9508      	str	r5, [sp, #32]
 8009be4:	f04f 33ff 	mov.w	r3, #4294967295
 8009be8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bec:	2200      	movs	r2, #0
 8009bee:	2312      	movs	r3, #18
 8009bf0:	e7b0      	b.n	8009b54 <_dtoa_r+0x26c>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	9308      	str	r3, [sp, #32]
 8009bf6:	e7f5      	b.n	8009be4 <_dtoa_r+0x2fc>
 8009bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bfe:	e7b8      	b.n	8009b72 <_dtoa_r+0x28a>
 8009c00:	3101      	adds	r1, #1
 8009c02:	6041      	str	r1, [r0, #4]
 8009c04:	0052      	lsls	r2, r2, #1
 8009c06:	e7b8      	b.n	8009b7a <_dtoa_r+0x292>
 8009c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c0a:	9a01      	ldr	r2, [sp, #4]
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	2b0e      	cmp	r3, #14
 8009c12:	f200 809d 	bhi.w	8009d50 <_dtoa_r+0x468>
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	f000 809a 	beq.w	8009d50 <_dtoa_r+0x468>
 8009c1c:	9b00      	ldr	r3, [sp, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	dd32      	ble.n	8009c88 <_dtoa_r+0x3a0>
 8009c22:	4ab7      	ldr	r2, [pc, #732]	; (8009f00 <_dtoa_r+0x618>)
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	05d8      	lsls	r0, r3, #23
 8009c34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009c38:	d516      	bpl.n	8009c68 <_dtoa_r+0x380>
 8009c3a:	4bb2      	ldr	r3, [pc, #712]	; (8009f04 <_dtoa_r+0x61c>)
 8009c3c:	ec51 0b19 	vmov	r0, r1, d9
 8009c40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c44:	f7f6 fe22 	bl	800088c <__aeabi_ddiv>
 8009c48:	f007 070f 	and.w	r7, r7, #15
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	468b      	mov	fp, r1
 8009c50:	2503      	movs	r5, #3
 8009c52:	4eac      	ldr	r6, [pc, #688]	; (8009f04 <_dtoa_r+0x61c>)
 8009c54:	b957      	cbnz	r7, 8009c6c <_dtoa_r+0x384>
 8009c56:	4642      	mov	r2, r8
 8009c58:	464b      	mov	r3, r9
 8009c5a:	4650      	mov	r0, sl
 8009c5c:	4659      	mov	r1, fp
 8009c5e:	f7f6 fe15 	bl	800088c <__aeabi_ddiv>
 8009c62:	4682      	mov	sl, r0
 8009c64:	468b      	mov	fp, r1
 8009c66:	e028      	b.n	8009cba <_dtoa_r+0x3d2>
 8009c68:	2502      	movs	r5, #2
 8009c6a:	e7f2      	b.n	8009c52 <_dtoa_r+0x36a>
 8009c6c:	07f9      	lsls	r1, r7, #31
 8009c6e:	d508      	bpl.n	8009c82 <_dtoa_r+0x39a>
 8009c70:	4640      	mov	r0, r8
 8009c72:	4649      	mov	r1, r9
 8009c74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c78:	f7f6 fcde 	bl	8000638 <__aeabi_dmul>
 8009c7c:	3501      	adds	r5, #1
 8009c7e:	4680      	mov	r8, r0
 8009c80:	4689      	mov	r9, r1
 8009c82:	107f      	asrs	r7, r7, #1
 8009c84:	3608      	adds	r6, #8
 8009c86:	e7e5      	b.n	8009c54 <_dtoa_r+0x36c>
 8009c88:	f000 809b 	beq.w	8009dc2 <_dtoa_r+0x4da>
 8009c8c:	9b00      	ldr	r3, [sp, #0]
 8009c8e:	4f9d      	ldr	r7, [pc, #628]	; (8009f04 <_dtoa_r+0x61c>)
 8009c90:	425e      	negs	r6, r3
 8009c92:	4b9b      	ldr	r3, [pc, #620]	; (8009f00 <_dtoa_r+0x618>)
 8009c94:	f006 020f 	and.w	r2, r6, #15
 8009c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	ec51 0b19 	vmov	r0, r1, d9
 8009ca4:	f7f6 fcc8 	bl	8000638 <__aeabi_dmul>
 8009ca8:	1136      	asrs	r6, r6, #4
 8009caa:	4682      	mov	sl, r0
 8009cac:	468b      	mov	fp, r1
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2502      	movs	r5, #2
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d17a      	bne.n	8009dac <_dtoa_r+0x4c4>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1d3      	bne.n	8009c62 <_dtoa_r+0x37a>
 8009cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8082 	beq.w	8009dc6 <_dtoa_r+0x4de>
 8009cc2:	4b91      	ldr	r3, [pc, #580]	; (8009f08 <_dtoa_r+0x620>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4659      	mov	r1, fp
 8009cca:	f7f6 ff27 	bl	8000b1c <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d079      	beq.n	8009dc6 <_dtoa_r+0x4de>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d076      	beq.n	8009dc6 <_dtoa_r+0x4de>
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd36      	ble.n	8009d4c <_dtoa_r+0x464>
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	1e5f      	subs	r7, r3, #1
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4b88      	ldr	r3, [pc, #544]	; (8009f0c <_dtoa_r+0x624>)
 8009cea:	f7f6 fca5 	bl	8000638 <__aeabi_dmul>
 8009cee:	9e02      	ldr	r6, [sp, #8]
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	468b      	mov	fp, r1
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f6 fc34 	bl	8000564 <__aeabi_i2d>
 8009cfc:	4652      	mov	r2, sl
 8009cfe:	465b      	mov	r3, fp
 8009d00:	f7f6 fc9a 	bl	8000638 <__aeabi_dmul>
 8009d04:	4b82      	ldr	r3, [pc, #520]	; (8009f10 <_dtoa_r+0x628>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	f7f6 fae0 	bl	80002cc <__adddf3>
 8009d0c:	46d0      	mov	r8, sl
 8009d0e:	46d9      	mov	r9, fp
 8009d10:	4682      	mov	sl, r0
 8009d12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d158      	bne.n	8009dcc <_dtoa_r+0x4e4>
 8009d1a:	4b7e      	ldr	r3, [pc, #504]	; (8009f14 <_dtoa_r+0x62c>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4649      	mov	r1, r9
 8009d22:	f7f6 fad1 	bl	80002c8 <__aeabi_dsub>
 8009d26:	4652      	mov	r2, sl
 8009d28:	465b      	mov	r3, fp
 8009d2a:	4680      	mov	r8, r0
 8009d2c:	4689      	mov	r9, r1
 8009d2e:	f7f6 ff13 	bl	8000b58 <__aeabi_dcmpgt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f040 8295 	bne.w	800a262 <_dtoa_r+0x97a>
 8009d38:	4652      	mov	r2, sl
 8009d3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4649      	mov	r1, r9
 8009d42:	f7f6 feeb 	bl	8000b1c <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f040 8289 	bne.w	800a25e <_dtoa_r+0x976>
 8009d4c:	ec5b ab19 	vmov	sl, fp, d9
 8009d50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f2c0 8148 	blt.w	8009fe8 <_dtoa_r+0x700>
 8009d58:	9a00      	ldr	r2, [sp, #0]
 8009d5a:	2a0e      	cmp	r2, #14
 8009d5c:	f300 8144 	bgt.w	8009fe8 <_dtoa_r+0x700>
 8009d60:	4b67      	ldr	r3, [pc, #412]	; (8009f00 <_dtoa_r+0x618>)
 8009d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f280 80d5 	bge.w	8009f1c <_dtoa_r+0x634>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f300 80d1 	bgt.w	8009f1c <_dtoa_r+0x634>
 8009d7a:	f040 826f 	bne.w	800a25c <_dtoa_r+0x974>
 8009d7e:	4b65      	ldr	r3, [pc, #404]	; (8009f14 <_dtoa_r+0x62c>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fc57 	bl	8000638 <__aeabi_dmul>
 8009d8a:	4652      	mov	r2, sl
 8009d8c:	465b      	mov	r3, fp
 8009d8e:	f7f6 fed9 	bl	8000b44 <__aeabi_dcmpge>
 8009d92:	9e03      	ldr	r6, [sp, #12]
 8009d94:	4637      	mov	r7, r6
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f040 8245 	bne.w	800a226 <_dtoa_r+0x93e>
 8009d9c:	9d01      	ldr	r5, [sp, #4]
 8009d9e:	2331      	movs	r3, #49	; 0x31
 8009da0:	f805 3b01 	strb.w	r3, [r5], #1
 8009da4:	9b00      	ldr	r3, [sp, #0]
 8009da6:	3301      	adds	r3, #1
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	e240      	b.n	800a22e <_dtoa_r+0x946>
 8009dac:	07f2      	lsls	r2, r6, #31
 8009dae:	d505      	bpl.n	8009dbc <_dtoa_r+0x4d4>
 8009db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009db4:	f7f6 fc40 	bl	8000638 <__aeabi_dmul>
 8009db8:	3501      	adds	r5, #1
 8009dba:	2301      	movs	r3, #1
 8009dbc:	1076      	asrs	r6, r6, #1
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	e777      	b.n	8009cb2 <_dtoa_r+0x3ca>
 8009dc2:	2502      	movs	r5, #2
 8009dc4:	e779      	b.n	8009cba <_dtoa_r+0x3d2>
 8009dc6:	9f00      	ldr	r7, [sp, #0]
 8009dc8:	9e03      	ldr	r6, [sp, #12]
 8009dca:	e794      	b.n	8009cf6 <_dtoa_r+0x40e>
 8009dcc:	9901      	ldr	r1, [sp, #4]
 8009dce:	4b4c      	ldr	r3, [pc, #304]	; (8009f00 <_dtoa_r+0x618>)
 8009dd0:	4431      	add	r1, r6
 8009dd2:	910d      	str	r1, [sp, #52]	; 0x34
 8009dd4:	9908      	ldr	r1, [sp, #32]
 8009dd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009dda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dde:	2900      	cmp	r1, #0
 8009de0:	d043      	beq.n	8009e6a <_dtoa_r+0x582>
 8009de2:	494d      	ldr	r1, [pc, #308]	; (8009f18 <_dtoa_r+0x630>)
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7f6 fd51 	bl	800088c <__aeabi_ddiv>
 8009dea:	4652      	mov	r2, sl
 8009dec:	465b      	mov	r3, fp
 8009dee:	f7f6 fa6b 	bl	80002c8 <__aeabi_dsub>
 8009df2:	9d01      	ldr	r5, [sp, #4]
 8009df4:	4682      	mov	sl, r0
 8009df6:	468b      	mov	fp, r1
 8009df8:	4649      	mov	r1, r9
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	f7f6 fecc 	bl	8000b98 <__aeabi_d2iz>
 8009e00:	4606      	mov	r6, r0
 8009e02:	f7f6 fbaf 	bl	8000564 <__aeabi_i2d>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa5b 	bl	80002c8 <__aeabi_dsub>
 8009e12:	3630      	adds	r6, #48	; 0x30
 8009e14:	f805 6b01 	strb.w	r6, [r5], #1
 8009e18:	4652      	mov	r2, sl
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	4689      	mov	r9, r1
 8009e20:	f7f6 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d163      	bne.n	8009ef0 <_dtoa_r+0x608>
 8009e28:	4642      	mov	r2, r8
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	4936      	ldr	r1, [pc, #216]	; (8009f08 <_dtoa_r+0x620>)
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f7f6 fa4a 	bl	80002c8 <__aeabi_dsub>
 8009e34:	4652      	mov	r2, sl
 8009e36:	465b      	mov	r3, fp
 8009e38:	f7f6 fe70 	bl	8000b1c <__aeabi_dcmplt>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f040 80b5 	bne.w	8009fac <_dtoa_r+0x6c4>
 8009e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e44:	429d      	cmp	r5, r3
 8009e46:	d081      	beq.n	8009d4c <_dtoa_r+0x464>
 8009e48:	4b30      	ldr	r3, [pc, #192]	; (8009f0c <_dtoa_r+0x624>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	4659      	mov	r1, fp
 8009e50:	f7f6 fbf2 	bl	8000638 <__aeabi_dmul>
 8009e54:	4b2d      	ldr	r3, [pc, #180]	; (8009f0c <_dtoa_r+0x624>)
 8009e56:	4682      	mov	sl, r0
 8009e58:	468b      	mov	fp, r1
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f7f6 fbea 	bl	8000638 <__aeabi_dmul>
 8009e64:	4680      	mov	r8, r0
 8009e66:	4689      	mov	r9, r1
 8009e68:	e7c6      	b.n	8009df8 <_dtoa_r+0x510>
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	f7f6 fbe3 	bl	8000638 <__aeabi_dmul>
 8009e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e74:	9d01      	ldr	r5, [sp, #4]
 8009e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e78:	4682      	mov	sl, r0
 8009e7a:	468b      	mov	fp, r1
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f7f6 fe8a 	bl	8000b98 <__aeabi_d2iz>
 8009e84:	4606      	mov	r6, r0
 8009e86:	f7f6 fb6d 	bl	8000564 <__aeabi_i2d>
 8009e8a:	3630      	adds	r6, #48	; 0x30
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4640      	mov	r0, r8
 8009e92:	4649      	mov	r1, r9
 8009e94:	f7f6 fa18 	bl	80002c8 <__aeabi_dsub>
 8009e98:	f805 6b01 	strb.w	r6, [r5], #1
 8009e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	4680      	mov	r8, r0
 8009ea2:	4689      	mov	r9, r1
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	d124      	bne.n	8009ef4 <_dtoa_r+0x60c>
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <_dtoa_r+0x630>)
 8009eac:	4650      	mov	r0, sl
 8009eae:	4659      	mov	r1, fp
 8009eb0:	f7f6 fa0c 	bl	80002cc <__adddf3>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 fe4c 	bl	8000b58 <__aeabi_dcmpgt>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d173      	bne.n	8009fac <_dtoa_r+0x6c4>
 8009ec4:	4652      	mov	r2, sl
 8009ec6:	465b      	mov	r3, fp
 8009ec8:	4913      	ldr	r1, [pc, #76]	; (8009f18 <_dtoa_r+0x630>)
 8009eca:	2000      	movs	r0, #0
 8009ecc:	f7f6 f9fc 	bl	80002c8 <__aeabi_dsub>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 fe20 	bl	8000b1c <__aeabi_dcmplt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f43f af35 	beq.w	8009d4c <_dtoa_r+0x464>
 8009ee2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ee4:	1e6b      	subs	r3, r5, #1
 8009ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ee8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009eec:	2b30      	cmp	r3, #48	; 0x30
 8009eee:	d0f8      	beq.n	8009ee2 <_dtoa_r+0x5fa>
 8009ef0:	9700      	str	r7, [sp, #0]
 8009ef2:	e049      	b.n	8009f88 <_dtoa_r+0x6a0>
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <_dtoa_r+0x624>)
 8009ef6:	f7f6 fb9f 	bl	8000638 <__aeabi_dmul>
 8009efa:	4680      	mov	r8, r0
 8009efc:	4689      	mov	r9, r1
 8009efe:	e7bd      	b.n	8009e7c <_dtoa_r+0x594>
 8009f00:	0800d148 	.word	0x0800d148
 8009f04:	0800d120 	.word	0x0800d120
 8009f08:	3ff00000 	.word	0x3ff00000
 8009f0c:	40240000 	.word	0x40240000
 8009f10:	401c0000 	.word	0x401c0000
 8009f14:	40140000 	.word	0x40140000
 8009f18:	3fe00000 	.word	0x3fe00000
 8009f1c:	9d01      	ldr	r5, [sp, #4]
 8009f1e:	4656      	mov	r6, sl
 8009f20:	465f      	mov	r7, fp
 8009f22:	4642      	mov	r2, r8
 8009f24:	464b      	mov	r3, r9
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	f7f6 fcaf 	bl	800088c <__aeabi_ddiv>
 8009f2e:	f7f6 fe33 	bl	8000b98 <__aeabi_d2iz>
 8009f32:	4682      	mov	sl, r0
 8009f34:	f7f6 fb16 	bl	8000564 <__aeabi_i2d>
 8009f38:	4642      	mov	r2, r8
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	f7f6 fb7c 	bl	8000638 <__aeabi_dmul>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4630      	mov	r0, r6
 8009f46:	4639      	mov	r1, r7
 8009f48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009f4c:	f7f6 f9bc 	bl	80002c8 <__aeabi_dsub>
 8009f50:	f805 6b01 	strb.w	r6, [r5], #1
 8009f54:	9e01      	ldr	r6, [sp, #4]
 8009f56:	9f03      	ldr	r7, [sp, #12]
 8009f58:	1bae      	subs	r6, r5, r6
 8009f5a:	42b7      	cmp	r7, r6
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	d135      	bne.n	8009fce <_dtoa_r+0x6e6>
 8009f62:	f7f6 f9b3 	bl	80002cc <__adddf3>
 8009f66:	4642      	mov	r2, r8
 8009f68:	464b      	mov	r3, r9
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	f7f6 fdf3 	bl	8000b58 <__aeabi_dcmpgt>
 8009f72:	b9d0      	cbnz	r0, 8009faa <_dtoa_r+0x6c2>
 8009f74:	4642      	mov	r2, r8
 8009f76:	464b      	mov	r3, r9
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	f7f6 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8009f80:	b110      	cbz	r0, 8009f88 <_dtoa_r+0x6a0>
 8009f82:	f01a 0f01 	tst.w	sl, #1
 8009f86:	d110      	bne.n	8009faa <_dtoa_r+0x6c2>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	ee18 1a10 	vmov	r1, s16
 8009f8e:	f000 fe87 	bl	800aca0 <_Bfree>
 8009f92:	2300      	movs	r3, #0
 8009f94:	9800      	ldr	r0, [sp, #0]
 8009f96:	702b      	strb	r3, [r5, #0]
 8009f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	6018      	str	r0, [r3, #0]
 8009f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f43f acf1 	beq.w	8009988 <_dtoa_r+0xa0>
 8009fa6:	601d      	str	r5, [r3, #0]
 8009fa8:	e4ee      	b.n	8009988 <_dtoa_r+0xa0>
 8009faa:	9f00      	ldr	r7, [sp, #0]
 8009fac:	462b      	mov	r3, r5
 8009fae:	461d      	mov	r5, r3
 8009fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fb4:	2a39      	cmp	r2, #57	; 0x39
 8009fb6:	d106      	bne.n	8009fc6 <_dtoa_r+0x6de>
 8009fb8:	9a01      	ldr	r2, [sp, #4]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d1f7      	bne.n	8009fae <_dtoa_r+0x6c6>
 8009fbe:	9901      	ldr	r1, [sp, #4]
 8009fc0:	2230      	movs	r2, #48	; 0x30
 8009fc2:	3701      	adds	r7, #1
 8009fc4:	700a      	strb	r2, [r1, #0]
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	3201      	adds	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]
 8009fcc:	e790      	b.n	8009ef0 <_dtoa_r+0x608>
 8009fce:	4ba6      	ldr	r3, [pc, #664]	; (800a268 <_dtoa_r+0x980>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7f6 fb31 	bl	8000638 <__aeabi_dmul>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	f7f6 fd93 	bl	8000b08 <__aeabi_dcmpeq>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d09d      	beq.n	8009f22 <_dtoa_r+0x63a>
 8009fe6:	e7cf      	b.n	8009f88 <_dtoa_r+0x6a0>
 8009fe8:	9a08      	ldr	r2, [sp, #32]
 8009fea:	2a00      	cmp	r2, #0
 8009fec:	f000 80d7 	beq.w	800a19e <_dtoa_r+0x8b6>
 8009ff0:	9a06      	ldr	r2, [sp, #24]
 8009ff2:	2a01      	cmp	r2, #1
 8009ff4:	f300 80ba 	bgt.w	800a16c <_dtoa_r+0x884>
 8009ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	f000 80b2 	beq.w	800a164 <_dtoa_r+0x87c>
 800a000:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a004:	9e07      	ldr	r6, [sp, #28]
 800a006:	9d04      	ldr	r5, [sp, #16]
 800a008:	9a04      	ldr	r2, [sp, #16]
 800a00a:	441a      	add	r2, r3
 800a00c:	9204      	str	r2, [sp, #16]
 800a00e:	9a05      	ldr	r2, [sp, #20]
 800a010:	2101      	movs	r1, #1
 800a012:	441a      	add	r2, r3
 800a014:	4620      	mov	r0, r4
 800a016:	9205      	str	r2, [sp, #20]
 800a018:	f000 ff44 	bl	800aea4 <__i2b>
 800a01c:	4607      	mov	r7, r0
 800a01e:	2d00      	cmp	r5, #0
 800a020:	dd0c      	ble.n	800a03c <_dtoa_r+0x754>
 800a022:	9b05      	ldr	r3, [sp, #20]
 800a024:	2b00      	cmp	r3, #0
 800a026:	dd09      	ble.n	800a03c <_dtoa_r+0x754>
 800a028:	42ab      	cmp	r3, r5
 800a02a:	9a04      	ldr	r2, [sp, #16]
 800a02c:	bfa8      	it	ge
 800a02e:	462b      	movge	r3, r5
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	9204      	str	r2, [sp, #16]
 800a034:	9a05      	ldr	r2, [sp, #20]
 800a036:	1aed      	subs	r5, r5, r3
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	9305      	str	r3, [sp, #20]
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	b31b      	cbz	r3, 800a088 <_dtoa_r+0x7a0>
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 80af 	beq.w	800a1a6 <_dtoa_r+0x8be>
 800a048:	2e00      	cmp	r6, #0
 800a04a:	dd13      	ble.n	800a074 <_dtoa_r+0x78c>
 800a04c:	4639      	mov	r1, r7
 800a04e:	4632      	mov	r2, r6
 800a050:	4620      	mov	r0, r4
 800a052:	f000 ffe7 	bl	800b024 <__pow5mult>
 800a056:	ee18 2a10 	vmov	r2, s16
 800a05a:	4601      	mov	r1, r0
 800a05c:	4607      	mov	r7, r0
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 ff36 	bl	800aed0 <__multiply>
 800a064:	ee18 1a10 	vmov	r1, s16
 800a068:	4680      	mov	r8, r0
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fe18 	bl	800aca0 <_Bfree>
 800a070:	ee08 8a10 	vmov	s16, r8
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	1b9a      	subs	r2, r3, r6
 800a078:	d006      	beq.n	800a088 <_dtoa_r+0x7a0>
 800a07a:	ee18 1a10 	vmov	r1, s16
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 ffd0 	bl	800b024 <__pow5mult>
 800a084:	ee08 0a10 	vmov	s16, r0
 800a088:	2101      	movs	r1, #1
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 ff0a 	bl	800aea4 <__i2b>
 800a090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	4606      	mov	r6, r0
 800a096:	f340 8088 	ble.w	800a1aa <_dtoa_r+0x8c2>
 800a09a:	461a      	mov	r2, r3
 800a09c:	4601      	mov	r1, r0
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 ffc0 	bl	800b024 <__pow5mult>
 800a0a4:	9b06      	ldr	r3, [sp, #24]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	f340 8081 	ble.w	800a1b0 <_dtoa_r+0x8c8>
 800a0ae:	f04f 0800 	mov.w	r8, #0
 800a0b2:	6933      	ldr	r3, [r6, #16]
 800a0b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0b8:	6918      	ldr	r0, [r3, #16]
 800a0ba:	f000 fea3 	bl	800ae04 <__hi0bits>
 800a0be:	f1c0 0020 	rsb	r0, r0, #32
 800a0c2:	9b05      	ldr	r3, [sp, #20]
 800a0c4:	4418      	add	r0, r3
 800a0c6:	f010 001f 	ands.w	r0, r0, #31
 800a0ca:	f000 8092 	beq.w	800a1f2 <_dtoa_r+0x90a>
 800a0ce:	f1c0 0320 	rsb	r3, r0, #32
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	f340 808a 	ble.w	800a1ec <_dtoa_r+0x904>
 800a0d8:	f1c0 001c 	rsb	r0, r0, #28
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	4403      	add	r3, r0
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	9b05      	ldr	r3, [sp, #20]
 800a0e4:	4403      	add	r3, r0
 800a0e6:	4405      	add	r5, r0
 800a0e8:	9305      	str	r3, [sp, #20]
 800a0ea:	9b04      	ldr	r3, [sp, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd07      	ble.n	800a100 <_dtoa_r+0x818>
 800a0f0:	ee18 1a10 	vmov	r1, s16
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 ffee 	bl	800b0d8 <__lshift>
 800a0fc:	ee08 0a10 	vmov	s16, r0
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	dd05      	ble.n	800a112 <_dtoa_r+0x82a>
 800a106:	4631      	mov	r1, r6
 800a108:	461a      	mov	r2, r3
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 ffe4 	bl	800b0d8 <__lshift>
 800a110:	4606      	mov	r6, r0
 800a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d06e      	beq.n	800a1f6 <_dtoa_r+0x90e>
 800a118:	ee18 0a10 	vmov	r0, s16
 800a11c:	4631      	mov	r1, r6
 800a11e:	f001 f84b 	bl	800b1b8 <__mcmp>
 800a122:	2800      	cmp	r0, #0
 800a124:	da67      	bge.n	800a1f6 <_dtoa_r+0x90e>
 800a126:	9b00      	ldr	r3, [sp, #0]
 800a128:	3b01      	subs	r3, #1
 800a12a:	ee18 1a10 	vmov	r1, s16
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	220a      	movs	r2, #10
 800a132:	2300      	movs	r3, #0
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fdd5 	bl	800ace4 <__multadd>
 800a13a:	9b08      	ldr	r3, [sp, #32]
 800a13c:	ee08 0a10 	vmov	s16, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 81b1 	beq.w	800a4a8 <_dtoa_r+0xbc0>
 800a146:	2300      	movs	r3, #0
 800a148:	4639      	mov	r1, r7
 800a14a:	220a      	movs	r2, #10
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fdc9 	bl	800ace4 <__multadd>
 800a152:	9b02      	ldr	r3, [sp, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	4607      	mov	r7, r0
 800a158:	f300 808e 	bgt.w	800a278 <_dtoa_r+0x990>
 800a15c:	9b06      	ldr	r3, [sp, #24]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	dc51      	bgt.n	800a206 <_dtoa_r+0x91e>
 800a162:	e089      	b.n	800a278 <_dtoa_r+0x990>
 800a164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a16a:	e74b      	b.n	800a004 <_dtoa_r+0x71c>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	1e5e      	subs	r6, r3, #1
 800a170:	9b07      	ldr	r3, [sp, #28]
 800a172:	42b3      	cmp	r3, r6
 800a174:	bfbf      	itttt	lt
 800a176:	9b07      	ldrlt	r3, [sp, #28]
 800a178:	9607      	strlt	r6, [sp, #28]
 800a17a:	1af2      	sublt	r2, r6, r3
 800a17c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a17e:	bfb6      	itet	lt
 800a180:	189b      	addlt	r3, r3, r2
 800a182:	1b9e      	subge	r6, r3, r6
 800a184:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	bfb8      	it	lt
 800a18a:	2600      	movlt	r6, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	bfb7      	itett	lt
 800a190:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a194:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a198:	1a9d      	sublt	r5, r3, r2
 800a19a:	2300      	movlt	r3, #0
 800a19c:	e734      	b.n	800a008 <_dtoa_r+0x720>
 800a19e:	9e07      	ldr	r6, [sp, #28]
 800a1a0:	9d04      	ldr	r5, [sp, #16]
 800a1a2:	9f08      	ldr	r7, [sp, #32]
 800a1a4:	e73b      	b.n	800a01e <_dtoa_r+0x736>
 800a1a6:	9a07      	ldr	r2, [sp, #28]
 800a1a8:	e767      	b.n	800a07a <_dtoa_r+0x792>
 800a1aa:	9b06      	ldr	r3, [sp, #24]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	dc18      	bgt.n	800a1e2 <_dtoa_r+0x8fa>
 800a1b0:	f1ba 0f00 	cmp.w	sl, #0
 800a1b4:	d115      	bne.n	800a1e2 <_dtoa_r+0x8fa>
 800a1b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ba:	b993      	cbnz	r3, 800a1e2 <_dtoa_r+0x8fa>
 800a1bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1c0:	0d1b      	lsrs	r3, r3, #20
 800a1c2:	051b      	lsls	r3, r3, #20
 800a1c4:	b183      	cbz	r3, 800a1e8 <_dtoa_r+0x900>
 800a1c6:	9b04      	ldr	r3, [sp, #16]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	9b05      	ldr	r3, [sp, #20]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	f04f 0801 	mov.w	r8, #1
 800a1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f47f af6a 	bne.w	800a0b2 <_dtoa_r+0x7ca>
 800a1de:	2001      	movs	r0, #1
 800a1e0:	e76f      	b.n	800a0c2 <_dtoa_r+0x7da>
 800a1e2:	f04f 0800 	mov.w	r8, #0
 800a1e6:	e7f6      	b.n	800a1d6 <_dtoa_r+0x8ee>
 800a1e8:	4698      	mov	r8, r3
 800a1ea:	e7f4      	b.n	800a1d6 <_dtoa_r+0x8ee>
 800a1ec:	f43f af7d 	beq.w	800a0ea <_dtoa_r+0x802>
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	301c      	adds	r0, #28
 800a1f4:	e772      	b.n	800a0dc <_dtoa_r+0x7f4>
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc37      	bgt.n	800a26c <_dtoa_r+0x984>
 800a1fc:	9b06      	ldr	r3, [sp, #24]
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	dd34      	ble.n	800a26c <_dtoa_r+0x984>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	9302      	str	r3, [sp, #8]
 800a206:	9b02      	ldr	r3, [sp, #8]
 800a208:	b96b      	cbnz	r3, 800a226 <_dtoa_r+0x93e>
 800a20a:	4631      	mov	r1, r6
 800a20c:	2205      	movs	r2, #5
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 fd68 	bl	800ace4 <__multadd>
 800a214:	4601      	mov	r1, r0
 800a216:	4606      	mov	r6, r0
 800a218:	ee18 0a10 	vmov	r0, s16
 800a21c:	f000 ffcc 	bl	800b1b8 <__mcmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	f73f adbb 	bgt.w	8009d9c <_dtoa_r+0x4b4>
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	9d01      	ldr	r5, [sp, #4]
 800a22a:	43db      	mvns	r3, r3
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	f04f 0800 	mov.w	r8, #0
 800a232:	4631      	mov	r1, r6
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fd33 	bl	800aca0 <_Bfree>
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	f43f aea4 	beq.w	8009f88 <_dtoa_r+0x6a0>
 800a240:	f1b8 0f00 	cmp.w	r8, #0
 800a244:	d005      	beq.n	800a252 <_dtoa_r+0x96a>
 800a246:	45b8      	cmp	r8, r7
 800a248:	d003      	beq.n	800a252 <_dtoa_r+0x96a>
 800a24a:	4641      	mov	r1, r8
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 fd27 	bl	800aca0 <_Bfree>
 800a252:	4639      	mov	r1, r7
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fd23 	bl	800aca0 <_Bfree>
 800a25a:	e695      	b.n	8009f88 <_dtoa_r+0x6a0>
 800a25c:	2600      	movs	r6, #0
 800a25e:	4637      	mov	r7, r6
 800a260:	e7e1      	b.n	800a226 <_dtoa_r+0x93e>
 800a262:	9700      	str	r7, [sp, #0]
 800a264:	4637      	mov	r7, r6
 800a266:	e599      	b.n	8009d9c <_dtoa_r+0x4b4>
 800a268:	40240000 	.word	0x40240000
 800a26c:	9b08      	ldr	r3, [sp, #32]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80ca 	beq.w	800a408 <_dtoa_r+0xb20>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	9302      	str	r3, [sp, #8]
 800a278:	2d00      	cmp	r5, #0
 800a27a:	dd05      	ble.n	800a288 <_dtoa_r+0x9a0>
 800a27c:	4639      	mov	r1, r7
 800a27e:	462a      	mov	r2, r5
 800a280:	4620      	mov	r0, r4
 800a282:	f000 ff29 	bl	800b0d8 <__lshift>
 800a286:	4607      	mov	r7, r0
 800a288:	f1b8 0f00 	cmp.w	r8, #0
 800a28c:	d05b      	beq.n	800a346 <_dtoa_r+0xa5e>
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fcc5 	bl	800ac20 <_Balloc>
 800a296:	4605      	mov	r5, r0
 800a298:	b928      	cbnz	r0, 800a2a6 <_dtoa_r+0x9be>
 800a29a:	4b87      	ldr	r3, [pc, #540]	; (800a4b8 <_dtoa_r+0xbd0>)
 800a29c:	4602      	mov	r2, r0
 800a29e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2a2:	f7ff bb3b 	b.w	800991c <_dtoa_r+0x34>
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	3202      	adds	r2, #2
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	f107 010c 	add.w	r1, r7, #12
 800a2b0:	300c      	adds	r0, #12
 800a2b2:	f000 fca7 	bl	800ac04 <memcpy>
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 ff0c 	bl	800b0d8 <__lshift>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	f103 0901 	add.w	r9, r3, #1
 800a2c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	9305      	str	r3, [sp, #20]
 800a2ce:	f00a 0301 	and.w	r3, sl, #1
 800a2d2:	46b8      	mov	r8, r7
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	4631      	mov	r1, r6
 800a2da:	ee18 0a10 	vmov	r0, s16
 800a2de:	f7ff fa75 	bl	80097cc <quorem>
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	9002      	str	r0, [sp, #8]
 800a2e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2ea:	ee18 0a10 	vmov	r0, s16
 800a2ee:	f000 ff63 	bl	800b1b8 <__mcmp>
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	9003      	str	r0, [sp, #12]
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 ff79 	bl	800b1f0 <__mdiff>
 800a2fe:	68c2      	ldr	r2, [r0, #12]
 800a300:	f109 3bff 	add.w	fp, r9, #4294967295
 800a304:	4605      	mov	r5, r0
 800a306:	bb02      	cbnz	r2, 800a34a <_dtoa_r+0xa62>
 800a308:	4601      	mov	r1, r0
 800a30a:	ee18 0a10 	vmov	r0, s16
 800a30e:	f000 ff53 	bl	800b1b8 <__mcmp>
 800a312:	4602      	mov	r2, r0
 800a314:	4629      	mov	r1, r5
 800a316:	4620      	mov	r0, r4
 800a318:	9207      	str	r2, [sp, #28]
 800a31a:	f000 fcc1 	bl	800aca0 <_Bfree>
 800a31e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a322:	ea43 0102 	orr.w	r1, r3, r2
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	430b      	orrs	r3, r1
 800a32a:	464d      	mov	r5, r9
 800a32c:	d10f      	bne.n	800a34e <_dtoa_r+0xa66>
 800a32e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a332:	d02a      	beq.n	800a38a <_dtoa_r+0xaa2>
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dd02      	ble.n	800a340 <_dtoa_r+0xa58>
 800a33a:	9b02      	ldr	r3, [sp, #8]
 800a33c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a340:	f88b a000 	strb.w	sl, [fp]
 800a344:	e775      	b.n	800a232 <_dtoa_r+0x94a>
 800a346:	4638      	mov	r0, r7
 800a348:	e7ba      	b.n	800a2c0 <_dtoa_r+0x9d8>
 800a34a:	2201      	movs	r2, #1
 800a34c:	e7e2      	b.n	800a314 <_dtoa_r+0xa2c>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	db04      	blt.n	800a35e <_dtoa_r+0xa76>
 800a354:	9906      	ldr	r1, [sp, #24]
 800a356:	430b      	orrs	r3, r1
 800a358:	9904      	ldr	r1, [sp, #16]
 800a35a:	430b      	orrs	r3, r1
 800a35c:	d122      	bne.n	800a3a4 <_dtoa_r+0xabc>
 800a35e:	2a00      	cmp	r2, #0
 800a360:	ddee      	ble.n	800a340 <_dtoa_r+0xa58>
 800a362:	ee18 1a10 	vmov	r1, s16
 800a366:	2201      	movs	r2, #1
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 feb5 	bl	800b0d8 <__lshift>
 800a36e:	4631      	mov	r1, r6
 800a370:	ee08 0a10 	vmov	s16, r0
 800a374:	f000 ff20 	bl	800b1b8 <__mcmp>
 800a378:	2800      	cmp	r0, #0
 800a37a:	dc03      	bgt.n	800a384 <_dtoa_r+0xa9c>
 800a37c:	d1e0      	bne.n	800a340 <_dtoa_r+0xa58>
 800a37e:	f01a 0f01 	tst.w	sl, #1
 800a382:	d0dd      	beq.n	800a340 <_dtoa_r+0xa58>
 800a384:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a388:	d1d7      	bne.n	800a33a <_dtoa_r+0xa52>
 800a38a:	2339      	movs	r3, #57	; 0x39
 800a38c:	f88b 3000 	strb.w	r3, [fp]
 800a390:	462b      	mov	r3, r5
 800a392:	461d      	mov	r5, r3
 800a394:	3b01      	subs	r3, #1
 800a396:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a39a:	2a39      	cmp	r2, #57	; 0x39
 800a39c:	d071      	beq.n	800a482 <_dtoa_r+0xb9a>
 800a39e:	3201      	adds	r2, #1
 800a3a0:	701a      	strb	r2, [r3, #0]
 800a3a2:	e746      	b.n	800a232 <_dtoa_r+0x94a>
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	dd07      	ble.n	800a3b8 <_dtoa_r+0xad0>
 800a3a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3ac:	d0ed      	beq.n	800a38a <_dtoa_r+0xaa2>
 800a3ae:	f10a 0301 	add.w	r3, sl, #1
 800a3b2:	f88b 3000 	strb.w	r3, [fp]
 800a3b6:	e73c      	b.n	800a232 <_dtoa_r+0x94a>
 800a3b8:	9b05      	ldr	r3, [sp, #20]
 800a3ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a3be:	4599      	cmp	r9, r3
 800a3c0:	d047      	beq.n	800a452 <_dtoa_r+0xb6a>
 800a3c2:	ee18 1a10 	vmov	r1, s16
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	220a      	movs	r2, #10
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fc8a 	bl	800ace4 <__multadd>
 800a3d0:	45b8      	cmp	r8, r7
 800a3d2:	ee08 0a10 	vmov	s16, r0
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	f04f 020a 	mov.w	r2, #10
 800a3de:	4641      	mov	r1, r8
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	d106      	bne.n	800a3f2 <_dtoa_r+0xb0a>
 800a3e4:	f000 fc7e 	bl	800ace4 <__multadd>
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	f109 0901 	add.w	r9, r9, #1
 800a3f0:	e772      	b.n	800a2d8 <_dtoa_r+0x9f0>
 800a3f2:	f000 fc77 	bl	800ace4 <__multadd>
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	4680      	mov	r8, r0
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	220a      	movs	r2, #10
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 fc70 	bl	800ace4 <__multadd>
 800a404:	4607      	mov	r7, r0
 800a406:	e7f1      	b.n	800a3ec <_dtoa_r+0xb04>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	9d01      	ldr	r5, [sp, #4]
 800a40e:	ee18 0a10 	vmov	r0, s16
 800a412:	4631      	mov	r1, r6
 800a414:	f7ff f9da 	bl	80097cc <quorem>
 800a418:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a41c:	9b01      	ldr	r3, [sp, #4]
 800a41e:	f805 ab01 	strb.w	sl, [r5], #1
 800a422:	1aea      	subs	r2, r5, r3
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	4293      	cmp	r3, r2
 800a428:	dd09      	ble.n	800a43e <_dtoa_r+0xb56>
 800a42a:	ee18 1a10 	vmov	r1, s16
 800a42e:	2300      	movs	r3, #0
 800a430:	220a      	movs	r2, #10
 800a432:	4620      	mov	r0, r4
 800a434:	f000 fc56 	bl	800ace4 <__multadd>
 800a438:	ee08 0a10 	vmov	s16, r0
 800a43c:	e7e7      	b.n	800a40e <_dtoa_r+0xb26>
 800a43e:	9b02      	ldr	r3, [sp, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfc8      	it	gt
 800a444:	461d      	movgt	r5, r3
 800a446:	9b01      	ldr	r3, [sp, #4]
 800a448:	bfd8      	it	le
 800a44a:	2501      	movle	r5, #1
 800a44c:	441d      	add	r5, r3
 800a44e:	f04f 0800 	mov.w	r8, #0
 800a452:	ee18 1a10 	vmov	r1, s16
 800a456:	2201      	movs	r2, #1
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fe3d 	bl	800b0d8 <__lshift>
 800a45e:	4631      	mov	r1, r6
 800a460:	ee08 0a10 	vmov	s16, r0
 800a464:	f000 fea8 	bl	800b1b8 <__mcmp>
 800a468:	2800      	cmp	r0, #0
 800a46a:	dc91      	bgt.n	800a390 <_dtoa_r+0xaa8>
 800a46c:	d102      	bne.n	800a474 <_dtoa_r+0xb8c>
 800a46e:	f01a 0f01 	tst.w	sl, #1
 800a472:	d18d      	bne.n	800a390 <_dtoa_r+0xaa8>
 800a474:	462b      	mov	r3, r5
 800a476:	461d      	mov	r5, r3
 800a478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a47c:	2a30      	cmp	r2, #48	; 0x30
 800a47e:	d0fa      	beq.n	800a476 <_dtoa_r+0xb8e>
 800a480:	e6d7      	b.n	800a232 <_dtoa_r+0x94a>
 800a482:	9a01      	ldr	r2, [sp, #4]
 800a484:	429a      	cmp	r2, r3
 800a486:	d184      	bne.n	800a392 <_dtoa_r+0xaaa>
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	2331      	movs	r3, #49	; 0x31
 800a490:	7013      	strb	r3, [r2, #0]
 800a492:	e6ce      	b.n	800a232 <_dtoa_r+0x94a>
 800a494:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <_dtoa_r+0xbd4>)
 800a496:	f7ff ba95 	b.w	80099c4 <_dtoa_r+0xdc>
 800a49a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f47f aa6e 	bne.w	800997e <_dtoa_r+0x96>
 800a4a2:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <_dtoa_r+0xbd8>)
 800a4a4:	f7ff ba8e 	b.w	80099c4 <_dtoa_r+0xdc>
 800a4a8:	9b02      	ldr	r3, [sp, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dcae      	bgt.n	800a40c <_dtoa_r+0xb24>
 800a4ae:	9b06      	ldr	r3, [sp, #24]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	f73f aea8 	bgt.w	800a206 <_dtoa_r+0x91e>
 800a4b6:	e7a9      	b.n	800a40c <_dtoa_r+0xb24>
 800a4b8:	0800d038 	.word	0x0800d038
 800a4bc:	0800d231 	.word	0x0800d231
 800a4c0:	0800cfb9 	.word	0x0800cfb9

0800a4c4 <rshift>:
 800a4c4:	6903      	ldr	r3, [r0, #16]
 800a4c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4d2:	f100 0414 	add.w	r4, r0, #20
 800a4d6:	dd45      	ble.n	800a564 <rshift+0xa0>
 800a4d8:	f011 011f 	ands.w	r1, r1, #31
 800a4dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4e4:	d10c      	bne.n	800a500 <rshift+0x3c>
 800a4e6:	f100 0710 	add.w	r7, r0, #16
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	42b1      	cmp	r1, r6
 800a4ee:	d334      	bcc.n	800a55a <rshift+0x96>
 800a4f0:	1a9b      	subs	r3, r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	1eea      	subs	r2, r5, #3
 800a4f6:	4296      	cmp	r6, r2
 800a4f8:	bf38      	it	cc
 800a4fa:	2300      	movcc	r3, #0
 800a4fc:	4423      	add	r3, r4
 800a4fe:	e015      	b.n	800a52c <rshift+0x68>
 800a500:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a504:	f1c1 0820 	rsb	r8, r1, #32
 800a508:	40cf      	lsrs	r7, r1
 800a50a:	f105 0e04 	add.w	lr, r5, #4
 800a50e:	46a1      	mov	r9, r4
 800a510:	4576      	cmp	r6, lr
 800a512:	46f4      	mov	ip, lr
 800a514:	d815      	bhi.n	800a542 <rshift+0x7e>
 800a516:	1a9a      	subs	r2, r3, r2
 800a518:	0092      	lsls	r2, r2, #2
 800a51a:	3a04      	subs	r2, #4
 800a51c:	3501      	adds	r5, #1
 800a51e:	42ae      	cmp	r6, r5
 800a520:	bf38      	it	cc
 800a522:	2200      	movcc	r2, #0
 800a524:	18a3      	adds	r3, r4, r2
 800a526:	50a7      	str	r7, [r4, r2]
 800a528:	b107      	cbz	r7, 800a52c <rshift+0x68>
 800a52a:	3304      	adds	r3, #4
 800a52c:	1b1a      	subs	r2, r3, r4
 800a52e:	42a3      	cmp	r3, r4
 800a530:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a534:	bf08      	it	eq
 800a536:	2300      	moveq	r3, #0
 800a538:	6102      	str	r2, [r0, #16]
 800a53a:	bf08      	it	eq
 800a53c:	6143      	streq	r3, [r0, #20]
 800a53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a542:	f8dc c000 	ldr.w	ip, [ip]
 800a546:	fa0c fc08 	lsl.w	ip, ip, r8
 800a54a:	ea4c 0707 	orr.w	r7, ip, r7
 800a54e:	f849 7b04 	str.w	r7, [r9], #4
 800a552:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a556:	40cf      	lsrs	r7, r1
 800a558:	e7da      	b.n	800a510 <rshift+0x4c>
 800a55a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a55e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a562:	e7c3      	b.n	800a4ec <rshift+0x28>
 800a564:	4623      	mov	r3, r4
 800a566:	e7e1      	b.n	800a52c <rshift+0x68>

0800a568 <__hexdig_fun>:
 800a568:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a56c:	2b09      	cmp	r3, #9
 800a56e:	d802      	bhi.n	800a576 <__hexdig_fun+0xe>
 800a570:	3820      	subs	r0, #32
 800a572:	b2c0      	uxtb	r0, r0
 800a574:	4770      	bx	lr
 800a576:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d801      	bhi.n	800a582 <__hexdig_fun+0x1a>
 800a57e:	3847      	subs	r0, #71	; 0x47
 800a580:	e7f7      	b.n	800a572 <__hexdig_fun+0xa>
 800a582:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a586:	2b05      	cmp	r3, #5
 800a588:	d801      	bhi.n	800a58e <__hexdig_fun+0x26>
 800a58a:	3827      	subs	r0, #39	; 0x27
 800a58c:	e7f1      	b.n	800a572 <__hexdig_fun+0xa>
 800a58e:	2000      	movs	r0, #0
 800a590:	4770      	bx	lr
	...

0800a594 <__gethex>:
 800a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	ed2d 8b02 	vpush	{d8}
 800a59c:	b089      	sub	sp, #36	; 0x24
 800a59e:	ee08 0a10 	vmov	s16, r0
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	4bb4      	ldr	r3, [pc, #720]	; (800a878 <__gethex+0x2e4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	468b      	mov	fp, r1
 800a5ae:	4690      	mov	r8, r2
 800a5b0:	f7f5 fe2e 	bl	8000210 <strlen>
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	f8db 2000 	ldr.w	r2, [fp]
 800a5ba:	4403      	add	r3, r0
 800a5bc:	4682      	mov	sl, r0
 800a5be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5c2:	9305      	str	r3, [sp, #20]
 800a5c4:	1c93      	adds	r3, r2, #2
 800a5c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5ce:	32fe      	adds	r2, #254	; 0xfe
 800a5d0:	18d1      	adds	r1, r2, r3
 800a5d2:	461f      	mov	r7, r3
 800a5d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a5d8:	9100      	str	r1, [sp, #0]
 800a5da:	2830      	cmp	r0, #48	; 0x30
 800a5dc:	d0f8      	beq.n	800a5d0 <__gethex+0x3c>
 800a5de:	f7ff ffc3 	bl	800a568 <__hexdig_fun>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d13a      	bne.n	800a65e <__gethex+0xca>
 800a5e8:	9901      	ldr	r1, [sp, #4]
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f001 fdb3 	bl	800c158 <strncmp>
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d168      	bne.n	800a6ca <__gethex+0x136>
 800a5f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a5fc:	eb07 060a 	add.w	r6, r7, sl
 800a600:	f7ff ffb2 	bl	800a568 <__hexdig_fun>
 800a604:	2800      	cmp	r0, #0
 800a606:	d062      	beq.n	800a6ce <__gethex+0x13a>
 800a608:	4633      	mov	r3, r6
 800a60a:	7818      	ldrb	r0, [r3, #0]
 800a60c:	2830      	cmp	r0, #48	; 0x30
 800a60e:	461f      	mov	r7, r3
 800a610:	f103 0301 	add.w	r3, r3, #1
 800a614:	d0f9      	beq.n	800a60a <__gethex+0x76>
 800a616:	f7ff ffa7 	bl	800a568 <__hexdig_fun>
 800a61a:	2301      	movs	r3, #1
 800a61c:	fab0 f480 	clz	r4, r0
 800a620:	0964      	lsrs	r4, r4, #5
 800a622:	4635      	mov	r5, r6
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	463a      	mov	r2, r7
 800a628:	4616      	mov	r6, r2
 800a62a:	3201      	adds	r2, #1
 800a62c:	7830      	ldrb	r0, [r6, #0]
 800a62e:	f7ff ff9b 	bl	800a568 <__hexdig_fun>
 800a632:	2800      	cmp	r0, #0
 800a634:	d1f8      	bne.n	800a628 <__gethex+0x94>
 800a636:	9901      	ldr	r1, [sp, #4]
 800a638:	4652      	mov	r2, sl
 800a63a:	4630      	mov	r0, r6
 800a63c:	f001 fd8c 	bl	800c158 <strncmp>
 800a640:	b980      	cbnz	r0, 800a664 <__gethex+0xd0>
 800a642:	b94d      	cbnz	r5, 800a658 <__gethex+0xc4>
 800a644:	eb06 050a 	add.w	r5, r6, sl
 800a648:	462a      	mov	r2, r5
 800a64a:	4616      	mov	r6, r2
 800a64c:	3201      	adds	r2, #1
 800a64e:	7830      	ldrb	r0, [r6, #0]
 800a650:	f7ff ff8a 	bl	800a568 <__hexdig_fun>
 800a654:	2800      	cmp	r0, #0
 800a656:	d1f8      	bne.n	800a64a <__gethex+0xb6>
 800a658:	1bad      	subs	r5, r5, r6
 800a65a:	00ad      	lsls	r5, r5, #2
 800a65c:	e004      	b.n	800a668 <__gethex+0xd4>
 800a65e:	2400      	movs	r4, #0
 800a660:	4625      	mov	r5, r4
 800a662:	e7e0      	b.n	800a626 <__gethex+0x92>
 800a664:	2d00      	cmp	r5, #0
 800a666:	d1f7      	bne.n	800a658 <__gethex+0xc4>
 800a668:	7833      	ldrb	r3, [r6, #0]
 800a66a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a66e:	2b50      	cmp	r3, #80	; 0x50
 800a670:	d13b      	bne.n	800a6ea <__gethex+0x156>
 800a672:	7873      	ldrb	r3, [r6, #1]
 800a674:	2b2b      	cmp	r3, #43	; 0x2b
 800a676:	d02c      	beq.n	800a6d2 <__gethex+0x13e>
 800a678:	2b2d      	cmp	r3, #45	; 0x2d
 800a67a:	d02e      	beq.n	800a6da <__gethex+0x146>
 800a67c:	1c71      	adds	r1, r6, #1
 800a67e:	f04f 0900 	mov.w	r9, #0
 800a682:	7808      	ldrb	r0, [r1, #0]
 800a684:	f7ff ff70 	bl	800a568 <__hexdig_fun>
 800a688:	1e43      	subs	r3, r0, #1
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b18      	cmp	r3, #24
 800a68e:	d82c      	bhi.n	800a6ea <__gethex+0x156>
 800a690:	f1a0 0210 	sub.w	r2, r0, #16
 800a694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a698:	f7ff ff66 	bl	800a568 <__hexdig_fun>
 800a69c:	1e43      	subs	r3, r0, #1
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b18      	cmp	r3, #24
 800a6a2:	d91d      	bls.n	800a6e0 <__gethex+0x14c>
 800a6a4:	f1b9 0f00 	cmp.w	r9, #0
 800a6a8:	d000      	beq.n	800a6ac <__gethex+0x118>
 800a6aa:	4252      	negs	r2, r2
 800a6ac:	4415      	add	r5, r2
 800a6ae:	f8cb 1000 	str.w	r1, [fp]
 800a6b2:	b1e4      	cbz	r4, 800a6ee <__gethex+0x15a>
 800a6b4:	9b00      	ldr	r3, [sp, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	bf14      	ite	ne
 800a6ba:	2700      	movne	r7, #0
 800a6bc:	2706      	moveq	r7, #6
 800a6be:	4638      	mov	r0, r7
 800a6c0:	b009      	add	sp, #36	; 0x24
 800a6c2:	ecbd 8b02 	vpop	{d8}
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	463e      	mov	r6, r7
 800a6cc:	4625      	mov	r5, r4
 800a6ce:	2401      	movs	r4, #1
 800a6d0:	e7ca      	b.n	800a668 <__gethex+0xd4>
 800a6d2:	f04f 0900 	mov.w	r9, #0
 800a6d6:	1cb1      	adds	r1, r6, #2
 800a6d8:	e7d3      	b.n	800a682 <__gethex+0xee>
 800a6da:	f04f 0901 	mov.w	r9, #1
 800a6de:	e7fa      	b.n	800a6d6 <__gethex+0x142>
 800a6e0:	230a      	movs	r3, #10
 800a6e2:	fb03 0202 	mla	r2, r3, r2, r0
 800a6e6:	3a10      	subs	r2, #16
 800a6e8:	e7d4      	b.n	800a694 <__gethex+0x100>
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	e7df      	b.n	800a6ae <__gethex+0x11a>
 800a6ee:	1bf3      	subs	r3, r6, r7
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	2b07      	cmp	r3, #7
 800a6f6:	dc0b      	bgt.n	800a710 <__gethex+0x17c>
 800a6f8:	ee18 0a10 	vmov	r0, s16
 800a6fc:	f000 fa90 	bl	800ac20 <_Balloc>
 800a700:	4604      	mov	r4, r0
 800a702:	b940      	cbnz	r0, 800a716 <__gethex+0x182>
 800a704:	4b5d      	ldr	r3, [pc, #372]	; (800a87c <__gethex+0x2e8>)
 800a706:	4602      	mov	r2, r0
 800a708:	21de      	movs	r1, #222	; 0xde
 800a70a:	485d      	ldr	r0, [pc, #372]	; (800a880 <__gethex+0x2ec>)
 800a70c:	f001 fdf4 	bl	800c2f8 <__assert_func>
 800a710:	3101      	adds	r1, #1
 800a712:	105b      	asrs	r3, r3, #1
 800a714:	e7ee      	b.n	800a6f4 <__gethex+0x160>
 800a716:	f100 0914 	add.w	r9, r0, #20
 800a71a:	f04f 0b00 	mov.w	fp, #0
 800a71e:	f1ca 0301 	rsb	r3, sl, #1
 800a722:	f8cd 9008 	str.w	r9, [sp, #8]
 800a726:	f8cd b000 	str.w	fp, [sp]
 800a72a:	9306      	str	r3, [sp, #24]
 800a72c:	42b7      	cmp	r7, r6
 800a72e:	d340      	bcc.n	800a7b2 <__gethex+0x21e>
 800a730:	9802      	ldr	r0, [sp, #8]
 800a732:	9b00      	ldr	r3, [sp, #0]
 800a734:	f840 3b04 	str.w	r3, [r0], #4
 800a738:	eba0 0009 	sub.w	r0, r0, r9
 800a73c:	1080      	asrs	r0, r0, #2
 800a73e:	0146      	lsls	r6, r0, #5
 800a740:	6120      	str	r0, [r4, #16]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 fb5e 	bl	800ae04 <__hi0bits>
 800a748:	1a30      	subs	r0, r6, r0
 800a74a:	f8d8 6000 	ldr.w	r6, [r8]
 800a74e:	42b0      	cmp	r0, r6
 800a750:	dd63      	ble.n	800a81a <__gethex+0x286>
 800a752:	1b87      	subs	r7, r0, r6
 800a754:	4639      	mov	r1, r7
 800a756:	4620      	mov	r0, r4
 800a758:	f000 ff02 	bl	800b560 <__any_on>
 800a75c:	4682      	mov	sl, r0
 800a75e:	b1a8      	cbz	r0, 800a78c <__gethex+0x1f8>
 800a760:	1e7b      	subs	r3, r7, #1
 800a762:	1159      	asrs	r1, r3, #5
 800a764:	f003 021f 	and.w	r2, r3, #31
 800a768:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a76c:	f04f 0a01 	mov.w	sl, #1
 800a770:	fa0a f202 	lsl.w	r2, sl, r2
 800a774:	420a      	tst	r2, r1
 800a776:	d009      	beq.n	800a78c <__gethex+0x1f8>
 800a778:	4553      	cmp	r3, sl
 800a77a:	dd05      	ble.n	800a788 <__gethex+0x1f4>
 800a77c:	1eb9      	subs	r1, r7, #2
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 feee 	bl	800b560 <__any_on>
 800a784:	2800      	cmp	r0, #0
 800a786:	d145      	bne.n	800a814 <__gethex+0x280>
 800a788:	f04f 0a02 	mov.w	sl, #2
 800a78c:	4639      	mov	r1, r7
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff fe98 	bl	800a4c4 <rshift>
 800a794:	443d      	add	r5, r7
 800a796:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a79a:	42ab      	cmp	r3, r5
 800a79c:	da4c      	bge.n	800a838 <__gethex+0x2a4>
 800a79e:	ee18 0a10 	vmov	r0, s16
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f000 fa7c 	bl	800aca0 <_Bfree>
 800a7a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	27a3      	movs	r7, #163	; 0xa3
 800a7b0:	e785      	b.n	800a6be <__gethex+0x12a>
 800a7b2:	1e73      	subs	r3, r6, #1
 800a7b4:	9a05      	ldr	r2, [sp, #20]
 800a7b6:	9303      	str	r3, [sp, #12]
 800a7b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d019      	beq.n	800a7f4 <__gethex+0x260>
 800a7c0:	f1bb 0f20 	cmp.w	fp, #32
 800a7c4:	d107      	bne.n	800a7d6 <__gethex+0x242>
 800a7c6:	9b02      	ldr	r3, [sp, #8]
 800a7c8:	9a00      	ldr	r2, [sp, #0]
 800a7ca:	f843 2b04 	str.w	r2, [r3], #4
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	469b      	mov	fp, r3
 800a7d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a7da:	f7ff fec5 	bl	800a568 <__hexdig_fun>
 800a7de:	9b00      	ldr	r3, [sp, #0]
 800a7e0:	f000 000f 	and.w	r0, r0, #15
 800a7e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a7e8:	4303      	orrs	r3, r0
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	f10b 0b04 	add.w	fp, fp, #4
 800a7f0:	9b03      	ldr	r3, [sp, #12]
 800a7f2:	e00d      	b.n	800a810 <__gethex+0x27c>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	9a06      	ldr	r2, [sp, #24]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	42bb      	cmp	r3, r7
 800a7fc:	d3e0      	bcc.n	800a7c0 <__gethex+0x22c>
 800a7fe:	4618      	mov	r0, r3
 800a800:	9901      	ldr	r1, [sp, #4]
 800a802:	9307      	str	r3, [sp, #28]
 800a804:	4652      	mov	r2, sl
 800a806:	f001 fca7 	bl	800c158 <strncmp>
 800a80a:	9b07      	ldr	r3, [sp, #28]
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d1d7      	bne.n	800a7c0 <__gethex+0x22c>
 800a810:	461e      	mov	r6, r3
 800a812:	e78b      	b.n	800a72c <__gethex+0x198>
 800a814:	f04f 0a03 	mov.w	sl, #3
 800a818:	e7b8      	b.n	800a78c <__gethex+0x1f8>
 800a81a:	da0a      	bge.n	800a832 <__gethex+0x29e>
 800a81c:	1a37      	subs	r7, r6, r0
 800a81e:	4621      	mov	r1, r4
 800a820:	ee18 0a10 	vmov	r0, s16
 800a824:	463a      	mov	r2, r7
 800a826:	f000 fc57 	bl	800b0d8 <__lshift>
 800a82a:	1bed      	subs	r5, r5, r7
 800a82c:	4604      	mov	r4, r0
 800a82e:	f100 0914 	add.w	r9, r0, #20
 800a832:	f04f 0a00 	mov.w	sl, #0
 800a836:	e7ae      	b.n	800a796 <__gethex+0x202>
 800a838:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a83c:	42a8      	cmp	r0, r5
 800a83e:	dd72      	ble.n	800a926 <__gethex+0x392>
 800a840:	1b45      	subs	r5, r0, r5
 800a842:	42ae      	cmp	r6, r5
 800a844:	dc36      	bgt.n	800a8b4 <__gethex+0x320>
 800a846:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d02a      	beq.n	800a8a4 <__gethex+0x310>
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d02c      	beq.n	800a8ac <__gethex+0x318>
 800a852:	2b01      	cmp	r3, #1
 800a854:	d11c      	bne.n	800a890 <__gethex+0x2fc>
 800a856:	42ae      	cmp	r6, r5
 800a858:	d11a      	bne.n	800a890 <__gethex+0x2fc>
 800a85a:	2e01      	cmp	r6, #1
 800a85c:	d112      	bne.n	800a884 <__gethex+0x2f0>
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	2301      	movs	r3, #1
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	f8c9 3000 	str.w	r3, [r9]
 800a86e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a870:	2762      	movs	r7, #98	; 0x62
 800a872:	601c      	str	r4, [r3, #0]
 800a874:	e723      	b.n	800a6be <__gethex+0x12a>
 800a876:	bf00      	nop
 800a878:	0800d0b0 	.word	0x0800d0b0
 800a87c:	0800d038 	.word	0x0800d038
 800a880:	0800d049 	.word	0x0800d049
 800a884:	1e71      	subs	r1, r6, #1
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fe6a 	bl	800b560 <__any_on>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d1e6      	bne.n	800a85e <__gethex+0x2ca>
 800a890:	ee18 0a10 	vmov	r0, s16
 800a894:	4621      	mov	r1, r4
 800a896:	f000 fa03 	bl	800aca0 <_Bfree>
 800a89a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a89c:	2300      	movs	r3, #0
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	2750      	movs	r7, #80	; 0x50
 800a8a2:	e70c      	b.n	800a6be <__gethex+0x12a>
 800a8a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1f2      	bne.n	800a890 <__gethex+0x2fc>
 800a8aa:	e7d8      	b.n	800a85e <__gethex+0x2ca>
 800a8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1d5      	bne.n	800a85e <__gethex+0x2ca>
 800a8b2:	e7ed      	b.n	800a890 <__gethex+0x2fc>
 800a8b4:	1e6f      	subs	r7, r5, #1
 800a8b6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ba:	d131      	bne.n	800a920 <__gethex+0x38c>
 800a8bc:	b127      	cbz	r7, 800a8c8 <__gethex+0x334>
 800a8be:	4639      	mov	r1, r7
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 fe4d 	bl	800b560 <__any_on>
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	117b      	asrs	r3, r7, #5
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a8d0:	f007 071f 	and.w	r7, r7, #31
 800a8d4:	fa01 f707 	lsl.w	r7, r1, r7
 800a8d8:	421f      	tst	r7, r3
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4620      	mov	r0, r4
 800a8de:	bf18      	it	ne
 800a8e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a8e4:	1b76      	subs	r6, r6, r5
 800a8e6:	f7ff fded 	bl	800a4c4 <rshift>
 800a8ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8ee:	2702      	movs	r7, #2
 800a8f0:	f1ba 0f00 	cmp.w	sl, #0
 800a8f4:	d048      	beq.n	800a988 <__gethex+0x3f4>
 800a8f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d015      	beq.n	800a92a <__gethex+0x396>
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d017      	beq.n	800a932 <__gethex+0x39e>
 800a902:	2b01      	cmp	r3, #1
 800a904:	d109      	bne.n	800a91a <__gethex+0x386>
 800a906:	f01a 0f02 	tst.w	sl, #2
 800a90a:	d006      	beq.n	800a91a <__gethex+0x386>
 800a90c:	f8d9 0000 	ldr.w	r0, [r9]
 800a910:	ea4a 0a00 	orr.w	sl, sl, r0
 800a914:	f01a 0f01 	tst.w	sl, #1
 800a918:	d10e      	bne.n	800a938 <__gethex+0x3a4>
 800a91a:	f047 0710 	orr.w	r7, r7, #16
 800a91e:	e033      	b.n	800a988 <__gethex+0x3f4>
 800a920:	f04f 0a01 	mov.w	sl, #1
 800a924:	e7d0      	b.n	800a8c8 <__gethex+0x334>
 800a926:	2701      	movs	r7, #1
 800a928:	e7e2      	b.n	800a8f0 <__gethex+0x35c>
 800a92a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a92c:	f1c3 0301 	rsb	r3, r3, #1
 800a930:	9315      	str	r3, [sp, #84]	; 0x54
 800a932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f0      	beq.n	800a91a <__gethex+0x386>
 800a938:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a93c:	f104 0314 	add.w	r3, r4, #20
 800a940:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a944:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a948:	f04f 0c00 	mov.w	ip, #0
 800a94c:	4618      	mov	r0, r3
 800a94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a952:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a956:	d01c      	beq.n	800a992 <__gethex+0x3fe>
 800a958:	3201      	adds	r2, #1
 800a95a:	6002      	str	r2, [r0, #0]
 800a95c:	2f02      	cmp	r7, #2
 800a95e:	f104 0314 	add.w	r3, r4, #20
 800a962:	d13f      	bne.n	800a9e4 <__gethex+0x450>
 800a964:	f8d8 2000 	ldr.w	r2, [r8]
 800a968:	3a01      	subs	r2, #1
 800a96a:	42b2      	cmp	r2, r6
 800a96c:	d10a      	bne.n	800a984 <__gethex+0x3f0>
 800a96e:	1171      	asrs	r1, r6, #5
 800a970:	2201      	movs	r2, #1
 800a972:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a976:	f006 061f 	and.w	r6, r6, #31
 800a97a:	fa02 f606 	lsl.w	r6, r2, r6
 800a97e:	421e      	tst	r6, r3
 800a980:	bf18      	it	ne
 800a982:	4617      	movne	r7, r2
 800a984:	f047 0720 	orr.w	r7, r7, #32
 800a988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a98a:	601c      	str	r4, [r3, #0]
 800a98c:	9b04      	ldr	r3, [sp, #16]
 800a98e:	601d      	str	r5, [r3, #0]
 800a990:	e695      	b.n	800a6be <__gethex+0x12a>
 800a992:	4299      	cmp	r1, r3
 800a994:	f843 cc04 	str.w	ip, [r3, #-4]
 800a998:	d8d8      	bhi.n	800a94c <__gethex+0x3b8>
 800a99a:	68a3      	ldr	r3, [r4, #8]
 800a99c:	459b      	cmp	fp, r3
 800a99e:	db19      	blt.n	800a9d4 <__gethex+0x440>
 800a9a0:	6861      	ldr	r1, [r4, #4]
 800a9a2:	ee18 0a10 	vmov	r0, s16
 800a9a6:	3101      	adds	r1, #1
 800a9a8:	f000 f93a 	bl	800ac20 <_Balloc>
 800a9ac:	4681      	mov	r9, r0
 800a9ae:	b918      	cbnz	r0, 800a9b8 <__gethex+0x424>
 800a9b0:	4b1a      	ldr	r3, [pc, #104]	; (800aa1c <__gethex+0x488>)
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	2184      	movs	r1, #132	; 0x84
 800a9b6:	e6a8      	b.n	800a70a <__gethex+0x176>
 800a9b8:	6922      	ldr	r2, [r4, #16]
 800a9ba:	3202      	adds	r2, #2
 800a9bc:	f104 010c 	add.w	r1, r4, #12
 800a9c0:	0092      	lsls	r2, r2, #2
 800a9c2:	300c      	adds	r0, #12
 800a9c4:	f000 f91e 	bl	800ac04 <memcpy>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	ee18 0a10 	vmov	r0, s16
 800a9ce:	f000 f967 	bl	800aca0 <_Bfree>
 800a9d2:	464c      	mov	r4, r9
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9dc:	6122      	str	r2, [r4, #16]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	615a      	str	r2, [r3, #20]
 800a9e2:	e7bb      	b.n	800a95c <__gethex+0x3c8>
 800a9e4:	6922      	ldr	r2, [r4, #16]
 800a9e6:	455a      	cmp	r2, fp
 800a9e8:	dd0b      	ble.n	800aa02 <__gethex+0x46e>
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff fd69 	bl	800a4c4 <rshift>
 800a9f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9f6:	3501      	adds	r5, #1
 800a9f8:	42ab      	cmp	r3, r5
 800a9fa:	f6ff aed0 	blt.w	800a79e <__gethex+0x20a>
 800a9fe:	2701      	movs	r7, #1
 800aa00:	e7c0      	b.n	800a984 <__gethex+0x3f0>
 800aa02:	f016 061f 	ands.w	r6, r6, #31
 800aa06:	d0fa      	beq.n	800a9fe <__gethex+0x46a>
 800aa08:	4453      	add	r3, sl
 800aa0a:	f1c6 0620 	rsb	r6, r6, #32
 800aa0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa12:	f000 f9f7 	bl	800ae04 <__hi0bits>
 800aa16:	42b0      	cmp	r0, r6
 800aa18:	dbe7      	blt.n	800a9ea <__gethex+0x456>
 800aa1a:	e7f0      	b.n	800a9fe <__gethex+0x46a>
 800aa1c:	0800d038 	.word	0x0800d038

0800aa20 <L_shift>:
 800aa20:	f1c2 0208 	rsb	r2, r2, #8
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	b570      	push	{r4, r5, r6, lr}
 800aa28:	f1c2 0620 	rsb	r6, r2, #32
 800aa2c:	6843      	ldr	r3, [r0, #4]
 800aa2e:	6804      	ldr	r4, [r0, #0]
 800aa30:	fa03 f506 	lsl.w	r5, r3, r6
 800aa34:	432c      	orrs	r4, r5
 800aa36:	40d3      	lsrs	r3, r2
 800aa38:	6004      	str	r4, [r0, #0]
 800aa3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa3e:	4288      	cmp	r0, r1
 800aa40:	d3f4      	bcc.n	800aa2c <L_shift+0xc>
 800aa42:	bd70      	pop	{r4, r5, r6, pc}

0800aa44 <__match>:
 800aa44:	b530      	push	{r4, r5, lr}
 800aa46:	6803      	ldr	r3, [r0, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4e:	b914      	cbnz	r4, 800aa56 <__match+0x12>
 800aa50:	6003      	str	r3, [r0, #0]
 800aa52:	2001      	movs	r0, #1
 800aa54:	bd30      	pop	{r4, r5, pc}
 800aa56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa5e:	2d19      	cmp	r5, #25
 800aa60:	bf98      	it	ls
 800aa62:	3220      	addls	r2, #32
 800aa64:	42a2      	cmp	r2, r4
 800aa66:	d0f0      	beq.n	800aa4a <__match+0x6>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e7f3      	b.n	800aa54 <__match+0x10>

0800aa6c <__hexnan>:
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	680b      	ldr	r3, [r1, #0]
 800aa72:	115e      	asrs	r6, r3, #5
 800aa74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa78:	f013 031f 	ands.w	r3, r3, #31
 800aa7c:	b087      	sub	sp, #28
 800aa7e:	bf18      	it	ne
 800aa80:	3604      	addne	r6, #4
 800aa82:	2500      	movs	r5, #0
 800aa84:	1f37      	subs	r7, r6, #4
 800aa86:	4690      	mov	r8, r2
 800aa88:	6802      	ldr	r2, [r0, #0]
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa92:	46b9      	mov	r9, r7
 800aa94:	463c      	mov	r4, r7
 800aa96:	9502      	str	r5, [sp, #8]
 800aa98:	46ab      	mov	fp, r5
 800aa9a:	7851      	ldrb	r1, [r2, #1]
 800aa9c:	1c53      	adds	r3, r2, #1
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	b341      	cbz	r1, 800aaf4 <__hexnan+0x88>
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	9205      	str	r2, [sp, #20]
 800aaa6:	9104      	str	r1, [sp, #16]
 800aaa8:	f7ff fd5e 	bl	800a568 <__hexdig_fun>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d14f      	bne.n	800ab50 <__hexnan+0xe4>
 800aab0:	9904      	ldr	r1, [sp, #16]
 800aab2:	9a05      	ldr	r2, [sp, #20]
 800aab4:	2920      	cmp	r1, #32
 800aab6:	d818      	bhi.n	800aaea <__hexnan+0x7e>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	459b      	cmp	fp, r3
 800aabc:	dd13      	ble.n	800aae6 <__hexnan+0x7a>
 800aabe:	454c      	cmp	r4, r9
 800aac0:	d206      	bcs.n	800aad0 <__hexnan+0x64>
 800aac2:	2d07      	cmp	r5, #7
 800aac4:	dc04      	bgt.n	800aad0 <__hexnan+0x64>
 800aac6:	462a      	mov	r2, r5
 800aac8:	4649      	mov	r1, r9
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7ff ffa8 	bl	800aa20 <L_shift>
 800aad0:	4544      	cmp	r4, r8
 800aad2:	d950      	bls.n	800ab76 <__hexnan+0x10a>
 800aad4:	2300      	movs	r3, #0
 800aad6:	f1a4 0904 	sub.w	r9, r4, #4
 800aada:	f844 3c04 	str.w	r3, [r4, #-4]
 800aade:	f8cd b008 	str.w	fp, [sp, #8]
 800aae2:	464c      	mov	r4, r9
 800aae4:	461d      	mov	r5, r3
 800aae6:	9a03      	ldr	r2, [sp, #12]
 800aae8:	e7d7      	b.n	800aa9a <__hexnan+0x2e>
 800aaea:	2929      	cmp	r1, #41	; 0x29
 800aaec:	d156      	bne.n	800ab9c <__hexnan+0x130>
 800aaee:	3202      	adds	r2, #2
 800aaf0:	f8ca 2000 	str.w	r2, [sl]
 800aaf4:	f1bb 0f00 	cmp.w	fp, #0
 800aaf8:	d050      	beq.n	800ab9c <__hexnan+0x130>
 800aafa:	454c      	cmp	r4, r9
 800aafc:	d206      	bcs.n	800ab0c <__hexnan+0xa0>
 800aafe:	2d07      	cmp	r5, #7
 800ab00:	dc04      	bgt.n	800ab0c <__hexnan+0xa0>
 800ab02:	462a      	mov	r2, r5
 800ab04:	4649      	mov	r1, r9
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff ff8a 	bl	800aa20 <L_shift>
 800ab0c:	4544      	cmp	r4, r8
 800ab0e:	d934      	bls.n	800ab7a <__hexnan+0x10e>
 800ab10:	f1a8 0204 	sub.w	r2, r8, #4
 800ab14:	4623      	mov	r3, r4
 800ab16:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab1e:	429f      	cmp	r7, r3
 800ab20:	d2f9      	bcs.n	800ab16 <__hexnan+0xaa>
 800ab22:	1b3b      	subs	r3, r7, r4
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	3304      	adds	r3, #4
 800ab2a:	3401      	adds	r4, #1
 800ab2c:	3e03      	subs	r6, #3
 800ab2e:	42b4      	cmp	r4, r6
 800ab30:	bf88      	it	hi
 800ab32:	2304      	movhi	r3, #4
 800ab34:	4443      	add	r3, r8
 800ab36:	2200      	movs	r2, #0
 800ab38:	f843 2b04 	str.w	r2, [r3], #4
 800ab3c:	429f      	cmp	r7, r3
 800ab3e:	d2fb      	bcs.n	800ab38 <__hexnan+0xcc>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	b91b      	cbnz	r3, 800ab4c <__hexnan+0xe0>
 800ab44:	4547      	cmp	r7, r8
 800ab46:	d127      	bne.n	800ab98 <__hexnan+0x12c>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	2005      	movs	r0, #5
 800ab4e:	e026      	b.n	800ab9e <__hexnan+0x132>
 800ab50:	3501      	adds	r5, #1
 800ab52:	2d08      	cmp	r5, #8
 800ab54:	f10b 0b01 	add.w	fp, fp, #1
 800ab58:	dd06      	ble.n	800ab68 <__hexnan+0xfc>
 800ab5a:	4544      	cmp	r4, r8
 800ab5c:	d9c3      	bls.n	800aae6 <__hexnan+0x7a>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab64:	2501      	movs	r5, #1
 800ab66:	3c04      	subs	r4, #4
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	f000 000f 	and.w	r0, r0, #15
 800ab6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ab72:	6022      	str	r2, [r4, #0]
 800ab74:	e7b7      	b.n	800aae6 <__hexnan+0x7a>
 800ab76:	2508      	movs	r5, #8
 800ab78:	e7b5      	b.n	800aae6 <__hexnan+0x7a>
 800ab7a:	9b01      	ldr	r3, [sp, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0df      	beq.n	800ab40 <__hexnan+0xd4>
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295
 800ab84:	f1c3 0320 	rsb	r3, r3, #32
 800ab88:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab90:	401a      	ands	r2, r3
 800ab92:	f846 2c04 	str.w	r2, [r6, #-4]
 800ab96:	e7d3      	b.n	800ab40 <__hexnan+0xd4>
 800ab98:	3f04      	subs	r7, #4
 800ab9a:	e7d1      	b.n	800ab40 <__hexnan+0xd4>
 800ab9c:	2004      	movs	r0, #4
 800ab9e:	b007      	add	sp, #28
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aba4 <_localeconv_r>:
 800aba4:	4800      	ldr	r0, [pc, #0]	; (800aba8 <_localeconv_r+0x4>)
 800aba6:	4770      	bx	lr
 800aba8:	20000194 	.word	0x20000194

0800abac <_lseek_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d07      	ldr	r5, [pc, #28]	; (800abcc <_lseek_r+0x20>)
 800abb0:	4604      	mov	r4, r0
 800abb2:	4608      	mov	r0, r1
 800abb4:	4611      	mov	r1, r2
 800abb6:	2200      	movs	r2, #0
 800abb8:	602a      	str	r2, [r5, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	f7f7 fbf6 	bl	80023ac <_lseek>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_lseek_r+0x1e>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_lseek_r+0x1e>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	200004d4 	.word	0x200004d4

0800abd0 <malloc>:
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <malloc+0xc>)
 800abd2:	4601      	mov	r1, r0
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f000 bd67 	b.w	800b6a8 <_malloc_r>
 800abda:	bf00      	nop
 800abdc:	2000003c 	.word	0x2000003c

0800abe0 <__ascii_mbtowc>:
 800abe0:	b082      	sub	sp, #8
 800abe2:	b901      	cbnz	r1, 800abe6 <__ascii_mbtowc+0x6>
 800abe4:	a901      	add	r1, sp, #4
 800abe6:	b142      	cbz	r2, 800abfa <__ascii_mbtowc+0x1a>
 800abe8:	b14b      	cbz	r3, 800abfe <__ascii_mbtowc+0x1e>
 800abea:	7813      	ldrb	r3, [r2, #0]
 800abec:	600b      	str	r3, [r1, #0]
 800abee:	7812      	ldrb	r2, [r2, #0]
 800abf0:	1e10      	subs	r0, r2, #0
 800abf2:	bf18      	it	ne
 800abf4:	2001      	movne	r0, #1
 800abf6:	b002      	add	sp, #8
 800abf8:	4770      	bx	lr
 800abfa:	4610      	mov	r0, r2
 800abfc:	e7fb      	b.n	800abf6 <__ascii_mbtowc+0x16>
 800abfe:	f06f 0001 	mvn.w	r0, #1
 800ac02:	e7f8      	b.n	800abf6 <__ascii_mbtowc+0x16>

0800ac04 <memcpy>:
 800ac04:	440a      	add	r2, r1
 800ac06:	4291      	cmp	r1, r2
 800ac08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac0c:	d100      	bne.n	800ac10 <memcpy+0xc>
 800ac0e:	4770      	bx	lr
 800ac10:	b510      	push	{r4, lr}
 800ac12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	d1f9      	bne.n	800ac12 <memcpy+0xe>
 800ac1e:	bd10      	pop	{r4, pc}

0800ac20 <_Balloc>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac24:	4604      	mov	r4, r0
 800ac26:	460d      	mov	r5, r1
 800ac28:	b976      	cbnz	r6, 800ac48 <_Balloc+0x28>
 800ac2a:	2010      	movs	r0, #16
 800ac2c:	f7ff ffd0 	bl	800abd0 <malloc>
 800ac30:	4602      	mov	r2, r0
 800ac32:	6260      	str	r0, [r4, #36]	; 0x24
 800ac34:	b920      	cbnz	r0, 800ac40 <_Balloc+0x20>
 800ac36:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <_Balloc+0x78>)
 800ac38:	4818      	ldr	r0, [pc, #96]	; (800ac9c <_Balloc+0x7c>)
 800ac3a:	2166      	movs	r1, #102	; 0x66
 800ac3c:	f001 fb5c 	bl	800c2f8 <__assert_func>
 800ac40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac44:	6006      	str	r6, [r0, #0]
 800ac46:	60c6      	str	r6, [r0, #12]
 800ac48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac4a:	68f3      	ldr	r3, [r6, #12]
 800ac4c:	b183      	cbz	r3, 800ac70 <_Balloc+0x50>
 800ac4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac56:	b9b8      	cbnz	r0, 800ac88 <_Balloc+0x68>
 800ac58:	2101      	movs	r1, #1
 800ac5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac5e:	1d72      	adds	r2, r6, #5
 800ac60:	0092      	lsls	r2, r2, #2
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fc9d 	bl	800b5a2 <_calloc_r>
 800ac68:	b160      	cbz	r0, 800ac84 <_Balloc+0x64>
 800ac6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac6e:	e00e      	b.n	800ac8e <_Balloc+0x6e>
 800ac70:	2221      	movs	r2, #33	; 0x21
 800ac72:	2104      	movs	r1, #4
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 fc94 	bl	800b5a2 <_calloc_r>
 800ac7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac7c:	60f0      	str	r0, [r6, #12]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e4      	bne.n	800ac4e <_Balloc+0x2e>
 800ac84:	2000      	movs	r0, #0
 800ac86:	bd70      	pop	{r4, r5, r6, pc}
 800ac88:	6802      	ldr	r2, [r0, #0]
 800ac8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac94:	e7f7      	b.n	800ac86 <_Balloc+0x66>
 800ac96:	bf00      	nop
 800ac98:	0800cfc6 	.word	0x0800cfc6
 800ac9c:	0800d0c4 	.word	0x0800d0c4

0800aca0 <_Bfree>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aca4:	4605      	mov	r5, r0
 800aca6:	460c      	mov	r4, r1
 800aca8:	b976      	cbnz	r6, 800acc8 <_Bfree+0x28>
 800acaa:	2010      	movs	r0, #16
 800acac:	f7ff ff90 	bl	800abd0 <malloc>
 800acb0:	4602      	mov	r2, r0
 800acb2:	6268      	str	r0, [r5, #36]	; 0x24
 800acb4:	b920      	cbnz	r0, 800acc0 <_Bfree+0x20>
 800acb6:	4b09      	ldr	r3, [pc, #36]	; (800acdc <_Bfree+0x3c>)
 800acb8:	4809      	ldr	r0, [pc, #36]	; (800ace0 <_Bfree+0x40>)
 800acba:	218a      	movs	r1, #138	; 0x8a
 800acbc:	f001 fb1c 	bl	800c2f8 <__assert_func>
 800acc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acc4:	6006      	str	r6, [r0, #0]
 800acc6:	60c6      	str	r6, [r0, #12]
 800acc8:	b13c      	cbz	r4, 800acda <_Bfree+0x3a>
 800acca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800accc:	6862      	ldr	r2, [r4, #4]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acd4:	6021      	str	r1, [r4, #0]
 800acd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	0800cfc6 	.word	0x0800cfc6
 800ace0:	0800d0c4 	.word	0x0800d0c4

0800ace4 <__multadd>:
 800ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	690d      	ldr	r5, [r1, #16]
 800acea:	4607      	mov	r7, r0
 800acec:	460c      	mov	r4, r1
 800acee:	461e      	mov	r6, r3
 800acf0:	f101 0c14 	add.w	ip, r1, #20
 800acf4:	2000      	movs	r0, #0
 800acf6:	f8dc 3000 	ldr.w	r3, [ip]
 800acfa:	b299      	uxth	r1, r3
 800acfc:	fb02 6101 	mla	r1, r2, r1, r6
 800ad00:	0c1e      	lsrs	r6, r3, #16
 800ad02:	0c0b      	lsrs	r3, r1, #16
 800ad04:	fb02 3306 	mla	r3, r2, r6, r3
 800ad08:	b289      	uxth	r1, r1
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad10:	4285      	cmp	r5, r0
 800ad12:	f84c 1b04 	str.w	r1, [ip], #4
 800ad16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad1a:	dcec      	bgt.n	800acf6 <__multadd+0x12>
 800ad1c:	b30e      	cbz	r6, 800ad62 <__multadd+0x7e>
 800ad1e:	68a3      	ldr	r3, [r4, #8]
 800ad20:	42ab      	cmp	r3, r5
 800ad22:	dc19      	bgt.n	800ad58 <__multadd+0x74>
 800ad24:	6861      	ldr	r1, [r4, #4]
 800ad26:	4638      	mov	r0, r7
 800ad28:	3101      	adds	r1, #1
 800ad2a:	f7ff ff79 	bl	800ac20 <_Balloc>
 800ad2e:	4680      	mov	r8, r0
 800ad30:	b928      	cbnz	r0, 800ad3e <__multadd+0x5a>
 800ad32:	4602      	mov	r2, r0
 800ad34:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <__multadd+0x84>)
 800ad36:	480d      	ldr	r0, [pc, #52]	; (800ad6c <__multadd+0x88>)
 800ad38:	21b5      	movs	r1, #181	; 0xb5
 800ad3a:	f001 fadd 	bl	800c2f8 <__assert_func>
 800ad3e:	6922      	ldr	r2, [r4, #16]
 800ad40:	3202      	adds	r2, #2
 800ad42:	f104 010c 	add.w	r1, r4, #12
 800ad46:	0092      	lsls	r2, r2, #2
 800ad48:	300c      	adds	r0, #12
 800ad4a:	f7ff ff5b 	bl	800ac04 <memcpy>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff ffa5 	bl	800aca0 <_Bfree>
 800ad56:	4644      	mov	r4, r8
 800ad58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	615e      	str	r6, [r3, #20]
 800ad60:	6125      	str	r5, [r4, #16]
 800ad62:	4620      	mov	r0, r4
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	0800d038 	.word	0x0800d038
 800ad6c:	0800d0c4 	.word	0x0800d0c4

0800ad70 <__s2b>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	460c      	mov	r4, r1
 800ad76:	4615      	mov	r5, r2
 800ad78:	461f      	mov	r7, r3
 800ad7a:	2209      	movs	r2, #9
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	4606      	mov	r6, r0
 800ad80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad84:	2100      	movs	r1, #0
 800ad86:	2201      	movs	r2, #1
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	db09      	blt.n	800ada0 <__s2b+0x30>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7ff ff47 	bl	800ac20 <_Balloc>
 800ad92:	b940      	cbnz	r0, 800ada6 <__s2b+0x36>
 800ad94:	4602      	mov	r2, r0
 800ad96:	4b19      	ldr	r3, [pc, #100]	; (800adfc <__s2b+0x8c>)
 800ad98:	4819      	ldr	r0, [pc, #100]	; (800ae00 <__s2b+0x90>)
 800ad9a:	21ce      	movs	r1, #206	; 0xce
 800ad9c:	f001 faac 	bl	800c2f8 <__assert_func>
 800ada0:	0052      	lsls	r2, r2, #1
 800ada2:	3101      	adds	r1, #1
 800ada4:	e7f0      	b.n	800ad88 <__s2b+0x18>
 800ada6:	9b08      	ldr	r3, [sp, #32]
 800ada8:	6143      	str	r3, [r0, #20]
 800adaa:	2d09      	cmp	r5, #9
 800adac:	f04f 0301 	mov.w	r3, #1
 800adb0:	6103      	str	r3, [r0, #16]
 800adb2:	dd16      	ble.n	800ade2 <__s2b+0x72>
 800adb4:	f104 0909 	add.w	r9, r4, #9
 800adb8:	46c8      	mov	r8, r9
 800adba:	442c      	add	r4, r5
 800adbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800adc0:	4601      	mov	r1, r0
 800adc2:	3b30      	subs	r3, #48	; 0x30
 800adc4:	220a      	movs	r2, #10
 800adc6:	4630      	mov	r0, r6
 800adc8:	f7ff ff8c 	bl	800ace4 <__multadd>
 800adcc:	45a0      	cmp	r8, r4
 800adce:	d1f5      	bne.n	800adbc <__s2b+0x4c>
 800add0:	f1a5 0408 	sub.w	r4, r5, #8
 800add4:	444c      	add	r4, r9
 800add6:	1b2d      	subs	r5, r5, r4
 800add8:	1963      	adds	r3, r4, r5
 800adda:	42bb      	cmp	r3, r7
 800addc:	db04      	blt.n	800ade8 <__s2b+0x78>
 800adde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade2:	340a      	adds	r4, #10
 800ade4:	2509      	movs	r5, #9
 800ade6:	e7f6      	b.n	800add6 <__s2b+0x66>
 800ade8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adec:	4601      	mov	r1, r0
 800adee:	3b30      	subs	r3, #48	; 0x30
 800adf0:	220a      	movs	r2, #10
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7ff ff76 	bl	800ace4 <__multadd>
 800adf8:	e7ee      	b.n	800add8 <__s2b+0x68>
 800adfa:	bf00      	nop
 800adfc:	0800d038 	.word	0x0800d038
 800ae00:	0800d0c4 	.word	0x0800d0c4

0800ae04 <__hi0bits>:
 800ae04:	0c03      	lsrs	r3, r0, #16
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	b9d3      	cbnz	r3, 800ae40 <__hi0bits+0x3c>
 800ae0a:	0400      	lsls	r0, r0, #16
 800ae0c:	2310      	movs	r3, #16
 800ae0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae12:	bf04      	itt	eq
 800ae14:	0200      	lsleq	r0, r0, #8
 800ae16:	3308      	addeq	r3, #8
 800ae18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae1c:	bf04      	itt	eq
 800ae1e:	0100      	lsleq	r0, r0, #4
 800ae20:	3304      	addeq	r3, #4
 800ae22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae26:	bf04      	itt	eq
 800ae28:	0080      	lsleq	r0, r0, #2
 800ae2a:	3302      	addeq	r3, #2
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	db05      	blt.n	800ae3c <__hi0bits+0x38>
 800ae30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae34:	f103 0301 	add.w	r3, r3, #1
 800ae38:	bf08      	it	eq
 800ae3a:	2320      	moveq	r3, #32
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	4770      	bx	lr
 800ae40:	2300      	movs	r3, #0
 800ae42:	e7e4      	b.n	800ae0e <__hi0bits+0xa>

0800ae44 <__lo0bits>:
 800ae44:	6803      	ldr	r3, [r0, #0]
 800ae46:	f013 0207 	ands.w	r2, r3, #7
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	d00b      	beq.n	800ae66 <__lo0bits+0x22>
 800ae4e:	07da      	lsls	r2, r3, #31
 800ae50:	d423      	bmi.n	800ae9a <__lo0bits+0x56>
 800ae52:	0798      	lsls	r0, r3, #30
 800ae54:	bf49      	itett	mi
 800ae56:	085b      	lsrmi	r3, r3, #1
 800ae58:	089b      	lsrpl	r3, r3, #2
 800ae5a:	2001      	movmi	r0, #1
 800ae5c:	600b      	strmi	r3, [r1, #0]
 800ae5e:	bf5c      	itt	pl
 800ae60:	600b      	strpl	r3, [r1, #0]
 800ae62:	2002      	movpl	r0, #2
 800ae64:	4770      	bx	lr
 800ae66:	b298      	uxth	r0, r3
 800ae68:	b9a8      	cbnz	r0, 800ae96 <__lo0bits+0x52>
 800ae6a:	0c1b      	lsrs	r3, r3, #16
 800ae6c:	2010      	movs	r0, #16
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	b90a      	cbnz	r2, 800ae76 <__lo0bits+0x32>
 800ae72:	3008      	adds	r0, #8
 800ae74:	0a1b      	lsrs	r3, r3, #8
 800ae76:	071a      	lsls	r2, r3, #28
 800ae78:	bf04      	itt	eq
 800ae7a:	091b      	lsreq	r3, r3, #4
 800ae7c:	3004      	addeq	r0, #4
 800ae7e:	079a      	lsls	r2, r3, #30
 800ae80:	bf04      	itt	eq
 800ae82:	089b      	lsreq	r3, r3, #2
 800ae84:	3002      	addeq	r0, #2
 800ae86:	07da      	lsls	r2, r3, #31
 800ae88:	d403      	bmi.n	800ae92 <__lo0bits+0x4e>
 800ae8a:	085b      	lsrs	r3, r3, #1
 800ae8c:	f100 0001 	add.w	r0, r0, #1
 800ae90:	d005      	beq.n	800ae9e <__lo0bits+0x5a>
 800ae92:	600b      	str	r3, [r1, #0]
 800ae94:	4770      	bx	lr
 800ae96:	4610      	mov	r0, r2
 800ae98:	e7e9      	b.n	800ae6e <__lo0bits+0x2a>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	4770      	bx	lr
 800ae9e:	2020      	movs	r0, #32
 800aea0:	4770      	bx	lr
	...

0800aea4 <__i2b>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	2101      	movs	r1, #1
 800aeaa:	f7ff feb9 	bl	800ac20 <_Balloc>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	b928      	cbnz	r0, 800aebe <__i2b+0x1a>
 800aeb2:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <__i2b+0x24>)
 800aeb4:	4805      	ldr	r0, [pc, #20]	; (800aecc <__i2b+0x28>)
 800aeb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aeba:	f001 fa1d 	bl	800c2f8 <__assert_func>
 800aebe:	2301      	movs	r3, #1
 800aec0:	6144      	str	r4, [r0, #20]
 800aec2:	6103      	str	r3, [r0, #16]
 800aec4:	bd10      	pop	{r4, pc}
 800aec6:	bf00      	nop
 800aec8:	0800d038 	.word	0x0800d038
 800aecc:	0800d0c4 	.word	0x0800d0c4

0800aed0 <__multiply>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	4691      	mov	r9, r2
 800aed6:	690a      	ldr	r2, [r1, #16]
 800aed8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	bfb8      	it	lt
 800aee0:	460b      	movlt	r3, r1
 800aee2:	460c      	mov	r4, r1
 800aee4:	bfbc      	itt	lt
 800aee6:	464c      	movlt	r4, r9
 800aee8:	4699      	movlt	r9, r3
 800aeea:	6927      	ldr	r7, [r4, #16]
 800aeec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aef0:	68a3      	ldr	r3, [r4, #8]
 800aef2:	6861      	ldr	r1, [r4, #4]
 800aef4:	eb07 060a 	add.w	r6, r7, sl
 800aef8:	42b3      	cmp	r3, r6
 800aefa:	b085      	sub	sp, #20
 800aefc:	bfb8      	it	lt
 800aefe:	3101      	addlt	r1, #1
 800af00:	f7ff fe8e 	bl	800ac20 <_Balloc>
 800af04:	b930      	cbnz	r0, 800af14 <__multiply+0x44>
 800af06:	4602      	mov	r2, r0
 800af08:	4b44      	ldr	r3, [pc, #272]	; (800b01c <__multiply+0x14c>)
 800af0a:	4845      	ldr	r0, [pc, #276]	; (800b020 <__multiply+0x150>)
 800af0c:	f240 115d 	movw	r1, #349	; 0x15d
 800af10:	f001 f9f2 	bl	800c2f8 <__assert_func>
 800af14:	f100 0514 	add.w	r5, r0, #20
 800af18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af1c:	462b      	mov	r3, r5
 800af1e:	2200      	movs	r2, #0
 800af20:	4543      	cmp	r3, r8
 800af22:	d321      	bcc.n	800af68 <__multiply+0x98>
 800af24:	f104 0314 	add.w	r3, r4, #20
 800af28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af2c:	f109 0314 	add.w	r3, r9, #20
 800af30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af34:	9202      	str	r2, [sp, #8]
 800af36:	1b3a      	subs	r2, r7, r4
 800af38:	3a15      	subs	r2, #21
 800af3a:	f022 0203 	bic.w	r2, r2, #3
 800af3e:	3204      	adds	r2, #4
 800af40:	f104 0115 	add.w	r1, r4, #21
 800af44:	428f      	cmp	r7, r1
 800af46:	bf38      	it	cc
 800af48:	2204      	movcc	r2, #4
 800af4a:	9201      	str	r2, [sp, #4]
 800af4c:	9a02      	ldr	r2, [sp, #8]
 800af4e:	9303      	str	r3, [sp, #12]
 800af50:	429a      	cmp	r2, r3
 800af52:	d80c      	bhi.n	800af6e <__multiply+0x9e>
 800af54:	2e00      	cmp	r6, #0
 800af56:	dd03      	ble.n	800af60 <__multiply+0x90>
 800af58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d05a      	beq.n	800b016 <__multiply+0x146>
 800af60:	6106      	str	r6, [r0, #16]
 800af62:	b005      	add	sp, #20
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af68:	f843 2b04 	str.w	r2, [r3], #4
 800af6c:	e7d8      	b.n	800af20 <__multiply+0x50>
 800af6e:	f8b3 a000 	ldrh.w	sl, [r3]
 800af72:	f1ba 0f00 	cmp.w	sl, #0
 800af76:	d024      	beq.n	800afc2 <__multiply+0xf2>
 800af78:	f104 0e14 	add.w	lr, r4, #20
 800af7c:	46a9      	mov	r9, r5
 800af7e:	f04f 0c00 	mov.w	ip, #0
 800af82:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af86:	f8d9 1000 	ldr.w	r1, [r9]
 800af8a:	fa1f fb82 	uxth.w	fp, r2
 800af8e:	b289      	uxth	r1, r1
 800af90:	fb0a 110b 	mla	r1, sl, fp, r1
 800af94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af98:	f8d9 2000 	ldr.w	r2, [r9]
 800af9c:	4461      	add	r1, ip
 800af9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afa2:	fb0a c20b 	mla	r2, sl, fp, ip
 800afa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800afaa:	b289      	uxth	r1, r1
 800afac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afb0:	4577      	cmp	r7, lr
 800afb2:	f849 1b04 	str.w	r1, [r9], #4
 800afb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afba:	d8e2      	bhi.n	800af82 <__multiply+0xb2>
 800afbc:	9a01      	ldr	r2, [sp, #4]
 800afbe:	f845 c002 	str.w	ip, [r5, r2]
 800afc2:	9a03      	ldr	r2, [sp, #12]
 800afc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afc8:	3304      	adds	r3, #4
 800afca:	f1b9 0f00 	cmp.w	r9, #0
 800afce:	d020      	beq.n	800b012 <__multiply+0x142>
 800afd0:	6829      	ldr	r1, [r5, #0]
 800afd2:	f104 0c14 	add.w	ip, r4, #20
 800afd6:	46ae      	mov	lr, r5
 800afd8:	f04f 0a00 	mov.w	sl, #0
 800afdc:	f8bc b000 	ldrh.w	fp, [ip]
 800afe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afe4:	fb09 220b 	mla	r2, r9, fp, r2
 800afe8:	4492      	add	sl, r2
 800afea:	b289      	uxth	r1, r1
 800afec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aff0:	f84e 1b04 	str.w	r1, [lr], #4
 800aff4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aff8:	f8be 1000 	ldrh.w	r1, [lr]
 800affc:	0c12      	lsrs	r2, r2, #16
 800affe:	fb09 1102 	mla	r1, r9, r2, r1
 800b002:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b006:	4567      	cmp	r7, ip
 800b008:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b00c:	d8e6      	bhi.n	800afdc <__multiply+0x10c>
 800b00e:	9a01      	ldr	r2, [sp, #4]
 800b010:	50a9      	str	r1, [r5, r2]
 800b012:	3504      	adds	r5, #4
 800b014:	e79a      	b.n	800af4c <__multiply+0x7c>
 800b016:	3e01      	subs	r6, #1
 800b018:	e79c      	b.n	800af54 <__multiply+0x84>
 800b01a:	bf00      	nop
 800b01c:	0800d038 	.word	0x0800d038
 800b020:	0800d0c4 	.word	0x0800d0c4

0800b024 <__pow5mult>:
 800b024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b028:	4615      	mov	r5, r2
 800b02a:	f012 0203 	ands.w	r2, r2, #3
 800b02e:	4606      	mov	r6, r0
 800b030:	460f      	mov	r7, r1
 800b032:	d007      	beq.n	800b044 <__pow5mult+0x20>
 800b034:	4c25      	ldr	r4, [pc, #148]	; (800b0cc <__pow5mult+0xa8>)
 800b036:	3a01      	subs	r2, #1
 800b038:	2300      	movs	r3, #0
 800b03a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b03e:	f7ff fe51 	bl	800ace4 <__multadd>
 800b042:	4607      	mov	r7, r0
 800b044:	10ad      	asrs	r5, r5, #2
 800b046:	d03d      	beq.n	800b0c4 <__pow5mult+0xa0>
 800b048:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b04a:	b97c      	cbnz	r4, 800b06c <__pow5mult+0x48>
 800b04c:	2010      	movs	r0, #16
 800b04e:	f7ff fdbf 	bl	800abd0 <malloc>
 800b052:	4602      	mov	r2, r0
 800b054:	6270      	str	r0, [r6, #36]	; 0x24
 800b056:	b928      	cbnz	r0, 800b064 <__pow5mult+0x40>
 800b058:	4b1d      	ldr	r3, [pc, #116]	; (800b0d0 <__pow5mult+0xac>)
 800b05a:	481e      	ldr	r0, [pc, #120]	; (800b0d4 <__pow5mult+0xb0>)
 800b05c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b060:	f001 f94a 	bl	800c2f8 <__assert_func>
 800b064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b068:	6004      	str	r4, [r0, #0]
 800b06a:	60c4      	str	r4, [r0, #12]
 800b06c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b074:	b94c      	cbnz	r4, 800b08a <__pow5mult+0x66>
 800b076:	f240 2171 	movw	r1, #625	; 0x271
 800b07a:	4630      	mov	r0, r6
 800b07c:	f7ff ff12 	bl	800aea4 <__i2b>
 800b080:	2300      	movs	r3, #0
 800b082:	f8c8 0008 	str.w	r0, [r8, #8]
 800b086:	4604      	mov	r4, r0
 800b088:	6003      	str	r3, [r0, #0]
 800b08a:	f04f 0900 	mov.w	r9, #0
 800b08e:	07eb      	lsls	r3, r5, #31
 800b090:	d50a      	bpl.n	800b0a8 <__pow5mult+0x84>
 800b092:	4639      	mov	r1, r7
 800b094:	4622      	mov	r2, r4
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff ff1a 	bl	800aed0 <__multiply>
 800b09c:	4639      	mov	r1, r7
 800b09e:	4680      	mov	r8, r0
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7ff fdfd 	bl	800aca0 <_Bfree>
 800b0a6:	4647      	mov	r7, r8
 800b0a8:	106d      	asrs	r5, r5, #1
 800b0aa:	d00b      	beq.n	800b0c4 <__pow5mult+0xa0>
 800b0ac:	6820      	ldr	r0, [r4, #0]
 800b0ae:	b938      	cbnz	r0, 800b0c0 <__pow5mult+0x9c>
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7ff ff0b 	bl	800aed0 <__multiply>
 800b0ba:	6020      	str	r0, [r4, #0]
 800b0bc:	f8c0 9000 	str.w	r9, [r0]
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	e7e4      	b.n	800b08e <__pow5mult+0x6a>
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ca:	bf00      	nop
 800b0cc:	0800d210 	.word	0x0800d210
 800b0d0:	0800cfc6 	.word	0x0800cfc6
 800b0d4:	0800d0c4 	.word	0x0800d0c4

0800b0d8 <__lshift>:
 800b0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0dc:	460c      	mov	r4, r1
 800b0de:	6849      	ldr	r1, [r1, #4]
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0e6:	68a3      	ldr	r3, [r4, #8]
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	4691      	mov	r9, r2
 800b0ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0f0:	f108 0601 	add.w	r6, r8, #1
 800b0f4:	42b3      	cmp	r3, r6
 800b0f6:	db0b      	blt.n	800b110 <__lshift+0x38>
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f7ff fd91 	bl	800ac20 <_Balloc>
 800b0fe:	4605      	mov	r5, r0
 800b100:	b948      	cbnz	r0, 800b116 <__lshift+0x3e>
 800b102:	4602      	mov	r2, r0
 800b104:	4b2a      	ldr	r3, [pc, #168]	; (800b1b0 <__lshift+0xd8>)
 800b106:	482b      	ldr	r0, [pc, #172]	; (800b1b4 <__lshift+0xdc>)
 800b108:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b10c:	f001 f8f4 	bl	800c2f8 <__assert_func>
 800b110:	3101      	adds	r1, #1
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	e7ee      	b.n	800b0f4 <__lshift+0x1c>
 800b116:	2300      	movs	r3, #0
 800b118:	f100 0114 	add.w	r1, r0, #20
 800b11c:	f100 0210 	add.w	r2, r0, #16
 800b120:	4618      	mov	r0, r3
 800b122:	4553      	cmp	r3, sl
 800b124:	db37      	blt.n	800b196 <__lshift+0xbe>
 800b126:	6920      	ldr	r0, [r4, #16]
 800b128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b12c:	f104 0314 	add.w	r3, r4, #20
 800b130:	f019 091f 	ands.w	r9, r9, #31
 800b134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b138:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b13c:	d02f      	beq.n	800b19e <__lshift+0xc6>
 800b13e:	f1c9 0e20 	rsb	lr, r9, #32
 800b142:	468a      	mov	sl, r1
 800b144:	f04f 0c00 	mov.w	ip, #0
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	fa02 f209 	lsl.w	r2, r2, r9
 800b14e:	ea42 020c 	orr.w	r2, r2, ip
 800b152:	f84a 2b04 	str.w	r2, [sl], #4
 800b156:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15a:	4298      	cmp	r0, r3
 800b15c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b160:	d8f2      	bhi.n	800b148 <__lshift+0x70>
 800b162:	1b03      	subs	r3, r0, r4
 800b164:	3b15      	subs	r3, #21
 800b166:	f023 0303 	bic.w	r3, r3, #3
 800b16a:	3304      	adds	r3, #4
 800b16c:	f104 0215 	add.w	r2, r4, #21
 800b170:	4290      	cmp	r0, r2
 800b172:	bf38      	it	cc
 800b174:	2304      	movcc	r3, #4
 800b176:	f841 c003 	str.w	ip, [r1, r3]
 800b17a:	f1bc 0f00 	cmp.w	ip, #0
 800b17e:	d001      	beq.n	800b184 <__lshift+0xac>
 800b180:	f108 0602 	add.w	r6, r8, #2
 800b184:	3e01      	subs	r6, #1
 800b186:	4638      	mov	r0, r7
 800b188:	612e      	str	r6, [r5, #16]
 800b18a:	4621      	mov	r1, r4
 800b18c:	f7ff fd88 	bl	800aca0 <_Bfree>
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b196:	f842 0f04 	str.w	r0, [r2, #4]!
 800b19a:	3301      	adds	r3, #1
 800b19c:	e7c1      	b.n	800b122 <__lshift+0x4a>
 800b19e:	3904      	subs	r1, #4
 800b1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1a8:	4298      	cmp	r0, r3
 800b1aa:	d8f9      	bhi.n	800b1a0 <__lshift+0xc8>
 800b1ac:	e7ea      	b.n	800b184 <__lshift+0xac>
 800b1ae:	bf00      	nop
 800b1b0:	0800d038 	.word	0x0800d038
 800b1b4:	0800d0c4 	.word	0x0800d0c4

0800b1b8 <__mcmp>:
 800b1b8:	b530      	push	{r4, r5, lr}
 800b1ba:	6902      	ldr	r2, [r0, #16]
 800b1bc:	690c      	ldr	r4, [r1, #16]
 800b1be:	1b12      	subs	r2, r2, r4
 800b1c0:	d10e      	bne.n	800b1e0 <__mcmp+0x28>
 800b1c2:	f100 0314 	add.w	r3, r0, #20
 800b1c6:	3114      	adds	r1, #20
 800b1c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1d8:	42a5      	cmp	r5, r4
 800b1da:	d003      	beq.n	800b1e4 <__mcmp+0x2c>
 800b1dc:	d305      	bcc.n	800b1ea <__mcmp+0x32>
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	bd30      	pop	{r4, r5, pc}
 800b1e4:	4283      	cmp	r3, r0
 800b1e6:	d3f3      	bcc.n	800b1d0 <__mcmp+0x18>
 800b1e8:	e7fa      	b.n	800b1e0 <__mcmp+0x28>
 800b1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ee:	e7f7      	b.n	800b1e0 <__mcmp+0x28>

0800b1f0 <__mdiff>:
 800b1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4690      	mov	r8, r2
 800b1fe:	f7ff ffdb 	bl	800b1b8 <__mcmp>
 800b202:	1e05      	subs	r5, r0, #0
 800b204:	d110      	bne.n	800b228 <__mdiff+0x38>
 800b206:	4629      	mov	r1, r5
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff fd09 	bl	800ac20 <_Balloc>
 800b20e:	b930      	cbnz	r0, 800b21e <__mdiff+0x2e>
 800b210:	4b3a      	ldr	r3, [pc, #232]	; (800b2fc <__mdiff+0x10c>)
 800b212:	4602      	mov	r2, r0
 800b214:	f240 2132 	movw	r1, #562	; 0x232
 800b218:	4839      	ldr	r0, [pc, #228]	; (800b300 <__mdiff+0x110>)
 800b21a:	f001 f86d 	bl	800c2f8 <__assert_func>
 800b21e:	2301      	movs	r3, #1
 800b220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b228:	bfa4      	itt	ge
 800b22a:	4643      	movge	r3, r8
 800b22c:	46a0      	movge	r8, r4
 800b22e:	4630      	mov	r0, r6
 800b230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b234:	bfa6      	itte	ge
 800b236:	461c      	movge	r4, r3
 800b238:	2500      	movge	r5, #0
 800b23a:	2501      	movlt	r5, #1
 800b23c:	f7ff fcf0 	bl	800ac20 <_Balloc>
 800b240:	b920      	cbnz	r0, 800b24c <__mdiff+0x5c>
 800b242:	4b2e      	ldr	r3, [pc, #184]	; (800b2fc <__mdiff+0x10c>)
 800b244:	4602      	mov	r2, r0
 800b246:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b24a:	e7e5      	b.n	800b218 <__mdiff+0x28>
 800b24c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b250:	6926      	ldr	r6, [r4, #16]
 800b252:	60c5      	str	r5, [r0, #12]
 800b254:	f104 0914 	add.w	r9, r4, #20
 800b258:	f108 0514 	add.w	r5, r8, #20
 800b25c:	f100 0e14 	add.w	lr, r0, #20
 800b260:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b264:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b268:	f108 0210 	add.w	r2, r8, #16
 800b26c:	46f2      	mov	sl, lr
 800b26e:	2100      	movs	r1, #0
 800b270:	f859 3b04 	ldr.w	r3, [r9], #4
 800b274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b278:	fa1f f883 	uxth.w	r8, r3
 800b27c:	fa11 f18b 	uxtah	r1, r1, fp
 800b280:	0c1b      	lsrs	r3, r3, #16
 800b282:	eba1 0808 	sub.w	r8, r1, r8
 800b286:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b28a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b28e:	fa1f f888 	uxth.w	r8, r8
 800b292:	1419      	asrs	r1, r3, #16
 800b294:	454e      	cmp	r6, r9
 800b296:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b29a:	f84a 3b04 	str.w	r3, [sl], #4
 800b29e:	d8e7      	bhi.n	800b270 <__mdiff+0x80>
 800b2a0:	1b33      	subs	r3, r6, r4
 800b2a2:	3b15      	subs	r3, #21
 800b2a4:	f023 0303 	bic.w	r3, r3, #3
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	3415      	adds	r4, #21
 800b2ac:	42a6      	cmp	r6, r4
 800b2ae:	bf38      	it	cc
 800b2b0:	2304      	movcc	r3, #4
 800b2b2:	441d      	add	r5, r3
 800b2b4:	4473      	add	r3, lr
 800b2b6:	469e      	mov	lr, r3
 800b2b8:	462e      	mov	r6, r5
 800b2ba:	4566      	cmp	r6, ip
 800b2bc:	d30e      	bcc.n	800b2dc <__mdiff+0xec>
 800b2be:	f10c 0203 	add.w	r2, ip, #3
 800b2c2:	1b52      	subs	r2, r2, r5
 800b2c4:	f022 0203 	bic.w	r2, r2, #3
 800b2c8:	3d03      	subs	r5, #3
 800b2ca:	45ac      	cmp	ip, r5
 800b2cc:	bf38      	it	cc
 800b2ce:	2200      	movcc	r2, #0
 800b2d0:	441a      	add	r2, r3
 800b2d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b2d6:	b17b      	cbz	r3, 800b2f8 <__mdiff+0x108>
 800b2d8:	6107      	str	r7, [r0, #16]
 800b2da:	e7a3      	b.n	800b224 <__mdiff+0x34>
 800b2dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2e0:	fa11 f288 	uxtah	r2, r1, r8
 800b2e4:	1414      	asrs	r4, r2, #16
 800b2e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2f0:	f84e 2b04 	str.w	r2, [lr], #4
 800b2f4:	1421      	asrs	r1, r4, #16
 800b2f6:	e7e0      	b.n	800b2ba <__mdiff+0xca>
 800b2f8:	3f01      	subs	r7, #1
 800b2fa:	e7ea      	b.n	800b2d2 <__mdiff+0xe2>
 800b2fc:	0800d038 	.word	0x0800d038
 800b300:	0800d0c4 	.word	0x0800d0c4

0800b304 <__ulp>:
 800b304:	b082      	sub	sp, #8
 800b306:	ed8d 0b00 	vstr	d0, [sp]
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	4912      	ldr	r1, [pc, #72]	; (800b358 <__ulp+0x54>)
 800b30e:	4019      	ands	r1, r3
 800b310:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b314:	2900      	cmp	r1, #0
 800b316:	dd05      	ble.n	800b324 <__ulp+0x20>
 800b318:	2200      	movs	r2, #0
 800b31a:	460b      	mov	r3, r1
 800b31c:	ec43 2b10 	vmov	d0, r2, r3
 800b320:	b002      	add	sp, #8
 800b322:	4770      	bx	lr
 800b324:	4249      	negs	r1, r1
 800b326:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b32a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	da04      	bge.n	800b342 <__ulp+0x3e>
 800b338:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b33c:	fa41 f300 	asr.w	r3, r1, r0
 800b340:	e7ec      	b.n	800b31c <__ulp+0x18>
 800b342:	f1a0 0114 	sub.w	r1, r0, #20
 800b346:	291e      	cmp	r1, #30
 800b348:	bfda      	itte	le
 800b34a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b34e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b352:	2101      	movgt	r1, #1
 800b354:	460a      	mov	r2, r1
 800b356:	e7e1      	b.n	800b31c <__ulp+0x18>
 800b358:	7ff00000 	.word	0x7ff00000

0800b35c <__b2d>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	6905      	ldr	r5, [r0, #16]
 800b360:	f100 0714 	add.w	r7, r0, #20
 800b364:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b368:	1f2e      	subs	r6, r5, #4
 800b36a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b36e:	4620      	mov	r0, r4
 800b370:	f7ff fd48 	bl	800ae04 <__hi0bits>
 800b374:	f1c0 0320 	rsb	r3, r0, #32
 800b378:	280a      	cmp	r0, #10
 800b37a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b3f8 <__b2d+0x9c>
 800b37e:	600b      	str	r3, [r1, #0]
 800b380:	dc14      	bgt.n	800b3ac <__b2d+0x50>
 800b382:	f1c0 0e0b 	rsb	lr, r0, #11
 800b386:	fa24 f10e 	lsr.w	r1, r4, lr
 800b38a:	42b7      	cmp	r7, r6
 800b38c:	ea41 030c 	orr.w	r3, r1, ip
 800b390:	bf34      	ite	cc
 800b392:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b396:	2100      	movcs	r1, #0
 800b398:	3015      	adds	r0, #21
 800b39a:	fa04 f000 	lsl.w	r0, r4, r0
 800b39e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3a2:	ea40 0201 	orr.w	r2, r0, r1
 800b3a6:	ec43 2b10 	vmov	d0, r2, r3
 800b3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ac:	42b7      	cmp	r7, r6
 800b3ae:	bf3a      	itte	cc
 800b3b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b3b8:	2100      	movcs	r1, #0
 800b3ba:	380b      	subs	r0, #11
 800b3bc:	d017      	beq.n	800b3ee <__b2d+0x92>
 800b3be:	f1c0 0c20 	rsb	ip, r0, #32
 800b3c2:	fa04 f500 	lsl.w	r5, r4, r0
 800b3c6:	42be      	cmp	r6, r7
 800b3c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b3cc:	ea45 0504 	orr.w	r5, r5, r4
 800b3d0:	bf8c      	ite	hi
 800b3d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b3d6:	2400      	movls	r4, #0
 800b3d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b3dc:	fa01 f000 	lsl.w	r0, r1, r0
 800b3e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b3e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b3e8:	ea40 0204 	orr.w	r2, r0, r4
 800b3ec:	e7db      	b.n	800b3a6 <__b2d+0x4a>
 800b3ee:	ea44 030c 	orr.w	r3, r4, ip
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	e7d7      	b.n	800b3a6 <__b2d+0x4a>
 800b3f6:	bf00      	nop
 800b3f8:	3ff00000 	.word	0x3ff00000

0800b3fc <__d2b>:
 800b3fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b400:	4689      	mov	r9, r1
 800b402:	2101      	movs	r1, #1
 800b404:	ec57 6b10 	vmov	r6, r7, d0
 800b408:	4690      	mov	r8, r2
 800b40a:	f7ff fc09 	bl	800ac20 <_Balloc>
 800b40e:	4604      	mov	r4, r0
 800b410:	b930      	cbnz	r0, 800b420 <__d2b+0x24>
 800b412:	4602      	mov	r2, r0
 800b414:	4b25      	ldr	r3, [pc, #148]	; (800b4ac <__d2b+0xb0>)
 800b416:	4826      	ldr	r0, [pc, #152]	; (800b4b0 <__d2b+0xb4>)
 800b418:	f240 310a 	movw	r1, #778	; 0x30a
 800b41c:	f000 ff6c 	bl	800c2f8 <__assert_func>
 800b420:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b424:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b428:	bb35      	cbnz	r5, 800b478 <__d2b+0x7c>
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	d028      	beq.n	800b482 <__d2b+0x86>
 800b430:	4668      	mov	r0, sp
 800b432:	9600      	str	r6, [sp, #0]
 800b434:	f7ff fd06 	bl	800ae44 <__lo0bits>
 800b438:	9900      	ldr	r1, [sp, #0]
 800b43a:	b300      	cbz	r0, 800b47e <__d2b+0x82>
 800b43c:	9a01      	ldr	r2, [sp, #4]
 800b43e:	f1c0 0320 	rsb	r3, r0, #32
 800b442:	fa02 f303 	lsl.w	r3, r2, r3
 800b446:	430b      	orrs	r3, r1
 800b448:	40c2      	lsrs	r2, r0
 800b44a:	6163      	str	r3, [r4, #20]
 800b44c:	9201      	str	r2, [sp, #4]
 800b44e:	9b01      	ldr	r3, [sp, #4]
 800b450:	61a3      	str	r3, [r4, #24]
 800b452:	2b00      	cmp	r3, #0
 800b454:	bf14      	ite	ne
 800b456:	2202      	movne	r2, #2
 800b458:	2201      	moveq	r2, #1
 800b45a:	6122      	str	r2, [r4, #16]
 800b45c:	b1d5      	cbz	r5, 800b494 <__d2b+0x98>
 800b45e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b462:	4405      	add	r5, r0
 800b464:	f8c9 5000 	str.w	r5, [r9]
 800b468:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b46c:	f8c8 0000 	str.w	r0, [r8]
 800b470:	4620      	mov	r0, r4
 800b472:	b003      	add	sp, #12
 800b474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b47c:	e7d5      	b.n	800b42a <__d2b+0x2e>
 800b47e:	6161      	str	r1, [r4, #20]
 800b480:	e7e5      	b.n	800b44e <__d2b+0x52>
 800b482:	a801      	add	r0, sp, #4
 800b484:	f7ff fcde 	bl	800ae44 <__lo0bits>
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	6163      	str	r3, [r4, #20]
 800b48c:	2201      	movs	r2, #1
 800b48e:	6122      	str	r2, [r4, #16]
 800b490:	3020      	adds	r0, #32
 800b492:	e7e3      	b.n	800b45c <__d2b+0x60>
 800b494:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b498:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b49c:	f8c9 0000 	str.w	r0, [r9]
 800b4a0:	6918      	ldr	r0, [r3, #16]
 800b4a2:	f7ff fcaf 	bl	800ae04 <__hi0bits>
 800b4a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4aa:	e7df      	b.n	800b46c <__d2b+0x70>
 800b4ac:	0800d038 	.word	0x0800d038
 800b4b0:	0800d0c4 	.word	0x0800d0c4

0800b4b4 <__ratio>:
 800b4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b8:	4688      	mov	r8, r1
 800b4ba:	4669      	mov	r1, sp
 800b4bc:	4681      	mov	r9, r0
 800b4be:	f7ff ff4d 	bl	800b35c <__b2d>
 800b4c2:	a901      	add	r1, sp, #4
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	ec55 4b10 	vmov	r4, r5, d0
 800b4ca:	f7ff ff47 	bl	800b35c <__b2d>
 800b4ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4d6:	eba3 0c02 	sub.w	ip, r3, r2
 800b4da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4e4:	ec51 0b10 	vmov	r0, r1, d0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	bfd6      	itet	le
 800b4ec:	460a      	movle	r2, r1
 800b4ee:	462a      	movgt	r2, r5
 800b4f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4f4:	468b      	mov	fp, r1
 800b4f6:	462f      	mov	r7, r5
 800b4f8:	bfd4      	ite	le
 800b4fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b4fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b502:	4620      	mov	r0, r4
 800b504:	ee10 2a10 	vmov	r2, s0
 800b508:	465b      	mov	r3, fp
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 f9be 	bl	800088c <__aeabi_ddiv>
 800b510:	ec41 0b10 	vmov	d0, r0, r1
 800b514:	b003      	add	sp, #12
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b51a <__copybits>:
 800b51a:	3901      	subs	r1, #1
 800b51c:	b570      	push	{r4, r5, r6, lr}
 800b51e:	1149      	asrs	r1, r1, #5
 800b520:	6914      	ldr	r4, [r2, #16]
 800b522:	3101      	adds	r1, #1
 800b524:	f102 0314 	add.w	r3, r2, #20
 800b528:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b52c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b530:	1f05      	subs	r5, r0, #4
 800b532:	42a3      	cmp	r3, r4
 800b534:	d30c      	bcc.n	800b550 <__copybits+0x36>
 800b536:	1aa3      	subs	r3, r4, r2
 800b538:	3b11      	subs	r3, #17
 800b53a:	f023 0303 	bic.w	r3, r3, #3
 800b53e:	3211      	adds	r2, #17
 800b540:	42a2      	cmp	r2, r4
 800b542:	bf88      	it	hi
 800b544:	2300      	movhi	r3, #0
 800b546:	4418      	add	r0, r3
 800b548:	2300      	movs	r3, #0
 800b54a:	4288      	cmp	r0, r1
 800b54c:	d305      	bcc.n	800b55a <__copybits+0x40>
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	f853 6b04 	ldr.w	r6, [r3], #4
 800b554:	f845 6f04 	str.w	r6, [r5, #4]!
 800b558:	e7eb      	b.n	800b532 <__copybits+0x18>
 800b55a:	f840 3b04 	str.w	r3, [r0], #4
 800b55e:	e7f4      	b.n	800b54a <__copybits+0x30>

0800b560 <__any_on>:
 800b560:	f100 0214 	add.w	r2, r0, #20
 800b564:	6900      	ldr	r0, [r0, #16]
 800b566:	114b      	asrs	r3, r1, #5
 800b568:	4298      	cmp	r0, r3
 800b56a:	b510      	push	{r4, lr}
 800b56c:	db11      	blt.n	800b592 <__any_on+0x32>
 800b56e:	dd0a      	ble.n	800b586 <__any_on+0x26>
 800b570:	f011 011f 	ands.w	r1, r1, #31
 800b574:	d007      	beq.n	800b586 <__any_on+0x26>
 800b576:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b57a:	fa24 f001 	lsr.w	r0, r4, r1
 800b57e:	fa00 f101 	lsl.w	r1, r0, r1
 800b582:	428c      	cmp	r4, r1
 800b584:	d10b      	bne.n	800b59e <__any_on+0x3e>
 800b586:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d803      	bhi.n	800b596 <__any_on+0x36>
 800b58e:	2000      	movs	r0, #0
 800b590:	bd10      	pop	{r4, pc}
 800b592:	4603      	mov	r3, r0
 800b594:	e7f7      	b.n	800b586 <__any_on+0x26>
 800b596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b59a:	2900      	cmp	r1, #0
 800b59c:	d0f5      	beq.n	800b58a <__any_on+0x2a>
 800b59e:	2001      	movs	r0, #1
 800b5a0:	e7f6      	b.n	800b590 <__any_on+0x30>

0800b5a2 <_calloc_r>:
 800b5a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5a4:	fba1 2402 	umull	r2, r4, r1, r2
 800b5a8:	b94c      	cbnz	r4, 800b5be <_calloc_r+0x1c>
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	9201      	str	r2, [sp, #4]
 800b5ae:	f000 f87b 	bl	800b6a8 <_malloc_r>
 800b5b2:	9a01      	ldr	r2, [sp, #4]
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	b930      	cbnz	r0, 800b5c6 <_calloc_r+0x24>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	b003      	add	sp, #12
 800b5bc:	bd30      	pop	{r4, r5, pc}
 800b5be:	220c      	movs	r2, #12
 800b5c0:	6002      	str	r2, [r0, #0]
 800b5c2:	2500      	movs	r5, #0
 800b5c4:	e7f8      	b.n	800b5b8 <_calloc_r+0x16>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f7fc fb06 	bl	8007bd8 <memset>
 800b5cc:	e7f4      	b.n	800b5b8 <_calloc_r+0x16>
	...

0800b5d0 <_free_r>:
 800b5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d044      	beq.n	800b660 <_free_r+0x90>
 800b5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5da:	9001      	str	r0, [sp, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f1a1 0404 	sub.w	r4, r1, #4
 800b5e2:	bfb8      	it	lt
 800b5e4:	18e4      	addlt	r4, r4, r3
 800b5e6:	f001 f88b 	bl	800c700 <__malloc_lock>
 800b5ea:	4a1e      	ldr	r2, [pc, #120]	; (800b664 <_free_r+0x94>)
 800b5ec:	9801      	ldr	r0, [sp, #4]
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	b933      	cbnz	r3, 800b600 <_free_r+0x30>
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	6014      	str	r4, [r2, #0]
 800b5f6:	b003      	add	sp, #12
 800b5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5fc:	f001 b886 	b.w	800c70c <__malloc_unlock>
 800b600:	42a3      	cmp	r3, r4
 800b602:	d908      	bls.n	800b616 <_free_r+0x46>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf01      	itttt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	1949      	addeq	r1, r1, r5
 800b612:	6021      	streq	r1, [r4, #0]
 800b614:	e7ed      	b.n	800b5f2 <_free_r+0x22>
 800b616:	461a      	mov	r2, r3
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	b10b      	cbz	r3, 800b620 <_free_r+0x50>
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d9fa      	bls.n	800b616 <_free_r+0x46>
 800b620:	6811      	ldr	r1, [r2, #0]
 800b622:	1855      	adds	r5, r2, r1
 800b624:	42a5      	cmp	r5, r4
 800b626:	d10b      	bne.n	800b640 <_free_r+0x70>
 800b628:	6824      	ldr	r4, [r4, #0]
 800b62a:	4421      	add	r1, r4
 800b62c:	1854      	adds	r4, r2, r1
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	d1e0      	bne.n	800b5f6 <_free_r+0x26>
 800b634:	681c      	ldr	r4, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	6053      	str	r3, [r2, #4]
 800b63a:	4421      	add	r1, r4
 800b63c:	6011      	str	r1, [r2, #0]
 800b63e:	e7da      	b.n	800b5f6 <_free_r+0x26>
 800b640:	d902      	bls.n	800b648 <_free_r+0x78>
 800b642:	230c      	movs	r3, #12
 800b644:	6003      	str	r3, [r0, #0]
 800b646:	e7d6      	b.n	800b5f6 <_free_r+0x26>
 800b648:	6825      	ldr	r5, [r4, #0]
 800b64a:	1961      	adds	r1, r4, r5
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf04      	itt	eq
 800b650:	6819      	ldreq	r1, [r3, #0]
 800b652:	685b      	ldreq	r3, [r3, #4]
 800b654:	6063      	str	r3, [r4, #4]
 800b656:	bf04      	itt	eq
 800b658:	1949      	addeq	r1, r1, r5
 800b65a:	6021      	streq	r1, [r4, #0]
 800b65c:	6054      	str	r4, [r2, #4]
 800b65e:	e7ca      	b.n	800b5f6 <_free_r+0x26>
 800b660:	b003      	add	sp, #12
 800b662:	bd30      	pop	{r4, r5, pc}
 800b664:	200004cc 	.word	0x200004cc

0800b668 <sbrk_aligned>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	4e0e      	ldr	r6, [pc, #56]	; (800b6a4 <sbrk_aligned+0x3c>)
 800b66c:	460c      	mov	r4, r1
 800b66e:	6831      	ldr	r1, [r6, #0]
 800b670:	4605      	mov	r5, r0
 800b672:	b911      	cbnz	r1, 800b67a <sbrk_aligned+0x12>
 800b674:	f000 fd28 	bl	800c0c8 <_sbrk_r>
 800b678:	6030      	str	r0, [r6, #0]
 800b67a:	4621      	mov	r1, r4
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 fd23 	bl	800c0c8 <_sbrk_r>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d00a      	beq.n	800b69c <sbrk_aligned+0x34>
 800b686:	1cc4      	adds	r4, r0, #3
 800b688:	f024 0403 	bic.w	r4, r4, #3
 800b68c:	42a0      	cmp	r0, r4
 800b68e:	d007      	beq.n	800b6a0 <sbrk_aligned+0x38>
 800b690:	1a21      	subs	r1, r4, r0
 800b692:	4628      	mov	r0, r5
 800b694:	f000 fd18 	bl	800c0c8 <_sbrk_r>
 800b698:	3001      	adds	r0, #1
 800b69a:	d101      	bne.n	800b6a0 <sbrk_aligned+0x38>
 800b69c:	f04f 34ff 	mov.w	r4, #4294967295
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	200004d0 	.word	0x200004d0

0800b6a8 <_malloc_r>:
 800b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ac:	1ccd      	adds	r5, r1, #3
 800b6ae:	f025 0503 	bic.w	r5, r5, #3
 800b6b2:	3508      	adds	r5, #8
 800b6b4:	2d0c      	cmp	r5, #12
 800b6b6:	bf38      	it	cc
 800b6b8:	250c      	movcc	r5, #12
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	4607      	mov	r7, r0
 800b6be:	db01      	blt.n	800b6c4 <_malloc_r+0x1c>
 800b6c0:	42a9      	cmp	r1, r5
 800b6c2:	d905      	bls.n	800b6d0 <_malloc_r+0x28>
 800b6c4:	230c      	movs	r3, #12
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d0:	4e2e      	ldr	r6, [pc, #184]	; (800b78c <_malloc_r+0xe4>)
 800b6d2:	f001 f815 	bl	800c700 <__malloc_lock>
 800b6d6:	6833      	ldr	r3, [r6, #0]
 800b6d8:	461c      	mov	r4, r3
 800b6da:	bb34      	cbnz	r4, 800b72a <_malloc_r+0x82>
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4638      	mov	r0, r7
 800b6e0:	f7ff ffc2 	bl	800b668 <sbrk_aligned>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	d14d      	bne.n	800b786 <_malloc_r+0xde>
 800b6ea:	6834      	ldr	r4, [r6, #0]
 800b6ec:	4626      	mov	r6, r4
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d140      	bne.n	800b774 <_malloc_r+0xcc>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	eb04 0803 	add.w	r8, r4, r3
 800b6fc:	f000 fce4 	bl	800c0c8 <_sbrk_r>
 800b700:	4580      	cmp	r8, r0
 800b702:	d13a      	bne.n	800b77a <_malloc_r+0xd2>
 800b704:	6821      	ldr	r1, [r4, #0]
 800b706:	3503      	adds	r5, #3
 800b708:	1a6d      	subs	r5, r5, r1
 800b70a:	f025 0503 	bic.w	r5, r5, #3
 800b70e:	3508      	adds	r5, #8
 800b710:	2d0c      	cmp	r5, #12
 800b712:	bf38      	it	cc
 800b714:	250c      	movcc	r5, #12
 800b716:	4629      	mov	r1, r5
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff ffa5 	bl	800b668 <sbrk_aligned>
 800b71e:	3001      	adds	r0, #1
 800b720:	d02b      	beq.n	800b77a <_malloc_r+0xd2>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	442b      	add	r3, r5
 800b726:	6023      	str	r3, [r4, #0]
 800b728:	e00e      	b.n	800b748 <_malloc_r+0xa0>
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	1b52      	subs	r2, r2, r5
 800b72e:	d41e      	bmi.n	800b76e <_malloc_r+0xc6>
 800b730:	2a0b      	cmp	r2, #11
 800b732:	d916      	bls.n	800b762 <_malloc_r+0xba>
 800b734:	1961      	adds	r1, r4, r5
 800b736:	42a3      	cmp	r3, r4
 800b738:	6025      	str	r5, [r4, #0]
 800b73a:	bf18      	it	ne
 800b73c:	6059      	strne	r1, [r3, #4]
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	bf08      	it	eq
 800b742:	6031      	streq	r1, [r6, #0]
 800b744:	5162      	str	r2, [r4, r5]
 800b746:	604b      	str	r3, [r1, #4]
 800b748:	4638      	mov	r0, r7
 800b74a:	f104 060b 	add.w	r6, r4, #11
 800b74e:	f000 ffdd 	bl	800c70c <__malloc_unlock>
 800b752:	f026 0607 	bic.w	r6, r6, #7
 800b756:	1d23      	adds	r3, r4, #4
 800b758:	1af2      	subs	r2, r6, r3
 800b75a:	d0b6      	beq.n	800b6ca <_malloc_r+0x22>
 800b75c:	1b9b      	subs	r3, r3, r6
 800b75e:	50a3      	str	r3, [r4, r2]
 800b760:	e7b3      	b.n	800b6ca <_malloc_r+0x22>
 800b762:	6862      	ldr	r2, [r4, #4]
 800b764:	42a3      	cmp	r3, r4
 800b766:	bf0c      	ite	eq
 800b768:	6032      	streq	r2, [r6, #0]
 800b76a:	605a      	strne	r2, [r3, #4]
 800b76c:	e7ec      	b.n	800b748 <_malloc_r+0xa0>
 800b76e:	4623      	mov	r3, r4
 800b770:	6864      	ldr	r4, [r4, #4]
 800b772:	e7b2      	b.n	800b6da <_malloc_r+0x32>
 800b774:	4634      	mov	r4, r6
 800b776:	6876      	ldr	r6, [r6, #4]
 800b778:	e7b9      	b.n	800b6ee <_malloc_r+0x46>
 800b77a:	230c      	movs	r3, #12
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	4638      	mov	r0, r7
 800b780:	f000 ffc4 	bl	800c70c <__malloc_unlock>
 800b784:	e7a1      	b.n	800b6ca <_malloc_r+0x22>
 800b786:	6025      	str	r5, [r4, #0]
 800b788:	e7de      	b.n	800b748 <_malloc_r+0xa0>
 800b78a:	bf00      	nop
 800b78c:	200004cc 	.word	0x200004cc

0800b790 <__ssputs_r>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	688e      	ldr	r6, [r1, #8]
 800b796:	429e      	cmp	r6, r3
 800b798:	4682      	mov	sl, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	4690      	mov	r8, r2
 800b79e:	461f      	mov	r7, r3
 800b7a0:	d838      	bhi.n	800b814 <__ssputs_r+0x84>
 800b7a2:	898a      	ldrh	r2, [r1, #12]
 800b7a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7a8:	d032      	beq.n	800b810 <__ssputs_r+0x80>
 800b7aa:	6825      	ldr	r5, [r4, #0]
 800b7ac:	6909      	ldr	r1, [r1, #16]
 800b7ae:	eba5 0901 	sub.w	r9, r5, r1
 800b7b2:	6965      	ldr	r5, [r4, #20]
 800b7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7bc:	3301      	adds	r3, #1
 800b7be:	444b      	add	r3, r9
 800b7c0:	106d      	asrs	r5, r5, #1
 800b7c2:	429d      	cmp	r5, r3
 800b7c4:	bf38      	it	cc
 800b7c6:	461d      	movcc	r5, r3
 800b7c8:	0553      	lsls	r3, r2, #21
 800b7ca:	d531      	bpl.n	800b830 <__ssputs_r+0xa0>
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	f7ff ff6b 	bl	800b6a8 <_malloc_r>
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	b950      	cbnz	r0, 800b7ec <__ssputs_r+0x5c>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	f8ca 3000 	str.w	r3, [sl]
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ec:	6921      	ldr	r1, [r4, #16]
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	f7ff fa08 	bl	800ac04 <memcpy>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	6126      	str	r6, [r4, #16]
 800b802:	6165      	str	r5, [r4, #20]
 800b804:	444e      	add	r6, r9
 800b806:	eba5 0509 	sub.w	r5, r5, r9
 800b80a:	6026      	str	r6, [r4, #0]
 800b80c:	60a5      	str	r5, [r4, #8]
 800b80e:	463e      	mov	r6, r7
 800b810:	42be      	cmp	r6, r7
 800b812:	d900      	bls.n	800b816 <__ssputs_r+0x86>
 800b814:	463e      	mov	r6, r7
 800b816:	6820      	ldr	r0, [r4, #0]
 800b818:	4632      	mov	r2, r6
 800b81a:	4641      	mov	r1, r8
 800b81c:	f000 ff56 	bl	800c6cc <memmove>
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	1b9b      	subs	r3, r3, r6
 800b824:	60a3      	str	r3, [r4, #8]
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	4433      	add	r3, r6
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	2000      	movs	r0, #0
 800b82e:	e7db      	b.n	800b7e8 <__ssputs_r+0x58>
 800b830:	462a      	mov	r2, r5
 800b832:	f000 ff71 	bl	800c718 <_realloc_r>
 800b836:	4606      	mov	r6, r0
 800b838:	2800      	cmp	r0, #0
 800b83a:	d1e1      	bne.n	800b800 <__ssputs_r+0x70>
 800b83c:	6921      	ldr	r1, [r4, #16]
 800b83e:	4650      	mov	r0, sl
 800b840:	f7ff fec6 	bl	800b5d0 <_free_r>
 800b844:	e7c7      	b.n	800b7d6 <__ssputs_r+0x46>
	...

0800b848 <_svfiprintf_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	4698      	mov	r8, r3
 800b84e:	898b      	ldrh	r3, [r1, #12]
 800b850:	061b      	lsls	r3, r3, #24
 800b852:	b09d      	sub	sp, #116	; 0x74
 800b854:	4607      	mov	r7, r0
 800b856:	460d      	mov	r5, r1
 800b858:	4614      	mov	r4, r2
 800b85a:	d50e      	bpl.n	800b87a <_svfiprintf_r+0x32>
 800b85c:	690b      	ldr	r3, [r1, #16]
 800b85e:	b963      	cbnz	r3, 800b87a <_svfiprintf_r+0x32>
 800b860:	2140      	movs	r1, #64	; 0x40
 800b862:	f7ff ff21 	bl	800b6a8 <_malloc_r>
 800b866:	6028      	str	r0, [r5, #0]
 800b868:	6128      	str	r0, [r5, #16]
 800b86a:	b920      	cbnz	r0, 800b876 <_svfiprintf_r+0x2e>
 800b86c:	230c      	movs	r3, #12
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	f04f 30ff 	mov.w	r0, #4294967295
 800b874:	e0d1      	b.n	800ba1a <_svfiprintf_r+0x1d2>
 800b876:	2340      	movs	r3, #64	; 0x40
 800b878:	616b      	str	r3, [r5, #20]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9309      	str	r3, [sp, #36]	; 0x24
 800b87e:	2320      	movs	r3, #32
 800b880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b884:	f8cd 800c 	str.w	r8, [sp, #12]
 800b888:	2330      	movs	r3, #48	; 0x30
 800b88a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba34 <_svfiprintf_r+0x1ec>
 800b88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b892:	f04f 0901 	mov.w	r9, #1
 800b896:	4623      	mov	r3, r4
 800b898:	469a      	mov	sl, r3
 800b89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89e:	b10a      	cbz	r2, 800b8a4 <_svfiprintf_r+0x5c>
 800b8a0:	2a25      	cmp	r2, #37	; 0x25
 800b8a2:	d1f9      	bne.n	800b898 <_svfiprintf_r+0x50>
 800b8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a8:	d00b      	beq.n	800b8c2 <_svfiprintf_r+0x7a>
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f7ff ff6d 	bl	800b790 <__ssputs_r>
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	f000 80aa 	beq.w	800ba10 <_svfiprintf_r+0x1c8>
 800b8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8be:	445a      	add	r2, fp
 800b8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 80a2 	beq.w	800ba10 <_svfiprintf_r+0x1c8>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d6:	f10a 0a01 	add.w	sl, sl, #1
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	9307      	str	r3, [sp, #28]
 800b8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8e4:	4654      	mov	r4, sl
 800b8e6:	2205      	movs	r2, #5
 800b8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ec:	4851      	ldr	r0, [pc, #324]	; (800ba34 <_svfiprintf_r+0x1ec>)
 800b8ee:	f7f4 fc97 	bl	8000220 <memchr>
 800b8f2:	9a04      	ldr	r2, [sp, #16]
 800b8f4:	b9d8      	cbnz	r0, 800b92e <_svfiprintf_r+0xe6>
 800b8f6:	06d0      	lsls	r0, r2, #27
 800b8f8:	bf44      	itt	mi
 800b8fa:	2320      	movmi	r3, #32
 800b8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b900:	0711      	lsls	r1, r2, #28
 800b902:	bf44      	itt	mi
 800b904:	232b      	movmi	r3, #43	; 0x2b
 800b906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b90a:	f89a 3000 	ldrb.w	r3, [sl]
 800b90e:	2b2a      	cmp	r3, #42	; 0x2a
 800b910:	d015      	beq.n	800b93e <_svfiprintf_r+0xf6>
 800b912:	9a07      	ldr	r2, [sp, #28]
 800b914:	4654      	mov	r4, sl
 800b916:	2000      	movs	r0, #0
 800b918:	f04f 0c0a 	mov.w	ip, #10
 800b91c:	4621      	mov	r1, r4
 800b91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b922:	3b30      	subs	r3, #48	; 0x30
 800b924:	2b09      	cmp	r3, #9
 800b926:	d94e      	bls.n	800b9c6 <_svfiprintf_r+0x17e>
 800b928:	b1b0      	cbz	r0, 800b958 <_svfiprintf_r+0x110>
 800b92a:	9207      	str	r2, [sp, #28]
 800b92c:	e014      	b.n	800b958 <_svfiprintf_r+0x110>
 800b92e:	eba0 0308 	sub.w	r3, r0, r8
 800b932:	fa09 f303 	lsl.w	r3, r9, r3
 800b936:	4313      	orrs	r3, r2
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	46a2      	mov	sl, r4
 800b93c:	e7d2      	b.n	800b8e4 <_svfiprintf_r+0x9c>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	1d19      	adds	r1, r3, #4
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	9103      	str	r1, [sp, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	bfbb      	ittet	lt
 800b94a:	425b      	neglt	r3, r3
 800b94c:	f042 0202 	orrlt.w	r2, r2, #2
 800b950:	9307      	strge	r3, [sp, #28]
 800b952:	9307      	strlt	r3, [sp, #28]
 800b954:	bfb8      	it	lt
 800b956:	9204      	strlt	r2, [sp, #16]
 800b958:	7823      	ldrb	r3, [r4, #0]
 800b95a:	2b2e      	cmp	r3, #46	; 0x2e
 800b95c:	d10c      	bne.n	800b978 <_svfiprintf_r+0x130>
 800b95e:	7863      	ldrb	r3, [r4, #1]
 800b960:	2b2a      	cmp	r3, #42	; 0x2a
 800b962:	d135      	bne.n	800b9d0 <_svfiprintf_r+0x188>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	1d1a      	adds	r2, r3, #4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	9203      	str	r2, [sp, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfb8      	it	lt
 800b970:	f04f 33ff 	movlt.w	r3, #4294967295
 800b974:	3402      	adds	r4, #2
 800b976:	9305      	str	r3, [sp, #20]
 800b978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba44 <_svfiprintf_r+0x1fc>
 800b97c:	7821      	ldrb	r1, [r4, #0]
 800b97e:	2203      	movs	r2, #3
 800b980:	4650      	mov	r0, sl
 800b982:	f7f4 fc4d 	bl	8000220 <memchr>
 800b986:	b140      	cbz	r0, 800b99a <_svfiprintf_r+0x152>
 800b988:	2340      	movs	r3, #64	; 0x40
 800b98a:	eba0 000a 	sub.w	r0, r0, sl
 800b98e:	fa03 f000 	lsl.w	r0, r3, r0
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	4303      	orrs	r3, r0
 800b996:	3401      	adds	r4, #1
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99e:	4826      	ldr	r0, [pc, #152]	; (800ba38 <_svfiprintf_r+0x1f0>)
 800b9a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9a4:	2206      	movs	r2, #6
 800b9a6:	f7f4 fc3b 	bl	8000220 <memchr>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d038      	beq.n	800ba20 <_svfiprintf_r+0x1d8>
 800b9ae:	4b23      	ldr	r3, [pc, #140]	; (800ba3c <_svfiprintf_r+0x1f4>)
 800b9b0:	bb1b      	cbnz	r3, 800b9fa <_svfiprintf_r+0x1b2>
 800b9b2:	9b03      	ldr	r3, [sp, #12]
 800b9b4:	3307      	adds	r3, #7
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	9303      	str	r3, [sp, #12]
 800b9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c0:	4433      	add	r3, r6
 800b9c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c4:	e767      	b.n	800b896 <_svfiprintf_r+0x4e>
 800b9c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	e7a5      	b.n	800b91c <_svfiprintf_r+0xd4>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	3401      	adds	r4, #1
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f04f 0c0a 	mov.w	ip, #10
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9e2:	3a30      	subs	r2, #48	; 0x30
 800b9e4:	2a09      	cmp	r2, #9
 800b9e6:	d903      	bls.n	800b9f0 <_svfiprintf_r+0x1a8>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0c5      	beq.n	800b978 <_svfiprintf_r+0x130>
 800b9ec:	9105      	str	r1, [sp, #20]
 800b9ee:	e7c3      	b.n	800b978 <_svfiprintf_r+0x130>
 800b9f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e7f0      	b.n	800b9dc <_svfiprintf_r+0x194>
 800b9fa:	ab03      	add	r3, sp, #12
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	462a      	mov	r2, r5
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <_svfiprintf_r+0x1f8>)
 800ba02:	a904      	add	r1, sp, #16
 800ba04:	4638      	mov	r0, r7
 800ba06:	f7fc f98f 	bl	8007d28 <_printf_float>
 800ba0a:	1c42      	adds	r2, r0, #1
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	d1d6      	bne.n	800b9be <_svfiprintf_r+0x176>
 800ba10:	89ab      	ldrh	r3, [r5, #12]
 800ba12:	065b      	lsls	r3, r3, #25
 800ba14:	f53f af2c 	bmi.w	800b870 <_svfiprintf_r+0x28>
 800ba18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba1a:	b01d      	add	sp, #116	; 0x74
 800ba1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba20:	ab03      	add	r3, sp, #12
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	462a      	mov	r2, r5
 800ba26:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <_svfiprintf_r+0x1f8>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f7fc fc20 	bl	8008270 <_printf_i>
 800ba30:	e7eb      	b.n	800ba0a <_svfiprintf_r+0x1c2>
 800ba32:	bf00      	nop
 800ba34:	0800d21c 	.word	0x0800d21c
 800ba38:	0800d226 	.word	0x0800d226
 800ba3c:	08007d29 	.word	0x08007d29
 800ba40:	0800b791 	.word	0x0800b791
 800ba44:	0800d222 	.word	0x0800d222

0800ba48 <_sungetc_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	1c4b      	adds	r3, r1, #1
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	d103      	bne.n	800ba58 <_sungetc_r+0x10>
 800ba50:	f04f 35ff 	mov.w	r5, #4294967295
 800ba54:	4628      	mov	r0, r5
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	8993      	ldrh	r3, [r2, #12]
 800ba5a:	f023 0320 	bic.w	r3, r3, #32
 800ba5e:	8193      	strh	r3, [r2, #12]
 800ba60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba62:	6852      	ldr	r2, [r2, #4]
 800ba64:	b2cd      	uxtb	r5, r1
 800ba66:	b18b      	cbz	r3, 800ba8c <_sungetc_r+0x44>
 800ba68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	dd08      	ble.n	800ba80 <_sungetc_r+0x38>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	1e5a      	subs	r2, r3, #1
 800ba72:	6022      	str	r2, [r4, #0]
 800ba74:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ba78:	6863      	ldr	r3, [r4, #4]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	6063      	str	r3, [r4, #4]
 800ba7e:	e7e9      	b.n	800ba54 <_sungetc_r+0xc>
 800ba80:	4621      	mov	r1, r4
 800ba82:	f000 fbf1 	bl	800c268 <__submore>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d0f1      	beq.n	800ba6e <_sungetc_r+0x26>
 800ba8a:	e7e1      	b.n	800ba50 <_sungetc_r+0x8>
 800ba8c:	6921      	ldr	r1, [r4, #16]
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	b151      	cbz	r1, 800baa8 <_sungetc_r+0x60>
 800ba92:	4299      	cmp	r1, r3
 800ba94:	d208      	bcs.n	800baa8 <_sungetc_r+0x60>
 800ba96:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ba9a:	42a9      	cmp	r1, r5
 800ba9c:	d104      	bne.n	800baa8 <_sungetc_r+0x60>
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	3201      	adds	r2, #1
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	6062      	str	r2, [r4, #4]
 800baa6:	e7d5      	b.n	800ba54 <_sungetc_r+0xc>
 800baa8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800baac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bab0:	6363      	str	r3, [r4, #52]	; 0x34
 800bab2:	2303      	movs	r3, #3
 800bab4:	63a3      	str	r3, [r4, #56]	; 0x38
 800bab6:	4623      	mov	r3, r4
 800bab8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	2301      	movs	r3, #1
 800bac0:	e7dc      	b.n	800ba7c <_sungetc_r+0x34>

0800bac2 <__ssrefill_r>:
 800bac2:	b510      	push	{r4, lr}
 800bac4:	460c      	mov	r4, r1
 800bac6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bac8:	b169      	cbz	r1, 800bae6 <__ssrefill_r+0x24>
 800baca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bace:	4299      	cmp	r1, r3
 800bad0:	d001      	beq.n	800bad6 <__ssrefill_r+0x14>
 800bad2:	f7ff fd7d 	bl	800b5d0 <_free_r>
 800bad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	2000      	movs	r0, #0
 800badc:	6360      	str	r0, [r4, #52]	; 0x34
 800bade:	b113      	cbz	r3, 800bae6 <__ssrefill_r+0x24>
 800bae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	bd10      	pop	{r4, pc}
 800bae6:	6923      	ldr	r3, [r4, #16]
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	2300      	movs	r3, #0
 800baec:	6063      	str	r3, [r4, #4]
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	f043 0320 	orr.w	r3, r3, #32
 800baf4:	81a3      	strh	r3, [r4, #12]
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bafa:	e7f3      	b.n	800bae4 <__ssrefill_r+0x22>

0800bafc <__ssvfiscanf_r>:
 800bafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb00:	460c      	mov	r4, r1
 800bb02:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bb06:	2100      	movs	r1, #0
 800bb08:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bb0c:	49a6      	ldr	r1, [pc, #664]	; (800bda8 <__ssvfiscanf_r+0x2ac>)
 800bb0e:	91a0      	str	r1, [sp, #640]	; 0x280
 800bb10:	f10d 0804 	add.w	r8, sp, #4
 800bb14:	49a5      	ldr	r1, [pc, #660]	; (800bdac <__ssvfiscanf_r+0x2b0>)
 800bb16:	4fa6      	ldr	r7, [pc, #664]	; (800bdb0 <__ssvfiscanf_r+0x2b4>)
 800bb18:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bdb4 <__ssvfiscanf_r+0x2b8>
 800bb1c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bb20:	4606      	mov	r6, r0
 800bb22:	91a1      	str	r1, [sp, #644]	; 0x284
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	7813      	ldrb	r3, [r2, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 815a 	beq.w	800bde2 <__ssvfiscanf_r+0x2e6>
 800bb2e:	5dd9      	ldrb	r1, [r3, r7]
 800bb30:	f011 0108 	ands.w	r1, r1, #8
 800bb34:	f102 0501 	add.w	r5, r2, #1
 800bb38:	d019      	beq.n	800bb6e <__ssvfiscanf_r+0x72>
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dd0f      	ble.n	800bb60 <__ssvfiscanf_r+0x64>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	781a      	ldrb	r2, [r3, #0]
 800bb44:	5cba      	ldrb	r2, [r7, r2]
 800bb46:	0712      	lsls	r2, r2, #28
 800bb48:	d401      	bmi.n	800bb4e <__ssvfiscanf_r+0x52>
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	e7eb      	b.n	800bb26 <__ssvfiscanf_r+0x2a>
 800bb4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb50:	3201      	adds	r2, #1
 800bb52:	9245      	str	r2, [sp, #276]	; 0x114
 800bb54:	6862      	ldr	r2, [r4, #4]
 800bb56:	3301      	adds	r3, #1
 800bb58:	3a01      	subs	r2, #1
 800bb5a:	6062      	str	r2, [r4, #4]
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	e7ec      	b.n	800bb3a <__ssvfiscanf_r+0x3e>
 800bb60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb62:	4621      	mov	r1, r4
 800bb64:	4630      	mov	r0, r6
 800bb66:	4798      	blx	r3
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d0e9      	beq.n	800bb40 <__ssvfiscanf_r+0x44>
 800bb6c:	e7ed      	b.n	800bb4a <__ssvfiscanf_r+0x4e>
 800bb6e:	2b25      	cmp	r3, #37	; 0x25
 800bb70:	d012      	beq.n	800bb98 <__ssvfiscanf_r+0x9c>
 800bb72:	469a      	mov	sl, r3
 800bb74:	6863      	ldr	r3, [r4, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f340 8091 	ble.w	800bc9e <__ssvfiscanf_r+0x1a2>
 800bb7c:	6822      	ldr	r2, [r4, #0]
 800bb7e:	7813      	ldrb	r3, [r2, #0]
 800bb80:	4553      	cmp	r3, sl
 800bb82:	f040 812e 	bne.w	800bde2 <__ssvfiscanf_r+0x2e6>
 800bb86:	6863      	ldr	r3, [r4, #4]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	6063      	str	r3, [r4, #4]
 800bb8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb8e:	3201      	adds	r2, #1
 800bb90:	3301      	adds	r3, #1
 800bb92:	6022      	str	r2, [r4, #0]
 800bb94:	9345      	str	r3, [sp, #276]	; 0x114
 800bb96:	e7d8      	b.n	800bb4a <__ssvfiscanf_r+0x4e>
 800bb98:	9141      	str	r1, [sp, #260]	; 0x104
 800bb9a:	9143      	str	r1, [sp, #268]	; 0x10c
 800bb9c:	7853      	ldrb	r3, [r2, #1]
 800bb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bba0:	bf02      	ittt	eq
 800bba2:	2310      	moveq	r3, #16
 800bba4:	1c95      	addeq	r5, r2, #2
 800bba6:	9341      	streq	r3, [sp, #260]	; 0x104
 800bba8:	220a      	movs	r2, #10
 800bbaa:	46aa      	mov	sl, r5
 800bbac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bbb0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bbb4:	2b09      	cmp	r3, #9
 800bbb6:	d91d      	bls.n	800bbf4 <__ssvfiscanf_r+0xf8>
 800bbb8:	487e      	ldr	r0, [pc, #504]	; (800bdb4 <__ssvfiscanf_r+0x2b8>)
 800bbba:	2203      	movs	r2, #3
 800bbbc:	f7f4 fb30 	bl	8000220 <memchr>
 800bbc0:	b140      	cbz	r0, 800bbd4 <__ssvfiscanf_r+0xd8>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	eba0 0009 	sub.w	r0, r0, r9
 800bbc8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbcc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbce:	4318      	orrs	r0, r3
 800bbd0:	9041      	str	r0, [sp, #260]	; 0x104
 800bbd2:	4655      	mov	r5, sl
 800bbd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bbd8:	2b78      	cmp	r3, #120	; 0x78
 800bbda:	d806      	bhi.n	800bbea <__ssvfiscanf_r+0xee>
 800bbdc:	2b57      	cmp	r3, #87	; 0x57
 800bbde:	d810      	bhi.n	800bc02 <__ssvfiscanf_r+0x106>
 800bbe0:	2b25      	cmp	r3, #37	; 0x25
 800bbe2:	d0c6      	beq.n	800bb72 <__ssvfiscanf_r+0x76>
 800bbe4:	d856      	bhi.n	800bc94 <__ssvfiscanf_r+0x198>
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d064      	beq.n	800bcb4 <__ssvfiscanf_r+0x1b8>
 800bbea:	2303      	movs	r3, #3
 800bbec:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbee:	230a      	movs	r3, #10
 800bbf0:	9342      	str	r3, [sp, #264]	; 0x108
 800bbf2:	e071      	b.n	800bcd8 <__ssvfiscanf_r+0x1dc>
 800bbf4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbf6:	fb02 1103 	mla	r1, r2, r3, r1
 800bbfa:	3930      	subs	r1, #48	; 0x30
 800bbfc:	9143      	str	r1, [sp, #268]	; 0x10c
 800bbfe:	4655      	mov	r5, sl
 800bc00:	e7d3      	b.n	800bbaa <__ssvfiscanf_r+0xae>
 800bc02:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bc06:	2a20      	cmp	r2, #32
 800bc08:	d8ef      	bhi.n	800bbea <__ssvfiscanf_r+0xee>
 800bc0a:	a101      	add	r1, pc, #4	; (adr r1, 800bc10 <__ssvfiscanf_r+0x114>)
 800bc0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc10:	0800bcc3 	.word	0x0800bcc3
 800bc14:	0800bbeb 	.word	0x0800bbeb
 800bc18:	0800bbeb 	.word	0x0800bbeb
 800bc1c:	0800bd21 	.word	0x0800bd21
 800bc20:	0800bbeb 	.word	0x0800bbeb
 800bc24:	0800bbeb 	.word	0x0800bbeb
 800bc28:	0800bbeb 	.word	0x0800bbeb
 800bc2c:	0800bbeb 	.word	0x0800bbeb
 800bc30:	0800bbeb 	.word	0x0800bbeb
 800bc34:	0800bbeb 	.word	0x0800bbeb
 800bc38:	0800bbeb 	.word	0x0800bbeb
 800bc3c:	0800bd37 	.word	0x0800bd37
 800bc40:	0800bd0d 	.word	0x0800bd0d
 800bc44:	0800bc9b 	.word	0x0800bc9b
 800bc48:	0800bc9b 	.word	0x0800bc9b
 800bc4c:	0800bc9b 	.word	0x0800bc9b
 800bc50:	0800bbeb 	.word	0x0800bbeb
 800bc54:	0800bd11 	.word	0x0800bd11
 800bc58:	0800bbeb 	.word	0x0800bbeb
 800bc5c:	0800bbeb 	.word	0x0800bbeb
 800bc60:	0800bbeb 	.word	0x0800bbeb
 800bc64:	0800bbeb 	.word	0x0800bbeb
 800bc68:	0800bd47 	.word	0x0800bd47
 800bc6c:	0800bd19 	.word	0x0800bd19
 800bc70:	0800bcbb 	.word	0x0800bcbb
 800bc74:	0800bbeb 	.word	0x0800bbeb
 800bc78:	0800bbeb 	.word	0x0800bbeb
 800bc7c:	0800bd43 	.word	0x0800bd43
 800bc80:	0800bbeb 	.word	0x0800bbeb
 800bc84:	0800bd0d 	.word	0x0800bd0d
 800bc88:	0800bbeb 	.word	0x0800bbeb
 800bc8c:	0800bbeb 	.word	0x0800bbeb
 800bc90:	0800bcc3 	.word	0x0800bcc3
 800bc94:	3b45      	subs	r3, #69	; 0x45
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d8a7      	bhi.n	800bbea <__ssvfiscanf_r+0xee>
 800bc9a:	2305      	movs	r3, #5
 800bc9c:	e01b      	b.n	800bcd6 <__ssvfiscanf_r+0x1da>
 800bc9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bca0:	4621      	mov	r1, r4
 800bca2:	4630      	mov	r0, r6
 800bca4:	4798      	blx	r3
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f43f af68 	beq.w	800bb7c <__ssvfiscanf_r+0x80>
 800bcac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f040 808d 	bne.w	800bdce <__ssvfiscanf_r+0x2d2>
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	e08f      	b.n	800bdda <__ssvfiscanf_r+0x2de>
 800bcba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcbc:	f042 0220 	orr.w	r2, r2, #32
 800bcc0:	9241      	str	r2, [sp, #260]	; 0x104
 800bcc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcc8:	9241      	str	r2, [sp, #260]	; 0x104
 800bcca:	2210      	movs	r2, #16
 800bccc:	2b6f      	cmp	r3, #111	; 0x6f
 800bcce:	9242      	str	r2, [sp, #264]	; 0x108
 800bcd0:	bf34      	ite	cc
 800bcd2:	2303      	movcc	r3, #3
 800bcd4:	2304      	movcs	r3, #4
 800bcd6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bcd8:	6863      	ldr	r3, [r4, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dd42      	ble.n	800bd64 <__ssvfiscanf_r+0x268>
 800bcde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bce0:	0659      	lsls	r1, r3, #25
 800bce2:	d404      	bmi.n	800bcee <__ssvfiscanf_r+0x1f2>
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	781a      	ldrb	r2, [r3, #0]
 800bce8:	5cba      	ldrb	r2, [r7, r2]
 800bcea:	0712      	lsls	r2, r2, #28
 800bcec:	d441      	bmi.n	800bd72 <__ssvfiscanf_r+0x276>
 800bcee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	dc50      	bgt.n	800bd96 <__ssvfiscanf_r+0x29a>
 800bcf4:	466b      	mov	r3, sp
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	a941      	add	r1, sp, #260	; 0x104
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f000 f876 	bl	800bdec <_scanf_chars>
 800bd00:	2801      	cmp	r0, #1
 800bd02:	d06e      	beq.n	800bde2 <__ssvfiscanf_r+0x2e6>
 800bd04:	2802      	cmp	r0, #2
 800bd06:	f47f af20 	bne.w	800bb4a <__ssvfiscanf_r+0x4e>
 800bd0a:	e7cf      	b.n	800bcac <__ssvfiscanf_r+0x1b0>
 800bd0c:	220a      	movs	r2, #10
 800bd0e:	e7dd      	b.n	800bccc <__ssvfiscanf_r+0x1d0>
 800bd10:	2300      	movs	r3, #0
 800bd12:	9342      	str	r3, [sp, #264]	; 0x108
 800bd14:	2303      	movs	r3, #3
 800bd16:	e7de      	b.n	800bcd6 <__ssvfiscanf_r+0x1da>
 800bd18:	2308      	movs	r3, #8
 800bd1a:	9342      	str	r3, [sp, #264]	; 0x108
 800bd1c:	2304      	movs	r3, #4
 800bd1e:	e7da      	b.n	800bcd6 <__ssvfiscanf_r+0x1da>
 800bd20:	4629      	mov	r1, r5
 800bd22:	4640      	mov	r0, r8
 800bd24:	f000 f9e0 	bl	800c0e8 <__sccl>
 800bd28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2e:	9341      	str	r3, [sp, #260]	; 0x104
 800bd30:	4605      	mov	r5, r0
 800bd32:	2301      	movs	r3, #1
 800bd34:	e7cf      	b.n	800bcd6 <__ssvfiscanf_r+0x1da>
 800bd36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd3c:	9341      	str	r3, [sp, #260]	; 0x104
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e7c9      	b.n	800bcd6 <__ssvfiscanf_r+0x1da>
 800bd42:	2302      	movs	r3, #2
 800bd44:	e7c7      	b.n	800bcd6 <__ssvfiscanf_r+0x1da>
 800bd46:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd48:	06c3      	lsls	r3, r0, #27
 800bd4a:	f53f aefe 	bmi.w	800bb4a <__ssvfiscanf_r+0x4e>
 800bd4e:	9b00      	ldr	r3, [sp, #0]
 800bd50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd52:	1d19      	adds	r1, r3, #4
 800bd54:	9100      	str	r1, [sp, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f010 0f01 	tst.w	r0, #1
 800bd5c:	bf14      	ite	ne
 800bd5e:	801a      	strhne	r2, [r3, #0]
 800bd60:	601a      	streq	r2, [r3, #0]
 800bd62:	e6f2      	b.n	800bb4a <__ssvfiscanf_r+0x4e>
 800bd64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd66:	4621      	mov	r1, r4
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4798      	blx	r3
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d0b6      	beq.n	800bcde <__ssvfiscanf_r+0x1e2>
 800bd70:	e79c      	b.n	800bcac <__ssvfiscanf_r+0x1b0>
 800bd72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd74:	3201      	adds	r2, #1
 800bd76:	9245      	str	r2, [sp, #276]	; 0x114
 800bd78:	6862      	ldr	r2, [r4, #4]
 800bd7a:	3a01      	subs	r2, #1
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	6062      	str	r2, [r4, #4]
 800bd80:	dd02      	ble.n	800bd88 <__ssvfiscanf_r+0x28c>
 800bd82:	3301      	adds	r3, #1
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	e7ad      	b.n	800bce4 <__ssvfiscanf_r+0x1e8>
 800bd88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4798      	blx	r3
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d0a7      	beq.n	800bce4 <__ssvfiscanf_r+0x1e8>
 800bd94:	e78a      	b.n	800bcac <__ssvfiscanf_r+0x1b0>
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	dc0e      	bgt.n	800bdb8 <__ssvfiscanf_r+0x2bc>
 800bd9a:	466b      	mov	r3, sp
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	a941      	add	r1, sp, #260	; 0x104
 800bda0:	4630      	mov	r0, r6
 800bda2:	f000 f87d 	bl	800bea0 <_scanf_i>
 800bda6:	e7ab      	b.n	800bd00 <__ssvfiscanf_r+0x204>
 800bda8:	0800ba49 	.word	0x0800ba49
 800bdac:	0800bac3 	.word	0x0800bac3
 800bdb0:	0800ceb9 	.word	0x0800ceb9
 800bdb4:	0800d222 	.word	0x0800d222
 800bdb8:	4b0b      	ldr	r3, [pc, #44]	; (800bde8 <__ssvfiscanf_r+0x2ec>)
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f43f aec5 	beq.w	800bb4a <__ssvfiscanf_r+0x4e>
 800bdc0:	466b      	mov	r3, sp
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	a941      	add	r1, sp, #260	; 0x104
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7fc fb78 	bl	80084bc <_scanf_float>
 800bdcc:	e798      	b.n	800bd00 <__ssvfiscanf_r+0x204>
 800bdce:	89a3      	ldrh	r3, [r4, #12]
 800bdd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bdd4:	bf18      	it	ne
 800bdd6:	f04f 30ff 	movne.w	r0, #4294967295
 800bdda:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bde4:	e7f9      	b.n	800bdda <__ssvfiscanf_r+0x2de>
 800bde6:	bf00      	nop
 800bde8:	080084bd 	.word	0x080084bd

0800bdec <_scanf_chars>:
 800bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf0:	4615      	mov	r5, r2
 800bdf2:	688a      	ldr	r2, [r1, #8]
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	b932      	cbnz	r2, 800be08 <_scanf_chars+0x1c>
 800bdfa:	698a      	ldr	r2, [r1, #24]
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	bf0c      	ite	eq
 800be00:	2201      	moveq	r2, #1
 800be02:	f04f 32ff 	movne.w	r2, #4294967295
 800be06:	608a      	str	r2, [r1, #8]
 800be08:	6822      	ldr	r2, [r4, #0]
 800be0a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800be9c <_scanf_chars+0xb0>
 800be0e:	06d1      	lsls	r1, r2, #27
 800be10:	bf5f      	itttt	pl
 800be12:	681a      	ldrpl	r2, [r3, #0]
 800be14:	1d11      	addpl	r1, r2, #4
 800be16:	6019      	strpl	r1, [r3, #0]
 800be18:	6816      	ldrpl	r6, [r2, #0]
 800be1a:	2700      	movs	r7, #0
 800be1c:	69a0      	ldr	r0, [r4, #24]
 800be1e:	b188      	cbz	r0, 800be44 <_scanf_chars+0x58>
 800be20:	2801      	cmp	r0, #1
 800be22:	d107      	bne.n	800be34 <_scanf_chars+0x48>
 800be24:	682a      	ldr	r2, [r5, #0]
 800be26:	7811      	ldrb	r1, [r2, #0]
 800be28:	6962      	ldr	r2, [r4, #20]
 800be2a:	5c52      	ldrb	r2, [r2, r1]
 800be2c:	b952      	cbnz	r2, 800be44 <_scanf_chars+0x58>
 800be2e:	2f00      	cmp	r7, #0
 800be30:	d031      	beq.n	800be96 <_scanf_chars+0xaa>
 800be32:	e022      	b.n	800be7a <_scanf_chars+0x8e>
 800be34:	2802      	cmp	r0, #2
 800be36:	d120      	bne.n	800be7a <_scanf_chars+0x8e>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800be40:	071b      	lsls	r3, r3, #28
 800be42:	d41a      	bmi.n	800be7a <_scanf_chars+0x8e>
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	06da      	lsls	r2, r3, #27
 800be48:	bf5e      	ittt	pl
 800be4a:	682b      	ldrpl	r3, [r5, #0]
 800be4c:	781b      	ldrbpl	r3, [r3, #0]
 800be4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800be52:	682a      	ldr	r2, [r5, #0]
 800be54:	686b      	ldr	r3, [r5, #4]
 800be56:	3201      	adds	r2, #1
 800be58:	602a      	str	r2, [r5, #0]
 800be5a:	68a2      	ldr	r2, [r4, #8]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	3a01      	subs	r2, #1
 800be60:	606b      	str	r3, [r5, #4]
 800be62:	3701      	adds	r7, #1
 800be64:	60a2      	str	r2, [r4, #8]
 800be66:	b142      	cbz	r2, 800be7a <_scanf_chars+0x8e>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dcd7      	bgt.n	800be1c <_scanf_chars+0x30>
 800be6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be70:	4629      	mov	r1, r5
 800be72:	4640      	mov	r0, r8
 800be74:	4798      	blx	r3
 800be76:	2800      	cmp	r0, #0
 800be78:	d0d0      	beq.n	800be1c <_scanf_chars+0x30>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	f013 0310 	ands.w	r3, r3, #16
 800be80:	d105      	bne.n	800be8e <_scanf_chars+0xa2>
 800be82:	68e2      	ldr	r2, [r4, #12]
 800be84:	3201      	adds	r2, #1
 800be86:	60e2      	str	r2, [r4, #12]
 800be88:	69a2      	ldr	r2, [r4, #24]
 800be8a:	b102      	cbz	r2, 800be8e <_scanf_chars+0xa2>
 800be8c:	7033      	strb	r3, [r6, #0]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	443b      	add	r3, r7
 800be92:	6123      	str	r3, [r4, #16]
 800be94:	2000      	movs	r0, #0
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	bf00      	nop
 800be9c:	0800ceb9 	.word	0x0800ceb9

0800bea0 <_scanf_i>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	4698      	mov	r8, r3
 800bea6:	4b76      	ldr	r3, [pc, #472]	; (800c080 <_scanf_i+0x1e0>)
 800bea8:	460c      	mov	r4, r1
 800beaa:	4682      	mov	sl, r0
 800beac:	4616      	mov	r6, r2
 800beae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800beb2:	b087      	sub	sp, #28
 800beb4:	ab03      	add	r3, sp, #12
 800beb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800beba:	4b72      	ldr	r3, [pc, #456]	; (800c084 <_scanf_i+0x1e4>)
 800bebc:	69a1      	ldr	r1, [r4, #24]
 800bebe:	4a72      	ldr	r2, [pc, #456]	; (800c088 <_scanf_i+0x1e8>)
 800bec0:	2903      	cmp	r1, #3
 800bec2:	bf18      	it	ne
 800bec4:	461a      	movne	r2, r3
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	9201      	str	r2, [sp, #4]
 800beca:	1e5a      	subs	r2, r3, #1
 800becc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bed0:	bf88      	it	hi
 800bed2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bed6:	4627      	mov	r7, r4
 800bed8:	bf82      	ittt	hi
 800beda:	eb03 0905 	addhi.w	r9, r3, r5
 800bede:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bee2:	60a3      	strhi	r3, [r4, #8]
 800bee4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bee8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800beec:	bf98      	it	ls
 800beee:	f04f 0900 	movls.w	r9, #0
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	463d      	mov	r5, r7
 800bef6:	f04f 0b00 	mov.w	fp, #0
 800befa:	6831      	ldr	r1, [r6, #0]
 800befc:	ab03      	add	r3, sp, #12
 800befe:	7809      	ldrb	r1, [r1, #0]
 800bf00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bf04:	2202      	movs	r2, #2
 800bf06:	f7f4 f98b 	bl	8000220 <memchr>
 800bf0a:	b328      	cbz	r0, 800bf58 <_scanf_i+0xb8>
 800bf0c:	f1bb 0f01 	cmp.w	fp, #1
 800bf10:	d159      	bne.n	800bfc6 <_scanf_i+0x126>
 800bf12:	6862      	ldr	r2, [r4, #4]
 800bf14:	b92a      	cbnz	r2, 800bf22 <_scanf_i+0x82>
 800bf16:	6822      	ldr	r2, [r4, #0]
 800bf18:	2308      	movs	r3, #8
 800bf1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf1e:	6063      	str	r3, [r4, #4]
 800bf20:	6022      	str	r2, [r4, #0]
 800bf22:	6822      	ldr	r2, [r4, #0]
 800bf24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bf28:	6022      	str	r2, [r4, #0]
 800bf2a:	68a2      	ldr	r2, [r4, #8]
 800bf2c:	1e51      	subs	r1, r2, #1
 800bf2e:	60a1      	str	r1, [r4, #8]
 800bf30:	b192      	cbz	r2, 800bf58 <_scanf_i+0xb8>
 800bf32:	6832      	ldr	r2, [r6, #0]
 800bf34:	1c51      	adds	r1, r2, #1
 800bf36:	6031      	str	r1, [r6, #0]
 800bf38:	7812      	ldrb	r2, [r2, #0]
 800bf3a:	f805 2b01 	strb.w	r2, [r5], #1
 800bf3e:	6872      	ldr	r2, [r6, #4]
 800bf40:	3a01      	subs	r2, #1
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	6072      	str	r2, [r6, #4]
 800bf46:	dc07      	bgt.n	800bf58 <_scanf_i+0xb8>
 800bf48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4650      	mov	r0, sl
 800bf50:	4790      	blx	r2
 800bf52:	2800      	cmp	r0, #0
 800bf54:	f040 8085 	bne.w	800c062 <_scanf_i+0x1c2>
 800bf58:	f10b 0b01 	add.w	fp, fp, #1
 800bf5c:	f1bb 0f03 	cmp.w	fp, #3
 800bf60:	d1cb      	bne.n	800befa <_scanf_i+0x5a>
 800bf62:	6863      	ldr	r3, [r4, #4]
 800bf64:	b90b      	cbnz	r3, 800bf6a <_scanf_i+0xca>
 800bf66:	230a      	movs	r3, #10
 800bf68:	6063      	str	r3, [r4, #4]
 800bf6a:	6863      	ldr	r3, [r4, #4]
 800bf6c:	4947      	ldr	r1, [pc, #284]	; (800c08c <_scanf_i+0x1ec>)
 800bf6e:	6960      	ldr	r0, [r4, #20]
 800bf70:	1ac9      	subs	r1, r1, r3
 800bf72:	f000 f8b9 	bl	800c0e8 <__sccl>
 800bf76:	f04f 0b00 	mov.w	fp, #0
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	6822      	ldr	r2, [r4, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d03d      	beq.n	800bffe <_scanf_i+0x15e>
 800bf82:	6831      	ldr	r1, [r6, #0]
 800bf84:	6960      	ldr	r0, [r4, #20]
 800bf86:	f891 c000 	ldrb.w	ip, [r1]
 800bf8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d035      	beq.n	800bffe <_scanf_i+0x15e>
 800bf92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bf96:	d124      	bne.n	800bfe2 <_scanf_i+0x142>
 800bf98:	0510      	lsls	r0, r2, #20
 800bf9a:	d522      	bpl.n	800bfe2 <_scanf_i+0x142>
 800bf9c:	f10b 0b01 	add.w	fp, fp, #1
 800bfa0:	f1b9 0f00 	cmp.w	r9, #0
 800bfa4:	d003      	beq.n	800bfae <_scanf_i+0x10e>
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	f109 39ff 	add.w	r9, r9, #4294967295
 800bfac:	60a3      	str	r3, [r4, #8]
 800bfae:	6873      	ldr	r3, [r6, #4]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	6073      	str	r3, [r6, #4]
 800bfb6:	dd1b      	ble.n	800bff0 <_scanf_i+0x150>
 800bfb8:	6833      	ldr	r3, [r6, #0]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	6033      	str	r3, [r6, #0]
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	60a3      	str	r3, [r4, #8]
 800bfc4:	e7d9      	b.n	800bf7a <_scanf_i+0xda>
 800bfc6:	f1bb 0f02 	cmp.w	fp, #2
 800bfca:	d1ae      	bne.n	800bf2a <_scanf_i+0x8a>
 800bfcc:	6822      	ldr	r2, [r4, #0]
 800bfce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bfd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bfd6:	d1bf      	bne.n	800bf58 <_scanf_i+0xb8>
 800bfd8:	2310      	movs	r3, #16
 800bfda:	6063      	str	r3, [r4, #4]
 800bfdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfe0:	e7a2      	b.n	800bf28 <_scanf_i+0x88>
 800bfe2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bfe6:	6022      	str	r2, [r4, #0]
 800bfe8:	780b      	ldrb	r3, [r1, #0]
 800bfea:	f805 3b01 	strb.w	r3, [r5], #1
 800bfee:	e7de      	b.n	800bfae <_scanf_i+0x10e>
 800bff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bff4:	4631      	mov	r1, r6
 800bff6:	4650      	mov	r0, sl
 800bff8:	4798      	blx	r3
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d0df      	beq.n	800bfbe <_scanf_i+0x11e>
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	05db      	lsls	r3, r3, #23
 800c002:	d50d      	bpl.n	800c020 <_scanf_i+0x180>
 800c004:	42bd      	cmp	r5, r7
 800c006:	d909      	bls.n	800c01c <_scanf_i+0x17c>
 800c008:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c00c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c010:	4632      	mov	r2, r6
 800c012:	4650      	mov	r0, sl
 800c014:	4798      	blx	r3
 800c016:	f105 39ff 	add.w	r9, r5, #4294967295
 800c01a:	464d      	mov	r5, r9
 800c01c:	42bd      	cmp	r5, r7
 800c01e:	d02d      	beq.n	800c07c <_scanf_i+0x1dc>
 800c020:	6822      	ldr	r2, [r4, #0]
 800c022:	f012 0210 	ands.w	r2, r2, #16
 800c026:	d113      	bne.n	800c050 <_scanf_i+0x1b0>
 800c028:	702a      	strb	r2, [r5, #0]
 800c02a:	6863      	ldr	r3, [r4, #4]
 800c02c:	9e01      	ldr	r6, [sp, #4]
 800c02e:	4639      	mov	r1, r7
 800c030:	4650      	mov	r0, sl
 800c032:	47b0      	blx	r6
 800c034:	6821      	ldr	r1, [r4, #0]
 800c036:	f8d8 3000 	ldr.w	r3, [r8]
 800c03a:	f011 0f20 	tst.w	r1, #32
 800c03e:	d013      	beq.n	800c068 <_scanf_i+0x1c8>
 800c040:	1d1a      	adds	r2, r3, #4
 800c042:	f8c8 2000 	str.w	r2, [r8]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6018      	str	r0, [r3, #0]
 800c04a:	68e3      	ldr	r3, [r4, #12]
 800c04c:	3301      	adds	r3, #1
 800c04e:	60e3      	str	r3, [r4, #12]
 800c050:	1bed      	subs	r5, r5, r7
 800c052:	44ab      	add	fp, r5
 800c054:	6925      	ldr	r5, [r4, #16]
 800c056:	445d      	add	r5, fp
 800c058:	6125      	str	r5, [r4, #16]
 800c05a:	2000      	movs	r0, #0
 800c05c:	b007      	add	sp, #28
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	f04f 0b00 	mov.w	fp, #0
 800c066:	e7ca      	b.n	800bffe <_scanf_i+0x15e>
 800c068:	1d1a      	adds	r2, r3, #4
 800c06a:	f8c8 2000 	str.w	r2, [r8]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f011 0f01 	tst.w	r1, #1
 800c074:	bf14      	ite	ne
 800c076:	8018      	strhne	r0, [r3, #0]
 800c078:	6018      	streq	r0, [r3, #0]
 800c07a:	e7e6      	b.n	800c04a <_scanf_i+0x1aa>
 800c07c:	2001      	movs	r0, #1
 800c07e:	e7ed      	b.n	800c05c <_scanf_i+0x1bc>
 800c080:	0800ce00 	.word	0x0800ce00
 800c084:	0800c265 	.word	0x0800c265
 800c088:	08009785 	.word	0x08009785
 800c08c:	0800d246 	.word	0x0800d246

0800c090 <_read_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d07      	ldr	r5, [pc, #28]	; (800c0b0 <_read_r+0x20>)
 800c094:	4604      	mov	r4, r0
 800c096:	4608      	mov	r0, r1
 800c098:	4611      	mov	r1, r2
 800c09a:	2200      	movs	r2, #0
 800c09c:	602a      	str	r2, [r5, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f7f6 f924 	bl	80022ec <_read>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_read_r+0x1e>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_read_r+0x1e>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	200004d4 	.word	0x200004d4
 800c0b4:	00000000 	.word	0x00000000

0800c0b8 <nan>:
 800c0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c0c0 <nan+0x8>
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	00000000 	.word	0x00000000
 800c0c4:	7ff80000 	.word	0x7ff80000

0800c0c8 <_sbrk_r>:
 800c0c8:	b538      	push	{r3, r4, r5, lr}
 800c0ca:	4d06      	ldr	r5, [pc, #24]	; (800c0e4 <_sbrk_r+0x1c>)
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	f7f6 f978 	bl	80023c8 <_sbrk>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_sbrk_r+0x1a>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_sbrk_r+0x1a>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	200004d4 	.word	0x200004d4

0800c0e8 <__sccl>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	780b      	ldrb	r3, [r1, #0]
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	2b5e      	cmp	r3, #94	; 0x5e
 800c0f0:	bf0b      	itete	eq
 800c0f2:	784b      	ldrbeq	r3, [r1, #1]
 800c0f4:	1c48      	addne	r0, r1, #1
 800c0f6:	1c88      	addeq	r0, r1, #2
 800c0f8:	2200      	movne	r2, #0
 800c0fa:	bf08      	it	eq
 800c0fc:	2201      	moveq	r2, #1
 800c0fe:	1e61      	subs	r1, r4, #1
 800c100:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c104:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c108:	42a9      	cmp	r1, r5
 800c10a:	d1fb      	bne.n	800c104 <__sccl+0x1c>
 800c10c:	b90b      	cbnz	r3, 800c112 <__sccl+0x2a>
 800c10e:	3801      	subs	r0, #1
 800c110:	bd70      	pop	{r4, r5, r6, pc}
 800c112:	f082 0201 	eor.w	r2, r2, #1
 800c116:	54e2      	strb	r2, [r4, r3]
 800c118:	4605      	mov	r5, r0
 800c11a:	4628      	mov	r0, r5
 800c11c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c120:	292d      	cmp	r1, #45	; 0x2d
 800c122:	d006      	beq.n	800c132 <__sccl+0x4a>
 800c124:	295d      	cmp	r1, #93	; 0x5d
 800c126:	d0f3      	beq.n	800c110 <__sccl+0x28>
 800c128:	b909      	cbnz	r1, 800c12e <__sccl+0x46>
 800c12a:	4628      	mov	r0, r5
 800c12c:	e7f0      	b.n	800c110 <__sccl+0x28>
 800c12e:	460b      	mov	r3, r1
 800c130:	e7f1      	b.n	800c116 <__sccl+0x2e>
 800c132:	786e      	ldrb	r6, [r5, #1]
 800c134:	2e5d      	cmp	r6, #93	; 0x5d
 800c136:	d0fa      	beq.n	800c12e <__sccl+0x46>
 800c138:	42b3      	cmp	r3, r6
 800c13a:	dcf8      	bgt.n	800c12e <__sccl+0x46>
 800c13c:	3502      	adds	r5, #2
 800c13e:	4619      	mov	r1, r3
 800c140:	3101      	adds	r1, #1
 800c142:	428e      	cmp	r6, r1
 800c144:	5462      	strb	r2, [r4, r1]
 800c146:	dcfb      	bgt.n	800c140 <__sccl+0x58>
 800c148:	1af1      	subs	r1, r6, r3
 800c14a:	3901      	subs	r1, #1
 800c14c:	1c58      	adds	r0, r3, #1
 800c14e:	42b3      	cmp	r3, r6
 800c150:	bfa8      	it	ge
 800c152:	2100      	movge	r1, #0
 800c154:	1843      	adds	r3, r0, r1
 800c156:	e7e0      	b.n	800c11a <__sccl+0x32>

0800c158 <strncmp>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	b17a      	cbz	r2, 800c17c <strncmp+0x24>
 800c15c:	4603      	mov	r3, r0
 800c15e:	3901      	subs	r1, #1
 800c160:	1884      	adds	r4, r0, r2
 800c162:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c16a:	4290      	cmp	r0, r2
 800c16c:	d101      	bne.n	800c172 <strncmp+0x1a>
 800c16e:	42a3      	cmp	r3, r4
 800c170:	d101      	bne.n	800c176 <strncmp+0x1e>
 800c172:	1a80      	subs	r0, r0, r2
 800c174:	bd10      	pop	{r4, pc}
 800c176:	2800      	cmp	r0, #0
 800c178:	d1f3      	bne.n	800c162 <strncmp+0xa>
 800c17a:	e7fa      	b.n	800c172 <strncmp+0x1a>
 800c17c:	4610      	mov	r0, r2
 800c17e:	e7f9      	b.n	800c174 <strncmp+0x1c>

0800c180 <_strtoul_l.constprop.0>:
 800c180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c184:	4f36      	ldr	r7, [pc, #216]	; (800c260 <_strtoul_l.constprop.0+0xe0>)
 800c186:	4686      	mov	lr, r0
 800c188:	460d      	mov	r5, r1
 800c18a:	4628      	mov	r0, r5
 800c18c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c190:	5de6      	ldrb	r6, [r4, r7]
 800c192:	f016 0608 	ands.w	r6, r6, #8
 800c196:	d1f8      	bne.n	800c18a <_strtoul_l.constprop.0+0xa>
 800c198:	2c2d      	cmp	r4, #45	; 0x2d
 800c19a:	d12f      	bne.n	800c1fc <_strtoul_l.constprop.0+0x7c>
 800c19c:	782c      	ldrb	r4, [r5, #0]
 800c19e:	2601      	movs	r6, #1
 800c1a0:	1c85      	adds	r5, r0, #2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d057      	beq.n	800c256 <_strtoul_l.constprop.0+0xd6>
 800c1a6:	2b10      	cmp	r3, #16
 800c1a8:	d109      	bne.n	800c1be <_strtoul_l.constprop.0+0x3e>
 800c1aa:	2c30      	cmp	r4, #48	; 0x30
 800c1ac:	d107      	bne.n	800c1be <_strtoul_l.constprop.0+0x3e>
 800c1ae:	7828      	ldrb	r0, [r5, #0]
 800c1b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c1b4:	2858      	cmp	r0, #88	; 0x58
 800c1b6:	d149      	bne.n	800c24c <_strtoul_l.constprop.0+0xcc>
 800c1b8:	786c      	ldrb	r4, [r5, #1]
 800c1ba:	2310      	movs	r3, #16
 800c1bc:	3502      	adds	r5, #2
 800c1be:	f04f 38ff 	mov.w	r8, #4294967295
 800c1c2:	2700      	movs	r7, #0
 800c1c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800c1c8:	fb03 f908 	mul.w	r9, r3, r8
 800c1cc:	ea6f 0909 	mvn.w	r9, r9
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c1d6:	f1bc 0f09 	cmp.w	ip, #9
 800c1da:	d814      	bhi.n	800c206 <_strtoul_l.constprop.0+0x86>
 800c1dc:	4664      	mov	r4, ip
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	dd22      	ble.n	800c228 <_strtoul_l.constprop.0+0xa8>
 800c1e2:	2f00      	cmp	r7, #0
 800c1e4:	db1d      	blt.n	800c222 <_strtoul_l.constprop.0+0xa2>
 800c1e6:	4580      	cmp	r8, r0
 800c1e8:	d31b      	bcc.n	800c222 <_strtoul_l.constprop.0+0xa2>
 800c1ea:	d101      	bne.n	800c1f0 <_strtoul_l.constprop.0+0x70>
 800c1ec:	45a1      	cmp	r9, r4
 800c1ee:	db18      	blt.n	800c222 <_strtoul_l.constprop.0+0xa2>
 800c1f0:	fb00 4003 	mla	r0, r0, r3, r4
 800c1f4:	2701      	movs	r7, #1
 800c1f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1fa:	e7ea      	b.n	800c1d2 <_strtoul_l.constprop.0+0x52>
 800c1fc:	2c2b      	cmp	r4, #43	; 0x2b
 800c1fe:	bf04      	itt	eq
 800c200:	782c      	ldrbeq	r4, [r5, #0]
 800c202:	1c85      	addeq	r5, r0, #2
 800c204:	e7cd      	b.n	800c1a2 <_strtoul_l.constprop.0+0x22>
 800c206:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c20a:	f1bc 0f19 	cmp.w	ip, #25
 800c20e:	d801      	bhi.n	800c214 <_strtoul_l.constprop.0+0x94>
 800c210:	3c37      	subs	r4, #55	; 0x37
 800c212:	e7e4      	b.n	800c1de <_strtoul_l.constprop.0+0x5e>
 800c214:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c218:	f1bc 0f19 	cmp.w	ip, #25
 800c21c:	d804      	bhi.n	800c228 <_strtoul_l.constprop.0+0xa8>
 800c21e:	3c57      	subs	r4, #87	; 0x57
 800c220:	e7dd      	b.n	800c1de <_strtoul_l.constprop.0+0x5e>
 800c222:	f04f 37ff 	mov.w	r7, #4294967295
 800c226:	e7e6      	b.n	800c1f6 <_strtoul_l.constprop.0+0x76>
 800c228:	2f00      	cmp	r7, #0
 800c22a:	da07      	bge.n	800c23c <_strtoul_l.constprop.0+0xbc>
 800c22c:	2322      	movs	r3, #34	; 0x22
 800c22e:	f8ce 3000 	str.w	r3, [lr]
 800c232:	f04f 30ff 	mov.w	r0, #4294967295
 800c236:	b932      	cbnz	r2, 800c246 <_strtoul_l.constprop.0+0xc6>
 800c238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c23c:	b106      	cbz	r6, 800c240 <_strtoul_l.constprop.0+0xc0>
 800c23e:	4240      	negs	r0, r0
 800c240:	2a00      	cmp	r2, #0
 800c242:	d0f9      	beq.n	800c238 <_strtoul_l.constprop.0+0xb8>
 800c244:	b107      	cbz	r7, 800c248 <_strtoul_l.constprop.0+0xc8>
 800c246:	1e69      	subs	r1, r5, #1
 800c248:	6011      	str	r1, [r2, #0]
 800c24a:	e7f5      	b.n	800c238 <_strtoul_l.constprop.0+0xb8>
 800c24c:	2430      	movs	r4, #48	; 0x30
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1b5      	bne.n	800c1be <_strtoul_l.constprop.0+0x3e>
 800c252:	2308      	movs	r3, #8
 800c254:	e7b3      	b.n	800c1be <_strtoul_l.constprop.0+0x3e>
 800c256:	2c30      	cmp	r4, #48	; 0x30
 800c258:	d0a9      	beq.n	800c1ae <_strtoul_l.constprop.0+0x2e>
 800c25a:	230a      	movs	r3, #10
 800c25c:	e7af      	b.n	800c1be <_strtoul_l.constprop.0+0x3e>
 800c25e:	bf00      	nop
 800c260:	0800ceb9 	.word	0x0800ceb9

0800c264 <_strtoul_r>:
 800c264:	f7ff bf8c 	b.w	800c180 <_strtoul_l.constprop.0>

0800c268 <__submore>:
 800c268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26c:	460c      	mov	r4, r1
 800c26e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c274:	4299      	cmp	r1, r3
 800c276:	d11d      	bne.n	800c2b4 <__submore+0x4c>
 800c278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c27c:	f7ff fa14 	bl	800b6a8 <_malloc_r>
 800c280:	b918      	cbnz	r0, 800c28a <__submore+0x22>
 800c282:	f04f 30ff 	mov.w	r0, #4294967295
 800c286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c28e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c290:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c294:	6360      	str	r0, [r4, #52]	; 0x34
 800c296:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c29a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c29e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c2a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c2a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c2aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c2ae:	6020      	str	r0, [r4, #0]
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e7e8      	b.n	800c286 <__submore+0x1e>
 800c2b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c2b6:	0077      	lsls	r7, r6, #1
 800c2b8:	463a      	mov	r2, r7
 800c2ba:	f000 fa2d 	bl	800c718 <_realloc_r>
 800c2be:	4605      	mov	r5, r0
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d0de      	beq.n	800c282 <__submore+0x1a>
 800c2c4:	eb00 0806 	add.w	r8, r0, r6
 800c2c8:	4601      	mov	r1, r0
 800c2ca:	4632      	mov	r2, r6
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	f7fe fc99 	bl	800ac04 <memcpy>
 800c2d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c2d6:	f8c4 8000 	str.w	r8, [r4]
 800c2da:	e7e9      	b.n	800c2b0 <__submore+0x48>

0800c2dc <__ascii_wctomb>:
 800c2dc:	b149      	cbz	r1, 800c2f2 <__ascii_wctomb+0x16>
 800c2de:	2aff      	cmp	r2, #255	; 0xff
 800c2e0:	bf85      	ittet	hi
 800c2e2:	238a      	movhi	r3, #138	; 0x8a
 800c2e4:	6003      	strhi	r3, [r0, #0]
 800c2e6:	700a      	strbls	r2, [r1, #0]
 800c2e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2ec:	bf98      	it	ls
 800c2ee:	2001      	movls	r0, #1
 800c2f0:	4770      	bx	lr
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	4770      	bx	lr
	...

0800c2f8 <__assert_func>:
 800c2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2fa:	4614      	mov	r4, r2
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	4b09      	ldr	r3, [pc, #36]	; (800c324 <__assert_func+0x2c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4605      	mov	r5, r0
 800c304:	68d8      	ldr	r0, [r3, #12]
 800c306:	b14c      	cbz	r4, 800c31c <__assert_func+0x24>
 800c308:	4b07      	ldr	r3, [pc, #28]	; (800c328 <__assert_func+0x30>)
 800c30a:	9100      	str	r1, [sp, #0]
 800c30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c310:	4906      	ldr	r1, [pc, #24]	; (800c32c <__assert_func+0x34>)
 800c312:	462b      	mov	r3, r5
 800c314:	f000 f9a6 	bl	800c664 <fiprintf>
 800c318:	f000 fc46 	bl	800cba8 <abort>
 800c31c:	4b04      	ldr	r3, [pc, #16]	; (800c330 <__assert_func+0x38>)
 800c31e:	461c      	mov	r4, r3
 800c320:	e7f3      	b.n	800c30a <__assert_func+0x12>
 800c322:	bf00      	nop
 800c324:	2000003c 	.word	0x2000003c
 800c328:	0800d248 	.word	0x0800d248
 800c32c:	0800d255 	.word	0x0800d255
 800c330:	0800d283 	.word	0x0800d283

0800c334 <__sflush_r>:
 800c334:	898a      	ldrh	r2, [r1, #12]
 800c336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c33a:	4605      	mov	r5, r0
 800c33c:	0710      	lsls	r0, r2, #28
 800c33e:	460c      	mov	r4, r1
 800c340:	d458      	bmi.n	800c3f4 <__sflush_r+0xc0>
 800c342:	684b      	ldr	r3, [r1, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	dc05      	bgt.n	800c354 <__sflush_r+0x20>
 800c348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	dc02      	bgt.n	800c354 <__sflush_r+0x20>
 800c34e:	2000      	movs	r0, #0
 800c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c356:	2e00      	cmp	r6, #0
 800c358:	d0f9      	beq.n	800c34e <__sflush_r+0x1a>
 800c35a:	2300      	movs	r3, #0
 800c35c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c360:	682f      	ldr	r7, [r5, #0]
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	d032      	beq.n	800c3cc <__sflush_r+0x98>
 800c366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	075a      	lsls	r2, r3, #29
 800c36c:	d505      	bpl.n	800c37a <__sflush_r+0x46>
 800c36e:	6863      	ldr	r3, [r4, #4]
 800c370:	1ac0      	subs	r0, r0, r3
 800c372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c374:	b10b      	cbz	r3, 800c37a <__sflush_r+0x46>
 800c376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c378:	1ac0      	subs	r0, r0, r3
 800c37a:	2300      	movs	r3, #0
 800c37c:	4602      	mov	r2, r0
 800c37e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c380:	6a21      	ldr	r1, [r4, #32]
 800c382:	4628      	mov	r0, r5
 800c384:	47b0      	blx	r6
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	d106      	bne.n	800c39a <__sflush_r+0x66>
 800c38c:	6829      	ldr	r1, [r5, #0]
 800c38e:	291d      	cmp	r1, #29
 800c390:	d82c      	bhi.n	800c3ec <__sflush_r+0xb8>
 800c392:	4a2a      	ldr	r2, [pc, #168]	; (800c43c <__sflush_r+0x108>)
 800c394:	40ca      	lsrs	r2, r1
 800c396:	07d6      	lsls	r6, r2, #31
 800c398:	d528      	bpl.n	800c3ec <__sflush_r+0xb8>
 800c39a:	2200      	movs	r2, #0
 800c39c:	6062      	str	r2, [r4, #4]
 800c39e:	04d9      	lsls	r1, r3, #19
 800c3a0:	6922      	ldr	r2, [r4, #16]
 800c3a2:	6022      	str	r2, [r4, #0]
 800c3a4:	d504      	bpl.n	800c3b0 <__sflush_r+0x7c>
 800c3a6:	1c42      	adds	r2, r0, #1
 800c3a8:	d101      	bne.n	800c3ae <__sflush_r+0x7a>
 800c3aa:	682b      	ldr	r3, [r5, #0]
 800c3ac:	b903      	cbnz	r3, 800c3b0 <__sflush_r+0x7c>
 800c3ae:	6560      	str	r0, [r4, #84]	; 0x54
 800c3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3b2:	602f      	str	r7, [r5, #0]
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	d0ca      	beq.n	800c34e <__sflush_r+0x1a>
 800c3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3bc:	4299      	cmp	r1, r3
 800c3be:	d002      	beq.n	800c3c6 <__sflush_r+0x92>
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f7ff f905 	bl	800b5d0 <_free_r>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c3ca:	e7c1      	b.n	800c350 <__sflush_r+0x1c>
 800c3cc:	6a21      	ldr	r1, [r4, #32]
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b0      	blx	r6
 800c3d4:	1c41      	adds	r1, r0, #1
 800c3d6:	d1c7      	bne.n	800c368 <__sflush_r+0x34>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d0c4      	beq.n	800c368 <__sflush_r+0x34>
 800c3de:	2b1d      	cmp	r3, #29
 800c3e0:	d001      	beq.n	800c3e6 <__sflush_r+0xb2>
 800c3e2:	2b16      	cmp	r3, #22
 800c3e4:	d101      	bne.n	800c3ea <__sflush_r+0xb6>
 800c3e6:	602f      	str	r7, [r5, #0]
 800c3e8:	e7b1      	b.n	800c34e <__sflush_r+0x1a>
 800c3ea:	89a3      	ldrh	r3, [r4, #12]
 800c3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f0:	81a3      	strh	r3, [r4, #12]
 800c3f2:	e7ad      	b.n	800c350 <__sflush_r+0x1c>
 800c3f4:	690f      	ldr	r7, [r1, #16]
 800c3f6:	2f00      	cmp	r7, #0
 800c3f8:	d0a9      	beq.n	800c34e <__sflush_r+0x1a>
 800c3fa:	0793      	lsls	r3, r2, #30
 800c3fc:	680e      	ldr	r6, [r1, #0]
 800c3fe:	bf08      	it	eq
 800c400:	694b      	ldreq	r3, [r1, #20]
 800c402:	600f      	str	r7, [r1, #0]
 800c404:	bf18      	it	ne
 800c406:	2300      	movne	r3, #0
 800c408:	eba6 0807 	sub.w	r8, r6, r7
 800c40c:	608b      	str	r3, [r1, #8]
 800c40e:	f1b8 0f00 	cmp.w	r8, #0
 800c412:	dd9c      	ble.n	800c34e <__sflush_r+0x1a>
 800c414:	6a21      	ldr	r1, [r4, #32]
 800c416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c418:	4643      	mov	r3, r8
 800c41a:	463a      	mov	r2, r7
 800c41c:	4628      	mov	r0, r5
 800c41e:	47b0      	blx	r6
 800c420:	2800      	cmp	r0, #0
 800c422:	dc06      	bgt.n	800c432 <__sflush_r+0xfe>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295
 800c430:	e78e      	b.n	800c350 <__sflush_r+0x1c>
 800c432:	4407      	add	r7, r0
 800c434:	eba8 0800 	sub.w	r8, r8, r0
 800c438:	e7e9      	b.n	800c40e <__sflush_r+0xda>
 800c43a:	bf00      	nop
 800c43c:	20400001 	.word	0x20400001

0800c440 <_fflush_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	690b      	ldr	r3, [r1, #16]
 800c444:	4605      	mov	r5, r0
 800c446:	460c      	mov	r4, r1
 800c448:	b913      	cbnz	r3, 800c450 <_fflush_r+0x10>
 800c44a:	2500      	movs	r5, #0
 800c44c:	4628      	mov	r0, r5
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	b118      	cbz	r0, 800c45a <_fflush_r+0x1a>
 800c452:	6983      	ldr	r3, [r0, #24]
 800c454:	b90b      	cbnz	r3, 800c45a <_fflush_r+0x1a>
 800c456:	f000 f887 	bl	800c568 <__sinit>
 800c45a:	4b14      	ldr	r3, [pc, #80]	; (800c4ac <_fflush_r+0x6c>)
 800c45c:	429c      	cmp	r4, r3
 800c45e:	d11b      	bne.n	800c498 <_fflush_r+0x58>
 800c460:	686c      	ldr	r4, [r5, #4]
 800c462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0ef      	beq.n	800c44a <_fflush_r+0xa>
 800c46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c46c:	07d0      	lsls	r0, r2, #31
 800c46e:	d404      	bmi.n	800c47a <_fflush_r+0x3a>
 800c470:	0599      	lsls	r1, r3, #22
 800c472:	d402      	bmi.n	800c47a <_fflush_r+0x3a>
 800c474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c476:	f000 f927 	bl	800c6c8 <__retarget_lock_acquire_recursive>
 800c47a:	4628      	mov	r0, r5
 800c47c:	4621      	mov	r1, r4
 800c47e:	f7ff ff59 	bl	800c334 <__sflush_r>
 800c482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c484:	07da      	lsls	r2, r3, #31
 800c486:	4605      	mov	r5, r0
 800c488:	d4e0      	bmi.n	800c44c <_fflush_r+0xc>
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	059b      	lsls	r3, r3, #22
 800c48e:	d4dd      	bmi.n	800c44c <_fflush_r+0xc>
 800c490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c492:	f000 f91a 	bl	800c6ca <__retarget_lock_release_recursive>
 800c496:	e7d9      	b.n	800c44c <_fflush_r+0xc>
 800c498:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <_fflush_r+0x70>)
 800c49a:	429c      	cmp	r4, r3
 800c49c:	d101      	bne.n	800c4a2 <_fflush_r+0x62>
 800c49e:	68ac      	ldr	r4, [r5, #8]
 800c4a0:	e7df      	b.n	800c462 <_fflush_r+0x22>
 800c4a2:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <_fflush_r+0x74>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	bf08      	it	eq
 800c4a8:	68ec      	ldreq	r4, [r5, #12]
 800c4aa:	e7da      	b.n	800c462 <_fflush_r+0x22>
 800c4ac:	0800d2a4 	.word	0x0800d2a4
 800c4b0:	0800d2c4 	.word	0x0800d2c4
 800c4b4:	0800d284 	.word	0x0800d284

0800c4b8 <std>:
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	b510      	push	{r4, lr}
 800c4bc:	4604      	mov	r4, r0
 800c4be:	e9c0 3300 	strd	r3, r3, [r0]
 800c4c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4c6:	6083      	str	r3, [r0, #8]
 800c4c8:	8181      	strh	r1, [r0, #12]
 800c4ca:	6643      	str	r3, [r0, #100]	; 0x64
 800c4cc:	81c2      	strh	r2, [r0, #14]
 800c4ce:	6183      	str	r3, [r0, #24]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	2208      	movs	r2, #8
 800c4d4:	305c      	adds	r0, #92	; 0x5c
 800c4d6:	f7fb fb7f 	bl	8007bd8 <memset>
 800c4da:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <std+0x38>)
 800c4dc:	6263      	str	r3, [r4, #36]	; 0x24
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <std+0x3c>)
 800c4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <std+0x40>)
 800c4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <std+0x44>)
 800c4e8:	6224      	str	r4, [r4, #32]
 800c4ea:	6323      	str	r3, [r4, #48]	; 0x30
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	08008981 	.word	0x08008981
 800c4f4:	080089a7 	.word	0x080089a7
 800c4f8:	080089df 	.word	0x080089df
 800c4fc:	08008a03 	.word	0x08008a03

0800c500 <_cleanup_r>:
 800c500:	4901      	ldr	r1, [pc, #4]	; (800c508 <_cleanup_r+0x8>)
 800c502:	f000 b8c1 	b.w	800c688 <_fwalk_reent>
 800c506:	bf00      	nop
 800c508:	0800c441 	.word	0x0800c441

0800c50c <__sfmoreglue>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	2268      	movs	r2, #104	; 0x68
 800c510:	1e4d      	subs	r5, r1, #1
 800c512:	4355      	muls	r5, r2
 800c514:	460e      	mov	r6, r1
 800c516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c51a:	f7ff f8c5 	bl	800b6a8 <_malloc_r>
 800c51e:	4604      	mov	r4, r0
 800c520:	b140      	cbz	r0, 800c534 <__sfmoreglue+0x28>
 800c522:	2100      	movs	r1, #0
 800c524:	e9c0 1600 	strd	r1, r6, [r0]
 800c528:	300c      	adds	r0, #12
 800c52a:	60a0      	str	r0, [r4, #8]
 800c52c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c530:	f7fb fb52 	bl	8007bd8 <memset>
 800c534:	4620      	mov	r0, r4
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <__sfp_lock_acquire>:
 800c538:	4801      	ldr	r0, [pc, #4]	; (800c540 <__sfp_lock_acquire+0x8>)
 800c53a:	f000 b8c5 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	200004d9 	.word	0x200004d9

0800c544 <__sfp_lock_release>:
 800c544:	4801      	ldr	r0, [pc, #4]	; (800c54c <__sfp_lock_release+0x8>)
 800c546:	f000 b8c0 	b.w	800c6ca <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	200004d9 	.word	0x200004d9

0800c550 <__sinit_lock_acquire>:
 800c550:	4801      	ldr	r0, [pc, #4]	; (800c558 <__sinit_lock_acquire+0x8>)
 800c552:	f000 b8b9 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800c556:	bf00      	nop
 800c558:	200004da 	.word	0x200004da

0800c55c <__sinit_lock_release>:
 800c55c:	4801      	ldr	r0, [pc, #4]	; (800c564 <__sinit_lock_release+0x8>)
 800c55e:	f000 b8b4 	b.w	800c6ca <__retarget_lock_release_recursive>
 800c562:	bf00      	nop
 800c564:	200004da 	.word	0x200004da

0800c568 <__sinit>:
 800c568:	b510      	push	{r4, lr}
 800c56a:	4604      	mov	r4, r0
 800c56c:	f7ff fff0 	bl	800c550 <__sinit_lock_acquire>
 800c570:	69a3      	ldr	r3, [r4, #24]
 800c572:	b11b      	cbz	r3, 800c57c <__sinit+0x14>
 800c574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c578:	f7ff bff0 	b.w	800c55c <__sinit_lock_release>
 800c57c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c580:	6523      	str	r3, [r4, #80]	; 0x50
 800c582:	4b13      	ldr	r3, [pc, #76]	; (800c5d0 <__sinit+0x68>)
 800c584:	4a13      	ldr	r2, [pc, #76]	; (800c5d4 <__sinit+0x6c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	62a2      	str	r2, [r4, #40]	; 0x28
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	bf04      	itt	eq
 800c58e:	2301      	moveq	r3, #1
 800c590:	61a3      	streq	r3, [r4, #24]
 800c592:	4620      	mov	r0, r4
 800c594:	f000 f820 	bl	800c5d8 <__sfp>
 800c598:	6060      	str	r0, [r4, #4]
 800c59a:	4620      	mov	r0, r4
 800c59c:	f000 f81c 	bl	800c5d8 <__sfp>
 800c5a0:	60a0      	str	r0, [r4, #8]
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 f818 	bl	800c5d8 <__sfp>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	60e0      	str	r0, [r4, #12]
 800c5ac:	2104      	movs	r1, #4
 800c5ae:	6860      	ldr	r0, [r4, #4]
 800c5b0:	f7ff ff82 	bl	800c4b8 <std>
 800c5b4:	68a0      	ldr	r0, [r4, #8]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	2109      	movs	r1, #9
 800c5ba:	f7ff ff7d 	bl	800c4b8 <std>
 800c5be:	68e0      	ldr	r0, [r4, #12]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	2112      	movs	r1, #18
 800c5c4:	f7ff ff78 	bl	800c4b8 <std>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	61a3      	str	r3, [r4, #24]
 800c5cc:	e7d2      	b.n	800c574 <__sinit+0xc>
 800c5ce:	bf00      	nop
 800c5d0:	0800ce28 	.word	0x0800ce28
 800c5d4:	0800c501 	.word	0x0800c501

0800c5d8 <__sfp>:
 800c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5da:	4607      	mov	r7, r0
 800c5dc:	f7ff ffac 	bl	800c538 <__sfp_lock_acquire>
 800c5e0:	4b1e      	ldr	r3, [pc, #120]	; (800c65c <__sfp+0x84>)
 800c5e2:	681e      	ldr	r6, [r3, #0]
 800c5e4:	69b3      	ldr	r3, [r6, #24]
 800c5e6:	b913      	cbnz	r3, 800c5ee <__sfp+0x16>
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f7ff ffbd 	bl	800c568 <__sinit>
 800c5ee:	3648      	adds	r6, #72	; 0x48
 800c5f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	d503      	bpl.n	800c600 <__sfp+0x28>
 800c5f8:	6833      	ldr	r3, [r6, #0]
 800c5fa:	b30b      	cbz	r3, 800c640 <__sfp+0x68>
 800c5fc:	6836      	ldr	r6, [r6, #0]
 800c5fe:	e7f7      	b.n	800c5f0 <__sfp+0x18>
 800c600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c604:	b9d5      	cbnz	r5, 800c63c <__sfp+0x64>
 800c606:	4b16      	ldr	r3, [pc, #88]	; (800c660 <__sfp+0x88>)
 800c608:	60e3      	str	r3, [r4, #12]
 800c60a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c60e:	6665      	str	r5, [r4, #100]	; 0x64
 800c610:	f000 f859 	bl	800c6c6 <__retarget_lock_init_recursive>
 800c614:	f7ff ff96 	bl	800c544 <__sfp_lock_release>
 800c618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c61c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c620:	6025      	str	r5, [r4, #0]
 800c622:	61a5      	str	r5, [r4, #24]
 800c624:	2208      	movs	r2, #8
 800c626:	4629      	mov	r1, r5
 800c628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c62c:	f7fb fad4 	bl	8007bd8 <memset>
 800c630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c638:	4620      	mov	r0, r4
 800c63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c63c:	3468      	adds	r4, #104	; 0x68
 800c63e:	e7d9      	b.n	800c5f4 <__sfp+0x1c>
 800c640:	2104      	movs	r1, #4
 800c642:	4638      	mov	r0, r7
 800c644:	f7ff ff62 	bl	800c50c <__sfmoreglue>
 800c648:	4604      	mov	r4, r0
 800c64a:	6030      	str	r0, [r6, #0]
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d1d5      	bne.n	800c5fc <__sfp+0x24>
 800c650:	f7ff ff78 	bl	800c544 <__sfp_lock_release>
 800c654:	230c      	movs	r3, #12
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	e7ee      	b.n	800c638 <__sfp+0x60>
 800c65a:	bf00      	nop
 800c65c:	0800ce28 	.word	0x0800ce28
 800c660:	ffff0001 	.word	0xffff0001

0800c664 <fiprintf>:
 800c664:	b40e      	push	{r1, r2, r3}
 800c666:	b503      	push	{r0, r1, lr}
 800c668:	4601      	mov	r1, r0
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	4805      	ldr	r0, [pc, #20]	; (800c684 <fiprintf+0x20>)
 800c66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c672:	6800      	ldr	r0, [r0, #0]
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	f000 f8a7 	bl	800c7c8 <_vfiprintf_r>
 800c67a:	b002      	add	sp, #8
 800c67c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c680:	b003      	add	sp, #12
 800c682:	4770      	bx	lr
 800c684:	2000003c 	.word	0x2000003c

0800c688 <_fwalk_reent>:
 800c688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c68c:	4606      	mov	r6, r0
 800c68e:	4688      	mov	r8, r1
 800c690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c694:	2700      	movs	r7, #0
 800c696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c69a:	f1b9 0901 	subs.w	r9, r9, #1
 800c69e:	d505      	bpl.n	800c6ac <_fwalk_reent+0x24>
 800c6a0:	6824      	ldr	r4, [r4, #0]
 800c6a2:	2c00      	cmp	r4, #0
 800c6a4:	d1f7      	bne.n	800c696 <_fwalk_reent+0xe>
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ac:	89ab      	ldrh	r3, [r5, #12]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d907      	bls.n	800c6c2 <_fwalk_reent+0x3a>
 800c6b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	d003      	beq.n	800c6c2 <_fwalk_reent+0x3a>
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	4630      	mov	r0, r6
 800c6be:	47c0      	blx	r8
 800c6c0:	4307      	orrs	r7, r0
 800c6c2:	3568      	adds	r5, #104	; 0x68
 800c6c4:	e7e9      	b.n	800c69a <_fwalk_reent+0x12>

0800c6c6 <__retarget_lock_init_recursive>:
 800c6c6:	4770      	bx	lr

0800c6c8 <__retarget_lock_acquire_recursive>:
 800c6c8:	4770      	bx	lr

0800c6ca <__retarget_lock_release_recursive>:
 800c6ca:	4770      	bx	lr

0800c6cc <memmove>:
 800c6cc:	4288      	cmp	r0, r1
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	eb01 0402 	add.w	r4, r1, r2
 800c6d4:	d902      	bls.n	800c6dc <memmove+0x10>
 800c6d6:	4284      	cmp	r4, r0
 800c6d8:	4623      	mov	r3, r4
 800c6da:	d807      	bhi.n	800c6ec <memmove+0x20>
 800c6dc:	1e43      	subs	r3, r0, #1
 800c6de:	42a1      	cmp	r1, r4
 800c6e0:	d008      	beq.n	800c6f4 <memmove+0x28>
 800c6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ea:	e7f8      	b.n	800c6de <memmove+0x12>
 800c6ec:	4402      	add	r2, r0
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	428a      	cmp	r2, r1
 800c6f2:	d100      	bne.n	800c6f6 <memmove+0x2a>
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6fe:	e7f7      	b.n	800c6f0 <memmove+0x24>

0800c700 <__malloc_lock>:
 800c700:	4801      	ldr	r0, [pc, #4]	; (800c708 <__malloc_lock+0x8>)
 800c702:	f7ff bfe1 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800c706:	bf00      	nop
 800c708:	200004d8 	.word	0x200004d8

0800c70c <__malloc_unlock>:
 800c70c:	4801      	ldr	r0, [pc, #4]	; (800c714 <__malloc_unlock+0x8>)
 800c70e:	f7ff bfdc 	b.w	800c6ca <__retarget_lock_release_recursive>
 800c712:	bf00      	nop
 800c714:	200004d8 	.word	0x200004d8

0800c718 <_realloc_r>:
 800c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71c:	4680      	mov	r8, r0
 800c71e:	4614      	mov	r4, r2
 800c720:	460e      	mov	r6, r1
 800c722:	b921      	cbnz	r1, 800c72e <_realloc_r+0x16>
 800c724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	4611      	mov	r1, r2
 800c72a:	f7fe bfbd 	b.w	800b6a8 <_malloc_r>
 800c72e:	b92a      	cbnz	r2, 800c73c <_realloc_r+0x24>
 800c730:	f7fe ff4e 	bl	800b5d0 <_free_r>
 800c734:	4625      	mov	r5, r4
 800c736:	4628      	mov	r0, r5
 800c738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73c:	f000 faa0 	bl	800cc80 <_malloc_usable_size_r>
 800c740:	4284      	cmp	r4, r0
 800c742:	4607      	mov	r7, r0
 800c744:	d802      	bhi.n	800c74c <_realloc_r+0x34>
 800c746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c74a:	d812      	bhi.n	800c772 <_realloc_r+0x5a>
 800c74c:	4621      	mov	r1, r4
 800c74e:	4640      	mov	r0, r8
 800c750:	f7fe ffaa 	bl	800b6a8 <_malloc_r>
 800c754:	4605      	mov	r5, r0
 800c756:	2800      	cmp	r0, #0
 800c758:	d0ed      	beq.n	800c736 <_realloc_r+0x1e>
 800c75a:	42bc      	cmp	r4, r7
 800c75c:	4622      	mov	r2, r4
 800c75e:	4631      	mov	r1, r6
 800c760:	bf28      	it	cs
 800c762:	463a      	movcs	r2, r7
 800c764:	f7fe fa4e 	bl	800ac04 <memcpy>
 800c768:	4631      	mov	r1, r6
 800c76a:	4640      	mov	r0, r8
 800c76c:	f7fe ff30 	bl	800b5d0 <_free_r>
 800c770:	e7e1      	b.n	800c736 <_realloc_r+0x1e>
 800c772:	4635      	mov	r5, r6
 800c774:	e7df      	b.n	800c736 <_realloc_r+0x1e>

0800c776 <__sfputc_r>:
 800c776:	6893      	ldr	r3, [r2, #8]
 800c778:	3b01      	subs	r3, #1
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	b410      	push	{r4}
 800c77e:	6093      	str	r3, [r2, #8]
 800c780:	da08      	bge.n	800c794 <__sfputc_r+0x1e>
 800c782:	6994      	ldr	r4, [r2, #24]
 800c784:	42a3      	cmp	r3, r4
 800c786:	db01      	blt.n	800c78c <__sfputc_r+0x16>
 800c788:	290a      	cmp	r1, #10
 800c78a:	d103      	bne.n	800c794 <__sfputc_r+0x1e>
 800c78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c790:	f000 b94a 	b.w	800ca28 <__swbuf_r>
 800c794:	6813      	ldr	r3, [r2, #0]
 800c796:	1c58      	adds	r0, r3, #1
 800c798:	6010      	str	r0, [r2, #0]
 800c79a:	7019      	strb	r1, [r3, #0]
 800c79c:	4608      	mov	r0, r1
 800c79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <__sfputs_r>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	460f      	mov	r7, r1
 800c7aa:	4614      	mov	r4, r2
 800c7ac:	18d5      	adds	r5, r2, r3
 800c7ae:	42ac      	cmp	r4, r5
 800c7b0:	d101      	bne.n	800c7b6 <__sfputs_r+0x12>
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e007      	b.n	800c7c6 <__sfputs_r+0x22>
 800c7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ba:	463a      	mov	r2, r7
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff ffda 	bl	800c776 <__sfputc_r>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	d1f3      	bne.n	800c7ae <__sfputs_r+0xa>
 800c7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c7c8 <_vfiprintf_r>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	460d      	mov	r5, r1
 800c7ce:	b09d      	sub	sp, #116	; 0x74
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	4698      	mov	r8, r3
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	b118      	cbz	r0, 800c7e0 <_vfiprintf_r+0x18>
 800c7d8:	6983      	ldr	r3, [r0, #24]
 800c7da:	b90b      	cbnz	r3, 800c7e0 <_vfiprintf_r+0x18>
 800c7dc:	f7ff fec4 	bl	800c568 <__sinit>
 800c7e0:	4b89      	ldr	r3, [pc, #548]	; (800ca08 <_vfiprintf_r+0x240>)
 800c7e2:	429d      	cmp	r5, r3
 800c7e4:	d11b      	bne.n	800c81e <_vfiprintf_r+0x56>
 800c7e6:	6875      	ldr	r5, [r6, #4]
 800c7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7ea:	07d9      	lsls	r1, r3, #31
 800c7ec:	d405      	bmi.n	800c7fa <_vfiprintf_r+0x32>
 800c7ee:	89ab      	ldrh	r3, [r5, #12]
 800c7f0:	059a      	lsls	r2, r3, #22
 800c7f2:	d402      	bmi.n	800c7fa <_vfiprintf_r+0x32>
 800c7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f6:	f7ff ff67 	bl	800c6c8 <__retarget_lock_acquire_recursive>
 800c7fa:	89ab      	ldrh	r3, [r5, #12]
 800c7fc:	071b      	lsls	r3, r3, #28
 800c7fe:	d501      	bpl.n	800c804 <_vfiprintf_r+0x3c>
 800c800:	692b      	ldr	r3, [r5, #16]
 800c802:	b9eb      	cbnz	r3, 800c840 <_vfiprintf_r+0x78>
 800c804:	4629      	mov	r1, r5
 800c806:	4630      	mov	r0, r6
 800c808:	f000 f960 	bl	800cacc <__swsetup_r>
 800c80c:	b1c0      	cbz	r0, 800c840 <_vfiprintf_r+0x78>
 800c80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c810:	07dc      	lsls	r4, r3, #31
 800c812:	d50e      	bpl.n	800c832 <_vfiprintf_r+0x6a>
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	b01d      	add	sp, #116	; 0x74
 800c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81e:	4b7b      	ldr	r3, [pc, #492]	; (800ca0c <_vfiprintf_r+0x244>)
 800c820:	429d      	cmp	r5, r3
 800c822:	d101      	bne.n	800c828 <_vfiprintf_r+0x60>
 800c824:	68b5      	ldr	r5, [r6, #8]
 800c826:	e7df      	b.n	800c7e8 <_vfiprintf_r+0x20>
 800c828:	4b79      	ldr	r3, [pc, #484]	; (800ca10 <_vfiprintf_r+0x248>)
 800c82a:	429d      	cmp	r5, r3
 800c82c:	bf08      	it	eq
 800c82e:	68f5      	ldreq	r5, [r6, #12]
 800c830:	e7da      	b.n	800c7e8 <_vfiprintf_r+0x20>
 800c832:	89ab      	ldrh	r3, [r5, #12]
 800c834:	0598      	lsls	r0, r3, #22
 800c836:	d4ed      	bmi.n	800c814 <_vfiprintf_r+0x4c>
 800c838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c83a:	f7ff ff46 	bl	800c6ca <__retarget_lock_release_recursive>
 800c83e:	e7e9      	b.n	800c814 <_vfiprintf_r+0x4c>
 800c840:	2300      	movs	r3, #0
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
 800c844:	2320      	movs	r3, #32
 800c846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c84a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c84e:	2330      	movs	r3, #48	; 0x30
 800c850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca14 <_vfiprintf_r+0x24c>
 800c854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c858:	f04f 0901 	mov.w	r9, #1
 800c85c:	4623      	mov	r3, r4
 800c85e:	469a      	mov	sl, r3
 800c860:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c864:	b10a      	cbz	r2, 800c86a <_vfiprintf_r+0xa2>
 800c866:	2a25      	cmp	r2, #37	; 0x25
 800c868:	d1f9      	bne.n	800c85e <_vfiprintf_r+0x96>
 800c86a:	ebba 0b04 	subs.w	fp, sl, r4
 800c86e:	d00b      	beq.n	800c888 <_vfiprintf_r+0xc0>
 800c870:	465b      	mov	r3, fp
 800c872:	4622      	mov	r2, r4
 800c874:	4629      	mov	r1, r5
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff ff94 	bl	800c7a4 <__sfputs_r>
 800c87c:	3001      	adds	r0, #1
 800c87e:	f000 80aa 	beq.w	800c9d6 <_vfiprintf_r+0x20e>
 800c882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c884:	445a      	add	r2, fp
 800c886:	9209      	str	r2, [sp, #36]	; 0x24
 800c888:	f89a 3000 	ldrb.w	r3, [sl]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 80a2 	beq.w	800c9d6 <_vfiprintf_r+0x20e>
 800c892:	2300      	movs	r3, #0
 800c894:	f04f 32ff 	mov.w	r2, #4294967295
 800c898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c89c:	f10a 0a01 	add.w	sl, sl, #1
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	9307      	str	r3, [sp, #28]
 800c8a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c8aa:	4654      	mov	r4, sl
 800c8ac:	2205      	movs	r2, #5
 800c8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b2:	4858      	ldr	r0, [pc, #352]	; (800ca14 <_vfiprintf_r+0x24c>)
 800c8b4:	f7f3 fcb4 	bl	8000220 <memchr>
 800c8b8:	9a04      	ldr	r2, [sp, #16]
 800c8ba:	b9d8      	cbnz	r0, 800c8f4 <_vfiprintf_r+0x12c>
 800c8bc:	06d1      	lsls	r1, r2, #27
 800c8be:	bf44      	itt	mi
 800c8c0:	2320      	movmi	r3, #32
 800c8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c6:	0713      	lsls	r3, r2, #28
 800c8c8:	bf44      	itt	mi
 800c8ca:	232b      	movmi	r3, #43	; 0x2b
 800c8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d6:	d015      	beq.n	800c904 <_vfiprintf_r+0x13c>
 800c8d8:	9a07      	ldr	r2, [sp, #28]
 800c8da:	4654      	mov	r4, sl
 800c8dc:	2000      	movs	r0, #0
 800c8de:	f04f 0c0a 	mov.w	ip, #10
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8e8:	3b30      	subs	r3, #48	; 0x30
 800c8ea:	2b09      	cmp	r3, #9
 800c8ec:	d94e      	bls.n	800c98c <_vfiprintf_r+0x1c4>
 800c8ee:	b1b0      	cbz	r0, 800c91e <_vfiprintf_r+0x156>
 800c8f0:	9207      	str	r2, [sp, #28]
 800c8f2:	e014      	b.n	800c91e <_vfiprintf_r+0x156>
 800c8f4:	eba0 0308 	sub.w	r3, r0, r8
 800c8f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	46a2      	mov	sl, r4
 800c902:	e7d2      	b.n	800c8aa <_vfiprintf_r+0xe2>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	1d19      	adds	r1, r3, #4
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	9103      	str	r1, [sp, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	bfbb      	ittet	lt
 800c910:	425b      	neglt	r3, r3
 800c912:	f042 0202 	orrlt.w	r2, r2, #2
 800c916:	9307      	strge	r3, [sp, #28]
 800c918:	9307      	strlt	r3, [sp, #28]
 800c91a:	bfb8      	it	lt
 800c91c:	9204      	strlt	r2, [sp, #16]
 800c91e:	7823      	ldrb	r3, [r4, #0]
 800c920:	2b2e      	cmp	r3, #46	; 0x2e
 800c922:	d10c      	bne.n	800c93e <_vfiprintf_r+0x176>
 800c924:	7863      	ldrb	r3, [r4, #1]
 800c926:	2b2a      	cmp	r3, #42	; 0x2a
 800c928:	d135      	bne.n	800c996 <_vfiprintf_r+0x1ce>
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	1d1a      	adds	r2, r3, #4
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	9203      	str	r2, [sp, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfb8      	it	lt
 800c936:	f04f 33ff 	movlt.w	r3, #4294967295
 800c93a:	3402      	adds	r4, #2
 800c93c:	9305      	str	r3, [sp, #20]
 800c93e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca24 <_vfiprintf_r+0x25c>
 800c942:	7821      	ldrb	r1, [r4, #0]
 800c944:	2203      	movs	r2, #3
 800c946:	4650      	mov	r0, sl
 800c948:	f7f3 fc6a 	bl	8000220 <memchr>
 800c94c:	b140      	cbz	r0, 800c960 <_vfiprintf_r+0x198>
 800c94e:	2340      	movs	r3, #64	; 0x40
 800c950:	eba0 000a 	sub.w	r0, r0, sl
 800c954:	fa03 f000 	lsl.w	r0, r3, r0
 800c958:	9b04      	ldr	r3, [sp, #16]
 800c95a:	4303      	orrs	r3, r0
 800c95c:	3401      	adds	r4, #1
 800c95e:	9304      	str	r3, [sp, #16]
 800c960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c964:	482c      	ldr	r0, [pc, #176]	; (800ca18 <_vfiprintf_r+0x250>)
 800c966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c96a:	2206      	movs	r2, #6
 800c96c:	f7f3 fc58 	bl	8000220 <memchr>
 800c970:	2800      	cmp	r0, #0
 800c972:	d03f      	beq.n	800c9f4 <_vfiprintf_r+0x22c>
 800c974:	4b29      	ldr	r3, [pc, #164]	; (800ca1c <_vfiprintf_r+0x254>)
 800c976:	bb1b      	cbnz	r3, 800c9c0 <_vfiprintf_r+0x1f8>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	3307      	adds	r3, #7
 800c97c:	f023 0307 	bic.w	r3, r3, #7
 800c980:	3308      	adds	r3, #8
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c986:	443b      	add	r3, r7
 800c988:	9309      	str	r3, [sp, #36]	; 0x24
 800c98a:	e767      	b.n	800c85c <_vfiprintf_r+0x94>
 800c98c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c990:	460c      	mov	r4, r1
 800c992:	2001      	movs	r0, #1
 800c994:	e7a5      	b.n	800c8e2 <_vfiprintf_r+0x11a>
 800c996:	2300      	movs	r3, #0
 800c998:	3401      	adds	r4, #1
 800c99a:	9305      	str	r3, [sp, #20]
 800c99c:	4619      	mov	r1, r3
 800c99e:	f04f 0c0a 	mov.w	ip, #10
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a8:	3a30      	subs	r2, #48	; 0x30
 800c9aa:	2a09      	cmp	r2, #9
 800c9ac:	d903      	bls.n	800c9b6 <_vfiprintf_r+0x1ee>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0c5      	beq.n	800c93e <_vfiprintf_r+0x176>
 800c9b2:	9105      	str	r1, [sp, #20]
 800c9b4:	e7c3      	b.n	800c93e <_vfiprintf_r+0x176>
 800c9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e7f0      	b.n	800c9a2 <_vfiprintf_r+0x1da>
 800c9c0:	ab03      	add	r3, sp, #12
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	462a      	mov	r2, r5
 800c9c6:	4b16      	ldr	r3, [pc, #88]	; (800ca20 <_vfiprintf_r+0x258>)
 800c9c8:	a904      	add	r1, sp, #16
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7fb f9ac 	bl	8007d28 <_printf_float>
 800c9d0:	4607      	mov	r7, r0
 800c9d2:	1c78      	adds	r0, r7, #1
 800c9d4:	d1d6      	bne.n	800c984 <_vfiprintf_r+0x1bc>
 800c9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9d8:	07d9      	lsls	r1, r3, #31
 800c9da:	d405      	bmi.n	800c9e8 <_vfiprintf_r+0x220>
 800c9dc:	89ab      	ldrh	r3, [r5, #12]
 800c9de:	059a      	lsls	r2, r3, #22
 800c9e0:	d402      	bmi.n	800c9e8 <_vfiprintf_r+0x220>
 800c9e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9e4:	f7ff fe71 	bl	800c6ca <__retarget_lock_release_recursive>
 800c9e8:	89ab      	ldrh	r3, [r5, #12]
 800c9ea:	065b      	lsls	r3, r3, #25
 800c9ec:	f53f af12 	bmi.w	800c814 <_vfiprintf_r+0x4c>
 800c9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9f2:	e711      	b.n	800c818 <_vfiprintf_r+0x50>
 800c9f4:	ab03      	add	r3, sp, #12
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	462a      	mov	r2, r5
 800c9fa:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <_vfiprintf_r+0x258>)
 800c9fc:	a904      	add	r1, sp, #16
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7fb fc36 	bl	8008270 <_printf_i>
 800ca04:	e7e4      	b.n	800c9d0 <_vfiprintf_r+0x208>
 800ca06:	bf00      	nop
 800ca08:	0800d2a4 	.word	0x0800d2a4
 800ca0c:	0800d2c4 	.word	0x0800d2c4
 800ca10:	0800d284 	.word	0x0800d284
 800ca14:	0800d21c 	.word	0x0800d21c
 800ca18:	0800d226 	.word	0x0800d226
 800ca1c:	08007d29 	.word	0x08007d29
 800ca20:	0800c7a5 	.word	0x0800c7a5
 800ca24:	0800d222 	.word	0x0800d222

0800ca28 <__swbuf_r>:
 800ca28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2a:	460e      	mov	r6, r1
 800ca2c:	4614      	mov	r4, r2
 800ca2e:	4605      	mov	r5, r0
 800ca30:	b118      	cbz	r0, 800ca3a <__swbuf_r+0x12>
 800ca32:	6983      	ldr	r3, [r0, #24]
 800ca34:	b90b      	cbnz	r3, 800ca3a <__swbuf_r+0x12>
 800ca36:	f7ff fd97 	bl	800c568 <__sinit>
 800ca3a:	4b21      	ldr	r3, [pc, #132]	; (800cac0 <__swbuf_r+0x98>)
 800ca3c:	429c      	cmp	r4, r3
 800ca3e:	d12b      	bne.n	800ca98 <__swbuf_r+0x70>
 800ca40:	686c      	ldr	r4, [r5, #4]
 800ca42:	69a3      	ldr	r3, [r4, #24]
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	071a      	lsls	r2, r3, #28
 800ca4a:	d52f      	bpl.n	800caac <__swbuf_r+0x84>
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	b36b      	cbz	r3, 800caac <__swbuf_r+0x84>
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	6820      	ldr	r0, [r4, #0]
 800ca54:	1ac0      	subs	r0, r0, r3
 800ca56:	6963      	ldr	r3, [r4, #20]
 800ca58:	b2f6      	uxtb	r6, r6
 800ca5a:	4283      	cmp	r3, r0
 800ca5c:	4637      	mov	r7, r6
 800ca5e:	dc04      	bgt.n	800ca6a <__swbuf_r+0x42>
 800ca60:	4621      	mov	r1, r4
 800ca62:	4628      	mov	r0, r5
 800ca64:	f7ff fcec 	bl	800c440 <_fflush_r>
 800ca68:	bb30      	cbnz	r0, 800cab8 <__swbuf_r+0x90>
 800ca6a:	68a3      	ldr	r3, [r4, #8]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	60a3      	str	r3, [r4, #8]
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	6022      	str	r2, [r4, #0]
 800ca76:	701e      	strb	r6, [r3, #0]
 800ca78:	6963      	ldr	r3, [r4, #20]
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	4283      	cmp	r3, r0
 800ca7e:	d004      	beq.n	800ca8a <__swbuf_r+0x62>
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	07db      	lsls	r3, r3, #31
 800ca84:	d506      	bpl.n	800ca94 <__swbuf_r+0x6c>
 800ca86:	2e0a      	cmp	r6, #10
 800ca88:	d104      	bne.n	800ca94 <__swbuf_r+0x6c>
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	f7ff fcd7 	bl	800c440 <_fflush_r>
 800ca92:	b988      	cbnz	r0, 800cab8 <__swbuf_r+0x90>
 800ca94:	4638      	mov	r0, r7
 800ca96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca98:	4b0a      	ldr	r3, [pc, #40]	; (800cac4 <__swbuf_r+0x9c>)
 800ca9a:	429c      	cmp	r4, r3
 800ca9c:	d101      	bne.n	800caa2 <__swbuf_r+0x7a>
 800ca9e:	68ac      	ldr	r4, [r5, #8]
 800caa0:	e7cf      	b.n	800ca42 <__swbuf_r+0x1a>
 800caa2:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <__swbuf_r+0xa0>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	bf08      	it	eq
 800caa8:	68ec      	ldreq	r4, [r5, #12]
 800caaa:	e7ca      	b.n	800ca42 <__swbuf_r+0x1a>
 800caac:	4621      	mov	r1, r4
 800caae:	4628      	mov	r0, r5
 800cab0:	f000 f80c 	bl	800cacc <__swsetup_r>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d0cb      	beq.n	800ca50 <__swbuf_r+0x28>
 800cab8:	f04f 37ff 	mov.w	r7, #4294967295
 800cabc:	e7ea      	b.n	800ca94 <__swbuf_r+0x6c>
 800cabe:	bf00      	nop
 800cac0:	0800d2a4 	.word	0x0800d2a4
 800cac4:	0800d2c4 	.word	0x0800d2c4
 800cac8:	0800d284 	.word	0x0800d284

0800cacc <__swsetup_r>:
 800cacc:	4b32      	ldr	r3, [pc, #200]	; (800cb98 <__swsetup_r+0xcc>)
 800cace:	b570      	push	{r4, r5, r6, lr}
 800cad0:	681d      	ldr	r5, [r3, #0]
 800cad2:	4606      	mov	r6, r0
 800cad4:	460c      	mov	r4, r1
 800cad6:	b125      	cbz	r5, 800cae2 <__swsetup_r+0x16>
 800cad8:	69ab      	ldr	r3, [r5, #24]
 800cada:	b913      	cbnz	r3, 800cae2 <__swsetup_r+0x16>
 800cadc:	4628      	mov	r0, r5
 800cade:	f7ff fd43 	bl	800c568 <__sinit>
 800cae2:	4b2e      	ldr	r3, [pc, #184]	; (800cb9c <__swsetup_r+0xd0>)
 800cae4:	429c      	cmp	r4, r3
 800cae6:	d10f      	bne.n	800cb08 <__swsetup_r+0x3c>
 800cae8:	686c      	ldr	r4, [r5, #4]
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caf0:	0719      	lsls	r1, r3, #28
 800caf2:	d42c      	bmi.n	800cb4e <__swsetup_r+0x82>
 800caf4:	06dd      	lsls	r5, r3, #27
 800caf6:	d411      	bmi.n	800cb1c <__swsetup_r+0x50>
 800caf8:	2309      	movs	r3, #9
 800cafa:	6033      	str	r3, [r6, #0]
 800cafc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	e03e      	b.n	800cb86 <__swsetup_r+0xba>
 800cb08:	4b25      	ldr	r3, [pc, #148]	; (800cba0 <__swsetup_r+0xd4>)
 800cb0a:	429c      	cmp	r4, r3
 800cb0c:	d101      	bne.n	800cb12 <__swsetup_r+0x46>
 800cb0e:	68ac      	ldr	r4, [r5, #8]
 800cb10:	e7eb      	b.n	800caea <__swsetup_r+0x1e>
 800cb12:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <__swsetup_r+0xd8>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	bf08      	it	eq
 800cb18:	68ec      	ldreq	r4, [r5, #12]
 800cb1a:	e7e6      	b.n	800caea <__swsetup_r+0x1e>
 800cb1c:	0758      	lsls	r0, r3, #29
 800cb1e:	d512      	bpl.n	800cb46 <__swsetup_r+0x7a>
 800cb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb22:	b141      	cbz	r1, 800cb36 <__swsetup_r+0x6a>
 800cb24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb28:	4299      	cmp	r1, r3
 800cb2a:	d002      	beq.n	800cb32 <__swsetup_r+0x66>
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f7fe fd4f 	bl	800b5d0 <_free_r>
 800cb32:	2300      	movs	r3, #0
 800cb34:	6363      	str	r3, [r4, #52]	; 0x34
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6063      	str	r3, [r4, #4]
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	f043 0308 	orr.w	r3, r3, #8
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	b94b      	cbnz	r3, 800cb66 <__swsetup_r+0x9a>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb5c:	d003      	beq.n	800cb66 <__swsetup_r+0x9a>
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4630      	mov	r0, r6
 800cb62:	f000 f84d 	bl	800cc00 <__smakebuf_r>
 800cb66:	89a0      	ldrh	r0, [r4, #12]
 800cb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb6c:	f010 0301 	ands.w	r3, r0, #1
 800cb70:	d00a      	beq.n	800cb88 <__swsetup_r+0xbc>
 800cb72:	2300      	movs	r3, #0
 800cb74:	60a3      	str	r3, [r4, #8]
 800cb76:	6963      	ldr	r3, [r4, #20]
 800cb78:	425b      	negs	r3, r3
 800cb7a:	61a3      	str	r3, [r4, #24]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	b943      	cbnz	r3, 800cb92 <__swsetup_r+0xc6>
 800cb80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb84:	d1ba      	bne.n	800cafc <__swsetup_r+0x30>
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	0781      	lsls	r1, r0, #30
 800cb8a:	bf58      	it	pl
 800cb8c:	6963      	ldrpl	r3, [r4, #20]
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	e7f4      	b.n	800cb7c <__swsetup_r+0xb0>
 800cb92:	2000      	movs	r0, #0
 800cb94:	e7f7      	b.n	800cb86 <__swsetup_r+0xba>
 800cb96:	bf00      	nop
 800cb98:	2000003c 	.word	0x2000003c
 800cb9c:	0800d2a4 	.word	0x0800d2a4
 800cba0:	0800d2c4 	.word	0x0800d2c4
 800cba4:	0800d284 	.word	0x0800d284

0800cba8 <abort>:
 800cba8:	b508      	push	{r3, lr}
 800cbaa:	2006      	movs	r0, #6
 800cbac:	f000 f898 	bl	800cce0 <raise>
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	f7f5 fb91 	bl	80022d8 <_exit>

0800cbb6 <__swhatbuf_r>:
 800cbb6:	b570      	push	{r4, r5, r6, lr}
 800cbb8:	460e      	mov	r6, r1
 800cbba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbbe:	2900      	cmp	r1, #0
 800cbc0:	b096      	sub	sp, #88	; 0x58
 800cbc2:	4614      	mov	r4, r2
 800cbc4:	461d      	mov	r5, r3
 800cbc6:	da08      	bge.n	800cbda <__swhatbuf_r+0x24>
 800cbc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	602a      	str	r2, [r5, #0]
 800cbd0:	061a      	lsls	r2, r3, #24
 800cbd2:	d410      	bmi.n	800cbf6 <__swhatbuf_r+0x40>
 800cbd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbd8:	e00e      	b.n	800cbf8 <__swhatbuf_r+0x42>
 800cbda:	466a      	mov	r2, sp
 800cbdc:	f000 f89c 	bl	800cd18 <_fstat_r>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	dbf1      	blt.n	800cbc8 <__swhatbuf_r+0x12>
 800cbe4:	9a01      	ldr	r2, [sp, #4]
 800cbe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbee:	425a      	negs	r2, r3
 800cbf0:	415a      	adcs	r2, r3
 800cbf2:	602a      	str	r2, [r5, #0]
 800cbf4:	e7ee      	b.n	800cbd4 <__swhatbuf_r+0x1e>
 800cbf6:	2340      	movs	r3, #64	; 0x40
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	b016      	add	sp, #88	; 0x58
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}

0800cc00 <__smakebuf_r>:
 800cc00:	898b      	ldrh	r3, [r1, #12]
 800cc02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc04:	079d      	lsls	r5, r3, #30
 800cc06:	4606      	mov	r6, r0
 800cc08:	460c      	mov	r4, r1
 800cc0a:	d507      	bpl.n	800cc1c <__smakebuf_r+0x1c>
 800cc0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	6123      	str	r3, [r4, #16]
 800cc14:	2301      	movs	r3, #1
 800cc16:	6163      	str	r3, [r4, #20]
 800cc18:	b002      	add	sp, #8
 800cc1a:	bd70      	pop	{r4, r5, r6, pc}
 800cc1c:	ab01      	add	r3, sp, #4
 800cc1e:	466a      	mov	r2, sp
 800cc20:	f7ff ffc9 	bl	800cbb6 <__swhatbuf_r>
 800cc24:	9900      	ldr	r1, [sp, #0]
 800cc26:	4605      	mov	r5, r0
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7fe fd3d 	bl	800b6a8 <_malloc_r>
 800cc2e:	b948      	cbnz	r0, 800cc44 <__smakebuf_r+0x44>
 800cc30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc34:	059a      	lsls	r2, r3, #22
 800cc36:	d4ef      	bmi.n	800cc18 <__smakebuf_r+0x18>
 800cc38:	f023 0303 	bic.w	r3, r3, #3
 800cc3c:	f043 0302 	orr.w	r3, r3, #2
 800cc40:	81a3      	strh	r3, [r4, #12]
 800cc42:	e7e3      	b.n	800cc0c <__smakebuf_r+0xc>
 800cc44:	4b0d      	ldr	r3, [pc, #52]	; (800cc7c <__smakebuf_r+0x7c>)
 800cc46:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	6020      	str	r0, [r4, #0]
 800cc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	9b00      	ldr	r3, [sp, #0]
 800cc54:	6163      	str	r3, [r4, #20]
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	6120      	str	r0, [r4, #16]
 800cc5a:	b15b      	cbz	r3, 800cc74 <__smakebuf_r+0x74>
 800cc5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc60:	4630      	mov	r0, r6
 800cc62:	f000 f86b 	bl	800cd3c <_isatty_r>
 800cc66:	b128      	cbz	r0, 800cc74 <__smakebuf_r+0x74>
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f023 0303 	bic.w	r3, r3, #3
 800cc6e:	f043 0301 	orr.w	r3, r3, #1
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	89a0      	ldrh	r0, [r4, #12]
 800cc76:	4305      	orrs	r5, r0
 800cc78:	81a5      	strh	r5, [r4, #12]
 800cc7a:	e7cd      	b.n	800cc18 <__smakebuf_r+0x18>
 800cc7c:	0800c501 	.word	0x0800c501

0800cc80 <_malloc_usable_size_r>:
 800cc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc84:	1f18      	subs	r0, r3, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bfbc      	itt	lt
 800cc8a:	580b      	ldrlt	r3, [r1, r0]
 800cc8c:	18c0      	addlt	r0, r0, r3
 800cc8e:	4770      	bx	lr

0800cc90 <_raise_r>:
 800cc90:	291f      	cmp	r1, #31
 800cc92:	b538      	push	{r3, r4, r5, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	460d      	mov	r5, r1
 800cc98:	d904      	bls.n	800cca4 <_raise_r+0x14>
 800cc9a:	2316      	movs	r3, #22
 800cc9c:	6003      	str	r3, [r0, #0]
 800cc9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cca6:	b112      	cbz	r2, 800ccae <_raise_r+0x1e>
 800cca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccac:	b94b      	cbnz	r3, 800ccc2 <_raise_r+0x32>
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f000 f830 	bl	800cd14 <_getpid_r>
 800ccb4:	462a      	mov	r2, r5
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	4620      	mov	r0, r4
 800ccba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccbe:	f000 b817 	b.w	800ccf0 <_kill_r>
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d00a      	beq.n	800ccdc <_raise_r+0x4c>
 800ccc6:	1c59      	adds	r1, r3, #1
 800ccc8:	d103      	bne.n	800ccd2 <_raise_r+0x42>
 800ccca:	2316      	movs	r3, #22
 800cccc:	6003      	str	r3, [r0, #0]
 800ccce:	2001      	movs	r0, #1
 800ccd0:	e7e7      	b.n	800cca2 <_raise_r+0x12>
 800ccd2:	2400      	movs	r4, #0
 800ccd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccd8:	4628      	mov	r0, r5
 800ccda:	4798      	blx	r3
 800ccdc:	2000      	movs	r0, #0
 800ccde:	e7e0      	b.n	800cca2 <_raise_r+0x12>

0800cce0 <raise>:
 800cce0:	4b02      	ldr	r3, [pc, #8]	; (800ccec <raise+0xc>)
 800cce2:	4601      	mov	r1, r0
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f7ff bfd3 	b.w	800cc90 <_raise_r>
 800ccea:	bf00      	nop
 800ccec:	2000003c 	.word	0x2000003c

0800ccf0 <_kill_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d07      	ldr	r5, [pc, #28]	; (800cd10 <_kill_r+0x20>)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	602b      	str	r3, [r5, #0]
 800ccfe:	f7f5 fadb 	bl	80022b8 <_kill>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	d102      	bne.n	800cd0c <_kill_r+0x1c>
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	b103      	cbz	r3, 800cd0c <_kill_r+0x1c>
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	bd38      	pop	{r3, r4, r5, pc}
 800cd0e:	bf00      	nop
 800cd10:	200004d4 	.word	0x200004d4

0800cd14 <_getpid_r>:
 800cd14:	f7f5 bac8 	b.w	80022a8 <_getpid>

0800cd18 <_fstat_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4d07      	ldr	r5, [pc, #28]	; (800cd38 <_fstat_r+0x20>)
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	4604      	mov	r4, r0
 800cd20:	4608      	mov	r0, r1
 800cd22:	4611      	mov	r1, r2
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	f7f5 fb26 	bl	8002376 <_fstat>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	d102      	bne.n	800cd34 <_fstat_r+0x1c>
 800cd2e:	682b      	ldr	r3, [r5, #0]
 800cd30:	b103      	cbz	r3, 800cd34 <_fstat_r+0x1c>
 800cd32:	6023      	str	r3, [r4, #0]
 800cd34:	bd38      	pop	{r3, r4, r5, pc}
 800cd36:	bf00      	nop
 800cd38:	200004d4 	.word	0x200004d4

0800cd3c <_isatty_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d06      	ldr	r5, [pc, #24]	; (800cd58 <_isatty_r+0x1c>)
 800cd40:	2300      	movs	r3, #0
 800cd42:	4604      	mov	r4, r0
 800cd44:	4608      	mov	r0, r1
 800cd46:	602b      	str	r3, [r5, #0]
 800cd48:	f7f5 fb25 	bl	8002396 <_isatty>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_isatty_r+0x1a>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_isatty_r+0x1a>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	200004d4 	.word	0x200004d4

0800cd5c <_init>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	bf00      	nop
 800cd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd62:	bc08      	pop	{r3}
 800cd64:	469e      	mov	lr, r3
 800cd66:	4770      	bx	lr

0800cd68 <_fini>:
 800cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6a:	bf00      	nop
 800cd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6e:	bc08      	pop	{r3}
 800cd70:	469e      	mov	lr, r3
 800cd72:	4770      	bx	lr
